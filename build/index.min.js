/**
   * @license
   * author: BAI TIANLIANG
   * ghostban.js v3.0.0-alpha.112
   * Released under the MIT license.
   */
var ghostban=function(t){"use strict";function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},e(t,n)};function r(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}var o=function(){return o=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var o in n=arguments[e])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},o.apply(this,arguments)};function i(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function a(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,i=e.call(t),a=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return a}function u(t,n,e){if(e||2===arguments.length)for(var r,o=0,i=n.length;o<i;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return t.concat(r||Array.prototype.slice.call(n))}"function"==typeof SuppressedError&&SuppressedError;var c="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function s(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var l,f,h=function t(n,e){var r,o,i=e.length;return i>=2?(r=e.slice(0,i/2),o=e.slice(i/2,i),function(t,n,e){for(var r=[],o=n.length,i=e.length;o>0&&i>0;)t(n[0],e[0])<=0?(r.push(n.shift()),o--):(r.push(e.shift()),i--);return o>0?r.push.apply(r,n):r.push.apply(r,e),r}(n,t(n,r),t(n,o))):e.slice()};l=h,f=function(t,n,e){var r,o;for(r=0,o=n.length;r<o&&!(t(n[r],e)>0);r++);return r};var p=function(){var t;function n(t){return function(){return t}}function e(t){t=t||{},this.config=t,this.config.childrenPropertyName=t.childrenPropertyName||"children",this.config.modelComparatorFn=t.modelComparatorFn}function r(t,n){return n.parent=t,t.children.push(n),n}function o(t,n){this.config=t,this.model=n,this.children=[]}function i(t){return"function"==typeof t.config.modelComparatorFn}function a(t,n,e){var r;if(!(n instanceof o))throw new TypeError("Child must be of type Node.");if(n.parent=t,t.model[t.config.childrenPropertyName]instanceof Array||(t.model[t.config.childrenPropertyName]=[]),i(t))r=f(t.config.modelComparatorFn,t.model[t.config.childrenPropertyName],n.model),t.model[t.config.childrenPropertyName].splice(r,0,n.model),t.children.splice(r,0,n);else if(void 0===e)t.model[t.config.childrenPropertyName].push(n.model),t.children.push(n);else{if(e<0||e>t.children.length)throw new Error("Invalid index.");t.model[t.config.childrenPropertyName].splice(e,0,n.model),t.children.splice(e,0,n)}return n}function u(){var n={};if(1===arguments.length?"function"==typeof arguments[0]?n.fn=arguments[0]:n.options=arguments[0]:2===arguments.length?"function"==typeof arguments[0]?(n.fn=arguments[0],n.ctx=arguments[1]):(n.options=arguments[0],n.fn=arguments[1]):(n.options=arguments[0],n.fn=arguments[1],n.ctx=arguments[2]),n.options=n.options||{},n.options.strategy||(n.options.strategy="pre"),!t[n.options.strategy])throw new Error("Unknown tree walk strategy. Valid strategies are 'pre' [default], 'post' and 'breadth'.");return n}return t={},e.prototype.parse=function(t){var n,e,i;if(!(t instanceof Object))throw new TypeError("Model must be of type object.");if(i=new o(this.config,t),t[this.config.childrenPropertyName]instanceof Array)for(this.config.modelComparatorFn&&(t[this.config.childrenPropertyName]=l(this.config.modelComparatorFn,t[this.config.childrenPropertyName])),n=0,e=t[this.config.childrenPropertyName].length;n<e;n++)r(i,this.parse(t[this.config.childrenPropertyName][n]));return i},o.prototype.isRoot=function(){return void 0===this.parent},o.prototype.hasChildren=function(){return this.children.length>0},o.prototype.addChild=function(t){return a(this,t)},o.prototype.addChildAtIndex=function(t,n){if(i(this))throw new Error("Cannot add child at index when using a comparator function.");return a(this,t,n)},o.prototype.setIndex=function(t){if(i(this))throw new Error("Cannot set node index when using a comparator function.");if(this.isRoot()){if(0===t)return this;throw new Error("Invalid index.")}if(t<0||t>=this.parent.children.length)throw new Error("Invalid index.");var n=this.parent.children.indexOf(this);return this.parent.children.splice(t,0,this.parent.children.splice(n,1)[0]),this.parent.model[this.parent.config.childrenPropertyName].splice(t,0,this.parent.model[this.parent.config.childrenPropertyName].splice(n,1)[0]),this},o.prototype.getPath=function(){var t=[];return function n(e){t.unshift(e),e.isRoot()||n(e.parent)}(this),t},o.prototype.getIndex=function(){return this.isRoot()?0:this.parent.children.indexOf(this)},o.prototype.walk=function(){var n;n=u.apply(this,arguments),t[n.options.strategy].call(this,n.fn,n.ctx)},t.pre=function t(n,e){var r,o,i;for(i=n.call(e,this),r=0,o=this.children.length;r<o;r++){if(!1===i)return!1;i=t.call(this.children[r],n,e)}return i},t.post=function t(n,e){var r,o;for(r=0,o=this.children.length;r<o;r++)if(!1===t.call(this.children[r],n,e))return!1;return n.call(e,this)},t.breadth=function(t,n){var e=[this];!function r(){var o,i,a;if(0!==e.length){for(o=0,i=(a=e.shift()).children.length;o<i;o++)e.push(a.children[o]);!1!==t.call(n,a)&&r()}}()},o.prototype.all=function(){var e,r=[];return(e=u.apply(this,arguments)).fn=e.fn||n(!0),t[e.options.strategy].call(this,(function(t){e.fn.call(e.ctx,t)&&r.push(t)}),e.ctx),r},o.prototype.first=function(){var e,r;return(e=u.apply(this,arguments)).fn=e.fn||n(!0),t[e.options.strategy].call(this,(function(t){if(e.fn.call(e.ctx,t))return r=t,!1}),e.ctx),r},o.prototype.drop=function(){var t;return this.isRoot()||(t=this.parent.children.indexOf(this),this.parent.children.splice(t,1),this.parent.model[this.config.childrenPropertyName].splice(t,1),this.parent=void 0,delete this.parent),this},e}(),v=s(p),d={exports:{}};!function(t,e){(function(){var r,o="Expected a function",i="__lodash_hash_undefined__",a="__lodash_placeholder__",u=16,s=32,l=64,f=128,h=256,p=1/0,v=9007199254740991,d=NaN,g=4294967295,y=[["ary",f],["bind",1],["bindKey",2],["curry",8],["curryRight",u],["flip",512],["partial",s],["partialRight",l],["rearg",h]],m="[object Arguments]",_="[object Array]",b="[object Boolean]",w="[object Date]",P="[object Error]",C="[object Function]",x="[object GeneratorFunction]",A="[object Map]",S="[object Number]",k="[object Object]",T="[object Promise]",R="[object RegExp]",M="[object Set]",O="[object String]",E="[object Symbol]",B="[object WeakMap]",I="[object ArrayBuffer]",N="[object DataView]",L="[object Float32Array]",j="[object Float64Array]",W="[object Int8Array]",D="[object Int16Array]",z="[object Int32Array]",F="[object Uint8Array]",U="[object Uint8ClampedArray]",G="[object Uint16Array]",K="[object Uint32Array]",$=/\b__p \+= '';/g,q=/\b(__p \+=) '' \+/g,V=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Z=/&(?:amp|lt|gt|quot|#39);/g,H=/[&<>"']/g,Y=RegExp(Z.source),J=RegExp(H.source),X=/<%-([\s\S]+?)%>/g,Q=/<%([\s\S]+?)%>/g,tt=/<%=([\s\S]+?)%>/g,nt=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,et=/^\w*$/,rt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ot=/[\\^$.*+?()[\]{}|]/g,it=RegExp(ot.source),at=/^\s+/,ut=/\s/,ct=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,st=/\{\n\/\* \[wrapped with (.+)\] \*/,lt=/,? & /,ft=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ht=/[()=,{}\[\]\/\s]/,pt=/\\(\\)?/g,vt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,dt=/\w*$/,gt=/^[-+]0x[0-9a-f]+$/i,yt=/^0b[01]+$/i,mt=/^\[object .+?Constructor\]$/,_t=/^0o[0-7]+$/i,bt=/^(?:0|[1-9]\d*)$/,wt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Pt=/($^)/,Ct=/['\n\r\u2028\u2029\\]/g,xt="\\ud800-\\udfff",At="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",St="\\u2700-\\u27bf",kt="a-z\\xdf-\\xf6\\xf8-\\xff",Tt="A-Z\\xc0-\\xd6\\xd8-\\xde",Rt="\\ufe0e\\ufe0f",Mt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Ot="['’]",Et="["+xt+"]",Bt="["+Mt+"]",It="["+At+"]",Nt="\\d+",Lt="["+St+"]",jt="["+kt+"]",Wt="[^"+xt+Mt+Nt+St+kt+Tt+"]",Dt="\\ud83c[\\udffb-\\udfff]",zt="[^"+xt+"]",Ft="(?:\\ud83c[\\udde6-\\uddff]){2}",Ut="[\\ud800-\\udbff][\\udc00-\\udfff]",Gt="["+Tt+"]",Kt="\\u200d",$t="(?:"+jt+"|"+Wt+")",qt="(?:"+Gt+"|"+Wt+")",Vt="(?:['’](?:d|ll|m|re|s|t|ve))?",Zt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Ht="(?:"+It+"|"+Dt+")"+"?",Yt="["+Rt+"]?",Jt=Yt+Ht+("(?:"+Kt+"(?:"+[zt,Ft,Ut].join("|")+")"+Yt+Ht+")*"),Xt="(?:"+[Lt,Ft,Ut].join("|")+")"+Jt,Qt="(?:"+[zt+It+"?",It,Ft,Ut,Et].join("|")+")",tn=RegExp(Ot,"g"),nn=RegExp(It,"g"),en=RegExp(Dt+"(?="+Dt+")|"+Qt+Jt,"g"),rn=RegExp([Gt+"?"+jt+"+"+Vt+"(?="+[Bt,Gt,"$"].join("|")+")",qt+"+"+Zt+"(?="+[Bt,Gt+$t,"$"].join("|")+")",Gt+"?"+$t+"+"+Vt,Gt+"+"+Zt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Nt,Xt].join("|"),"g"),on=RegExp("["+Kt+xt+At+Rt+"]"),an=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,un=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],cn=-1,sn={};sn[L]=sn[j]=sn[W]=sn[D]=sn[z]=sn[F]=sn[U]=sn[G]=sn[K]=!0,sn[m]=sn[_]=sn[I]=sn[b]=sn[N]=sn[w]=sn[P]=sn[C]=sn[A]=sn[S]=sn[k]=sn[R]=sn[M]=sn[O]=sn[B]=!1;var ln={};ln[m]=ln[_]=ln[I]=ln[N]=ln[b]=ln[w]=ln[L]=ln[j]=ln[W]=ln[D]=ln[z]=ln[A]=ln[S]=ln[k]=ln[R]=ln[M]=ln[O]=ln[E]=ln[F]=ln[U]=ln[G]=ln[K]=!0,ln[P]=ln[C]=ln[B]=!1;var fn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},hn=parseFloat,pn=parseInt,vn="object"==n(c)&&c&&c.Object===Object&&c,dn="object"==("undefined"==typeof self?"undefined":n(self))&&self&&self.Object===Object&&self,gn=vn||dn||Function("return this")(),yn=e&&!e.nodeType&&e,mn=yn&&t&&!t.nodeType&&t,_n=mn&&mn.exports===yn,bn=_n&&vn.process,wn=function(){try{var t=mn&&mn.require&&mn.require("util").types;return t||bn&&bn.binding&&bn.binding("util")}catch(t){}}(),Pn=wn&&wn.isArrayBuffer,Cn=wn&&wn.isDate,xn=wn&&wn.isMap,An=wn&&wn.isRegExp,Sn=wn&&wn.isSet,kn=wn&&wn.isTypedArray;function Tn(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}function Rn(t,n,e,r){for(var o=-1,i=null==t?0:t.length;++o<i;){var a=t[o];n(r,a,e(a),t)}return r}function Mn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r&&!1!==n(t[e],e,t););return t}function On(t,n){for(var e=null==t?0:t.length;e--&&!1!==n(t[e],e,t););return t}function En(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(!n(t[e],e,t))return!1;return!0}function Bn(t,n){for(var e=-1,r=null==t?0:t.length,o=0,i=[];++e<r;){var a=t[e];n(a,e,t)&&(i[o++]=a)}return i}function In(t,n){return!!(null==t?0:t.length)&&Kn(t,n,0)>-1}function Nn(t,n,e){for(var r=-1,o=null==t?0:t.length;++r<o;)if(e(n,t[r]))return!0;return!1}function Ln(t,n){for(var e=-1,r=null==t?0:t.length,o=Array(r);++e<r;)o[e]=n(t[e],e,t);return o}function jn(t,n){for(var e=-1,r=n.length,o=t.length;++e<r;)t[o+e]=n[e];return t}function Wn(t,n,e,r){var o=-1,i=null==t?0:t.length;for(r&&i&&(e=t[++o]);++o<i;)e=n(e,t[o],o,t);return e}function Dn(t,n,e,r){var o=null==t?0:t.length;for(r&&o&&(e=t[--o]);o--;)e=n(e,t[o],o,t);return e}function zn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(n(t[e],e,t))return!0;return!1}var Fn=Zn("length");function Un(t,n,e){var r;return e(t,(function(t,e,o){if(n(t,e,o))return r=e,!1})),r}function Gn(t,n,e,r){for(var o=t.length,i=e+(r?1:-1);r?i--:++i<o;)if(n(t[i],i,t))return i;return-1}function Kn(t,n,e){return n==n?function(t,n,e){var r=e-1,o=t.length;for(;++r<o;)if(t[r]===n)return r;return-1}(t,n,e):Gn(t,qn,e)}function $n(t,n,e,r){for(var o=e-1,i=t.length;++o<i;)if(r(t[o],n))return o;return-1}function qn(t){return t!=t}function Vn(t,n){var e=null==t?0:t.length;return e?Jn(t,n)/e:d}function Zn(t){return function(n){return null==n?r:n[t]}}function Hn(t){return function(n){return null==t?r:t[n]}}function Yn(t,n,e,r,o){return o(t,(function(t,o,i){e=r?(r=!1,t):n(e,t,o,i)})),e}function Jn(t,n){for(var e,o=-1,i=t.length;++o<i;){var a=n(t[o]);a!==r&&(e=e===r?a:e+a)}return e}function Xn(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}function Qn(t){return t?t.slice(0,ge(t)+1).replace(at,""):t}function te(t){return function(n){return t(n)}}function ne(t,n){return Ln(n,(function(n){return t[n]}))}function ee(t,n){return t.has(n)}function re(t,n){for(var e=-1,r=t.length;++e<r&&Kn(n,t[e],0)>-1;);return e}function oe(t,n){for(var e=t.length;e--&&Kn(n,t[e],0)>-1;);return e}var ie=Hn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),ae=Hn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function ue(t){return"\\"+fn[t]}function ce(t){return on.test(t)}function se(t){var n=-1,e=Array(t.size);return t.forEach((function(t,r){e[++n]=[r,t]})),e}function le(t,n){return function(e){return t(n(e))}}function fe(t,n){for(var e=-1,r=t.length,o=0,i=[];++e<r;){var u=t[e];u!==n&&u!==a||(t[e]=a,i[o++]=e)}return i}function he(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=t})),e}function pe(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=[t,t]})),e}function ve(t){return ce(t)?function(t){var n=en.lastIndex=0;for(;en.test(t);)++n;return n}(t):Fn(t)}function de(t){return ce(t)?function(t){return t.match(en)||[]}(t):function(t){return t.split("")}(t)}function ge(t){for(var n=t.length;n--&&ut.test(t.charAt(n)););return n}var ye=Hn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var me=function t(e){var c,ut=(e=null==e?gn:me.defaults(gn.Object(),e,me.pick(gn,un))).Array,xt=e.Date,At=e.Error,St=e.Function,kt=e.Math,Tt=e.Object,Rt=e.RegExp,Mt=e.String,Ot=e.TypeError,Et=ut.prototype,Bt=St.prototype,It=Tt.prototype,Nt=e["__core-js_shared__"],Lt=Bt.toString,jt=It.hasOwnProperty,Wt=0,Dt=(c=/[^.]+$/.exec(Nt&&Nt.keys&&Nt.keys.IE_PROTO||""))?"Symbol(src)_1."+c:"",zt=It.toString,Ft=Lt.call(Tt),Ut=gn._,Gt=Rt("^"+Lt.call(jt).replace(ot,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Kt=_n?e.Buffer:r,$t=e.Symbol,qt=e.Uint8Array,Vt=Kt?Kt.allocUnsafe:r,Zt=le(Tt.getPrototypeOf,Tt),Ht=Tt.create,Yt=It.propertyIsEnumerable,Jt=Et.splice,Xt=$t?$t.isConcatSpreadable:r,Qt=$t?$t.iterator:r,en=$t?$t.toStringTag:r,on=function(){try{var t=vi(Tt,"defineProperty");return t({},"",{}),t}catch(t){}}(),fn=e.clearTimeout!==gn.clearTimeout&&e.clearTimeout,vn=xt&&xt.now!==gn.Date.now&&xt.now,dn=e.setTimeout!==gn.setTimeout&&e.setTimeout,yn=kt.ceil,mn=kt.floor,bn=Tt.getOwnPropertySymbols,wn=Kt?Kt.isBuffer:r,Fn=e.isFinite,Hn=Et.join,_e=le(Tt.keys,Tt),be=kt.max,we=kt.min,Pe=xt.now,Ce=e.parseInt,xe=kt.random,Ae=Et.reverse,Se=vi(e,"DataView"),ke=vi(e,"Map"),Te=vi(e,"Promise"),Re=vi(e,"Set"),Me=vi(e,"WeakMap"),Oe=vi(Tt,"create"),Ee=Me&&new Me,Be={},Ie=zi(Se),Ne=zi(ke),Le=zi(Te),je=zi(Re),We=zi(Me),De=$t?$t.prototype:r,ze=De?De.valueOf:r,Fe=De?De.toString:r;function Ue(t){if(ru(t)&&!qa(t)&&!(t instanceof qe)){if(t instanceof $e)return t;if(jt.call(t,"__wrapped__"))return Fi(t)}return new $e(t)}var Ge=function(){function t(){}return function(n){if(!eu(n))return{};if(Ht)return Ht(n);t.prototype=n;var e=new t;return t.prototype=r,e}}();function Ke(){}function $e(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=r}function qe(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=g,this.__views__=[]}function Ve(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Ze(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function He(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Ye(t){var n=-1,e=null==t?0:t.length;for(this.__data__=new He;++n<e;)this.add(t[n])}function Je(t){var n=this.__data__=new Ze(t);this.size=n.size}function Xe(t,n){var e=qa(t),r=!e&&$a(t),o=!e&&!r&&Ya(t),i=!e&&!r&&!o&&fu(t),a=e||r||o||i,u=a?Xn(t.length,Mt):[],c=u.length;for(var s in t)!n&&!jt.call(t,s)||a&&("length"==s||o&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||wi(s,c))||u.push(s);return u}function Qe(t){var n=t.length;return n?t[Yr(0,n-1)]:r}function tr(t,n){return ji(Eo(t),sr(n,0,t.length))}function nr(t){return ji(Eo(t))}function er(t,n,e){(e!==r&&!Ua(t[n],e)||e===r&&!(n in t))&&ur(t,n,e)}function rr(t,n,e){var o=t[n];jt.call(t,n)&&Ua(o,e)&&(e!==r||n in t)||ur(t,n,e)}function or(t,n){for(var e=t.length;e--;)if(Ua(t[e][0],n))return e;return-1}function ir(t,n,e,r){return vr(t,(function(t,o,i){n(r,t,e(t),i)})),r}function ar(t,n){return t&&Bo(n,Bu(n),t)}function ur(t,n,e){"__proto__"==n&&on?on(t,n,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[n]=e}function cr(t,n){for(var e=-1,o=n.length,i=ut(o),a=null==t;++e<o;)i[e]=a?r:Tu(t,n[e]);return i}function sr(t,n,e){return t==t&&(e!==r&&(t=t<=e?t:e),n!==r&&(t=t>=n?t:n)),t}function lr(t,n,e,o,i,a){var u,c=1&n,s=2&n,l=4&n;if(e&&(u=i?e(t,o,i,a):e(t)),u!==r)return u;if(!eu(t))return t;var f=qa(t);if(f){if(u=function(t){var n=t.length,e=new t.constructor(n);n&&"string"==typeof t[0]&&jt.call(t,"index")&&(e.index=t.index,e.input=t.input);return e}(t),!c)return Eo(t,u)}else{var h=yi(t),p=h==C||h==x;if(Ya(t))return So(t,c);if(h==k||h==m||p&&!i){if(u=s||p?{}:_i(t),!c)return s?function(t,n){return Bo(t,gi(t),n)}(t,function(t,n){return t&&Bo(n,Iu(n),t)}(u,t)):function(t,n){return Bo(t,di(t),n)}(t,ar(u,t))}else{if(!ln[h])return i?t:{};u=function(t,n,e){var r=t.constructor;switch(n){case I:return ko(t);case b:case w:return new r(+t);case N:return function(t,n){var e=n?ko(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}(t,e);case L:case j:case W:case D:case z:case F:case U:case G:case K:return To(t,e);case A:return new r;case S:case O:return new r(t);case R:return function(t){var n=new t.constructor(t.source,dt.exec(t));return n.lastIndex=t.lastIndex,n}(t);case M:return new r;case E:return o=t,ze?Tt(ze.call(o)):{}}var o}(t,h,c)}}a||(a=new Je);var v=a.get(t);if(v)return v;a.set(t,u),cu(t)?t.forEach((function(r){u.add(lr(r,n,e,r,t,a))})):ou(t)&&t.forEach((function(r,o){u.set(o,lr(r,n,e,o,t,a))}));var d=f?r:(l?s?ui:ai:s?Iu:Bu)(t);return Mn(d||t,(function(r,o){d&&(r=t[o=r]),rr(u,o,lr(r,n,e,o,t,a))})),u}function fr(t,n,e){var o=e.length;if(null==t)return!o;for(t=Tt(t);o--;){var i=e[o],a=n[i],u=t[i];if(u===r&&!(i in t)||!a(u))return!1}return!0}function hr(t,n,e){if("function"!=typeof t)throw new Ot(o);return Bi((function(){t.apply(r,e)}),n)}function pr(t,n,e,r){var o=-1,i=In,a=!0,u=t.length,c=[],s=n.length;if(!u)return c;e&&(n=Ln(n,te(e))),r?(i=Nn,a=!1):n.length>=200&&(i=ee,a=!1,n=new Ye(n));t:for(;++o<u;){var l=t[o],f=null==e?l:e(l);if(l=r||0!==l?l:0,a&&f==f){for(var h=s;h--;)if(n[h]===f)continue t;c.push(l)}else i(n,f,r)||c.push(l)}return c}Ue.templateSettings={escape:X,evaluate:Q,interpolate:tt,variable:"",imports:{_:Ue}},Ue.prototype=Ke.prototype,Ue.prototype.constructor=Ue,$e.prototype=Ge(Ke.prototype),$e.prototype.constructor=$e,qe.prototype=Ge(Ke.prototype),qe.prototype.constructor=qe,Ve.prototype.clear=function(){this.__data__=Oe?Oe(null):{},this.size=0},Ve.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},Ve.prototype.get=function(t){var n=this.__data__;if(Oe){var e=n[t];return e===i?r:e}return jt.call(n,t)?n[t]:r},Ve.prototype.has=function(t){var n=this.__data__;return Oe?n[t]!==r:jt.call(n,t)},Ve.prototype.set=function(t,n){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=Oe&&n===r?i:n,this},Ze.prototype.clear=function(){this.__data__=[],this.size=0},Ze.prototype.delete=function(t){var n=this.__data__,e=or(n,t);return!(e<0)&&(e==n.length-1?n.pop():Jt.call(n,e,1),--this.size,!0)},Ze.prototype.get=function(t){var n=this.__data__,e=or(n,t);return e<0?r:n[e][1]},Ze.prototype.has=function(t){return or(this.__data__,t)>-1},Ze.prototype.set=function(t,n){var e=this.__data__,r=or(e,t);return r<0?(++this.size,e.push([t,n])):e[r][1]=n,this},He.prototype.clear=function(){this.size=0,this.__data__={hash:new Ve,map:new(ke||Ze),string:new Ve}},He.prototype.delete=function(t){var n=hi(this,t).delete(t);return this.size-=n?1:0,n},He.prototype.get=function(t){return hi(this,t).get(t)},He.prototype.has=function(t){return hi(this,t).has(t)},He.prototype.set=function(t,n){var e=hi(this,t),r=e.size;return e.set(t,n),this.size+=e.size==r?0:1,this},Ye.prototype.add=Ye.prototype.push=function(t){return this.__data__.set(t,i),this},Ye.prototype.has=function(t){return this.__data__.has(t)},Je.prototype.clear=function(){this.__data__=new Ze,this.size=0},Je.prototype.delete=function(t){var n=this.__data__,e=n.delete(t);return this.size=n.size,e},Je.prototype.get=function(t){return this.__data__.get(t)},Je.prototype.has=function(t){return this.__data__.has(t)},Je.prototype.set=function(t,n){var e=this.__data__;if(e instanceof Ze){var r=e.__data__;if(!ke||r.length<199)return r.push([t,n]),this.size=++e.size,this;e=this.__data__=new He(r)}return e.set(t,n),this.size=e.size,this};var vr=Lo(Pr),dr=Lo(Cr,!0);function gr(t,n){var e=!0;return vr(t,(function(t,r,o){return e=!!n(t,r,o)})),e}function yr(t,n,e){for(var o=-1,i=t.length;++o<i;){var a=t[o],u=n(a);if(null!=u&&(c===r?u==u&&!lu(u):e(u,c)))var c=u,s=a}return s}function mr(t,n){var e=[];return vr(t,(function(t,r,o){n(t,r,o)&&e.push(t)})),e}function _r(t,n,e,r,o){var i=-1,a=t.length;for(e||(e=bi),o||(o=[]);++i<a;){var u=t[i];n>0&&e(u)?n>1?_r(u,n-1,e,r,o):jn(o,u):r||(o[o.length]=u)}return o}var br=jo(),wr=jo(!0);function Pr(t,n){return t&&br(t,n,Bu)}function Cr(t,n){return t&&wr(t,n,Bu)}function xr(t,n){return Bn(n,(function(n){return Qa(t[n])}))}function Ar(t,n){for(var e=0,o=(n=Po(n,t)).length;null!=t&&e<o;)t=t[Di(n[e++])];return e&&e==o?t:r}function Sr(t,n,e){var r=n(t);return qa(t)?r:jn(r,e(t))}function kr(t){return null==t?t===r?"[object Undefined]":"[object Null]":en&&en in Tt(t)?function(t){var n=jt.call(t,en),e=t[en];try{t[en]=r;var o=!0}catch(t){}var i=zt.call(t);o&&(n?t[en]=e:delete t[en]);return i}(t):function(t){return zt.call(t)}(t)}function Tr(t,n){return t>n}function Rr(t,n){return null!=t&&jt.call(t,n)}function Mr(t,n){return null!=t&&n in Tt(t)}function Or(t,n,e){for(var o=e?Nn:In,i=t[0].length,a=t.length,u=a,c=ut(a),s=1/0,l=[];u--;){var f=t[u];u&&n&&(f=Ln(f,te(n))),s=we(f.length,s),c[u]=!e&&(n||i>=120&&f.length>=120)?new Ye(u&&f):r}f=t[0];var h=-1,p=c[0];t:for(;++h<i&&l.length<s;){var v=f[h],d=n?n(v):v;if(v=e||0!==v?v:0,!(p?ee(p,d):o(l,d,e))){for(u=a;--u;){var g=c[u];if(!(g?ee(g,d):o(t[u],d,e)))continue t}p&&p.push(d),l.push(v)}}return l}function Er(t,n,e){var o=null==(t=Mi(t,n=Po(n,t)))?t:t[Di(Xi(n))];return null==o?r:Tn(o,t,e)}function Br(t){return ru(t)&&kr(t)==m}function Ir(t,n,e,o,i){return t===n||(null==t||null==n||!ru(t)&&!ru(n)?t!=t&&n!=n:function(t,n,e,o,i,a){var u=qa(t),c=qa(n),s=u?_:yi(t),l=c?_:yi(n),f=(s=s==m?k:s)==k,h=(l=l==m?k:l)==k,p=s==l;if(p&&Ya(t)){if(!Ya(n))return!1;u=!0,f=!1}if(p&&!f)return a||(a=new Je),u||fu(t)?oi(t,n,e,o,i,a):function(t,n,e,r,o,i,a){switch(e){case N:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case I:return!(t.byteLength!=n.byteLength||!i(new qt(t),new qt(n)));case b:case w:case S:return Ua(+t,+n);case P:return t.name==n.name&&t.message==n.message;case R:case O:return t==n+"";case A:var u=se;case M:var c=1&r;if(u||(u=he),t.size!=n.size&&!c)return!1;var s=a.get(t);if(s)return s==n;r|=2,a.set(t,n);var l=oi(u(t),u(n),r,o,i,a);return a.delete(t),l;case E:if(ze)return ze.call(t)==ze.call(n)}return!1}(t,n,s,e,o,i,a);if(!(1&e)){var v=f&&jt.call(t,"__wrapped__"),d=h&&jt.call(n,"__wrapped__");if(v||d){var g=v?t.value():t,y=d?n.value():n;return a||(a=new Je),i(g,y,e,o,a)}}if(!p)return!1;return a||(a=new Je),function(t,n,e,o,i,a){var u=1&e,c=ai(t),s=c.length,l=ai(n),f=l.length;if(s!=f&&!u)return!1;var h=s;for(;h--;){var p=c[h];if(!(u?p in n:jt.call(n,p)))return!1}var v=a.get(t),d=a.get(n);if(v&&d)return v==n&&d==t;var g=!0;a.set(t,n),a.set(n,t);var y=u;for(;++h<s;){var m=t[p=c[h]],_=n[p];if(o)var b=u?o(_,m,p,n,t,a):o(m,_,p,t,n,a);if(!(b===r?m===_||i(m,_,e,o,a):b)){g=!1;break}y||(y="constructor"==p)}if(g&&!y){var w=t.constructor,P=n.constructor;w==P||!("constructor"in t)||!("constructor"in n)||"function"==typeof w&&w instanceof w&&"function"==typeof P&&P instanceof P||(g=!1)}return a.delete(t),a.delete(n),g}(t,n,e,o,i,a)}(t,n,e,o,Ir,i))}function Nr(t,n,e,o){var i=e.length,a=i,u=!o;if(null==t)return!a;for(t=Tt(t);i--;){var c=e[i];if(u&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++i<a;){var s=(c=e[i])[0],l=t[s],f=c[1];if(u&&c[2]){if(l===r&&!(s in t))return!1}else{var h=new Je;if(o)var p=o(l,f,s,t,n,h);if(!(p===r?Ir(f,l,3,o,h):p))return!1}}return!0}function Lr(t){return!(!eu(t)||(n=t,Dt&&Dt in n))&&(Qa(t)?Gt:mt).test(zi(t));var n}function jr(t){return"function"==typeof t?t:null==t?ic:"object"==n(t)?qa(t)?Gr(t[0],t[1]):Ur(t):vc(t)}function Wr(t){if(!Si(t))return _e(t);var n=[];for(var e in Tt(t))jt.call(t,e)&&"constructor"!=e&&n.push(e);return n}function Dr(t){if(!eu(t))return function(t){var n=[];if(null!=t)for(var e in Tt(t))n.push(e);return n}(t);var n=Si(t),e=[];for(var r in t)("constructor"!=r||!n&&jt.call(t,r))&&e.push(r);return e}function zr(t,n){return t<n}function Fr(t,n){var e=-1,r=Za(t)?ut(t.length):[];return vr(t,(function(t,o,i){r[++e]=n(t,o,i)})),r}function Ur(t){var n=pi(t);return 1==n.length&&n[0][2]?Ti(n[0][0],n[0][1]):function(e){return e===t||Nr(e,t,n)}}function Gr(t,n){return Ci(t)&&ki(n)?Ti(Di(t),n):function(e){var o=Tu(e,t);return o===r&&o===n?Ru(e,t):Ir(n,o,3)}}function Kr(t,n,e,o,i){t!==n&&br(n,(function(a,u){if(i||(i=new Je),eu(a))!function(t,n,e,o,i,a,u){var c=Oi(t,e),s=Oi(n,e),l=u.get(s);if(l)return void er(t,e,l);var f=a?a(c,s,e+"",t,n,u):r,h=f===r;if(h){var p=qa(s),v=!p&&Ya(s),d=!p&&!v&&fu(s);f=s,p||v||d?qa(c)?f=c:Ha(c)?f=Eo(c):v?(h=!1,f=So(s,!0)):d?(h=!1,f=To(s,!0)):f=[]:au(s)||$a(s)?(f=c,$a(c)?f=_u(c):eu(c)&&!Qa(c)||(f=_i(s))):h=!1}h&&(u.set(s,f),i(f,s,o,a,u),u.delete(s));er(t,e,f)}(t,n,u,e,Kr,o,i);else{var c=o?o(Oi(t,u),a,u+"",t,n,i):r;c===r&&(c=a),er(t,u,c)}}),Iu)}function $r(t,n){var e=t.length;if(e)return wi(n+=n<0?e:0,e)?t[n]:r}function qr(t,n,e){n=n.length?Ln(n,(function(t){return qa(t)?function(n){return Ar(n,1===t.length?t[0]:t)}:t})):[ic];var r=-1;n=Ln(n,te(fi()));var o=Fr(t,(function(t,e,o){var i=Ln(n,(function(n){return n(t)}));return{criteria:i,index:++r,value:t}}));return function(t,n){var e=t.length;for(t.sort(n);e--;)t[e]=t[e].value;return t}(o,(function(t,n){return function(t,n,e){var r=-1,o=t.criteria,i=n.criteria,a=o.length,u=e.length;for(;++r<a;){var c=Ro(o[r],i[r]);if(c)return r>=u?c:c*("desc"==e[r]?-1:1)}return t.index-n.index}(t,n,e)}))}function Vr(t,n,e){for(var r=-1,o=n.length,i={};++r<o;){var a=n[r],u=Ar(t,a);e(u,a)&&no(i,Po(a,t),u)}return i}function Zr(t,n,e,r){var o=r?$n:Kn,i=-1,a=n.length,u=t;for(t===n&&(n=Eo(n)),e&&(u=Ln(t,te(e)));++i<a;)for(var c=0,s=n[i],l=e?e(s):s;(c=o(u,l,c,r))>-1;)u!==t&&Jt.call(u,c,1),Jt.call(t,c,1);return t}function Hr(t,n){for(var e=t?n.length:0,r=e-1;e--;){var o=n[e];if(e==r||o!==i){var i=o;wi(o)?Jt.call(t,o,1):po(t,o)}}return t}function Yr(t,n){return t+mn(xe()*(n-t+1))}function Jr(t,n){var e="";if(!t||n<1||n>v)return e;do{n%2&&(e+=t),(n=mn(n/2))&&(t+=t)}while(n);return e}function Xr(t,n){return Ii(Ri(t,n,ic),t+"")}function Qr(t){return Qe(Uu(t))}function to(t,n){var e=Uu(t);return ji(e,sr(n,0,e.length))}function no(t,n,e,o){if(!eu(t))return t;for(var i=-1,a=(n=Po(n,t)).length,u=a-1,c=t;null!=c&&++i<a;){var s=Di(n[i]),l=e;if("__proto__"===s||"constructor"===s||"prototype"===s)return t;if(i!=u){var f=c[s];(l=o?o(f,s,c):r)===r&&(l=eu(f)?f:wi(n[i+1])?[]:{})}rr(c,s,l),c=c[s]}return t}var eo=Ee?function(t,n){return Ee.set(t,n),t}:ic,ro=on?function(t,n){return on(t,"toString",{configurable:!0,enumerable:!1,value:ec(n),writable:!0})}:ic;function oo(t){return ji(Uu(t))}function io(t,n,e){var r=-1,o=t.length;n<0&&(n=-n>o?0:o+n),(e=e>o?o:e)<0&&(e+=o),o=n>e?0:e-n>>>0,n>>>=0;for(var i=ut(o);++r<o;)i[r]=t[r+n];return i}function ao(t,n){var e;return vr(t,(function(t,r,o){return!(e=n(t,r,o))})),!!e}function uo(t,n,e){var r=0,o=null==t?r:t.length;if("number"==typeof n&&n==n&&o<=2147483647){for(;r<o;){var i=r+o>>>1,a=t[i];null!==a&&!lu(a)&&(e?a<=n:a<n)?r=i+1:o=i}return o}return co(t,n,ic,e)}function co(t,n,e,o){var i=0,a=null==t?0:t.length;if(0===a)return 0;for(var u=(n=e(n))!=n,c=null===n,s=lu(n),l=n===r;i<a;){var f=mn((i+a)/2),h=e(t[f]),p=h!==r,v=null===h,d=h==h,g=lu(h);if(u)var y=o||d;else y=l?d&&(o||p):c?d&&p&&(o||!v):s?d&&p&&!v&&(o||!g):!v&&!g&&(o?h<=n:h<n);y?i=f+1:a=f}return we(a,4294967294)}function so(t,n){for(var e=-1,r=t.length,o=0,i=[];++e<r;){var a=t[e],u=n?n(a):a;if(!e||!Ua(u,c)){var c=u;i[o++]=0===a?0:a}}return i}function lo(t){return"number"==typeof t?t:lu(t)?d:+t}function fo(t){if("string"==typeof t)return t;if(qa(t))return Ln(t,fo)+"";if(lu(t))return Fe?Fe.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function ho(t,n,e){var r=-1,o=In,i=t.length,a=!0,u=[],c=u;if(e)a=!1,o=Nn;else if(i>=200){var s=n?null:Xo(t);if(s)return he(s);a=!1,o=ee,c=new Ye}else c=n?[]:u;t:for(;++r<i;){var l=t[r],f=n?n(l):l;if(l=e||0!==l?l:0,a&&f==f){for(var h=c.length;h--;)if(c[h]===f)continue t;n&&c.push(f),u.push(l)}else o(c,f,e)||(c!==u&&c.push(f),u.push(l))}return u}function po(t,n){return null==(t=Mi(t,n=Po(n,t)))||delete t[Di(Xi(n))]}function vo(t,n,e,r){return no(t,n,e(Ar(t,n)),r)}function go(t,n,e,r){for(var o=t.length,i=r?o:-1;(r?i--:++i<o)&&n(t[i],i,t););return e?io(t,r?0:i,r?i+1:o):io(t,r?i+1:0,r?o:i)}function yo(t,n){var e=t;return e instanceof qe&&(e=e.value()),Wn(n,(function(t,n){return n.func.apply(n.thisArg,jn([t],n.args))}),e)}function mo(t,n,e){var r=t.length;if(r<2)return r?ho(t[0]):[];for(var o=-1,i=ut(r);++o<r;)for(var a=t[o],u=-1;++u<r;)u!=o&&(i[o]=pr(i[o]||a,t[u],n,e));return ho(_r(i,1),n,e)}function _o(t,n,e){for(var o=-1,i=t.length,a=n.length,u={};++o<i;){var c=o<a?n[o]:r;e(u,t[o],c)}return u}function bo(t){return Ha(t)?t:[]}function wo(t){return"function"==typeof t?t:ic}function Po(t,n){return qa(t)?t:Ci(t,n)?[t]:Wi(bu(t))}var Co=Xr;function xo(t,n,e){var o=t.length;return e=e===r?o:e,!n&&e>=o?t:io(t,n,e)}var Ao=fn||function(t){return gn.clearTimeout(t)};function So(t,n){if(n)return t.slice();var e=t.length,r=Vt?Vt(e):new t.constructor(e);return t.copy(r),r}function ko(t){var n=new t.constructor(t.byteLength);return new qt(n).set(new qt(t)),n}function To(t,n){var e=n?ko(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}function Ro(t,n){if(t!==n){var e=t!==r,o=null===t,i=t==t,a=lu(t),u=n!==r,c=null===n,s=n==n,l=lu(n);if(!c&&!l&&!a&&t>n||a&&u&&s&&!c&&!l||o&&u&&s||!e&&s||!i)return 1;if(!o&&!a&&!l&&t<n||l&&e&&i&&!o&&!a||c&&e&&i||!u&&i||!s)return-1}return 0}function Mo(t,n,e,r){for(var o=-1,i=t.length,a=e.length,u=-1,c=n.length,s=be(i-a,0),l=ut(c+s),f=!r;++u<c;)l[u]=n[u];for(;++o<a;)(f||o<i)&&(l[e[o]]=t[o]);for(;s--;)l[u++]=t[o++];return l}function Oo(t,n,e,r){for(var o=-1,i=t.length,a=-1,u=e.length,c=-1,s=n.length,l=be(i-u,0),f=ut(l+s),h=!r;++o<l;)f[o]=t[o];for(var p=o;++c<s;)f[p+c]=n[c];for(;++a<u;)(h||o<i)&&(f[p+e[a]]=t[o++]);return f}function Eo(t,n){var e=-1,r=t.length;for(n||(n=ut(r));++e<r;)n[e]=t[e];return n}function Bo(t,n,e,o){var i=!e;e||(e={});for(var a=-1,u=n.length;++a<u;){var c=n[a],s=o?o(e[c],t[c],c,e,t):r;s===r&&(s=t[c]),i?ur(e,c,s):rr(e,c,s)}return e}function Io(t,n){return function(e,r){var o=qa(e)?Rn:ir,i=n?n():{};return o(e,t,fi(r,2),i)}}function No(t){return Xr((function(n,e){var o=-1,i=e.length,a=i>1?e[i-1]:r,u=i>2?e[2]:r;for(a=t.length>3&&"function"==typeof a?(i--,a):r,u&&Pi(e[0],e[1],u)&&(a=i<3?r:a,i=1),n=Tt(n);++o<i;){var c=e[o];c&&t(n,c,o,a)}return n}))}function Lo(t,n){return function(e,r){if(null==e)return e;if(!Za(e))return t(e,r);for(var o=e.length,i=n?o:-1,a=Tt(e);(n?i--:++i<o)&&!1!==r(a[i],i,a););return e}}function jo(t){return function(n,e,r){for(var o=-1,i=Tt(n),a=r(n),u=a.length;u--;){var c=a[t?u:++o];if(!1===e(i[c],c,i))break}return n}}function Wo(t){return function(n){var e=ce(n=bu(n))?de(n):r,o=e?e[0]:n.charAt(0),i=e?xo(e,1).join(""):n.slice(1);return o[t]()+i}}function Do(t){return function(n){return Wn(Qu($u(n).replace(tn,"")),t,"")}}function zo(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var e=Ge(t.prototype),r=t.apply(e,n);return eu(r)?r:e}}function Fo(t){return function(n,e,o){var i=Tt(n);if(!Za(n)){var a=fi(e,3);n=Bu(n),e=function(t){return a(i[t],t,i)}}var u=t(n,e,o);return u>-1?i[a?n[u]:u]:r}}function Uo(t){return ii((function(n){var e=n.length,i=e,a=$e.prototype.thru;for(t&&n.reverse();i--;){var u=n[i];if("function"!=typeof u)throw new Ot(o);if(a&&!c&&"wrapper"==si(u))var c=new $e([],!0)}for(i=c?i:e;++i<e;){var s=si(u=n[i]),l="wrapper"==s?ci(u):r;c=l&&xi(l[0])&&424==l[1]&&!l[4].length&&1==l[9]?c[si(l[0])].apply(c,l[3]):1==u.length&&xi(u)?c[s]():c.thru(u)}return function(){var t=arguments,r=t[0];if(c&&1==t.length&&qa(r))return c.plant(r).value();for(var o=0,i=e?n[o].apply(this,t):r;++o<e;)i=n[o].call(this,i);return i}}))}function Go(t,n,e,o,i,a,u,c,s,l){var h=n&f,p=1&n,v=2&n,d=24&n,g=512&n,y=v?r:zo(t);return function f(){for(var m=arguments.length,_=ut(m),b=m;b--;)_[b]=arguments[b];if(d)var w=li(f),P=function(t,n){for(var e=t.length,r=0;e--;)t[e]===n&&++r;return r}(_,w);if(o&&(_=Mo(_,o,i,d)),a&&(_=Oo(_,a,u,d)),m-=P,d&&m<l){var C=fe(_,w);return Yo(t,n,Go,f.placeholder,e,_,C,c,s,l-m)}var x=p?e:this,A=v?x[t]:t;return m=_.length,c?_=function(t,n){var e=t.length,o=we(n.length,e),i=Eo(t);for(;o--;){var a=n[o];t[o]=wi(a,e)?i[a]:r}return t}(_,c):g&&m>1&&_.reverse(),h&&s<m&&(_.length=s),this&&this!==gn&&this instanceof f&&(A=y||zo(A)),A.apply(x,_)}}function Ko(t,n){return function(e,r){return function(t,n,e,r){return Pr(t,(function(t,o,i){n(r,e(t),o,i)})),r}(e,t,n(r),{})}}function $o(t,n){return function(e,o){var i;if(e===r&&o===r)return n;if(e!==r&&(i=e),o!==r){if(i===r)return o;"string"==typeof e||"string"==typeof o?(e=fo(e),o=fo(o)):(e=lo(e),o=lo(o)),i=t(e,o)}return i}}function qo(t){return ii((function(n){return n=Ln(n,te(fi())),Xr((function(e){var r=this;return t(n,(function(t){return Tn(t,r,e)}))}))}))}function Vo(t,n){var e=(n=n===r?" ":fo(n)).length;if(e<2)return e?Jr(n,t):n;var o=Jr(n,yn(t/ve(n)));return ce(n)?xo(de(o),0,t).join(""):o.slice(0,t)}function Zo(t){return function(n,e,o){return o&&"number"!=typeof o&&Pi(n,e,o)&&(e=o=r),n=du(n),e===r?(e=n,n=0):e=du(e),function(t,n,e,r){for(var o=-1,i=be(yn((n-t)/(e||1)),0),a=ut(i);i--;)a[r?i:++o]=t,t+=e;return a}(n,e,o=o===r?n<e?1:-1:du(o),t)}}function Ho(t){return function(n,e){return"string"==typeof n&&"string"==typeof e||(n=mu(n),e=mu(e)),t(n,e)}}function Yo(t,n,e,o,i,a,u,c,f,h){var p=8&n;n|=p?s:l,4&(n&=~(p?l:s))||(n&=-4);var v=[t,n,i,p?a:r,p?u:r,p?r:a,p?r:u,c,f,h],d=e.apply(r,v);return xi(t)&&Ei(d,v),d.placeholder=o,Ni(d,t,n)}function Jo(t){var n=kt[t];return function(t,e){if(t=mu(t),(e=null==e?0:we(gu(e),292))&&Fn(t)){var r=(bu(t)+"e").split("e");return+((r=(bu(n(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return n(t)}}var Xo=Re&&1/he(new Re([,-0]))[1]==p?function(t){return new Re(t)}:lc;function Qo(t){return function(n){var e=yi(n);return e==A?se(n):e==M?pe(n):function(t,n){return Ln(n,(function(n){return[n,t[n]]}))}(n,t(n))}}function ti(t,n,e,i,c,p,v,d){var g=2&n;if(!g&&"function"!=typeof t)throw new Ot(o);var y=i?i.length:0;if(y||(n&=-97,i=c=r),v=v===r?v:be(gu(v),0),d=d===r?d:gu(d),y-=c?c.length:0,n&l){var m=i,_=c;i=c=r}var b=g?r:ci(t),w=[t,n,e,i,c,m,_,p,v,d];if(b&&function(t,n){var e=t[1],r=n[1],o=e|r,i=o<131,u=r==f&&8==e||r==f&&e==h&&t[7].length<=n[8]||384==r&&n[7].length<=n[8]&&8==e;if(!i&&!u)return t;1&r&&(t[2]=n[2],o|=1&e?0:4);var c=n[3];if(c){var s=t[3];t[3]=s?Mo(s,c,n[4]):c,t[4]=s?fe(t[3],a):n[4]}(c=n[5])&&(s=t[5],t[5]=s?Oo(s,c,n[6]):c,t[6]=s?fe(t[5],a):n[6]);(c=n[7])&&(t[7]=c);r&f&&(t[8]=null==t[8]?n[8]:we(t[8],n[8]));null==t[9]&&(t[9]=n[9]);t[0]=n[0],t[1]=o}(w,b),t=w[0],n=w[1],e=w[2],i=w[3],c=w[4],!(d=w[9]=w[9]===r?g?0:t.length:be(w[9]-y,0))&&24&n&&(n&=-25),n&&1!=n)P=8==n||n==u?function(t,n,e){var o=zo(t);return function i(){for(var a=arguments.length,u=ut(a),c=a,s=li(i);c--;)u[c]=arguments[c];var l=a<3&&u[0]!==s&&u[a-1]!==s?[]:fe(u,s);return(a-=l.length)<e?Yo(t,n,Go,i.placeholder,r,u,l,r,r,e-a):Tn(this&&this!==gn&&this instanceof i?o:t,this,u)}}(t,n,d):n!=s&&33!=n||c.length?Go.apply(r,w):function(t,n,e,r){var o=1&n,i=zo(t);return function n(){for(var a=-1,u=arguments.length,c=-1,s=r.length,l=ut(s+u),f=this&&this!==gn&&this instanceof n?i:t;++c<s;)l[c]=r[c];for(;u--;)l[c++]=arguments[++a];return Tn(f,o?e:this,l)}}(t,n,e,i);else var P=function(t,n,e){var r=1&n,o=zo(t);return function n(){return(this&&this!==gn&&this instanceof n?o:t).apply(r?e:this,arguments)}}(t,n,e);return Ni((b?eo:Ei)(P,w),t,n)}function ni(t,n,e,o){return t===r||Ua(t,It[e])&&!jt.call(o,e)?n:t}function ei(t,n,e,o,i,a){return eu(t)&&eu(n)&&(a.set(n,t),Kr(t,n,r,ei,a),a.delete(n)),t}function ri(t){return au(t)?r:t}function oi(t,n,e,o,i,a){var u=1&e,c=t.length,s=n.length;if(c!=s&&!(u&&s>c))return!1;var l=a.get(t),f=a.get(n);if(l&&f)return l==n&&f==t;var h=-1,p=!0,v=2&e?new Ye:r;for(a.set(t,n),a.set(n,t);++h<c;){var d=t[h],g=n[h];if(o)var y=u?o(g,d,h,n,t,a):o(d,g,h,t,n,a);if(y!==r){if(y)continue;p=!1;break}if(v){if(!zn(n,(function(t,n){if(!ee(v,n)&&(d===t||i(d,t,e,o,a)))return v.push(n)}))){p=!1;break}}else if(d!==g&&!i(d,g,e,o,a)){p=!1;break}}return a.delete(t),a.delete(n),p}function ii(t){return Ii(Ri(t,r,Vi),t+"")}function ai(t){return Sr(t,Bu,di)}function ui(t){return Sr(t,Iu,gi)}var ci=Ee?function(t){return Ee.get(t)}:lc;function si(t){for(var n=t.name+"",e=Be[n],r=jt.call(Be,n)?e.length:0;r--;){var o=e[r],i=o.func;if(null==i||i==t)return o.name}return n}function li(t){return(jt.call(Ue,"placeholder")?Ue:t).placeholder}function fi(){var t=Ue.iteratee||ac;return t=t===ac?jr:t,arguments.length?t(arguments[0],arguments[1]):t}function hi(t,e){var r,o,i=t.__data__;return("string"==(o=n(r=e))||"number"==o||"symbol"==o||"boolean"==o?"__proto__"!==r:null===r)?i["string"==typeof e?"string":"hash"]:i.map}function pi(t){for(var n=Bu(t),e=n.length;e--;){var r=n[e],o=t[r];n[e]=[r,o,ki(o)]}return n}function vi(t,n){var e=function(t,n){return null==t?r:t[n]}(t,n);return Lr(e)?e:r}var di=bn?function(t){return null==t?[]:(t=Tt(t),Bn(bn(t),(function(n){return Yt.call(t,n)})))}:yc,gi=bn?function(t){for(var n=[];t;)jn(n,di(t)),t=Zt(t);return n}:yc,yi=kr;function mi(t,n,e){for(var r=-1,o=(n=Po(n,t)).length,i=!1;++r<o;){var a=Di(n[r]);if(!(i=null!=t&&e(t,a)))break;t=t[a]}return i||++r!=o?i:!!(o=null==t?0:t.length)&&nu(o)&&wi(a,o)&&(qa(t)||$a(t))}function _i(t){return"function"!=typeof t.constructor||Si(t)?{}:Ge(Zt(t))}function bi(t){return qa(t)||$a(t)||!!(Xt&&t&&t[Xt])}function wi(t,e){var r=n(t);return!!(e=null==e?v:e)&&("number"==r||"symbol"!=r&&bt.test(t))&&t>-1&&t%1==0&&t<e}function Pi(t,e,r){if(!eu(r))return!1;var o=n(e);return!!("number"==o?Za(r)&&wi(e,r.length):"string"==o&&e in r)&&Ua(r[e],t)}function Ci(t,e){if(qa(t))return!1;var r=n(t);return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!lu(t))||(et.test(t)||!nt.test(t)||null!=e&&t in Tt(e))}function xi(t){var n=si(t),e=Ue[n];if("function"!=typeof e||!(n in qe.prototype))return!1;if(t===e)return!0;var r=ci(e);return!!r&&t===r[0]}(Se&&yi(new Se(new ArrayBuffer(1)))!=N||ke&&yi(new ke)!=A||Te&&yi(Te.resolve())!=T||Re&&yi(new Re)!=M||Me&&yi(new Me)!=B)&&(yi=function(t){var n=kr(t),e=n==k?t.constructor:r,o=e?zi(e):"";if(o)switch(o){case Ie:return N;case Ne:return A;case Le:return T;case je:return M;case We:return B}return n});var Ai=Nt?Qa:mc;function Si(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||It)}function ki(t){return t==t&&!eu(t)}function Ti(t,n){return function(e){return null!=e&&(e[t]===n&&(n!==r||t in Tt(e)))}}function Ri(t,n,e){return n=be(n===r?t.length-1:n,0),function(){for(var r=arguments,o=-1,i=be(r.length-n,0),a=ut(i);++o<i;)a[o]=r[n+o];o=-1;for(var u=ut(n+1);++o<n;)u[o]=r[o];return u[n]=e(a),Tn(t,this,u)}}function Mi(t,n){return n.length<2?t:Ar(t,io(n,0,-1))}function Oi(t,n){if(("constructor"!==n||"function"!=typeof t[n])&&"__proto__"!=n)return t[n]}var Ei=Li(eo),Bi=dn||function(t,n){return gn.setTimeout(t,n)},Ii=Li(ro);function Ni(t,n,e){var r=n+"";return Ii(t,function(t,n){var e=n.length;if(!e)return t;var r=e-1;return n[r]=(e>1?"& ":"")+n[r],n=n.join(e>2?", ":" "),t.replace(ct,"{\n/* [wrapped with "+n+"] */\n")}(r,function(t,n){return Mn(y,(function(e){var r="_."+e[0];n&e[1]&&!In(t,r)&&t.push(r)})),t.sort()}(function(t){var n=t.match(st);return n?n[1].split(lt):[]}(r),e)))}function Li(t){var n=0,e=0;return function(){var o=Pe(),i=16-(o-e);if(e=o,i>0){if(++n>=800)return arguments[0]}else n=0;return t.apply(r,arguments)}}function ji(t,n){var e=-1,o=t.length,i=o-1;for(n=n===r?o:n;++e<n;){var a=Yr(e,i),u=t[a];t[a]=t[e],t[e]=u}return t.length=n,t}var Wi=function(t){var n=La(t,(function(t){return 500===e.size&&e.clear(),t})),e=n.cache;return n}((function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(rt,(function(t,e,r,o){n.push(r?o.replace(pt,"$1"):e||t)})),n}));function Di(t){if("string"==typeof t||lu(t))return t;var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function zi(t){if(null!=t){try{return Lt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Fi(t){if(t instanceof qe)return t.clone();var n=new $e(t.__wrapped__,t.__chain__);return n.__actions__=Eo(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var Ui=Xr((function(t,n){return Ha(t)?pr(t,_r(n,1,Ha,!0)):[]})),Gi=Xr((function(t,n){var e=Xi(n);return Ha(e)&&(e=r),Ha(t)?pr(t,_r(n,1,Ha,!0),fi(e,2)):[]})),Ki=Xr((function(t,n){var e=Xi(n);return Ha(e)&&(e=r),Ha(t)?pr(t,_r(n,1,Ha,!0),r,e):[]}));function $i(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var o=null==e?0:gu(e);return o<0&&(o=be(r+o,0)),Gn(t,fi(n,3),o)}function qi(t,n,e){var o=null==t?0:t.length;if(!o)return-1;var i=o-1;return e!==r&&(i=gu(e),i=e<0?be(o+i,0):we(i,o-1)),Gn(t,fi(n,3),i,!0)}function Vi(t){return(null==t?0:t.length)?_r(t,1):[]}function Zi(t){return t&&t.length?t[0]:r}var Hi=Xr((function(t){var n=Ln(t,bo);return n.length&&n[0]===t[0]?Or(n):[]})),Yi=Xr((function(t){var n=Xi(t),e=Ln(t,bo);return n===Xi(e)?n=r:e.pop(),e.length&&e[0]===t[0]?Or(e,fi(n,2)):[]})),Ji=Xr((function(t){var n=Xi(t),e=Ln(t,bo);return(n="function"==typeof n?n:r)&&e.pop(),e.length&&e[0]===t[0]?Or(e,r,n):[]}));function Xi(t){var n=null==t?0:t.length;return n?t[n-1]:r}var Qi=Xr(ta);function ta(t,n){return t&&t.length&&n&&n.length?Zr(t,n):t}var na=ii((function(t,n){var e=null==t?0:t.length,r=cr(t,n);return Hr(t,Ln(n,(function(t){return wi(t,e)?+t:t})).sort(Ro)),r}));function ea(t){return null==t?t:Ae.call(t)}var ra=Xr((function(t){return ho(_r(t,1,Ha,!0))})),oa=Xr((function(t){var n=Xi(t);return Ha(n)&&(n=r),ho(_r(t,1,Ha,!0),fi(n,2))})),ia=Xr((function(t){var n=Xi(t);return n="function"==typeof n?n:r,ho(_r(t,1,Ha,!0),r,n)}));function aa(t){if(!t||!t.length)return[];var n=0;return t=Bn(t,(function(t){if(Ha(t))return n=be(t.length,n),!0})),Xn(n,(function(n){return Ln(t,Zn(n))}))}function ua(t,n){if(!t||!t.length)return[];var e=aa(t);return null==n?e:Ln(e,(function(t){return Tn(n,r,t)}))}var ca=Xr((function(t,n){return Ha(t)?pr(t,n):[]})),sa=Xr((function(t){return mo(Bn(t,Ha))})),la=Xr((function(t){var n=Xi(t);return Ha(n)&&(n=r),mo(Bn(t,Ha),fi(n,2))})),fa=Xr((function(t){var n=Xi(t);return n="function"==typeof n?n:r,mo(Bn(t,Ha),r,n)})),ha=Xr(aa);var pa=Xr((function(t){var n=t.length,e=n>1?t[n-1]:r;return e="function"==typeof e?(t.pop(),e):r,ua(t,e)}));function va(t){var n=Ue(t);return n.__chain__=!0,n}function da(t,n){return n(t)}var ga=ii((function(t){var n=t.length,e=n?t[0]:0,o=this.__wrapped__,i=function(n){return cr(n,t)};return!(n>1||this.__actions__.length)&&o instanceof qe&&wi(e)?((o=o.slice(e,+e+(n?1:0))).__actions__.push({func:da,args:[i],thisArg:r}),new $e(o,this.__chain__).thru((function(t){return n&&!t.length&&t.push(r),t}))):this.thru(i)}));var ya=Io((function(t,n,e){jt.call(t,e)?++t[e]:ur(t,e,1)}));var ma=Fo($i),_a=Fo(qi);function ba(t,n){return(qa(t)?Mn:vr)(t,fi(n,3))}function wa(t,n){return(qa(t)?On:dr)(t,fi(n,3))}var Pa=Io((function(t,n,e){jt.call(t,e)?t[e].push(n):ur(t,e,[n])}));var Ca=Xr((function(t,n,e){var r=-1,o="function"==typeof n,i=Za(t)?ut(t.length):[];return vr(t,(function(t){i[++r]=o?Tn(n,t,e):Er(t,n,e)})),i})),xa=Io((function(t,n,e){ur(t,e,n)}));function Aa(t,n){return(qa(t)?Ln:Fr)(t,fi(n,3))}var Sa=Io((function(t,n,e){t[e?0:1].push(n)}),(function(){return[[],[]]}));var ka=Xr((function(t,n){if(null==t)return[];var e=n.length;return e>1&&Pi(t,n[0],n[1])?n=[]:e>2&&Pi(n[0],n[1],n[2])&&(n=[n[0]]),qr(t,_r(n,1),[])})),Ta=vn||function(){return gn.Date.now()};function Ra(t,n,e){return n=e?r:n,n=t&&null==n?t.length:n,ti(t,f,r,r,r,r,n)}function Ma(t,n){var e;if("function"!=typeof n)throw new Ot(o);return t=gu(t),function(){return--t>0&&(e=n.apply(this,arguments)),t<=1&&(n=r),e}}var Oa=Xr((function(t,n,e){var r=1;if(e.length){var o=fe(e,li(Oa));r|=s}return ti(t,r,n,e,o)})),Ea=Xr((function(t,n,e){var r=3;if(e.length){var o=fe(e,li(Ea));r|=s}return ti(n,r,t,e,o)}));function Ba(t,n,e){var i,a,u,c,s,l,f=0,h=!1,p=!1,v=!0;if("function"!=typeof t)throw new Ot(o);function d(n){var e=i,o=a;return i=a=r,f=n,c=t.apply(o,e)}function g(t){var e=t-l;return l===r||e>=n||e<0||p&&t-f>=u}function y(){var t=Ta();if(g(t))return m(t);s=Bi(y,function(t){var e=n-(t-l);return p?we(e,u-(t-f)):e}(t))}function m(t){return s=r,v&&i?d(t):(i=a=r,c)}function _(){var t=Ta(),e=g(t);if(i=arguments,a=this,l=t,e){if(s===r)return function(t){return f=t,s=Bi(y,n),h?d(t):c}(l);if(p)return Ao(s),s=Bi(y,n),d(l)}return s===r&&(s=Bi(y,n)),c}return n=mu(n)||0,eu(e)&&(h=!!e.leading,u=(p="maxWait"in e)?be(mu(e.maxWait)||0,n):u,v="trailing"in e?!!e.trailing:v),_.cancel=function(){s!==r&&Ao(s),f=0,i=l=a=s=r},_.flush=function(){return s===r?c:m(Ta())},_}var Ia=Xr((function(t,n){return hr(t,1,n)})),Na=Xr((function(t,n,e){return hr(t,mu(n)||0,e)}));function La(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new Ot(o);var e=function e(){var r=arguments,o=n?n.apply(this,r):r[0],i=e.cache;if(i.has(o))return i.get(o);var a=t.apply(this,r);return e.cache=i.set(o,a)||i,a};return e.cache=new(La.Cache||He),e}function ja(t){if("function"!=typeof t)throw new Ot(o);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}La.Cache=He;var Wa=Co((function(t,n){var e=(n=1==n.length&&qa(n[0])?Ln(n[0],te(fi())):Ln(_r(n,1),te(fi()))).length;return Xr((function(r){for(var o=-1,i=we(r.length,e);++o<i;)r[o]=n[o].call(this,r[o]);return Tn(t,this,r)}))})),Da=Xr((function(t,n){var e=fe(n,li(Da));return ti(t,s,r,n,e)})),za=Xr((function(t,n){var e=fe(n,li(za));return ti(t,l,r,n,e)})),Fa=ii((function(t,n){return ti(t,h,r,r,r,n)}));function Ua(t,n){return t===n||t!=t&&n!=n}var Ga=Ho(Tr),Ka=Ho((function(t,n){return t>=n})),$a=Br(function(){return arguments}())?Br:function(t){return ru(t)&&jt.call(t,"callee")&&!Yt.call(t,"callee")},qa=ut.isArray,Va=Pn?te(Pn):function(t){return ru(t)&&kr(t)==I};function Za(t){return null!=t&&nu(t.length)&&!Qa(t)}function Ha(t){return ru(t)&&Za(t)}var Ya=wn||mc,Ja=Cn?te(Cn):function(t){return ru(t)&&kr(t)==w};function Xa(t){if(!ru(t))return!1;var n=kr(t);return n==P||"[object DOMException]"==n||"string"==typeof t.message&&"string"==typeof t.name&&!au(t)}function Qa(t){if(!eu(t))return!1;var n=kr(t);return n==C||n==x||"[object AsyncFunction]"==n||"[object Proxy]"==n}function tu(t){return"number"==typeof t&&t==gu(t)}function nu(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=v}function eu(t){var e=n(t);return null!=t&&("object"==e||"function"==e)}function ru(t){return null!=t&&"object"==n(t)}var ou=xn?te(xn):function(t){return ru(t)&&yi(t)==A};function iu(t){return"number"==typeof t||ru(t)&&kr(t)==S}function au(t){if(!ru(t)||kr(t)!=k)return!1;var n=Zt(t);if(null===n)return!0;var e=jt.call(n,"constructor")&&n.constructor;return"function"==typeof e&&e instanceof e&&Lt.call(e)==Ft}var uu=An?te(An):function(t){return ru(t)&&kr(t)==R};var cu=Sn?te(Sn):function(t){return ru(t)&&yi(t)==M};function su(t){return"string"==typeof t||!qa(t)&&ru(t)&&kr(t)==O}function lu(t){return"symbol"==n(t)||ru(t)&&kr(t)==E}var fu=kn?te(kn):function(t){return ru(t)&&nu(t.length)&&!!sn[kr(t)]};var hu=Ho(zr),pu=Ho((function(t,n){return t<=n}));function vu(t){if(!t)return[];if(Za(t))return su(t)?de(t):Eo(t);if(Qt&&t[Qt])return function(t){for(var n,e=[];!(n=t.next()).done;)e.push(n.value);return e}(t[Qt]());var n=yi(t);return(n==A?se:n==M?he:Uu)(t)}function du(t){return t?(t=mu(t))===p||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function gu(t){var n=du(t),e=n%1;return n==n?e?n-e:n:0}function yu(t){return t?sr(gu(t),0,g):0}function mu(t){if("number"==typeof t)return t;if(lu(t))return d;if(eu(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=eu(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=Qn(t);var e=yt.test(t);return e||_t.test(t)?pn(t.slice(2),e?2:8):gt.test(t)?d:+t}function _u(t){return Bo(t,Iu(t))}function bu(t){return null==t?"":fo(t)}var wu=No((function(t,n){if(Si(n)||Za(n))Bo(n,Bu(n),t);else for(var e in n)jt.call(n,e)&&rr(t,e,n[e])})),Pu=No((function(t,n){Bo(n,Iu(n),t)})),Cu=No((function(t,n,e,r){Bo(n,Iu(n),t,r)})),xu=No((function(t,n,e,r){Bo(n,Bu(n),t,r)})),Au=ii(cr);var Su=Xr((function(t,n){t=Tt(t);var e=-1,o=n.length,i=o>2?n[2]:r;for(i&&Pi(n[0],n[1],i)&&(o=1);++e<o;)for(var a=n[e],u=Iu(a),c=-1,s=u.length;++c<s;){var l=u[c],f=t[l];(f===r||Ua(f,It[l])&&!jt.call(t,l))&&(t[l]=a[l])}return t})),ku=Xr((function(t){return t.push(r,ei),Tn(Lu,r,t)}));function Tu(t,n,e){var o=null==t?r:Ar(t,n);return o===r?e:o}function Ru(t,n){return null!=t&&mi(t,n,Mr)}var Mu=Ko((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=zt.call(n)),t[n]=e}),ec(ic)),Ou=Ko((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=zt.call(n)),jt.call(t,n)?t[n].push(e):t[n]=[e]}),fi),Eu=Xr(Er);function Bu(t){return Za(t)?Xe(t):Wr(t)}function Iu(t){return Za(t)?Xe(t,!0):Dr(t)}var Nu=No((function(t,n,e){Kr(t,n,e)})),Lu=No((function(t,n,e,r){Kr(t,n,e,r)})),ju=ii((function(t,n){var e={};if(null==t)return e;var r=!1;n=Ln(n,(function(n){return n=Po(n,t),r||(r=n.length>1),n})),Bo(t,ui(t),e),r&&(e=lr(e,7,ri));for(var o=n.length;o--;)po(e,n[o]);return e}));var Wu=ii((function(t,n){return null==t?{}:function(t,n){return Vr(t,n,(function(n,e){return Ru(t,e)}))}(t,n)}));function Du(t,n){if(null==t)return{};var e=Ln(ui(t),(function(t){return[t]}));return n=fi(n),Vr(t,e,(function(t,e){return n(t,e[0])}))}var zu=Qo(Bu),Fu=Qo(Iu);function Uu(t){return null==t?[]:ne(t,Bu(t))}var Gu=Do((function(t,n,e){return n=n.toLowerCase(),t+(e?Ku(n):n)}));function Ku(t){return Xu(bu(t).toLowerCase())}function $u(t){return(t=bu(t))&&t.replace(wt,ie).replace(nn,"")}var qu=Do((function(t,n,e){return t+(e?"-":"")+n.toLowerCase()})),Vu=Do((function(t,n,e){return t+(e?" ":"")+n.toLowerCase()})),Zu=Wo("toLowerCase");var Hu=Do((function(t,n,e){return t+(e?"_":"")+n.toLowerCase()}));var Yu=Do((function(t,n,e){return t+(e?" ":"")+Xu(n)}));var Ju=Do((function(t,n,e){return t+(e?" ":"")+n.toUpperCase()})),Xu=Wo("toUpperCase");function Qu(t,n,e){return t=bu(t),(n=e?r:n)===r?function(t){return an.test(t)}(t)?function(t){return t.match(rn)||[]}(t):function(t){return t.match(ft)||[]}(t):t.match(n)||[]}var tc=Xr((function(t,n){try{return Tn(t,r,n)}catch(t){return Xa(t)?t:new At(t)}})),nc=ii((function(t,n){return Mn(n,(function(n){n=Di(n),ur(t,n,Oa(t[n],t))})),t}));function ec(t){return function(){return t}}var rc=Uo(),oc=Uo(!0);function ic(t){return t}function ac(t){return jr("function"==typeof t?t:lr(t,1))}var uc=Xr((function(t,n){return function(e){return Er(e,t,n)}})),cc=Xr((function(t,n){return function(e){return Er(t,e,n)}}));function sc(t,n,e){var r=Bu(n),o=xr(n,r);null!=e||eu(n)&&(o.length||!r.length)||(e=n,n=t,t=this,o=xr(n,Bu(n)));var i=!(eu(e)&&"chain"in e&&!e.chain),a=Qa(t);return Mn(o,(function(e){var r=n[e];t[e]=r,a&&(t.prototype[e]=function(){var n=this.__chain__;if(i||n){var e=t(this.__wrapped__);return(e.__actions__=Eo(this.__actions__)).push({func:r,args:arguments,thisArg:t}),e.__chain__=n,e}return r.apply(t,jn([this.value()],arguments))})})),t}function lc(){}var fc=qo(Ln),hc=qo(En),pc=qo(zn);function vc(t){return Ci(t)?Zn(Di(t)):function(t){return function(n){return Ar(n,t)}}(t)}var dc=Zo(),gc=Zo(!0);function yc(){return[]}function mc(){return!1}var _c=$o((function(t,n){return t+n}),0),bc=Jo("ceil"),wc=$o((function(t,n){return t/n}),1),Pc=Jo("floor");var Cc,xc=$o((function(t,n){return t*n}),1),Ac=Jo("round"),Sc=$o((function(t,n){return t-n}),0);return Ue.after=function(t,n){if("function"!=typeof n)throw new Ot(o);return t=gu(t),function(){if(--t<1)return n.apply(this,arguments)}},Ue.ary=Ra,Ue.assign=wu,Ue.assignIn=Pu,Ue.assignInWith=Cu,Ue.assignWith=xu,Ue.at=Au,Ue.before=Ma,Ue.bind=Oa,Ue.bindAll=nc,Ue.bindKey=Ea,Ue.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return qa(t)?t:[t]},Ue.chain=va,Ue.chunk=function(t,n,e){n=(e?Pi(t,n,e):n===r)?1:be(gu(n),0);var o=null==t?0:t.length;if(!o||n<1)return[];for(var i=0,a=0,u=ut(yn(o/n));i<o;)u[a++]=io(t,i,i+=n);return u},Ue.compact=function(t){for(var n=-1,e=null==t?0:t.length,r=0,o=[];++n<e;){var i=t[n];i&&(o[r++]=i)}return o},Ue.concat=function(){var t=arguments.length;if(!t)return[];for(var n=ut(t-1),e=arguments[0],r=t;r--;)n[r-1]=arguments[r];return jn(qa(e)?Eo(e):[e],_r(n,1))},Ue.cond=function(t){var n=null==t?0:t.length,e=fi();return t=n?Ln(t,(function(t){if("function"!=typeof t[1])throw new Ot(o);return[e(t[0]),t[1]]})):[],Xr((function(e){for(var r=-1;++r<n;){var o=t[r];if(Tn(o[0],this,e))return Tn(o[1],this,e)}}))},Ue.conforms=function(t){return function(t){var n=Bu(t);return function(e){return fr(e,t,n)}}(lr(t,1))},Ue.constant=ec,Ue.countBy=ya,Ue.create=function(t,n){var e=Ge(t);return null==n?e:ar(e,n)},Ue.curry=function t(n,e,o){var i=ti(n,8,r,r,r,r,r,e=o?r:e);return i.placeholder=t.placeholder,i},Ue.curryRight=function t(n,e,o){var i=ti(n,u,r,r,r,r,r,e=o?r:e);return i.placeholder=t.placeholder,i},Ue.debounce=Ba,Ue.defaults=Su,Ue.defaultsDeep=ku,Ue.defer=Ia,Ue.delay=Na,Ue.difference=Ui,Ue.differenceBy=Gi,Ue.differenceWith=Ki,Ue.drop=function(t,n,e){var o=null==t?0:t.length;return o?io(t,(n=e||n===r?1:gu(n))<0?0:n,o):[]},Ue.dropRight=function(t,n,e){var o=null==t?0:t.length;return o?io(t,0,(n=o-(n=e||n===r?1:gu(n)))<0?0:n):[]},Ue.dropRightWhile=function(t,n){return t&&t.length?go(t,fi(n,3),!0,!0):[]},Ue.dropWhile=function(t,n){return t&&t.length?go(t,fi(n,3),!0):[]},Ue.fill=function(t,n,e,o){var i=null==t?0:t.length;return i?(e&&"number"!=typeof e&&Pi(t,n,e)&&(e=0,o=i),function(t,n,e,o){var i=t.length;for((e=gu(e))<0&&(e=-e>i?0:i+e),(o=o===r||o>i?i:gu(o))<0&&(o+=i),o=e>o?0:yu(o);e<o;)t[e++]=n;return t}(t,n,e,o)):[]},Ue.filter=function(t,n){return(qa(t)?Bn:mr)(t,fi(n,3))},Ue.flatMap=function(t,n){return _r(Aa(t,n),1)},Ue.flatMapDeep=function(t,n){return _r(Aa(t,n),p)},Ue.flatMapDepth=function(t,n,e){return e=e===r?1:gu(e),_r(Aa(t,n),e)},Ue.flatten=Vi,Ue.flattenDeep=function(t){return(null==t?0:t.length)?_r(t,p):[]},Ue.flattenDepth=function(t,n){return(null==t?0:t.length)?_r(t,n=n===r?1:gu(n)):[]},Ue.flip=function(t){return ti(t,512)},Ue.flow=rc,Ue.flowRight=oc,Ue.fromPairs=function(t){for(var n=-1,e=null==t?0:t.length,r={};++n<e;){var o=t[n];r[o[0]]=o[1]}return r},Ue.functions=function(t){return null==t?[]:xr(t,Bu(t))},Ue.functionsIn=function(t){return null==t?[]:xr(t,Iu(t))},Ue.groupBy=Pa,Ue.initial=function(t){return(null==t?0:t.length)?io(t,0,-1):[]},Ue.intersection=Hi,Ue.intersectionBy=Yi,Ue.intersectionWith=Ji,Ue.invert=Mu,Ue.invertBy=Ou,Ue.invokeMap=Ca,Ue.iteratee=ac,Ue.keyBy=xa,Ue.keys=Bu,Ue.keysIn=Iu,Ue.map=Aa,Ue.mapKeys=function(t,n){var e={};return n=fi(n,3),Pr(t,(function(t,r,o){ur(e,n(t,r,o),t)})),e},Ue.mapValues=function(t,n){var e={};return n=fi(n,3),Pr(t,(function(t,r,o){ur(e,r,n(t,r,o))})),e},Ue.matches=function(t){return Ur(lr(t,1))},Ue.matchesProperty=function(t,n){return Gr(t,lr(n,1))},Ue.memoize=La,Ue.merge=Nu,Ue.mergeWith=Lu,Ue.method=uc,Ue.methodOf=cc,Ue.mixin=sc,Ue.negate=ja,Ue.nthArg=function(t){return t=gu(t),Xr((function(n){return $r(n,t)}))},Ue.omit=ju,Ue.omitBy=function(t,n){return Du(t,ja(fi(n)))},Ue.once=function(t){return Ma(2,t)},Ue.orderBy=function(t,n,e,o){return null==t?[]:(qa(n)||(n=null==n?[]:[n]),qa(e=o?r:e)||(e=null==e?[]:[e]),qr(t,n,e))},Ue.over=fc,Ue.overArgs=Wa,Ue.overEvery=hc,Ue.overSome=pc,Ue.partial=Da,Ue.partialRight=za,Ue.partition=Sa,Ue.pick=Wu,Ue.pickBy=Du,Ue.property=vc,Ue.propertyOf=function(t){return function(n){return null==t?r:Ar(t,n)}},Ue.pull=Qi,Ue.pullAll=ta,Ue.pullAllBy=function(t,n,e){return t&&t.length&&n&&n.length?Zr(t,n,fi(e,2)):t},Ue.pullAllWith=function(t,n,e){return t&&t.length&&n&&n.length?Zr(t,n,r,e):t},Ue.pullAt=na,Ue.range=dc,Ue.rangeRight=gc,Ue.rearg=Fa,Ue.reject=function(t,n){return(qa(t)?Bn:mr)(t,ja(fi(n,3)))},Ue.remove=function(t,n){var e=[];if(!t||!t.length)return e;var r=-1,o=[],i=t.length;for(n=fi(n,3);++r<i;){var a=t[r];n(a,r,t)&&(e.push(a),o.push(r))}return Hr(t,o),e},Ue.rest=function(t,n){if("function"!=typeof t)throw new Ot(o);return Xr(t,n=n===r?n:gu(n))},Ue.reverse=ea,Ue.sampleSize=function(t,n,e){return n=(e?Pi(t,n,e):n===r)?1:gu(n),(qa(t)?tr:to)(t,n)},Ue.set=function(t,n,e){return null==t?t:no(t,n,e)},Ue.setWith=function(t,n,e,o){return o="function"==typeof o?o:r,null==t?t:no(t,n,e,o)},Ue.shuffle=function(t){return(qa(t)?nr:oo)(t)},Ue.slice=function(t,n,e){var o=null==t?0:t.length;return o?(e&&"number"!=typeof e&&Pi(t,n,e)?(n=0,e=o):(n=null==n?0:gu(n),e=e===r?o:gu(e)),io(t,n,e)):[]},Ue.sortBy=ka,Ue.sortedUniq=function(t){return t&&t.length?so(t):[]},Ue.sortedUniqBy=function(t,n){return t&&t.length?so(t,fi(n,2)):[]},Ue.split=function(t,n,e){return e&&"number"!=typeof e&&Pi(t,n,e)&&(n=e=r),(e=e===r?g:e>>>0)?(t=bu(t))&&("string"==typeof n||null!=n&&!uu(n))&&!(n=fo(n))&&ce(t)?xo(de(t),0,e):t.split(n,e):[]},Ue.spread=function(t,n){if("function"!=typeof t)throw new Ot(o);return n=null==n?0:be(gu(n),0),Xr((function(e){var r=e[n],o=xo(e,0,n);return r&&jn(o,r),Tn(t,this,o)}))},Ue.tail=function(t){var n=null==t?0:t.length;return n?io(t,1,n):[]},Ue.take=function(t,n,e){return t&&t.length?io(t,0,(n=e||n===r?1:gu(n))<0?0:n):[]},Ue.takeRight=function(t,n,e){var o=null==t?0:t.length;return o?io(t,(n=o-(n=e||n===r?1:gu(n)))<0?0:n,o):[]},Ue.takeRightWhile=function(t,n){return t&&t.length?go(t,fi(n,3),!1,!0):[]},Ue.takeWhile=function(t,n){return t&&t.length?go(t,fi(n,3)):[]},Ue.tap=function(t,n){return n(t),t},Ue.throttle=function(t,n,e){var r=!0,i=!0;if("function"!=typeof t)throw new Ot(o);return eu(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),Ba(t,n,{leading:r,maxWait:n,trailing:i})},Ue.thru=da,Ue.toArray=vu,Ue.toPairs=zu,Ue.toPairsIn=Fu,Ue.toPath=function(t){return qa(t)?Ln(t,Di):lu(t)?[t]:Eo(Wi(bu(t)))},Ue.toPlainObject=_u,Ue.transform=function(t,n,e){var r=qa(t),o=r||Ya(t)||fu(t);if(n=fi(n,4),null==e){var i=t&&t.constructor;e=o?r?new i:[]:eu(t)&&Qa(i)?Ge(Zt(t)):{}}return(o?Mn:Pr)(t,(function(t,r,o){return n(e,t,r,o)})),e},Ue.unary=function(t){return Ra(t,1)},Ue.union=ra,Ue.unionBy=oa,Ue.unionWith=ia,Ue.uniq=function(t){return t&&t.length?ho(t):[]},Ue.uniqBy=function(t,n){return t&&t.length?ho(t,fi(n,2)):[]},Ue.uniqWith=function(t,n){return n="function"==typeof n?n:r,t&&t.length?ho(t,r,n):[]},Ue.unset=function(t,n){return null==t||po(t,n)},Ue.unzip=aa,Ue.unzipWith=ua,Ue.update=function(t,n,e){return null==t?t:vo(t,n,wo(e))},Ue.updateWith=function(t,n,e,o){return o="function"==typeof o?o:r,null==t?t:vo(t,n,wo(e),o)},Ue.values=Uu,Ue.valuesIn=function(t){return null==t?[]:ne(t,Iu(t))},Ue.without=ca,Ue.words=Qu,Ue.wrap=function(t,n){return Da(wo(n),t)},Ue.xor=sa,Ue.xorBy=la,Ue.xorWith=fa,Ue.zip=ha,Ue.zipObject=function(t,n){return _o(t||[],n||[],rr)},Ue.zipObjectDeep=function(t,n){return _o(t||[],n||[],no)},Ue.zipWith=pa,Ue.entries=zu,Ue.entriesIn=Fu,Ue.extend=Pu,Ue.extendWith=Cu,sc(Ue,Ue),Ue.add=_c,Ue.attempt=tc,Ue.camelCase=Gu,Ue.capitalize=Ku,Ue.ceil=bc,Ue.clamp=function(t,n,e){return e===r&&(e=n,n=r),e!==r&&(e=(e=mu(e))==e?e:0),n!==r&&(n=(n=mu(n))==n?n:0),sr(mu(t),n,e)},Ue.clone=function(t){return lr(t,4)},Ue.cloneDeep=function(t){return lr(t,5)},Ue.cloneDeepWith=function(t,n){return lr(t,5,n="function"==typeof n?n:r)},Ue.cloneWith=function(t,n){return lr(t,4,n="function"==typeof n?n:r)},Ue.conformsTo=function(t,n){return null==n||fr(t,n,Bu(n))},Ue.deburr=$u,Ue.defaultTo=function(t,n){return null==t||t!=t?n:t},Ue.divide=wc,Ue.endsWith=function(t,n,e){t=bu(t),n=fo(n);var o=t.length,i=e=e===r?o:sr(gu(e),0,o);return(e-=n.length)>=0&&t.slice(e,i)==n},Ue.eq=Ua,Ue.escape=function(t){return(t=bu(t))&&J.test(t)?t.replace(H,ae):t},Ue.escapeRegExp=function(t){return(t=bu(t))&&it.test(t)?t.replace(ot,"\\$&"):t},Ue.every=function(t,n,e){var o=qa(t)?En:gr;return e&&Pi(t,n,e)&&(n=r),o(t,fi(n,3))},Ue.find=ma,Ue.findIndex=$i,Ue.findKey=function(t,n){return Un(t,fi(n,3),Pr)},Ue.findLast=_a,Ue.findLastIndex=qi,Ue.findLastKey=function(t,n){return Un(t,fi(n,3),Cr)},Ue.floor=Pc,Ue.forEach=ba,Ue.forEachRight=wa,Ue.forIn=function(t,n){return null==t?t:br(t,fi(n,3),Iu)},Ue.forInRight=function(t,n){return null==t?t:wr(t,fi(n,3),Iu)},Ue.forOwn=function(t,n){return t&&Pr(t,fi(n,3))},Ue.forOwnRight=function(t,n){return t&&Cr(t,fi(n,3))},Ue.get=Tu,Ue.gt=Ga,Ue.gte=Ka,Ue.has=function(t,n){return null!=t&&mi(t,n,Rr)},Ue.hasIn=Ru,Ue.head=Zi,Ue.identity=ic,Ue.includes=function(t,n,e,r){t=Za(t)?t:Uu(t),e=e&&!r?gu(e):0;var o=t.length;return e<0&&(e=be(o+e,0)),su(t)?e<=o&&t.indexOf(n,e)>-1:!!o&&Kn(t,n,e)>-1},Ue.indexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var o=null==e?0:gu(e);return o<0&&(o=be(r+o,0)),Kn(t,n,o)},Ue.inRange=function(t,n,e){return n=du(n),e===r?(e=n,n=0):e=du(e),function(t,n,e){return t>=we(n,e)&&t<be(n,e)}(t=mu(t),n,e)},Ue.invoke=Eu,Ue.isArguments=$a,Ue.isArray=qa,Ue.isArrayBuffer=Va,Ue.isArrayLike=Za,Ue.isArrayLikeObject=Ha,Ue.isBoolean=function(t){return!0===t||!1===t||ru(t)&&kr(t)==b},Ue.isBuffer=Ya,Ue.isDate=Ja,Ue.isElement=function(t){return ru(t)&&1===t.nodeType&&!au(t)},Ue.isEmpty=function(t){if(null==t)return!0;if(Za(t)&&(qa(t)||"string"==typeof t||"function"==typeof t.splice||Ya(t)||fu(t)||$a(t)))return!t.length;var n=yi(t);if(n==A||n==M)return!t.size;if(Si(t))return!Wr(t).length;for(var e in t)if(jt.call(t,e))return!1;return!0},Ue.isEqual=function(t,n){return Ir(t,n)},Ue.isEqualWith=function(t,n,e){var o=(e="function"==typeof e?e:r)?e(t,n):r;return o===r?Ir(t,n,r,e):!!o},Ue.isError=Xa,Ue.isFinite=function(t){return"number"==typeof t&&Fn(t)},Ue.isFunction=Qa,Ue.isInteger=tu,Ue.isLength=nu,Ue.isMap=ou,Ue.isMatch=function(t,n){return t===n||Nr(t,n,pi(n))},Ue.isMatchWith=function(t,n,e){return e="function"==typeof e?e:r,Nr(t,n,pi(n),e)},Ue.isNaN=function(t){return iu(t)&&t!=+t},Ue.isNative=function(t){if(Ai(t))throw new At("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Lr(t)},Ue.isNil=function(t){return null==t},Ue.isNull=function(t){return null===t},Ue.isNumber=iu,Ue.isObject=eu,Ue.isObjectLike=ru,Ue.isPlainObject=au,Ue.isRegExp=uu,Ue.isSafeInteger=function(t){return tu(t)&&t>=-9007199254740991&&t<=v},Ue.isSet=cu,Ue.isString=su,Ue.isSymbol=lu,Ue.isTypedArray=fu,Ue.isUndefined=function(t){return t===r},Ue.isWeakMap=function(t){return ru(t)&&yi(t)==B},Ue.isWeakSet=function(t){return ru(t)&&"[object WeakSet]"==kr(t)},Ue.join=function(t,n){return null==t?"":Hn.call(t,n)},Ue.kebabCase=qu,Ue.last=Xi,Ue.lastIndexOf=function(t,n,e){var o=null==t?0:t.length;if(!o)return-1;var i=o;return e!==r&&(i=(i=gu(e))<0?be(o+i,0):we(i,o-1)),n==n?function(t,n,e){for(var r=e+1;r--;)if(t[r]===n)return r;return r}(t,n,i):Gn(t,qn,i,!0)},Ue.lowerCase=Vu,Ue.lowerFirst=Zu,Ue.lt=hu,Ue.lte=pu,Ue.max=function(t){return t&&t.length?yr(t,ic,Tr):r},Ue.maxBy=function(t,n){return t&&t.length?yr(t,fi(n,2),Tr):r},Ue.mean=function(t){return Vn(t,ic)},Ue.meanBy=function(t,n){return Vn(t,fi(n,2))},Ue.min=function(t){return t&&t.length?yr(t,ic,zr):r},Ue.minBy=function(t,n){return t&&t.length?yr(t,fi(n,2),zr):r},Ue.stubArray=yc,Ue.stubFalse=mc,Ue.stubObject=function(){return{}},Ue.stubString=function(){return""},Ue.stubTrue=function(){return!0},Ue.multiply=xc,Ue.nth=function(t,n){return t&&t.length?$r(t,gu(n)):r},Ue.noConflict=function(){return gn._===this&&(gn._=Ut),this},Ue.noop=lc,Ue.now=Ta,Ue.pad=function(t,n,e){t=bu(t);var r=(n=gu(n))?ve(t):0;if(!n||r>=n)return t;var o=(n-r)/2;return Vo(mn(o),e)+t+Vo(yn(o),e)},Ue.padEnd=function(t,n,e){t=bu(t);var r=(n=gu(n))?ve(t):0;return n&&r<n?t+Vo(n-r,e):t},Ue.padStart=function(t,n,e){t=bu(t);var r=(n=gu(n))?ve(t):0;return n&&r<n?Vo(n-r,e)+t:t},Ue.parseInt=function(t,n,e){return e||null==n?n=0:n&&(n=+n),Ce(bu(t).replace(at,""),n||0)},Ue.random=function(t,n,e){if(e&&"boolean"!=typeof e&&Pi(t,n,e)&&(n=e=r),e===r&&("boolean"==typeof n?(e=n,n=r):"boolean"==typeof t&&(e=t,t=r)),t===r&&n===r?(t=0,n=1):(t=du(t),n===r?(n=t,t=0):n=du(n)),t>n){var o=t;t=n,n=o}if(e||t%1||n%1){var i=xe();return we(t+i*(n-t+hn("1e-"+((i+"").length-1))),n)}return Yr(t,n)},Ue.reduce=function(t,n,e){var r=qa(t)?Wn:Yn,o=arguments.length<3;return r(t,fi(n,4),e,o,vr)},Ue.reduceRight=function(t,n,e){var r=qa(t)?Dn:Yn,o=arguments.length<3;return r(t,fi(n,4),e,o,dr)},Ue.repeat=function(t,n,e){return n=(e?Pi(t,n,e):n===r)?1:gu(n),Jr(bu(t),n)},Ue.replace=function(){var t=arguments,n=bu(t[0]);return t.length<3?n:n.replace(t[1],t[2])},Ue.result=function(t,n,e){var o=-1,i=(n=Po(n,t)).length;for(i||(i=1,t=r);++o<i;){var a=null==t?r:t[Di(n[o])];a===r&&(o=i,a=e),t=Qa(a)?a.call(t):a}return t},Ue.round=Ac,Ue.runInContext=t,Ue.sample=function(t){return(qa(t)?Qe:Qr)(t)},Ue.size=function(t){if(null==t)return 0;if(Za(t))return su(t)?ve(t):t.length;var n=yi(t);return n==A||n==M?t.size:Wr(t).length},Ue.snakeCase=Hu,Ue.some=function(t,n,e){var o=qa(t)?zn:ao;return e&&Pi(t,n,e)&&(n=r),o(t,fi(n,3))},Ue.sortedIndex=function(t,n){return uo(t,n)},Ue.sortedIndexBy=function(t,n,e){return co(t,n,fi(e,2))},Ue.sortedIndexOf=function(t,n){var e=null==t?0:t.length;if(e){var r=uo(t,n);if(r<e&&Ua(t[r],n))return r}return-1},Ue.sortedLastIndex=function(t,n){return uo(t,n,!0)},Ue.sortedLastIndexBy=function(t,n,e){return co(t,n,fi(e,2),!0)},Ue.sortedLastIndexOf=function(t,n){if(null==t?0:t.length){var e=uo(t,n,!0)-1;if(Ua(t[e],n))return e}return-1},Ue.startCase=Yu,Ue.startsWith=function(t,n,e){return t=bu(t),e=null==e?0:sr(gu(e),0,t.length),n=fo(n),t.slice(e,e+n.length)==n},Ue.subtract=Sc,Ue.sum=function(t){return t&&t.length?Jn(t,ic):0},Ue.sumBy=function(t,n){return t&&t.length?Jn(t,fi(n,2)):0},Ue.template=function(t,n,e){var o=Ue.templateSettings;e&&Pi(t,n,e)&&(n=r),t=bu(t),n=Cu({},n,o,ni);var i,a,u=Cu({},n.imports,o.imports,ni),c=Bu(u),s=ne(u,c),l=0,f=n.interpolate||Pt,h="__p += '",p=Rt((n.escape||Pt).source+"|"+f.source+"|"+(f===tt?vt:Pt).source+"|"+(n.evaluate||Pt).source+"|$","g"),v="//# sourceURL="+(jt.call(n,"sourceURL")?(n.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++cn+"]")+"\n";t.replace(p,(function(n,e,r,o,u,c){return r||(r=o),h+=t.slice(l,c).replace(Ct,ue),e&&(i=!0,h+="' +\n__e("+e+") +\n'"),u&&(a=!0,h+="';\n"+u+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=c+n.length,n})),h+="';\n";var d=jt.call(n,"variable")&&n.variable;if(d){if(ht.test(d))throw new At("Invalid `variable` option passed into `_.template`")}else h="with (obj) {\n"+h+"\n}\n";h=(a?h.replace($,""):h).replace(q,"$1").replace(V,"$1;"),h="function("+(d||"obj")+") {\n"+(d?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var g=tc((function(){return St(c,v+"return "+h).apply(r,s)}));if(g.source=h,Xa(g))throw g;return g},Ue.times=function(t,n){if((t=gu(t))<1||t>v)return[];var e=g,r=we(t,g);n=fi(n),t-=g;for(var o=Xn(r,n);++e<t;)n(e);return o},Ue.toFinite=du,Ue.toInteger=gu,Ue.toLength=yu,Ue.toLower=function(t){return bu(t).toLowerCase()},Ue.toNumber=mu,Ue.toSafeInteger=function(t){return t?sr(gu(t),-9007199254740991,v):0===t?t:0},Ue.toString=bu,Ue.toUpper=function(t){return bu(t).toUpperCase()},Ue.trim=function(t,n,e){if((t=bu(t))&&(e||n===r))return Qn(t);if(!t||!(n=fo(n)))return t;var o=de(t),i=de(n);return xo(o,re(o,i),oe(o,i)+1).join("")},Ue.trimEnd=function(t,n,e){if((t=bu(t))&&(e||n===r))return t.slice(0,ge(t)+1);if(!t||!(n=fo(n)))return t;var o=de(t);return xo(o,0,oe(o,de(n))+1).join("")},Ue.trimStart=function(t,n,e){if((t=bu(t))&&(e||n===r))return t.replace(at,"");if(!t||!(n=fo(n)))return t;var o=de(t);return xo(o,re(o,de(n))).join("")},Ue.truncate=function(t,n){var e=30,o="...";if(eu(n)){var i="separator"in n?n.separator:i;e="length"in n?gu(n.length):e,o="omission"in n?fo(n.omission):o}var a=(t=bu(t)).length;if(ce(t)){var u=de(t);a=u.length}if(e>=a)return t;var c=e-ve(o);if(c<1)return o;var s=u?xo(u,0,c).join(""):t.slice(0,c);if(i===r)return s+o;if(u&&(c+=s.length-c),uu(i)){if(t.slice(c).search(i)){var l,f=s;for(i.global||(i=Rt(i.source,bu(dt.exec(i))+"g")),i.lastIndex=0;l=i.exec(f);)var h=l.index;s=s.slice(0,h===r?c:h)}}else if(t.indexOf(fo(i),c)!=c){var p=s.lastIndexOf(i);p>-1&&(s=s.slice(0,p))}return s+o},Ue.unescape=function(t){return(t=bu(t))&&Y.test(t)?t.replace(Z,ye):t},Ue.uniqueId=function(t){var n=++Wt;return bu(t)+n},Ue.upperCase=Ju,Ue.upperFirst=Xu,Ue.each=ba,Ue.eachRight=wa,Ue.first=Zi,sc(Ue,(Cc={},Pr(Ue,(function(t,n){jt.call(Ue.prototype,n)||(Cc[n]=t)})),Cc),{chain:!1}),Ue.VERSION="4.17.21",Mn(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Ue[t].placeholder=Ue})),Mn(["drop","take"],(function(t,n){qe.prototype[t]=function(e){e=e===r?1:be(gu(e),0);var o=this.__filtered__&&!n?new qe(this):this.clone();return o.__filtered__?o.__takeCount__=we(e,o.__takeCount__):o.__views__.push({size:we(e,g),type:t+(o.__dir__<0?"Right":"")}),o},qe.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}})),Mn(["filter","map","takeWhile"],(function(t,n){var e=n+1,r=1==e||3==e;qe.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:fi(t,3),type:e}),n.__filtered__=n.__filtered__||r,n}})),Mn(["head","last"],(function(t,n){var e="take"+(n?"Right":"");qe.prototype[t]=function(){return this[e](1).value()[0]}})),Mn(["initial","tail"],(function(t,n){var e="drop"+(n?"":"Right");qe.prototype[t]=function(){return this.__filtered__?new qe(this):this[e](1)}})),qe.prototype.compact=function(){return this.filter(ic)},qe.prototype.find=function(t){return this.filter(t).head()},qe.prototype.findLast=function(t){return this.reverse().find(t)},qe.prototype.invokeMap=Xr((function(t,n){return"function"==typeof t?new qe(this):this.map((function(e){return Er(e,t,n)}))})),qe.prototype.reject=function(t){return this.filter(ja(fi(t)))},qe.prototype.slice=function(t,n){t=gu(t);var e=this;return e.__filtered__&&(t>0||n<0)?new qe(e):(t<0?e=e.takeRight(-t):t&&(e=e.drop(t)),n!==r&&(e=(n=gu(n))<0?e.dropRight(-n):e.take(n-t)),e)},qe.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},qe.prototype.toArray=function(){return this.take(g)},Pr(qe.prototype,(function(t,n){var e=/^(?:filter|find|map|reject)|While$/.test(n),o=/^(?:head|last)$/.test(n),i=Ue[o?"take"+("last"==n?"Right":""):n],a=o||/^find/.test(n);i&&(Ue.prototype[n]=function(){var n=this.__wrapped__,u=o?[1]:arguments,c=n instanceof qe,s=u[0],l=c||qa(n),f=function(t){var n=i.apply(Ue,jn([t],u));return o&&h?n[0]:n};l&&e&&"function"==typeof s&&1!=s.length&&(c=l=!1);var h=this.__chain__,p=!!this.__actions__.length,v=a&&!h,d=c&&!p;if(!a&&l){n=d?n:new qe(this);var g=t.apply(n,u);return g.__actions__.push({func:da,args:[f],thisArg:r}),new $e(g,h)}return v&&d?t.apply(this,u):(g=this.thru(f),v?o?g.value()[0]:g.value():g)})})),Mn(["pop","push","shift","sort","splice","unshift"],(function(t){var n=Et[t],e=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Ue.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var o=this.value();return n.apply(qa(o)?o:[],t)}return this[e]((function(e){return n.apply(qa(e)?e:[],t)}))}})),Pr(qe.prototype,(function(t,n){var e=Ue[n];if(e){var r=e.name+"";jt.call(Be,r)||(Be[r]=[]),Be[r].push({name:n,func:e})}})),Be[Go(r,2).name]=[{name:"wrapper",func:r}],qe.prototype.clone=function(){var t=new qe(this.__wrapped__);return t.__actions__=Eo(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Eo(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Eo(this.__views__),t},qe.prototype.reverse=function(){if(this.__filtered__){var t=new qe(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},qe.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,e=qa(t),r=n<0,o=e?t.length:0,i=function(t,n,e){var r=-1,o=e.length;for(;++r<o;){var i=e[r],a=i.size;switch(i.type){case"drop":t+=a;break;case"dropRight":n-=a;break;case"take":n=we(n,t+a);break;case"takeRight":t=be(t,n-a)}}return{start:t,end:n}}(0,o,this.__views__),a=i.start,u=i.end,c=u-a,s=r?u:a-1,l=this.__iteratees__,f=l.length,h=0,p=we(c,this.__takeCount__);if(!e||!r&&o==c&&p==c)return yo(t,this.__actions__);var v=[];t:for(;c--&&h<p;){for(var d=-1,g=t[s+=n];++d<f;){var y=l[d],m=y.iteratee,_=y.type,b=m(g);if(2==_)g=b;else if(!b){if(1==_)continue t;break t}}v[h++]=g}return v},Ue.prototype.at=ga,Ue.prototype.chain=function(){return va(this)},Ue.prototype.commit=function(){return new $e(this.value(),this.__chain__)},Ue.prototype.next=function(){this.__values__===r&&(this.__values__=vu(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?r:this.__values__[this.__index__++]}},Ue.prototype.plant=function(t){for(var n,e=this;e instanceof Ke;){var o=Fi(e);o.__index__=0,o.__values__=r,n?i.__wrapped__=o:n=o;var i=o;e=e.__wrapped__}return i.__wrapped__=t,n},Ue.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof qe){var n=t;return this.__actions__.length&&(n=new qe(this)),(n=n.reverse()).__actions__.push({func:da,args:[ea],thisArg:r}),new $e(n,this.__chain__)}return this.thru(ea)},Ue.prototype.toJSON=Ue.prototype.valueOf=Ue.prototype.value=function(){return yo(this.__wrapped__,this.__actions__)},Ue.prototype.first=Ue.prototype.head,Qt&&(Ue.prototype[Qt]=function(){return this}),Ue}();mn?((mn.exports=me)._=me,yn._=me):gn._=me}).call(c)}(d,d.exports);var g,y,m,_,b,w,P,C,x,A=d.exports;t.Ki=void 0,(g=t.Ki||(t.Ki={}))[g.Black=1]="Black",g[g.White=-1]="White",g[g.Empty=0]="Empty",t.Theme=void 0,(y=t.Theme||(t.Theme={})).BlackAndWhite="black_and_white",y.Flat="flat",y.Subdued="subdued",y.ShellStone="shell_stone",y.SlateAndShell="slate_and_shell",y.Walnut="walnut",y.Photorealistic="photorealistic",t.AnalysisPointTheme=void 0,(m=t.AnalysisPointTheme||(t.AnalysisPointTheme={})).Default="default",m.Problem="problem",t.Center=void 0,(_=t.Center||(t.Center={})).Left="l",_.Right="r",_.Top="t",_.Bottom="b",_.TopRight="tr",_.TopLeft="tl",_.BottomLeft="bl",_.BottomRight="br",_.Center="c",t.Effect=void 0,(b=t.Effect||(t.Effect={})).None="",b.Ban="ban",b.Dim="dim",b.Highlight="highlight",t.Markup=void 0,function(t){t.Current="cu",t.Circle="ci",t.CircleSolid="cis",t.Square="sq",t.SquareSolid="sqs",t.Triangle="tri",t.Cross="cr",t.Number="num",t.Letter="le",t.PositiveNode="pos",t.NegativeNode="neg",t.NeutralNode="neu",t.Node="node",t.None=""}(t.Markup||(t.Markup={})),t.Cursor=void 0,(w=t.Cursor||(t.Cursor={})).None="",w.BlackStone="b",w.WhiteStone="w",w.Circle="c",w.Square="s",w.Triangle="tri",w.Cross="cr",w.Clear="cl",w.Text="t",t.ProblemAnswerType=void 0,(P=t.ProblemAnswerType||(t.ProblemAnswerType={})).Right="1",P.Wrong="2",P.Variant="3",t.PathDetectionStrategy=void 0,(C=t.PathDetectionStrategy||(t.PathDetectionStrategy={})).Post="post",C.Pre="pre",C.Both="both";var S="https://s.shaowq.com",k=["A","B","C","D","E","F","G","H","J","K","L","M","N","O","P","Q","R","S","T"],T=[19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],R=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s"],M={boardSize:19,padding:15,extent:2,interactive:!1,coordinate:!0,theme:t.Theme.Flat,background:!1,zoom:!1,showAnalysis:!1},O=((x={})[t.Theme.BlackAndWhite]={blacks:[],whites:[]},x[t.Theme.Subdued]={board:"".concat(S,"/assets/theme/subdued/board.png"),blacks:["".concat(S,"/assets/theme/subdued/black.png")],whites:["".concat(S,"/assets/theme/subdued/white.png")]},x[t.Theme.ShellStone]={board:"".concat(S,"/assets/theme/shell-stone/board.png"),blacks:["".concat(S,"/assets/theme/shell-stone/black.png")],whites:["".concat(S,"/assets/theme/shell-stone/white0.png"),"".concat(S,"/assets/theme/shell-stone/white1.png"),"".concat(S,"/assets/theme/shell-stone/white2.png"),"".concat(S,"/assets/theme/shell-stone/white3.png"),"".concat(S,"/assets/theme/shell-stone/white4.png")]},x[t.Theme.SlateAndShell]={board:"".concat(S,"/assets/theme/slate-and-shell/board.png"),blacks:["".concat(S,"/assets/theme/slate-and-shell/slate1.png"),"".concat(S,"/assets/theme/slate-and-shell/slate2.png"),"".concat(S,"/assets/theme/slate-and-shell/slate3.png"),"".concat(S,"/assets/theme/slate-and-shell/slate4.png"),"".concat(S,"/assets/theme/slate-and-shell/slate5.png")],whites:["".concat(S,"/assets/theme/slate-and-shell/shell1.png"),"".concat(S,"/assets/theme/slate-and-shell/shell2.png"),"".concat(S,"/assets/theme/slate-and-shell/shell3.png"),"".concat(S,"/assets/theme/slate-and-shell/shell4.png"),"".concat(S,"/assets/theme/slate-and-shell/shell5.png")]},x[t.Theme.Walnut]={board:"".concat(S,"/assets/theme/walnut/board.jpg"),blacks:["".concat(S,"/assets/theme/walnut/black.png")],whites:["".concat(S,"/assets/theme/walnut/white.png")]},x[t.Theme.Photorealistic]={board:"".concat(S,"/assets/theme/photorealistic/board.png"),blacks:["".concat(S,"/assets/theme/photorealistic/black.png")],whites:["".concat(S,"/assets/theme/photorealistic/white.png")]},x[t.Theme.Flat]={blacks:[],whites:[]},x),E="rgba(136, 170, 60, 1)",B="rgba(206, 210, 83, 1)",I="rgba(242, 217, 60, 1)",N="rgba(236, 146, 73, 1)",L=["B","MN","W"],j=["AB","AE","AW"],W=["A","C","DM","GB","GW","HO","N","UC","V"],D=["BM","DO","IT"],z=["AR","CR","LB","LN","MA","SL","SQ","TR"],F=["AP","CA","FF","GM","ST","SZ"],U=["TE","KO","AN","BR","BT","CP","DT","EV","GN","GC","ON","OT","PB","PC","PW","RE","RO","RU","SO","TM","US","WR","WT"],G=["PI","PAI","NID","PAT"],K=["AB","AE","AW","MA","SL","SQ","TR"],$=new RegExp(/([A-Z]*)\[([\s\S]*?)\]/),q=function(){function t(t,n){this.type="-",this._value="",this._values=[],this.token=t,"string"==typeof n||n instanceof String?this.value=n:Array.isArray(n)&&(this.values=n)}return Object.defineProperty(t.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),t.prototype.toString=function(){return"".concat(this.token).concat(this._values.map((function(t){return"[".concat(t,"]")})).join(""))},t}(),V=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="move",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(q),Z=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="setup",r}return r(n,t),n.from=function(t){var e=t.match($),r="",o=u([],a(t.matchAll(/\[([\s\S]*?)\]/g)),!1).map((function(t){return t[1]}));return e&&(r=e[1]),new n(r,o)},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(q),H=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="node-annotation",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(q),Y=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="move-annotation",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(q),J=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n}(q),X=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="markup",r}return r(n,t),n.from=function(t){var e=t.match($),r="",o=u([],a(t.matchAll(/\[([\s\S]*?)\]/g)),!1).map((function(t){return t[1]}));return e&&(r=e[1]),new n(r,o)},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(q),Q=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="root",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(q),tt=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="game-info",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(q),nt=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="custom",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(q),et=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="Timing",r}return r(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(q),rt=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n}(q),ot=0,it=[],at=function(t){return[t.length,t.length>0?t[0].length:0]},ut=function(t,n,e,r){var o=at(t);n>=0&&n<o[1]&&e>=0&&e<o[0]&&(t[n][e]!==r||it.includes("".concat(n,",").concat(e))?0===t[n][e]&&(ot+=1):(it.push("".concat(n,",").concat(e)),ut(t,n-1,e,r),ut(t,n+1,e,r),ut(t,n,e-1,r),ut(t,n,e+1,r)))},ct=function(t,n,e,r){var o=at(t);return ot=0,it=[],n<0||e<0||n>o[1]-1||e>o[0]-1||0===t[n][e]?{liberty:4,recursionPath:[]}:(ut(t,n,e,r),{liberty:ot,recursionPath:it})},st=function(t,n,e,r){var o=t,i=ct(t,n,e-1,r),a=i.liberty,u=i.recursionPath,c=ct(t,n,e+1,r),s=c.liberty,l=c.recursionPath,f=ct(t,n-1,e,r),h=f.liberty,p=f.recursionPath,v=ct(t,n+1,e,r),d=v.liberty,g=v.recursionPath;return 0===a&&u.forEach((function(t){var n=t.split(",");o[parseInt(n[0])][parseInt(n[1])]=0})),0===s&&l.forEach((function(t){var n=t.split(",");o[parseInt(n[0])][parseInt(n[1])]=0})),0===h&&p.forEach((function(t){var n=t.split(",");o[parseInt(n[0])][parseInt(n[1])]=0})),0===d&&g.forEach((function(t){var n=t.split(",");o[parseInt(n[0])][parseInt(n[1])]=0})),o},lt=function(t,n,e,r){var o=ct(t,n,e-1,r),i=o.liberty,a=o.recursionPath,u=ct(t,n,e+1,r),c=u.liberty,s=u.recursionPath,l=ct(t,n-1,e,r),f=l.liberty,h=l.recursionPath,p=ct(t,n+1,e,r),v=p.liberty,d=p.recursionPath;return 0===i&&a.length>0||(0===c&&s.length>0||(0===f&&h.length>0||0===v&&d.length>0))},ft=function(t,n,e,r){var o=A.cloneDeep(t);if(n<0||e<0)return!1;if(0!==t[n][e])return!1;o[n][e]=r;var i=ct(o,n,e,r).liberty;return!!lt(o,n,e,-r)||!lt(o,n,e,r)&&0!==i};function ht(t,n,e){return void 0===e&&(e=["C","TM","GN"]),e.map((function(e){var r=t.slice(0,n).lastIndexOf(e);if(-1===r)return!1;var o=r+e.length,i=t.indexOf("]",o);return-1!==i&&(n>=o&&n<=i)})).includes(!0)}new v;var pt=function(){function t(t,n){void 0===n&&(n={ignorePropList:[]}),this.content=t,this.parseOptions=n,this.NEW_NODE=";",this.BRANCHING=["(",")"],this.PROPERTY=["[","]"],this.LIST_IDENTITIES=["AW","AB","AE","AR","CR","DD","LB","LN","MA","SL","SQ","TR","VW","TB","TW"],this.NODE_DELIMITERS=[this.NEW_NODE].concat(this.BRANCHING),this.tree=new v,this.root=null,this.node=null,this.currentNode=null,this.parentNode=null,this.nodeProps=new Map,"string"==typeof t?this.parse(t):"object"==typeof t&&this.setRoot(t)}return t.prototype.setRoot=function(t){return this.root=t,this},t.prototype.toSgf=function(){return"(".concat(this.nodeToString(this.root),")")},t.prototype.toSgfWithoutAnalysis=function(){var t="(".concat(this.nodeToString(this.root),")");return A.replace(t,/](A\[.*?\])/g,"]")},t.prototype.parse=function(t){if(t){t=t.replace(/\s+(?![^\[\]]*])/gm,"");for(var n=0,e=0,r=[],o=function(o){var c=t[o];if(i.NODE_DELIMITERS.includes(c)&&!ht(t,o)){var s=t.slice(n,o);if(""!==s){var l=[],f=[],h=[],p=[],v=[],d=[],g=[],y=[],m=u([],a(s.matchAll(RegExp(/\w+(\[[^\]]*?\](?:\r?\n?\s[^\]]*?)*){1,}/,"g"))),!1);if(m.forEach((function(t){var n=t[0].match(/([A-Z]+)\[/);if(n){var e=n[1];L.includes(e)&&l.push(V.from(t[0])),j.includes(e)&&f.push(Z.from(t[0])),F.includes(e)&&h.push(Q.from(t[0])),z.includes(e)&&p.push(X.from(t[0])),U.includes(e)&&v.push(tt.from(t[0])),W.includes(e)&&d.push(H.from(t[0])),D.includes(e)&&g.push(Y.from(t[0])),G.includes(e)&&y.push(nt.from(t[0]))}})),m.length>0){var _=It(i.currentNode,l),b=i.tree.parse({id:_,name:_,index:e,number:0,moveProps:l,setupProps:f,rootProps:h,markupProps:p,gameInfoProps:v,nodeAnnotationProps:d,moveAnnotationProps:g,customProps:y});i.currentNode?(i.currentNode.addChild(b),b.model.number=Bt(b),b.model.children=[b]):(i.root=b,i.parentNode=b),i.currentNode=b,e+=1}}}("("===c&&i.currentNode&&!ht(t,o)&&r.push(i.currentNode),")"===c&&!ht(t,o)&&r.length>0)&&((b=r.pop())&&(i.currentNode=b));i.NODE_DELIMITERS.includes(c)&&!ht(t,o)&&(n=o)},i=this,c=0;c<t.length;c++)o(c)}},t.prototype.nodeToString=function(t){var n=this,e="";return t.walk((function(t){var r=t.model,o=r.rootProps,i=r.moveProps,c=r.customProps,s=r.setupProps,l=r.markupProps,f=r.nodeAnnotationProps,h=r.moveAnnotationProps,p=r.gameInfoProps,v=A.compact(u(u(u(u(u(u(u(u([],a(o),!1),a(c),!1),a(i),!1),a(gt(s)),!1),a(gt(l)),!1),a(p),!1),a(f),!1),a(h),!1));return e+=";",v.forEach((function(t){e+=t.toString()})),t.children.length>1&&t.children.forEach((function(t){e+="(".concat(n.nodeToString(t),")")})),t.children.length<2})),e},t}(),vt=require("crypto-js/sha256"),dt=function(t,n,e){return void 0===n&&(n=1),void 0===e&&(e=3),(Math.round(1e3*t)/1e3*n).toFixed(e)},gt=function(t){return A.filter(t,(function(n,e){return e===A.findLastIndex(t,(function(t){return n.token===t.token&&n.value===t.value}))}))},yt=function(t){return t.model.moveProps.length>0},mt=function(t){return t.model.setupProps.length>0},_t=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return null==e?void 0:e.value.includes("CHOICE")},bt=_t,wt=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return null==e?void 0:e.value.includes("FORCE")},Pt=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return null==e?void 0:e.value.includes("NOTTHIS")},Ct=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return null==e?void 0:e.value.includes("RIGHT")},xt=function(t){var n=t.getPath()[0].first((function(t){return Ct(t)}));return(null==n?void 0:n.model.id)===t.model.id},At=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return null==e?void 0:e.value.includes("VARIANT")},St=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return!(null==e?void 0:e.value.includes("VARIANT"))&&!(null==e?void 0:e.value.includes("RIGHT"))||!e},kt=function(n,e,r,o,i){var a;void 0===r&&(r=t.PathDetectionStrategy.Post);var u=null!=o?o:n.getPath(),c=null!==(a=null==i?void 0:i.filter((function(t){return e(t)})))&&void 0!==a?a:n.all((function(t){return e(t)})),s=u.filter((function(t){return e(t)}));switch(r){case t.PathDetectionStrategy.Post:return c.length>0;case t.PathDetectionStrategy.Pre:return s.length>0;case t.PathDetectionStrategy.Both:return s.length>0||c.length>0;default:return!1}},Tt=function(n,e,r,o){return void 0===e&&(e=t.PathDetectionStrategy.Post),kt(n,Ct,e,r,o)},Rt=function(n,e,r,o){return void 0===e&&(e=t.PathDetectionStrategy.Post),kt(n,_t,e,r,o)},Mt=Rt,Ot=function(n,e,r,o){return void 0===e&&(e=t.PathDetectionStrategy.Post),kt(n,At,e,r,o)},Et=function(n,e,r,o){return void 0===e&&(e=t.PathDetectionStrategy.Post),kt(n,St,e,r,o)},Bt=function(t,n){var e=t.getPath().filter((function(t){return yt(t)})).length;return n&&(e+=n.getPath().filter((function(t){return yt(t)})).length),e},It=function(t,n){void 0===n&&(n=[]);var e="n";if(n.length>0&&(e+="".concat(n[0].token).concat(n[0].value)),t){var r=t.getPath();r.length>0&&(e=r.map((function(t){return t.model.id})).join("=>")+"=>".concat(e))}return vt(e).toString().slice(0,6)},Nt=function(t,n){void 0===n&&(n=1);var e=[{value:1,symbol:""},{value:1e3,symbol:"k"},{value:1e6,symbol:"M"},{value:1e9,symbol:"G"},{value:1e12,symbol:"T"},{value:1e15,symbol:"P"},{value:1e18,symbol:"E"}].slice().reverse().find((function(n){return t>=n.value}));return e?(t/e.value).toFixed(n).replace(/\.0+$|(\.[0-9]*[1-9])0+$/,"$1")+e.symbol:"0"},Lt=function(t){var n="B"===t[0]?1:-1,e=/\[(.*)\]/.exec(t);if(e){var r=e[1];return{x:R.indexOf(r[0]),y:R.indexOf(r[1]),ki:n}}return{x:-1,y:-1,ki:0}},jt=function(t){return{x:k.indexOf(t[0]),y:T.indexOf(parseInt(t.substr(1),0))}},Wt=function(t,n){if(void 0===n&&(n=0),0===n)return t;var e=A.clone(t),r=R.indexOf(t[2])-n;return e.substr(0,2)+R[r]+e.substr(3)},Dt=function(t,n,e){if(void 0===n&&(n=0),void 0===e&&(e=0),"pass"===t)return t;var r=k.indexOf(t[0])+n,o=T.indexOf(parseInt(t.substr(1),0))+e;return"".concat(k[r]).concat(T[o])},zt=function(t,n,e,r){if(void 0===e&&(e=1),void 0===r&&(r=!1),!t||!n)return"";var o=Ft(t,n);r&&(o=-o);var i=o.toFixed(e);return o>0?"+".concat(i):"".concat(i)},Ft=function(t,n){var e="B"===t.currentPlayer?1:-1;return Math.round((n.scoreLead-t.scoreLead)*e*1e3)/1e3},Ut=function(t,n){var e="B"===t.currentPlayer?1:-1;return Math.round((n.winrate-t.winrate)*e*1e3*100)/1e3},Gt=function(t,n){var e=n.prior,r=n.order,o=Ft(t,n);return e>=.5||e>=.1&&r<3&&o>-.3||0===r||o>=0?E:e>.05&&o>-.5||e>.01&&o>-.1?B:e>.01&&o>-1?I:N},Kt=function(t,n){return{id:t,name:t,number:n||0,rootProps:[],moveProps:[],setupProps:[],markupProps:[],gameInfoProps:[],nodeAnnotationProps:[],moveAnnotationProps:[],customProps:[]}},$t=function(t,n,e){var r=new v,i=V.from(t),a=It(n,[i]),u=1;n&&(u=Bt(n)+1);var c=Kt(a,u);return c.moveProps=[i],r.parse(o(o({},c),e))},qt=function(t){return new Array(t[0]).fill(0).map((function(){return new Array(t[1]).fill(0)}))},Vt=function(t){return new Array(t[0]).fill("").map((function(){return new Array(t[1]).fill("")}))},Zt=function(t,n){void 0===n&&(n=19);for(var e=n-1,r=0,o=n-1,i=0,a=0;a<t.length;a++)for(var u=0;u<t[a].length;u++){0!==t[a][u]&&(e>a&&(e=a),r<a&&(r=a),o>u&&(o=u),i<u&&(i=u))}return{leftMost:e,rightMost:r,topMost:o,bottomMost:i}},Ht=function(n,e){void 0===e&&(e=19);var r=Zt(n,e),o=r.leftMost,i=r.rightMost,a=r.topMost<e-1-r.bottomMost,u=o<e-1-i;return a&&u?t.Center.TopLeft:!a&&u?t.Center.BottomLeft:a&&!u?t.Center.TopRight:a||u?t.Center.Center:t.Center.BottomRight},Yt=function(n,e,r){void 0===e&&(e=19),void 0===r&&(r=2);var o=[19,19],i=Ht(n),a=Zt(n,e),u=a.leftMost,c=a.rightMost,s=a.topMost,l=a.bottomMost;return i===t.Center.TopLeft&&(o[0]=c+r+1,o[1]=l+r+1),i===t.Center.TopRight&&(o[0]=e-u+r,o[1]=l+r+1),i===t.Center.BottomLeft&&(o[0]=c+r+1,o[1]=e-s+r),i===t.Center.BottomRight&&(o[0]=e-u+r,o[1]=e-s+r),o[0]=Math.min(o[0],e),o[1]=Math.min(o[1],e),o},Jt=function(t,n,e){void 0===n&&(n=2),void 0===e&&(e=19);var r=Zt(t),o=r.leftMost,i=r.rightMost,a=r.topMost,u=r.bottomMost,c=e-1;return[[o-n<0?0:o-n,a-n<0?0:a-n],[i+n>c?c:i+n,u+n>c?c:u+n]]},Xt=function(n,e,r,o){void 0===e&&(e=19),void 0===r&&(r=19),void 0===o&&(o=19);var i=o-e,a=o-r,u=i,c=a;switch(Ht(n)){case t.Center.TopLeft:u=0,c=-a;break;case t.Center.TopRight:u=i,c=-a;break;case t.Center.BottomLeft:u=0,c=0;break;case t.Center.BottomRight:u=i,c=0}return{x:u,y:c}};function Qt(t,n,e){void 0===t&&(t=qt([19,19])),void 0===e&&(e=!1);for(var r=t.length,o=0,i=t[0].length,a=0,u=!0,c=0;c<t.length;c++)for(var s=0;s<t[0].length;s++)0!==t[c][s]&&(u=!1,r=Math.min(r,c),o=Math.max(o,c),i=Math.min(i,s),a=Math.max(a,s));if(u)return[[0,t.length-1],[0,t[0].length-1]];if(e)r=Math.max(0,r-n),o=Math.min(t.length-1,o+n),i=Math.max(0,i-n),a=Math.min(t[0].length-1,a+n);else{var l=Math.max(r-n,0),f=Math.min(o+n,t.length-1),h=Math.max(i-n,0),p=Math.min(a+n,t[0].length-1),v=Math.max(f-l,p-h);(o=(r=l)+v)>=t.length&&(r=(o=t.length-1)-v),(a=(i=h)+v)>=t[0].length&&(i=(a=t[0].length-1)-v)}return[[r,o],[i,a]]}function tn(t,n,e,r){if(n<0||e<0)return t;var o=A.cloneDeep(t);return o[n][e]=r,st(o,n,e,-r)}var nn=function(t,n){t.getPath().forEach((function(t){var e=t.model.setupProps;e.filter((function(t){return t.value===n})).length>0?t.model.setupProps=e.filter((function(t){return t.value!==n})):e.forEach((function(e){e.values=e.values.filter((function(t){return t!==n})),0===e.values.length&&(t.model.setupProps=t.model.setupProps.filter((function(t){return t.token!==e.token})))}))}))},en=function(n,e){void 0===e&&(e=19);var r,o,i=n.getPath(),a=i[0],u=0,c=on(n,e),s=qt([c,c]),l=qt([c,c]),f=Vt([c,c]),h=Vt([c,c]);return i.forEach((function(n,e){var a=n.model,l=a.moveProps,p=a.setupProps;a.rootProps,p.length>0&&(u+=1),p.forEach((function(t){t.values.forEach((function(n){var e=R.indexOf(n[0]),i=R.indexOf(n[1]);e<0||i<0||e<c&&i<c&&(r=e,o=i,s[e][i]="AB"===t.token?1:-1,"AE"===t.token&&(s[e][i]=0))}))})),l.forEach((function(a){var l=R.indexOf(a.value[0]),p=R.indexOf(a.value[1]);l<0||p<0||l<c&&p<c&&(r=l,o=p,s=tn(s,l,p,"B"===a.token?t.Ki.Black:t.Ki.White),void 0!==r&&void 0!==o&&r>=0&&o>=0&&(h[r][o]=(n.model.number||e-u).toString()),e===i.length-1&&(f[r][o]=t.Markup.Current))}));for(var v=0;v<c;v++)for(var d=0;d<c;d++)0===s[v][d]&&(h[v][d]="")})),a&&a.all((function(n){var e=n.model,r=e.moveProps,o=e.setupProps;return e.rootProps,o.length>0&&(u+=1),o.forEach((function(n){n.values.forEach((function(e){var r=R.indexOf(e[0]),o=R.indexOf(e[1]);r>=0&&o>=0&&r<c&&o<c&&(l[r][o]=t.Ki.Black,"AE"===n.token&&(l[r][o]=0))}))})),r.forEach((function(n){var e=R.indexOf(n.value[0]),r=R.indexOf(n.value[1]);e>=0&&r>=0&&e<c&&r<c&&(l[e][r]=t.Ki.Black)})),!0})),n.model.markupProps.forEach((function(n){var e=n.token;n.values.forEach((function(n){var r=R.indexOf(n[0]),o=R.indexOf(n[1]);if(!(r<0||o<0)&&r<c&&o<c){var i=void 0;switch(e){case"CR":i=t.Markup.Circle;break;case"SQ":i=t.Markup.Square;break;case"TR":i=t.Markup.Triangle;break;case"MA":i=t.Markup.Cross;break;default:i=n.split(":")[1]}f[r][o]=i}}))})),{mat:s,visibleAreaMat:l,markup:f,numMarkup:h}},rn=function(t,n){if(t)return L.includes(n)?t.model.moveProps.find((function(t){return t.token===n})):W.includes(n)?t.model.nodeAnnotationProps.find((function(t){return t.token===n})):D.includes(n)?t.model.moveAnnotationProps.find((function(t){return t.token===n})):F.includes(n)?t.model.rootProps.find((function(t){return t.token===n})):j.includes(n)?t.model.setupProps.find((function(t){return t.token===n})):z.includes(n)?t.model.markupProps.find((function(t){return t.token===n})):U.includes(n)?t.model.gameInfoProps.find((function(t){return t.token===n})):null},on=function(t,n){var e;void 0===n&&(n=19);var r=t.getPath()[0];return Math.min(parseInt((null===(e=rn(r,"SZ"))||void 0===e?void 0:e.value)||n),29)},an=function(n,e){if(void 0===e&&(e=t.Ki.Black),n){var r=n.first((function(t){return mt(t)}));if(r){var o=r.first((function(t){return yt(t)}));return o?un(o):e}}return console.warn("Default first to move color",e),e},un=function(n,e){var r,o;void 0===e&&(e=t.Ki.Black);var i=null===(o=null===(r=n.model)||void 0===r?void 0:r.moveProps)||void 0===o?void 0:o[0];switch(null==i?void 0:i.token){case"W":return t.Ki.White;case"B":return t.Ki.Black;default:return e}},cn=function(){function t(t,n,e,r){this.ctx=t,this.x=n,this.y=e,this.ki=r,this.globalAlpha=1,this.size=0}return t.prototype.draw=function(){console.log("TBD")},t.prototype.setGlobalAlpha=function(t){this.globalAlpha=t},t.prototype.setSize=function(t){this.size=t},t}(),sn=function(t){function n(n,e,r,o){return t.call(this,n,e,r,o)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.size,i=t.ki,a=t.globalAlpha;o<=0||(n.save(),n.beginPath(),n.globalAlpha=a,n.arc(e,r,o/2,0,2*Math.PI,!0),n.lineWidth=1,n.strokeStyle="#000",1===i?n.fillStyle="#000":-1===i&&(n.fillStyle="#fff"),n.fill(),n.stroke(),n.restore())},n}(cn),ln=function(t){function n(n,e,r,o,i,a,u){var c=t.call(this,n,e,r,o)||this;return c.mod=i,c.blacks=a,c.whites=u,c}return r(n,t),n.prototype.draw=function(){var t,n=this,e=n.ctx,r=n.x,o=n.y,i=n.size,a=n.ki,u=n.blacks,c=n.whites,s=n.mod;i<=0||(t=1===a?u[s%u.length]:c[s%c.length])&&e.drawImage(t,r-i/2,o-i/2,i,i)},n}(cn),fn=function(){function n(n,e,r,o,i,a,u,c){void 0===u&&(u=t.AnalysisPointTheme.Default);var s=this;this.ctx=n,this.x=e,this.y=r,this.r=o,this.rootInfo=i,this.moveInfo=a,this.theme=u,this.outlineColor=c,this.drawProblemAnalysisPoint=function(){var t=s,n=t.ctx,e=t.x,r=t.y,o=t.r,i=t.rootInfo,a=t.moveInfo,u=t.outlineColor,c=a.order,l=Gt(i,a);if(c<5){n.beginPath(),n.arc(e,r,o,0,2*Math.PI,!0),n.lineWidth=0,n.strokeStyle="rgba(255,255,255,0)";var f=n.createRadialGradient(e,r,.9*o,e,r,o);f.addColorStop(0,l),f.addColorStop(.9,"rgba(255, 255, 255, 0"),n.fillStyle=f,n.fill(),u&&(n.beginPath(),n.arc(e,r,o,0,2*Math.PI,!0),n.lineWidth=4,n.strokeStyle=u,n.stroke());var h=o/1.5;n.font="".concat(.8*h,"px Tahoma"),n.fillStyle="black",n.textAlign="center",n.font="".concat(h,"px Tahoma");var p=zt(i,a);n.fillText(p,e,r),n.font="".concat(.8*h,"px Tahoma"),n.fillStyle="black",n.textAlign="center",n.fillText(Nt(a.visits),e,r+o/2+h/8)}else s.drawCandidatePoint()},this.drawDefaultAnalysisPoint=function(){var t=s,n=t.ctx,e=t.x,r=t.y,o=t.r,i=t.rootInfo,a=t.moveInfo,u=a.order,c=Gt(i,a);if(u<5){n.beginPath(),n.arc(e,r,o,0,2*Math.PI,!0),n.lineWidth=0,n.strokeStyle="rgba(255,255,255,0)";var l=n.createRadialGradient(e,r,.9*o,e,r,o);l.addColorStop(0,c),l.addColorStop(.9,"rgba(255, 255, 255, 0"),n.fillStyle=l,n.fill();var f=o/1.5;n.font="".concat(.8*f,"px Tahoma"),n.fillStyle="black",n.textAlign="center";var h="B"===i.currentPlayer?a.winrate:1-a.winrate;n.fillText(dt(h,100,1),e,r-o/2+f/5),n.font="".concat(f,"px Tahoma");var p=zt(i,a);n.fillText(p,e,r+f/3),n.font="".concat(.8*f,"px Tahoma"),n.fillStyle="black",n.textAlign="center",n.fillText(Nt(a.visits),e,r+o/2+f/3);var v=a.order;n.fillText((v+1).toString(),e+o,r-o/2)}else s.drawCandidatePoint()},this.drawCandidatePoint=function(){var t=s,n=t.ctx,e=t.x,r=t.y,o=t.r,i=t.rootInfo,a=t.moveInfo,u=Gt(i,a);n.beginPath(),n.arc(e,r,.6*o,0,2*Math.PI,!0),n.lineWidth=0,n.strokeStyle="rgba(255,255,255,0)";var c=n.createRadialGradient(e,r,.4*o,e,r,o);c.addColorStop(0,u),c.addColorStop(.95,"rgba(255, 255, 255, 0"),n.fillStyle=c,n.fill(),n.stroke()}}return n.prototype.draw=function(){var n=this,e=n.ctx;n.x,n.y;var r=n.r;n.rootInfo,n.moveInfo;var o=n.theme;r<0||(e.save(),e.shadowOffsetX=0,e.shadowOffsetY=0,e.shadowColor="#fff",e.shadowBlur=0,o===t.AnalysisPointTheme.Default?this.drawDefaultAnalysisPoint():o===t.AnalysisPointTheme.Problem&&this.drawProblemAnalysisPoint(),e.restore())},n}(),hn=function(){function t(t,n,e,r,o,i){void 0===i&&(i=""),this.ctx=t,this.x=n,this.y=e,this.s=r,this.ki=o,this.val=i,this.globalAlpha=1,this.color=""}return t.prototype.draw=function(){console.log("TBD")},t.prototype.setGlobalAlpha=function(t){this.globalAlpha=t},t.prototype.setColor=function(t){this.color=t},t}(),pn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.globalAlpha,u=t.color,c=.65*(.5*o);n.save(),n.beginPath(),n.globalAlpha=a,n.lineWidth=2,1===i?n.strokeStyle="#fff":-1===i?n.strokeStyle="#000":n.lineWidth=3,u&&(n.strokeStyle=u),c>0&&(n.arc(e,r,c,0,2*Math.PI,!0),n.stroke()),n.restore()},n}(hn),vn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.globalAlpha,u=.5*o,c=.5*u;n.save(),n.beginPath(),n.lineWidth=3,n.globalAlpha=a,1===i?n.strokeStyle="#fff":-1===i?n.strokeStyle="#000":c=.58*u,n.moveTo(e-c,r-c),n.lineTo(e+c,r+c),n.moveTo(e+c,r-c),n.lineTo(e-c,r+c),n.closePath(),n.stroke(),n.restore()},n}(hn),dn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.val,u=t.globalAlpha,c=.8*o,s=c/1.5;n.save(),n.globalAlpha=u,1===i?n.fillStyle="#fff":-1===i&&(n.fillStyle="#000"),s=1===a.toString().length?c/1.5:2===a.toString().length?c/1.8:c/2,n.font="bold ".concat(s,"px Tahoma"),n.textAlign="center",n.textBaseline="middle",n.fillText(a.toString(),e,r+2),n.restore()},n}(hn),gn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.globalAlpha;n.save(),n.beginPath(),n.lineWidth=2,n.globalAlpha=a;var u=.55*o;1===i?n.strokeStyle="#fff":-1===i?n.strokeStyle="#000":(n.strokeStyle="#000",n.lineWidth=3),n.rect(e-u/2,r-u/2,u,u),n.stroke(),n.restore()},n}(hn),yn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.globalAlpha,u=.5*o,c=.75*u;n.save(),n.beginPath(),n.globalAlpha=a,n.moveTo(e,r-c),n.lineTo(e-c*Math.cos(.523),r+c*Math.sin(.523)),n.lineTo(e+c*Math.cos(.523),r+c*Math.sin(.523)),n.lineWidth=2,1===i?n.strokeStyle="#fff":-1===i?n.strokeStyle="#000":(n.lineWidth=3,c=.7*u),n.closePath(),n.stroke(),n.restore()},n}(hn),mn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s;t.ki;var i=t.color,a=t.globalAlpha,u=.4*(.5*o);n.save(),n.beginPath(),n.globalAlpha=a,n.lineWidth=4,n.strokeStyle=i,u>0&&(n.arc(e,r,u,0,2*Math.PI,!0),n.stroke()),n.restore()},n}(hn),_n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s;t.ki;var i=t.color,a=t.globalAlpha,u=.5*(.5*o);n.save(),n.beginPath(),n.globalAlpha=a,n.lineWidth=4,n.strokeStyle=i,n.fillStyle=i,u>0&&(n.arc(e,r,u,0,2*Math.PI,!0),n.stroke()),n.restore(),n.save(),n.beginPath(),n.fillStyle=i,u>0&&(n.arc(e,r,.4*u,0,2*Math.PI,!0),n.fill()),n.restore()},n}(hn),bn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.globalAlpha,u=t.color,c=.65*(.25*o);n.save(),n.beginPath(),n.globalAlpha=a,n.lineWidth=2,1===i?n.fillStyle="#fff":-1===i?n.fillStyle="#000":n.lineWidth=3,u&&(n.fillStyle=u),c>0&&(n.arc(e,r,c,0,2*Math.PI,!0),n.fill()),n.restore()},n}(hn),wn=function(){function t(t,n,e,r,o){this.ctx=t,this.x=n,this.y=e,this.size=r,this.ki=o,this.globalAlpha=1,this.color=""}return t.prototype.play=function(){console.log("TBD")},t}(),Pn="function"==typeof Buffer;"function"==typeof TextDecoder&&new TextDecoder;var Cn,xn="function"==typeof TextEncoder?new TextEncoder:void 0,An=Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=");Cn={},An.forEach((function(t,n){return Cn[t]=n}));var Sn=String.fromCharCode.bind(String);"function"==typeof Uint8Array.from&&Uint8Array.from.bind(Uint8Array);var kn="function"==typeof btoa?function(t){return btoa(t)}:Pn?function(t){return Buffer.from(t,"binary").toString("base64")}:function(t){for(var n,e,r,o,i="",a=t.length%3,u=0;u<t.length;){if((e=t.charCodeAt(u++))>255||(r=t.charCodeAt(u++))>255||(o=t.charCodeAt(u++))>255)throw new TypeError("invalid character found");i+=An[(n=e<<16|r<<8|o)>>18&63]+An[n>>12&63]+An[n>>6&63]+An[63&n]}return a?i.slice(0,a-3)+"===".substring(a):i},Tn=Pn?function(t){return Buffer.from(t).toString("base64")}:function(t){for(var n=[],e=0,r=t.length;e<r;e+=4096)n.push(Sn.apply(null,t.subarray(e,e+4096)));return kn(n.join(""))},Rn=function(t){if(t.length<2)return(n=t.charCodeAt(0))<128?t:n<2048?Sn(192|n>>>6)+Sn(128|63&n):Sn(224|n>>>12&15)+Sn(128|n>>>6&63)+Sn(128|63&n);var n=65536+1024*(t.charCodeAt(0)-55296)+(t.charCodeAt(1)-56320);return Sn(240|n>>>18&7)+Sn(128|n>>>12&63)+Sn(128|n>>>6&63)+Sn(128|63&n)},Mn=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,On=Pn?function(t){return Buffer.from(t,"utf8").toString("base64")}:xn?function(t){return Tn(xn.encode(t))}:function(t){return kn(t.replace(Mn,Rn))},En='<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-ban" viewBox="0 0 16 16">\n  <path d="M15 8a6.97 6.97 0 0 0-1.71-4.584l-9.874 9.875A7 7 0 0 0 15 8M2.71 12.584l9.874-9.875a7 7 0 0 0-9.874 9.874ZM16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0"/>\n</svg>',Bn=function(t){function n(n,e,r,o,i){var a=t.call(this,n,e,r,o,i)||this;a.ctx=n,a.x=e,a.y=r,a.size=o,a.ki=i,a.img=new Image,a.alpha=0,a.fadeInDuration=200,a.fadeOutDuration=150,a.stayDuration=400,a.startTime=performance.now(),a.isFadingOut=!1,a.play=function(){if(a.img.complete){var t=a,n=t.ctx,e=t.x,r=t.y,o=t.size,i=t.img,u=t.fadeInDuration,c=t.fadeOutDuration,s=performance.now();a.startTime||(a.startTime=s),n.clearRect(e-o/2,r-o/2,o,o),n.globalAlpha=a.alpha,n.drawImage(i,e-o/2,r-o/2,o,o),n.globalAlpha=1;var l=s-a.startTime;if(a.isFadingOut){var f=s-a.startTime;if(a.alpha=Math.max(1-f/c,0),f>=c)return a.alpha=0,void n.clearRect(e-o/2,r-o/2,o,o)}else a.alpha=Math.min(l/u,1),l>=u&&(a.alpha=1,setTimeout((function(){a.isFadingOut=!0,a.startTime=performance.now()}),a.stayDuration));requestAnimationFrame(a.play)}},new Blob([En],{type:"image/svg+xml"});var u="data:image/svg+xml;base64,".concat(function(t){return arguments.length>1&&void 0!==arguments[1]&&arguments[1]?function(t){return t.replace(/=/g,"").replace(/[+\/]/g,(function(t){return"+"==t?"-":"_"}))}(On(t)):On(t)}(En));return a.img=new Image,a.img.src=u,a}return r(n,t),n}(wn),In={};function Nn(){return/Mobi|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}var Ln=1;"undefined"!=typeof window&&(Ln=window.devicePixelRatio||1);var jn=function(){function n(n){void 0===n&&(n={});var e=this;this.defaultOptions={boardSize:19,dynamicPadding:!1,padding:10,extent:3,interactive:!1,coordinate:!0,theme:t.Theme.BlackAndWhite,analysisPointTheme:t.AnalysisPointTheme.Default,background:!1,showAnalysis:!1,adaptiveBoardLine:!0,boardEdgeLineWidth:5,boardLineWidth:1,boardLineExtent:.5,themeFlatBoardColor:"#ECB55A",positiveNodeColor:"#4d7c0f",negativeNodeColor:"#b91c1c",neutralNodeColor:"#a16207",defaultNodeColor:"#404040",themeResources:O,moveSound:!1,adaptiveStarSize:!0,starSize:3},this.cursor=t.Cursor.None,this.cursorValue="",this.touchMoving=!1,this.touchStartPoint=new DOMPoint,this.cursorPoint=new DOMPoint,this.actualCursorPoint=new DOMPoint,this.setCursorWithRender=function(t,n){var r,o;void 0===n&&(n=0);var i=e.options.padding,a=e.calcSpaceAndPadding().space,u=e.transMat.inverse().transformPoint(t),c=Math.round((u.x-i+a/2)/a),s=Math.round((u.y-i+a/2)/a)+n,l=new DOMPoint(c*a,s*a),f=e.transMat.transformPoint(l);if(e.actualCursorPoint=f,e.actualCursorPosition=[c-1,s-1],1===(null===(o=null===(r=e.preventMoveMat)||void 0===r?void 0:r[c-1])||void 0===o?void 0:o[s-1]))return e.cursorPosition=[-1,-1],e.cursorPoint=new DOMPoint,void e.drawCursor();e.cursorPoint=f,e.cursorPosition=[c-1,s-1],e.drawCursor(),Nn()&&e.drawBoard()},this.onMouseMove=function(t){if(e.cursorCanvas){t.preventDefault();var n=new DOMPoint(t.offsetX*Ln,t.offsetY*Ln);e.setCursorWithRender(n)}},this.calcTouchPoint=function(t){var n=new DOMPoint,r=e.cursorCanvas;if(!r)return n;var o=r.getBoundingClientRect(),i=t.changedTouches;return n=new DOMPoint((i[0].clientX-o.left)*Ln,(i[0].clientY-o.top)*Ln)},this.onTouchStart=function(t){if(e.cursorCanvas){t.preventDefault(),e.touchMoving=!0;var n=e.calcTouchPoint(t);e.touchStartPoint=n,e.setCursorWithRender(n)}},this.onTouchMove=function(t){if(e.cursorCanvas){t.preventDefault(),e.touchMoving=!0;var n=e.calcTouchPoint(t),r=0;(Math.abs(n.x-e.touchStartPoint.x)>10||Math.abs(n.y-e.touchStartPoint.y)>10)&&(r=-3),e.setCursorWithRender(n,r)}},this.onTouchEnd=function(){e.touchMoving=!1},this.calcCenter=function(){var n=e.visibleArea,r=e.options.boardSize;return 0===n[0][0]&&n[0][1]===r-1||0===n[1][0]&&n[1][1]===r-1?t.Center.Center:0===n[0][0]?0===n[1][0]?t.Center.TopLeft:n[1][1]===r-1?t.Center.BottomLeft:t.Center.Left:n[0][1]===r-1?0===n[1][0]?t.Center.TopRight:n[1][1]===r-1?t.Center.BottomRight:t.Center.Right:0===n[1][0]?t.Center.Top:n[1][1]===r-1?t.Center.Bottom:t.Center.Center},this.clearAllCanvas=function(){e.clearCanvas(e.board),e.clearCanvas(),e.clearCanvas(e.markupCanvas),e.clearCanvas(e.effectCanvas),e.clearCursorCanvas(),e.clearAnalysisCanvas()},this.clearBoard=function(){if(e.board){var t=e.board.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,t.canvas.width,t.canvas.height),t.restore())}},this.clearCanvas=function(t){if(void 0===t&&(t=e.canvas),t){var n=t.getContext("2d");n&&(n.save(),n.setTransform(1,0,0,1,0,0),n.clearRect(0,0,t.width,t.height),n.restore())}},this.clearMarkupCanvas=function(){if(e.markupCanvas){var t=e.markupCanvas.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,e.markupCanvas.width,e.markupCanvas.height),t.restore())}},this.clearCursorCanvas=function(){if(e.cursorCanvas){e.options.boardSize;var t=e.cursorCanvas.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,e.cursorCanvas.width,e.cursorCanvas.height),t.restore())}},this.clearAnalysisCanvas=function(){if(e.analysisCanvas){var t=e.analysisCanvas.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,e.analysisCanvas.width,e.analysisCanvas.height),t.restore())}},this.drawAnalysis=function(n){void 0===n&&(n=e.analysis);var r=e.analysisCanvas,o=e.options,i=o.theme,a=void 0===i?t.Theme.BlackAndWhite:i,u=o.analysisPointTheme,c=o.boardSize;o.forceAnalysisBoardSize;var s=e,l=s.mat,f=s.markup;if(r&&n){var h=r.getContext("2d");if(h){e.clearAnalysisCanvas();var p=n.rootInfo;n.moveInfos.forEach((function(r){if("pass"!==r.move){var o=JSON.parse(n.id),i=c,s=Dt(r.move,0,i-o.by),v=jt(s),d=v.x,g=v.y;if(0===l[d][g]){var y,m=e.calcSpaceAndPadding(),_=m.space,b=m.scaledPadding,w=b+d*_,P=b+g*_;h.save(),a!==t.Theme.Subdued&&a!==t.Theme.BlackAndWhite&&a!==t.Theme.Flat?(h.shadowOffsetX=3,h.shadowOffsetY=3,h.shadowColor="#555",h.shadowBlur=8):(h.shadowOffsetX=0,h.shadowOffsetY=0,h.shadowColor="#fff",h.shadowBlur=0),f[d][g].includes(t.Markup.PositiveNode)&&(y=e.options.positiveNodeColor),f[d][g].includes(t.Markup.NegativeNode)&&(y=e.options.negativeNodeColor),f[d][g].includes(t.Markup.NeutralNode)&&(y=e.options.neutralNodeColor),new fn(h,w,P,.46*_,p,r,u,y).draw(),h.restore()}}}))}}},this.drawMarkup=function(n,r,o,i){void 0===n&&(n=e.mat),void 0===r&&(r=e.markup),void 0===o&&(o=e.markupCanvas),void 0===i&&(i=!0);var a=o;if(a){i&&e.clearCanvas(a);for(var u=function(o){for(var i=function(i){var u=r[o][i];null==u||u.split("|").forEach((function(r){if(null!==r&&""!==r){var u,c=e.calcSpaceAndPadding(),s=c.space,l=c.scaledPadding,f=l+o*s,h=l+i*s,p=n[o][i],v=a.getContext("2d");if(v){switch(r){case t.Markup.Circle:u=new pn(v,f,h,s,p);break;case t.Markup.Current:u=new bn(v,f,h,s,p);break;case t.Markup.PositiveNode:(u=new _n(v,f,h,s,p,t.Markup.Circle)).setColor(e.options.positiveNodeColor);break;case t.Markup.NegativeNode:case t.Markup.NeutralNode:case t.Markup.Node:var d=e.options.defaultNodeColor;r===t.Markup.NegativeNode?d=e.options.negativeNodeColor:r===t.Markup.NeutralNode&&(d=e.options.neutralNodeColor),(u=new mn(v,f,h,s,p,t.Markup.Circle)).setColor(d);break;case t.Markup.Square:u=new gn(v,f,h,s,p);break;case t.Markup.Triangle:u=new yn(v,f,h,s,p);break;case t.Markup.Cross:u=new vn(v,f,h,s,p);break;default:""!==r&&(u=new dn(v,f,h,s,p,r))}null==u||u.draw()}}}))},u=0;u<r[o].length;u++)i(u)},c=0;c<r.length;c++)u(c)}},this.drawBoard=function(t,n){void 0===t&&(t=e.board),void 0===n&&(n=!0),n&&e.clearCanvas(t),e.drawBan(t),e.drawBoardLine(t),e.drawStars(t),e.options.coordinate&&e.drawCoordinate()},this.drawBan=function(n){void 0===n&&(n=e.board);var r=e.options,o=r.theme,i=r.themeResources,a=r.padding;if(n){n.style.borderRadius="2px";var u=n.getContext("2d");if(u)if(o===t.Theme.BlackAndWhite)n.style.boxShadow="0px 0px 0px #000000",u.fillStyle="#FFFFFF",u.fillRect(-a,-a,n.width+a,n.height+a);else if(o===t.Theme.Flat)u.fillStyle=e.options.themeFlatBoardColor,u.fillRect(-a,-a,n.width+a,n.height+a);else if(o===t.Theme.Walnut&&void 0!==i[o].board){var c=i[o].board||"",s=In[c];s&&u.drawImage(s,-a,-a,n.width+a,n.height+a)}else{c=i[o].board||"";var l=In[c];if(l){var f=u.createPattern(l,"repeat");f&&(u.fillStyle=f,u.fillRect(0,0,n.width,n.height))}}}},this.drawBoardLine=function(t){if(void 0===t&&(t=e.board),t){var n=e,r=n.visibleArea,o=n.options,i=o.zoom,a=o.boardSize,u=o.boardLineWidth,c=o.boardEdgeLineWidth,s=o.boardLineExtent,l=o.adaptiveBoardLine,f=t.getContext("2d");if(f){var h=e.calcSpaceAndPadding(),p=h.space,v=h.scaledPadding,d=i?s*p:0;f.fillStyle="#000000";for(var g=l?.002*t.width:c,y=l?.001*t.width:u,m=r[0][0];m<=r[0][1];m++){f.beginPath(),0===r[0][0]&&0===m||r[0][1]===a-1&&m===a-1?f.lineWidth=g:f.lineWidth=y,Nn()&&m===e.cursorPosition[0]&&e.touchMoving&&(f.lineWidth=2*f.lineWidth);var _=0===m||m===a-1?v+r[1][0]*p-g/2:v+r[1][0]*p;Nn()&&(_+=Ln/2);var b=0===m||m===a-1?p*r[1][1]+v+g/2:p*r[1][1]+v;Nn()&&(b-=Ln/2),r[1][0]>0&&(_-=d),r[1][1]<a-1&&(b+=d),f.moveTo(m*p+v,_),f.lineTo(m*p+v,b),f.stroke()}for(m=r[1][0];m<=r[1][1];m++){f.beginPath(),0===r[1][0]&&0===m||r[1][1]===a-1&&m===a-1?f.lineWidth=g:f.lineWidth=y,Nn()&&m===e.cursorPosition[1]&&e.touchMoving&&(f.lineWidth=2*f.lineWidth);var w=0===m||m===a-1?v+r[0][0]*p-g/2:v+r[0][0]*p,P=0===m||m===a-1?p*r[0][1]+v+g/2:p*r[0][1]+v;Nn()&&(w+=Ln/2),Nn()&&(P-=Ln/2),r[0][0]>0&&(w-=d),r[0][1]<a-1&&(P+=d),f.moveTo(w,m*p+v),f.lineTo(P,m*p+v),f.stroke()}}}},this.drawStars=function(t){if(void 0===t&&(t=e.board),t&&19===e.options.boardSize){var n=e.options,r=n.starSize,o=n.adaptiveStarSize,i=e.visibleArea,a=t.getContext("2d"),u=o?.0035*t.width:r;if(a){var c=e.calcSpaceAndPadding(),s=c.space,l=c.scaledPadding;a.stroke(),[3,9,15].forEach((function(t){[3,9,15].forEach((function(n){t>=i[0][0]&&t<=i[0][1]&&n>=i[1][0]&&n<=i[1][1]&&(a.beginPath(),a.arc(t*s+l,n*s+l,u,0,2*Math.PI,!0),a.fillStyle="black",a.fill())}))}))}}},this.drawCoordinate=function(){var n=e,r=n.board,o=n.options,i=n.visibleArea;if(r){var a=o.boardSize;o.zoom;var u=o.padding,c=o.boardLineExtent,s=i[0][1]-i[0][0]+1,l=r.getContext("2d"),f=e.calcSpaceAndPadding(),h=f.space,p=f.scaledPadding;if(l){l.textBaseline="middle",l.textAlign="center",l.fillStyle="#000000",l.font="bold ".concat(h/3,"px Helvetica");var v=e.calcCenter(),d=h/1.5;v===t.Center.Center&&0===i[0][0]&&i[0][1]===a-1&&(d-=p/2),k.forEach((function(n,e){var r=h*e+p,o=d,a=d;v!==t.Center.TopLeft&&v!==t.Center.TopRight&&v!==t.Center.Top||(o-=h*c),v!==t.Center.BottomLeft&&v!==t.Center.BottomRight&&v!==t.Center.Bottom||(a-=h*c/2);var f=i[1][0]*h+u-o,g=f+s*h+2*a;e>=i[0][0]&&e<=i[0][1]&&(v!==t.Center.BottomLeft&&v!==t.Center.BottomRight&&v!==t.Center.Bottom&&l.fillText(n,r,f),v!==t.Center.TopLeft&&v!==t.Center.TopRight&&v!==t.Center.Top&&l.fillText(n,r,g))})),T.slice(-e.options.boardSize).forEach((function(n,e){var r=h*e+p,o=d,a=d;v!==t.Center.TopLeft&&v!==t.Center.BottomLeft&&v!==t.Center.Left||(o-=h*c),v!==t.Center.TopRight&&v!==t.Center.BottomRight&&v!==t.Center.Right||(a-=h*c/2);var f=i[0][0]*h+u-o,g=f+s*h+2*a;e>=i[1][0]&&e<=i[1][1]&&(v!==t.Center.TopRight&&v!==t.Center.BottomRight&&v!==t.Center.Right&&l.fillText(n.toString(),f,r),v!==t.Center.TopLeft&&v!==t.Center.BottomLeft&&v!==t.Center.Left&&l.fillText(n.toString(),g,r))}))}}},this.calcSpaceAndPadding=function(t){void 0===t&&(t=e.canvas);var n=0,r=0,o=0;if(t){var i=e.options,a=i.padding,u=i.boardSize,c=i.boardLineExtent,s=i.zoom,l=e.visibleArea;(0!==l[0][0]&&l[0][1]===u-1||0!==l[1][0]&&l[1][1]===u-1)&&(o=c),(0!==l[0][0]&&l[0][1]!==u-1||0!==l[1][0]&&l[1][1]!==u-1)&&(o=2*c);var f=s?u+o:u;r=a+(n=(t.width-2*a)/Math.ceil(f))/2}return{space:n,scaledPadding:r,scaledBoardExtent:o}},this.playEffect=function(n,r,o){void 0===n&&(n=e.mat),void 0===r&&(r=e.effectMat),void 0===o&&(o=!0);var i=e.effectCanvas;if(i){o&&e.clearCanvas(i);for(var a=0;a<r.length;a++)for(var u=0;u<r[a].length;u++){var c=r[a][u],s=e.calcSpaceAndPadding(),l=s.space,f=s.scaledPadding,h=f+a*l,p=f+u*l,v=n[a][u],d=i.getContext("2d");if(d){if(c===t.Effect.Ban)new Bn(d,h,p,l,v).play();r[a][u]=t.Effect.None}}var g=e.options.boardSize;e.setEffectMat(Vt([g,g]))}},this.drawCursor=function(){var n,r,o=e.cursorCanvas;if(o){if(e.clearCursorCanvas(),e.cursor===t.Cursor.None)return;if(Nn()&&!e.touchMoving)return;var i=e.options.padding,u=o.getContext("2d"),c=e.calcSpaceAndPadding().space,s=e,l=s.visibleArea,f=s.cursor,h=s.cursorValue,p=a(e.cursorPosition,2),v=p[0],d=p[1];if(v<l[0][0]||v>l[0][1])return;if(d<l[1][0]||d>l[1][1])return;var g=v*c+c/2+i,y=d*c+c/2+i,m=(null===(r=null===(n=e.mat)||void 0===n?void 0:n[v])||void 0===r?void 0:r[d])||t.Ki.Empty;if(u){var _=void 0,b=.8*c;f===t.Cursor.Circle?(_=new pn(u,g,y,c,m)).setGlobalAlpha(.8):f===t.Cursor.Square?(_=new gn(u,g,y,c,m)).setGlobalAlpha(.8):f===t.Cursor.Triangle?(_=new yn(u,g,y,c,m)).setGlobalAlpha(.8):f===t.Cursor.Cross?(_=new vn(u,g,y,c,m)).setGlobalAlpha(.8):f===t.Cursor.Text?(_=new dn(u,g,y,c,m,h)).setGlobalAlpha(.8):m===t.Ki.Empty&&f===t.Cursor.BlackStone?((_=new sn(u,g,y,t.Ki.Black)).setSize(b),_.setGlobalAlpha(.5)):m===t.Ki.Empty&&f===t.Cursor.WhiteStone?((_=new sn(u,g,y,t.Ki.White)).setSize(b),_.setGlobalAlpha(.5)):f===t.Cursor.Clear&&(_=new sn(u,g,y,t.Ki.Empty)).setSize(b),null==_||_.draw()}}},this.drawStones=function(n,r,o){void 0===n&&(n=e.mat),void 0===r&&(r=e.canvas),void 0===o&&(o=!0);var i=e.options,a=i.theme,u=void 0===a?t.Theme.BlackAndWhite:a,c=i.themeResources;if(o&&e.clearCanvas(),r)for(var s=0;s<n.length;s++)for(var l=0;l<n[s].length;l++){var f=n[s][l];if(0!==f){var h=r.getContext("2d");if(h){var p=e.calcSpaceAndPadding(),v=p.space,d=p.scaledPadding,g=d+s*v,y=d+l*v;h.save(),u!==t.Theme.Subdued&&u!==t.Theme.BlackAndWhite&&u!==t.Theme.Flat?(h.shadowOffsetX=3,h.shadowOffsetY=3,h.shadowColor="#555",h.shadowBlur=8):(h.shadowOffsetX=0,h.shadowOffsetY=0,h.shadowBlur=0);var m=void 0;switch(u){case t.Theme.BlackAndWhite:case t.Theme.Flat:(m=new sn(h,g,y,f)).setSize(.45*v*2);break;default:var _=c[u].blacks.map((function(t){return In[t]})),b=c[u].whites.map((function(t){return In[t]}));(m=new ln(h,g,y,f,s+10+l,_,b)).setSize(.45*v*2)}m.draw(),h.restore()}}}},this.options=o(o({},this.defaultOptions),n);var r=this.options.boardSize;this.mat=qt([r,r]),this.preventMoveMat=qt([r,r]),this.markup=Vt([r,r]),this.effectMat=Vt([r,r]),this.turn=t.Ki.Black,this.cursorPosition=[-1,-1],this.actualCursorPosition=[-1,-1],this.maxhv=r,this.transMat=new DOMMatrix,this.analysis=null,this.visibleArea=[[0,r-1],[0,r-1]]}return n.prototype.setTurn=function(t){this.turn=t},n.prototype.setBoardSize=function(t){this.options.boardSize=Math.min(t,29)},n.prototype.resize=function(){if(this.canvas&&this.cursorCanvas&&this.dom&&this.board&&this.markupCanvas&&this.analysisCanvas&&this.effectCanvas){var t=[this.board,this.canvas,this.markupCanvas,this.cursorCanvas,this.analysisCanvas,this.effectCanvas],n=this.options.size,e=this.dom.clientWidth;t.forEach((function(t){n?(t.width=n*Ln,t.height=n*Ln):(t.style.width=e+"px",t.style.height=e+"px",t.width=Math.floor(e*Ln),t.height=Math.floor(e*Ln))})),this.render()}},n.prototype.createCanvas=function(t,n){void 0===n&&(n=!0);var e=document.createElement("canvas");return e.style.position="absolute",e.id=t,n||(e.style.pointerEvents="none"),e},n.prototype.init=function(t){var n=this,e=this.options.boardSize;this.mat=qt([e,e]),this.markup=Vt([e,e]),this.transMat=new DOMMatrix,this.board=this.createCanvas("ghostban-board"),this.canvas=this.createCanvas("ghostban-canvas"),this.markupCanvas=this.createCanvas("ghostban-markup",!1),this.cursorCanvas=this.createCanvas("ghostban-cursor"),this.analysisCanvas=this.createCanvas("ghostban-analysis",!1),this.effectCanvas=this.createCanvas("ghostban-effect",!1),this.dom=t,t.innerHTML="",t.appendChild(this.board),t.appendChild(this.canvas),t.appendChild(this.markupCanvas),t.appendChild(this.analysisCanvas),t.appendChild(this.cursorCanvas),t.appendChild(this.effectCanvas),this.resize(),this.renderInteractive(),"undefined"!=typeof window&&window.addEventListener("resize",(function(){n.resize()}))},n.prototype.setOptions=function(t){this.options=o(o({},this.options),t),this.renderInteractive(),this.render()},n.prototype.setMat=function(t){this.mat=t,this.visibleAreaMat||(this.visibleAreaMat=t)},n.prototype.setVisibleAreaMat=function(t){this.visibleAreaMat=t},n.prototype.setPreventMoveMat=function(t){this.preventMoveMat=t},n.prototype.setEffectMat=function(t){this.effectMat=t},n.prototype.setMarkup=function(t){this.markup=t},n.prototype.setCursor=function(t,n){void 0===n&&(n=""),this.cursor=t,this.cursorValue=n},n.prototype.renderInteractive=function(){var t=this.cursorCanvas;t&&(t.removeEventListener("mousemove",this.onMouseMove),t.removeEventListener("mouseout",this.onMouseMove),t.removeEventListener("touchstart",this.onTouchStart),t.removeEventListener("touchmove",this.onTouchMove),t.removeEventListener("touchend",this.onTouchEnd),this.options.interactive&&(t.addEventListener("mousemove",this.onMouseMove),t.addEventListener("mouseout",this.onMouseMove),t.addEventListener("touchstart",this.onTouchStart),t.addEventListener("touchmove",this.onTouchMove),t.addEventListener("touchend",this.onTouchEnd)),this.clearCursorCanvas())},n.prototype.setAnalysis=function(t){this.analysis=t,t?this.options.showAnalysis&&this.drawAnalysis(t):this.clearAnalysisCanvas()},n.prototype.setTheme=function(t,n){var e=this;void 0===n&&(n={});var r=this.options.themeResources;if(r[t]){var i=r[t],c=i.board,s=i.blacks,l=i.whites;this.options.theme=t,this.options=o(o(o({},this.options),{theme:t}),n),function(t,n){for(var e=0,r=function(){++e===t.length&&n()},o=0;o<t.length;o++)In[t[o]]||(In[t[o]]=new Image,In[t[o]].src=t[o],In[t[o]].onload=function(){r()},In[t[o]].onerror=function(){r()})}(A.compact(u(u([c],a(s),!1),a(l),!1)),(function(){e.drawBoard(),e.render()})),this.drawBoard(),this.render()}},n.prototype.calcDynamicPadding=function(t){var n=this.options.coordinate,e=this.canvas;if(e){var r=e.width/(t+2)/2,o=e.width/(t+2)/4;this.options.padding=n?r:o}},n.prototype.zoomBoard=function(n){void 0===n&&(n=!1);var e=this,r=e.canvas,o=e.analysisCanvas,i=e.board,a=e.cursorCanvas,u=e.markupCanvas,c=e.effectCanvas;if(r){var s=this.options,l=s.boardSize,f=s.extent,h=s.boardLineExtent,p=s.padding,v=s.dynamicPadding,d=Qt(this.visibleAreaMat,f,!1),g=null==r?void 0:r.getContext("2d"),y=null==i?void 0:i.getContext("2d"),m=null==a?void 0:a.getContext("2d"),_=null==u?void 0:u.getContext("2d"),b=null==o?void 0:o.getContext("2d"),w=null==c?void 0:c.getContext("2d"),P=n?d:[[0,l-1],[0,l-1]];this.visibleArea=P;var C=Math.max(P[0][1]-P[0][0],P[1][1]-P[1][0]);if(v?this.calcDynamicPadding(C):this.options.padding=M.padding,n){var x=this.calcSpaceAndPadding().space,A=this.calcCenter();v?this.calcDynamicPadding(C):this.options.padding=M.padding;var S=2*h+1;A!==t.Center.TopRight&&A!==t.Center.TopLeft&&A!==t.Center.BottomRight&&A!==t.Center.BottomLeft||(S=h+.5);var k=C+S;if(k<l){var T=(r.width-2*p)/(k*x),R=P[0][0]*x*T+p*T-p-x*S*T/2+x*T/2,O=P[1][0]*x*T+p*T-p-x*S*T/2+x*T/2;this.transMat=new DOMMatrix,this.transMat.translateSelf(-R,-O),this.transMat.scaleSelf(T,T),null==g||g.setTransform(this.transMat),null==y||y.setTransform(this.transMat),null==b||b.setTransform(this.transMat),null==m||m.setTransform(this.transMat),null==_||_.setTransform(this.transMat),null==w||w.setTransform(this.transMat)}else this.resetTransform()}else this.resetTransform()}},n.prototype.calcBoardVisibleArea=function(t){this.zoomBoard(this.options.zoom)},n.prototype.resetTransform=function(){var t=this,n=t.canvas,e=t.analysisCanvas,r=t.board,o=t.cursorCanvas,i=t.markupCanvas,a=t.effectCanvas,u=null==n?void 0:n.getContext("2d"),c=null==r?void 0:r.getContext("2d"),s=null==o?void 0:o.getContext("2d"),l=null==i?void 0:i.getContext("2d"),f=null==e?void 0:e.getContext("2d"),h=null==a?void 0:a.getContext("2d");this.transMat=new DOMMatrix,null==u||u.resetTransform(),null==c||c.resetTransform(),null==f||f.resetTransform(),null==s||s.resetTransform(),null==l||l.resetTransform(),null==h||h.resetTransform()},n.prototype.render=function(){var t=this.mat;this.mat&&t[0]&&(this.options.boardSize=t[0].length),this.zoomBoard(this.options.zoom),this.zoomBoard(this.options.zoom),this.clearAllCanvas(),this.drawBoard(),this.drawStones(),this.drawMarkup(),this.drawCursor(),this.options.showAnalysis&&this.drawAnalysis()},n.prototype.renderInOneCanvas=function(t){void 0===t&&(t=this.canvas),this.clearAllCanvas(),this.drawBoard(t,!1),this.drawStones(this.mat,t,!1),this.drawMarkup(this.mat,this.markup,t,!1)},n}();return t.A1_LETTERS=k,t.A1_LETTERS_WITH_I=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S"],t.A1_NUMBERS=T,t.AnnotationProp=J,t.CUSTOM_PROP_LIST=G,t.CustomProp=nt,t.DEFAULT_BOARD_SIZE=19,t.DEFAULT_OPTIONS=M,t.DOT_SIZE=3,t.EXPAND_H=5,t.EXPAND_V=5,t.GAME_INFO_PROP_LIST=U,t.GameInfoProp=tt,t.GhostBan=jn,t.LIGHT_GREEN_RGB=E,t.LIGHT_RED_RGB=N,t.LIGHT_YELLOW_RGB=B,t.LIST_OF_POINTS_PROP=K,t.MARKUP_PROP_LIST=z,t.MAX_BOARD_SIZE=29,t.MISCELLANEOUS_PROP_LIST=["FG","PM","VW"],t.MOVE_ANNOTATION_PROP_LIST=D,t.MOVE_PROP_LIST=L,t.MarkupProp=X,t.MiscellaneousProp=rt,t.MoveAnnotationProp=Y,t.MoveProp=V,t.NODE_ANNOTATION_PROP_LIST=W,t.NodeAnnotationProp=H,t.RESPONSE_TIME=100,t.ROOT_PROP_LIST=F,t.RootProp=Q,t.SETUP_PROP_LIST=j,t.SGF_LETTERS=R,t.SetupProp=Z,t.Sgf=pt,t.SgfPropBase=q,t.THEME_RESOURCES=O,t.TIMING_PROP_LIST=["BL","OB","OW","WL"],t.TimingProp=et,t.YELLOW_RGB=I,t.__calcSHA_Deprecated=function(t,n,e){void 0===n&&(n=[]),void 0===e&&(e=[]);var r="r";n.length>0&&(r="m"),e.length>0&&(r="s");var o="".concat(r);n.length>0&&(o+="".concat(n[0].token).concat(n[0].value));var i=o;return t&&(i=t.getPath().map((function(t){return t.model.id})).join("=>")+"=>"+o),vt(i).toString().slice(0,6)},t.a1ToIndex=function(t,n){return void 0===n&&(n=19),k.indexOf(t[0])*n+T.indexOf(parseInt(t.substr(1),0))},t.a1ToPos=jt,t.a1ToSGF=function(t,n,e,r){if(void 0===n&&(n="B"),void 0===e&&(e=0),void 0===r&&(r=0),"pass"===t)return"".concat(n,"[]");var o=k.indexOf(t[0])+e,i=T.indexOf(parseInt(t.substr(1),0))+r;return"".concat(n,"[").concat(R[o]).concat(R[i],"]")},t.addMoveToCurrentNode=function(n,e,r,o,i){if(i!==t.Ki.Empty){var a;if(ft(e,r,o,i)){var u=R[r]+R[o],c=i===t.Ki.Black?"B":"W",s=It(n,[V.from("".concat(c,"[").concat(u,"]"))]),l=n.children.filter((function(t){return t.model.id===s}));l.length>0?a=l[0]:(a=$t("".concat(c,"[").concat(u,"]"),n),n.addChild(a))}return a}},t.addStoneToCurrentNode=function(n,e,r,o,i){var c=R[r]+R[o],s=i===t.Ki.White?"AW":"AB",l=rn(n,s),f=!1;return e[r][o]!==t.Ki.Empty?nn(n,c):(l?l.values=u(u([],a(l.values),!1),[c],!1):n.model.setupProps=u(u([],a(n.model.setupProps),!1),[new Z(s,c)],!1),f=!0),f},t.buildMoveNode=$t,t.calcAnalysisPointColor=Gt,t.calcAvoidMovesForPartialAnalysis=function(t,n){var e,r,o,u;void 0===n&&(n=19);var c=[],s=a(t,2),l=a(s[0],2),f=l[0],h=l[1],p=a(s[1],2),v=p[0],d=p[1];try{for(var g=i(k.slice(0,n)),y=g.next();!y.done;y=g.next()){var m=y.value;try{for(var _=(o=void 0,i(T.slice(-n))),b=_.next();!b.done;b=_.next()){var w=b.value,P=k.indexOf(m),C=T.indexOf(w);(P<f||P>v||C<h||C>d)&&c.push("".concat(m).concat(w))}}catch(t){o={error:t}}finally{try{b&&!b.done&&(u=_.return)&&u.call(_)}finally{if(o)throw o.error}}}}catch(t){e={error:t}}finally{try{y&&!y.done&&(r=g.return)&&r.call(g)}finally{if(e)throw e.error}}return c},t.calcBoardSize=Yt,t.calcCenter=Ht,t.calcDoubtfulMovesThresholdRange=function(t){return t>=25?{evil:{winrateRange:[-1,-.15],scoreRange:[-100,-3]},bad:{winrateRange:[-.15,-.1],scoreRange:[-3,-2]},poor:{winrateRange:[-.1,-.05],scoreRange:[-2,-1]},ok:{winrateRange:[-.05,-.02],scoreRange:[-1,-.5]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=23&&t<25?{evil:{winrateRange:[-1,-.2],scoreRange:[-100,-8]},bad:{winrateRange:[-.2,-.15],scoreRange:[-8,-4]},poor:{winrateRange:[-.15,-.05],scoreRange:[-4,-2]},ok:{winrateRange:[-.05,-.02],scoreRange:[-2,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=20&&t<23?{evil:{winrateRange:[-1,-.25],scoreRange:[-100,-12]},bad:{winrateRange:[-.25,-.1],scoreRange:[-12,-5]},poor:{winrateRange:[-.1,-.05],scoreRange:[-5,-2]},ok:{winrateRange:[-.05,-.02],scoreRange:[-2,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=18&&t<20?{evil:{winrateRange:[-1,-.3],scoreRange:[-100,-15]},bad:{winrateRange:[-.3,-.1],scoreRange:[-15,-7]},poor:{winrateRange:[-.1,-.05],scoreRange:[-7,-5]},ok:{winrateRange:[-.05,-.02],scoreRange:[-5,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=13&&t<18?{evil:{winrateRange:[-1,-.35],scoreRange:[-100,-20]},bad:{winrateRange:[-.35,-.12],scoreRange:[-20,-10]},poor:{winrateRange:[-.12,-.08],scoreRange:[-10,-5]},ok:{winrateRange:[-.08,-.02],scoreRange:[-5,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=8&&t<13?{evil:{winrateRange:[-1,-.4],scoreRange:[-100,-25]},bad:{winrateRange:[-.4,-.15],scoreRange:[-25,-10]},poor:{winrateRange:[-.15,-.1],scoreRange:[-10,-5]},ok:{winrateRange:[-.1,-.02],scoreRange:[-5,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=0&&t<8?{evil:{winrateRange:[-1,-.45],scoreRange:[-100,-35]},bad:{winrateRange:[-.45,-.2],scoreRange:[-35,-20]},poor:{winrateRange:[-.2,-.1],scoreRange:[-20,-10]},ok:{winrateRange:[-.1,-.02],scoreRange:[-10,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:{evil:{winrateRange:[-1,-.3],scoreRange:[-100,-30]},bad:{winrateRange:[-.3,-.2],scoreRange:[-30,-20]},poor:{winrateRange:[-.2,-.1],scoreRange:[-20,-10]},ok:{winrateRange:[-.1,-.02],scoreRange:[-10,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}},t.calcMatAndMarkup=en,t.calcMost=Zt,t.calcOffset=function(n){var e=Yt(n),r=19-e[0],o=19-e[1],i=r,a=o;switch(Ht(n)){case t.Center.TopLeft:i=0,a=o;break;case t.Center.TopRight:i=-r,a=o;break;case t.Center.BottomLeft:i=0,a=0;break;case t.Center.BottomRight:i=-r,a=0}return{x:i,y:a}},t.calcPartialArea=Jt,t.calcPreventMoveMat=function(t,n){if(void 0===n&&(n=19),!t)return qt([n,n]);var e=on(t,n),r=qt([e,e]),o=[];return t.hasChildren()&&(o=t.children.filter((function(t){return Pt(t)}))),wt(t)&&(r.forEach((function(t){return t.fill(1)})),t.hasChildren()&&t.children.forEach((function(t){t.model.moveProps.forEach((function(t){var n=R.indexOf(t.value[0]),o=R.indexOf(t.value[1]);n>=0&&o>=0&&n<e&&o<e&&(r[n][o]=0)}))})),o.forEach((function(t){t.model.moveProps.forEach((function(t){var n=R.indexOf(t.value[0]),o=R.indexOf(t.value[1]);n>=0&&o>=0&&n<e&&o<e&&(r[n][o]=1)}))}))),r},t.calcPreventMoveMatForDisplayOnly=function(t,n){if(void 0===n&&(n=19),!t)return qt([n,n]);var e=on(t,n),r=qt([e,e]);return r.forEach((function(t){return t.fill(1)})),t.hasChildren()&&t.children.forEach((function(t){t.model.moveProps.forEach((function(t){var n=R.indexOf(t.value[0]),o=R.indexOf(t.value[1]);n>=0&&o>=0&&n<e&&o<e&&(r[n][o]=0)}))})),r},t.calcSHA=It,t.calcScoreDiff=Ft,t.calcScoreDiffText=zt,t.calcTsumegoFrame=function(n,e,r,o,i,u){void 0===r&&(r=19),void 0===o&&(o=7.5),void 0===i&&(i=t.Ki.Black);var c=A.cloneDeep(n),s=Jt(n,e,r),l=Ht(n);return function(n){for(var e=a(s[0],2),o=e[0],u=e[1],c=a(s[1],2),f=c[0],h=c[1],p=o;p<=f;p++)for(var v=u;v<=h;v++)(l===t.Center.TopLeft&&(p===f&&p<r-1||v===h&&v<r-1||p===o&&p>0||v===u&&v>0)||l===t.Center.TopRight&&(p===o&&p>0||v===h&&v<r-1||p===f&&p<r-1||v===u&&v>0)||l===t.Center.BottomLeft&&(p===f&&p<r-1||v===u&&v>0||p===o&&p>0||v===h&&v<r-1)||l===t.Center.BottomRight&&(p===o&&p>0||v===u&&v>0||p===f&&p<r-1||v===h&&v<r-1)||l===t.Center.Center)&&(n[p][v]=i)}(c),function(n){for(var e=i*o,u=a(s[0],2),c=u[0],f=u[1],h=a(s[1],2),p=h[0],v=h[1],d=i===t.Ki.Black,g=p-c,y=v-f,m=Math.floor((361-g*y)/2)-e-10,_=0,b=0;b<r;b++)for(var w=0;w<r;w++)if(b<c||b>p||w<f||w>v){_++;var P=t.Ki.Empty;l===t.Center.TopLeft||l===t.Center.BottomLeft?P=d!==_<=m?t.Ki.White:t.Ki.Black:l!==t.Center.TopRight&&l!==t.Center.BottomRight||(P=d!==_<=m?t.Ki.Black:t.Ki.White),(b+w)%2==0&&Math.abs(_-m)>r&&(P=t.Ki.Empty),n[b][w]=P}}(c),c},t.calcVariationsMarkup=function(n,e,r){void 0===e&&(e="append"),void 0===r&&(r=19);var o=en(n),i=o.mat,a=o.markup,u=on(n,r);return n.hasChildren()&&n.children.forEach((function(n){n.model.moveProps.forEach((function(r){var o=R.indexOf(r.value[0]),c=R.indexOf(r.value[1]);if(!(o<0||c<0)&&o<u&&c<u){var s=t.Markup.NeutralNode;if(Et(n)&&(s=t.Markup.NegativeNode),Tt(n)&&(s=t.Markup.PositiveNode),i[o][c]===t.Ki.Empty)switch(e){case"prepend":a[o][c]=s+"|"+a[o][c];break;case"replace":a[o][c]=s;break;default:a[o][c]+="|"+s}}}))})),a},t.calcVisibleArea=Qt,t.calcWinrateDiff=Ut,t.calcWinrateDiffText=function(t,n,e,r){if(void 0===e&&(e=1),void 0===r&&(r=!1),!t||!n)return"";var o=Ut(t,n);r&&(o=-o);var i=o.toFixed(e);return o>=0?"+".concat(i,"%"):"".concat(i,"%")},t.canMove=ft,t.clearStoneFromCurrentNode=nn,t.convertStepsForAI=function(t,n){void 0===n&&(n=0);var e=A.clone(t);e=e.map((function(t){return Wt(t,n)}));var r="(;FF[4]GM[1]SZ[".concat(19-n,"]GN[226]PB[Black]HA[0]PW[White]KM[7.5]DT[2017-08-01]TM[1800]RU[Chinese]CP[Copyright ghost-go.com]AP[ghost-go.com]PL[Black];"),o=0,i="";return t.forEach((function(t,n){t[0]===i[0]&&("B"===t[0]?(e.splice(n+o,0,"W[tt]"),o+=1):(e.splice(n+o,0,"B[tt]"),o+=1)),i=t})),"".concat(r).concat(e.join(";"),")")},t.convertStoneTypeToString=function(t){return 1===t?"B":"W"},t.cutMoveNodes=function(t,n){for(var e=A.cloneDeep(t);e&&e.hasChildren()&&0===e.model.moveProps.length;)(e=e.children[0]).children=[];if(n)for(;e&&e.parent&&!e.isRoot();)e=e.parent;return e},t.detectST=function(t){var n=t.getPath()[0].model.rootProps.find((function(t){return"ST"===t.token})),e=!1,r=!1,o=!1,i=(null==n?void 0:n.value)||"0";return i&&("0"===i?(o=!1,r=!0,e=!0):"1"===i?(o=!0,r=!1,e=!0):"2"===i?(o=!1,r=!0,e=!1):"3"===i&&(o=!0,r=!1,e=!1)),{showVariationsMarkup:e,showChildrenMarkup:r,showSiblingsMarkup:o}},t.empty=Vt,t.execCapture=st,t.extractAnswerType=function(t){var n=t.model.customProps.find((function(t){return"PAT"===t.token}));return null==n?void 0:n.value},t.extractBoardSize=on,t.extractPAI=function(t){var n=t.model.customProps.find((function(t){return"PAI"===t.token}));if(n)return JSON.parse(n.value)},t.extractPI=function(t){var n=t.model.customProps.find((function(t){return"PI"===t.token}));if(n)return JSON.parse(n.value)},t.findProp=rn,t.findProps=function(t,n){return L.includes(n)?t.model.moveProps.filter((function(t){return t.token===n})):W.includes(n)?t.model.nodeAnnotationProps.filter((function(t){return t.token===n})):D.includes(n)?t.model.moveAnnotationProps.filter((function(t){return t.token===n})):F.includes(n)?t.model.rootProps.filter((function(t){return t.token===n})):j.includes(n)?t.model.setupProps.filter((function(t){return t.token===n})):z.includes(n)?t.model.markupProps.filter((function(t){return t.token===n})):U.includes(n)?t.model.gameInfoProps.filter((function(t){return t.token===n})):[]},t.genMove=function(t,n,e,r,o){var i,a=function(t){var n=A.compact(t.getPath().map((function(t){var n;return null===(n=t.model.moveProps[0])||void 0===n?void 0:n.toString()}))).join(";");return n},u=function(t){if(!t.hasChildren()){var o=a(t);Ct(t)?n&&n(o):At(t)?r&&r(o):e&&e(o)}};if(t.hasChildren()){var c=t.children.filter((function(t){return Tt(t)})),s=t.children.filter((function(t){return Et(t)})),l=t.children.filter((function(t){return Ot(t)}));i=t,Tt(t)&&c.length>0?i=A.sample(c):Et(t)&&s.length>0?i=A.sample(s):Ot(l)&&l.length>0?i=A.sample(l):Ct(t)?n(a(i)):e(a(i)),u(i)}else u(t);return i},t.getDeduplicatedProps=gt,t.getFirstToMoveColorFromRoot=an,t.getFirstToMoveColorFromSgf=function(n,e){void 0===e&&(e=t.Ki.Black);var r=new pt(n);return r.root&&an(r.root,e),console.warn("Default first to move color",e),e},t.getIndexFromAnalysis=function(t){return/indexes/.test(t.id)?JSON.parse(t.id).indexes[0]:""},t.getLastIndex=function(t){var n=t;return t.walk((function(t){return n=t,!0})),n.model.index},t.getMoveColor=un,t.getNodeNumber=Bt,t.getRoot=function(t){for(var n=t;n&&n.parent&&!n.isRoot();)n=n.parent;return n},t.handleMove=function(n,e,r,o,i,a){if(o!==t.Ki.Empty)if(ft(n,e,r,o)){var u=R[e]+R[r],c=o===t.Ki.Black?"B":"W",s=It(i,[V.from("".concat(c,"[").concat(u,"]"))]),l=i.children.filter((function(t){return t.model.id===s})),f=void 0;l.length>0?f=l[0]:(f=$t("".concat(c,"[").concat(u,"]"),i),i.addChild(f)),a&&a(f,!0)}else a&&a(i,!1)},t.inChoicePath=Rt,t.inFirstBranchRightPath=function(n,e,r,o){if(void 0===e&&(e=t.PathDetectionStrategy.Pre),!Tt(n))return!1;var i=null!=r?r:n.getPath(),a=null!=o?o:n.all((function(){return!0})),u=[];switch(e){case t.PathDetectionStrategy.Post:u=a.filter((function(t){return t.getIndex()>0}));break;case t.PathDetectionStrategy.Pre:u=i.filter((function(t){return t.getIndex()>0}));break;case t.PathDetectionStrategy.Both:u=i.concat(a).filter((function(t){return t.getIndex()>0}))}return 0===u.length},t.inFirstRightPath=function(n,e,r,o){return void 0===e&&(e=t.PathDetectionStrategy.Post),kt(n,xt,e,r,o)},t.inPath=kt,t.inRightPath=Tt,t.inTargetPath=Mt,t.inVariantPath=Ot,t.inWrongPath=Et,t.initNodeData=Kt,t.initialRootNode=function(t){return void 0===t&&(t=["FF[4]","GM[1]","CA[UTF-8]","AP[ghostgo:0.1.0]","SZ[19]","ST[0]"]),(new v).parse({id:"1b16b1",name:0,index:0,number:0,rootProps:t.map((function(t){return Q.from(t)})),moveProps:[],setupProps:[],markupProps:[],gameInfoProps:[],nodeAnnotationProps:[],moveAnnotationProps:[],customProps:[]})},t.isAnswerNode=function(t,n){var e,r=null===(e=t.model.customProps)||void 0===e?void 0:e.find((function(t){return"PAT"===t.token}));return(null==r?void 0:r.value)===n},t.isCharacterInNode=ht,t.isChoiceNode=_t,t.isFirstRightNode=xt,t.isForceNode=wt,t.isMainPath=function(t){return 0===A.sum(t.getPath().map((function(t){return t.getIndex()})))},t.isMoveNode=yt,t.isPreventMoveNode=Pt,t.isRightNode=Ct,t.isRootNode=function(t){return t.model.rootProps.length>0||t.isRoot()},t.isSetupNode=mt,t.isTargetNode=bt,t.isVariantNode=At,t.isWrongNode=St,t.matToListOfTuples=function(t,n,e){void 0===n&&(n=0),void 0===e&&(e=0);for(var r=[],o=0;o<t.length;o++)for(var i=0;i<t[o].length;i++){var a=t[o][i];if(0!==a){var u=k[o+n],c=T[i+e],s=1===a?"B":"W";r.push([s,u+c])}}return r},t.matToPosition=function(t,n,e){var r="";n=null!=n?n:0,e=null!=e?e:19-t.length;for(var o=0;o<t.length;o++)for(var i=0;i<t[o].length;i++){var a=t[o][i];if(0!==a){var u=k[o+n],c=T[i+e];r+="".concat(1===a?"b":"w"," ").concat(u).concat(c," ")}}return r},t.move=tn,t.nFormatter=Nt,t.offsetA1Move=Dt,t.pathToAiMoves=function(t,n,e){return void 0===n&&(n=0),void 0===e&&(e=0),t.filter((function(t){return t.model.moveProps.length>0})).map((function(t){var r=t.model.moveProps[0],o=k[R.indexOf(r.value[0])+n],i=T[R.indexOf(r.value[1])+e];return[r.token,o+i]}))},t.pathToIndexes=function(t){return t.map((function(t){return t.model.id}))},t.pathToInitialStones=function(t,n,e){void 0===n&&(n=0),void 0===e&&(e=0);var r=t.filter((function(t){return t.model.setupProps.length>0})).map((function(t){return t.model.setupProps.map((function(t){return t.values.map((function(r){var o=k[R.indexOf(r[0])+n],i=T[R.indexOf(r[1])+e];return["AB"===t.token?"B":"W",o+i]}))}))}));return A.flattenDepth(r[0],1)},t.posToSgf=function(t,n,e){var r=R[t],o=R[n];return 0===e?"":1===e?"B[".concat(r).concat(o,"]"):-1===e?"W[".concat(r).concat(o,"]"):""},t.reverseOffset=Xt,t.reverseOffsetA1Move=function(t,n,e,r){if(void 0===r&&(r=19),"pass"===t)return t;var o=JSON.parse(e.id),i=Xt(n,o.bx,o.by,r),a=i.x,u=i.y,c=k.indexOf(t[0])+a,s=T.indexOf(parseInt(t.substr(1),0))+u;return"".concat(k[c]).concat(T[s])},t.round2=function(t,n,e){return void 0===n&&(n=1),void 0===e&&(e=2),(Math.round(100*t)/100*n).toFixed(e)},t.round3=dt,t.sgfOffset=Wt,t.sgfToA1=function(t){var n=Lt(t),e=n.x,r=n.y;return k[e]+T[r]},t.sgfToPos=Lt,t.showKi=function(t,n,e){void 0===e&&(e=!0);var r=A.cloneDeep(t),o=!1;return n.forEach((function(t){var n=Lt(t),i=n.x,a=n.y,u=n.ki;e?ft(r,i,a,u)&&(r[i][a]=u,r=st(r,i,a,-u),o=!0):(r[i][a]=u,o=!0)})),{arrangement:r,hasMoved:o}},t.zeros=qt,t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubWluLmpzIiwic291cmNlcyI6WyIuLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwiLi4vbm9kZV9tb2R1bGVzL3RyZWUtbW9kZWwvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvbWVyZ2Vzb3J0L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2ZpbmQtaW5zZXJ0LWluZGV4L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC9sb2Rhc2guanMiLCIuLi8uLi90eXBlcy50cyIsIi4uLy4uL2NvbnN0LnRzIiwiLi4vLi4vY29yZS9wcm9wcy50cyIsIi4uLy4uL2JvYXJkY29yZS50cyIsIi4uLy4uL2NvcmUvaGVscGVycy50cyIsIi4uLy4uL2NvcmUvc2dmLnRzIiwiLi4vLi4vaGVscGVyLnRzIiwiLi4vLi4vc3RvbmVzL2Jhc2UudHMiLCIuLi8uLi9zdG9uZXMvQ29sb3JTdG9uZS50cyIsIi4uLy4uL3N0b25lcy9JbWFnZVN0b25lLnRzIiwiLi4vLi4vc3RvbmVzL0FuYWx5c2lzUG9pbnQudHMiLCIuLi8uLi9tYXJrdXBzL01hcmt1cEJhc2UudHMiLCIuLi8uLi9tYXJrdXBzL0NpcmNsZU1hcmt1cC50cyIsIi4uLy4uL21hcmt1cHMvQ3Jvc3NNYXJrdXAudHMiLCIuLi8uLi9tYXJrdXBzL1RleHRNYXJrdXAudHMiLCIuLi8uLi9tYXJrdXBzL1NxdWFyZU1hcmt1cC50cyIsIi4uLy4uL21hcmt1cHMvVHJpYW5nbGVNYXJrdXAudHMiLCIuLi8uLi9tYXJrdXBzL05vZGVNYXJrdXAudHMiLCIuLi8uLi9tYXJrdXBzL1Bvc2l0aXZlTm9kZU1hcmt1cC50cyIsIi4uLy4uL21hcmt1cHMvQ2lyY2xlU29saWRNYXJrdXAudHMiLCIuLi8uLi9lZmZlY3RzL0VmZmVjdEJhc2UudHMiLCIuLi9ub2RlX21vZHVsZXMvanMtYmFzZTY0L2Jhc2U2NC5tanMiLCIuLi8uLi9lZmZlY3RzL0JhbkVmZmVjdC50cyIsIi4uLy4uL2dob3N0YmFuLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSwgU3VwcHJlc3NlZEVycm9yLCBTeW1ib2wgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXNEZWNvcmF0ZShjdG9yLCBkZXNjcmlwdG9ySW4sIGRlY29yYXRvcnMsIGNvbnRleHRJbiwgaW5pdGlhbGl6ZXJzLCBleHRyYUluaXRpYWxpemVycykge1xyXG4gICAgZnVuY3Rpb24gYWNjZXB0KGYpIHsgaWYgKGYgIT09IHZvaWQgMCAmJiB0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRnVuY3Rpb24gZXhwZWN0ZWRcIik7IHJldHVybiBmOyB9XHJcbiAgICB2YXIga2luZCA9IGNvbnRleHRJbi5raW5kLCBrZXkgPSBraW5kID09PSBcImdldHRlclwiID8gXCJnZXRcIiA6IGtpbmQgPT09IFwic2V0dGVyXCIgPyBcInNldFwiIDogXCJ2YWx1ZVwiO1xyXG4gICAgdmFyIHRhcmdldCA9ICFkZXNjcmlwdG9ySW4gJiYgY3RvciA/IGNvbnRleHRJbltcInN0YXRpY1wiXSA/IGN0b3IgOiBjdG9yLnByb3RvdHlwZSA6IG51bGw7XHJcbiAgICB2YXIgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JJbiB8fCAodGFyZ2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGNvbnRleHRJbi5uYW1lKSA6IHt9KTtcclxuICAgIHZhciBfLCBkb25lID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgIHZhciBjb250ZXh0ID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4pIGNvbnRleHRbcF0gPSBwID09PSBcImFjY2Vzc1wiID8ge30gOiBjb250ZXh0SW5bcF07XHJcbiAgICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4uYWNjZXNzKSBjb250ZXh0LmFjY2Vzc1twXSA9IGNvbnRleHRJbi5hY2Nlc3NbcF07XHJcbiAgICAgICAgY29udGV4dC5hZGRJbml0aWFsaXplciA9IGZ1bmN0aW9uIChmKSB7IGlmIChkb25lKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCBpbml0aWFsaXplcnMgYWZ0ZXIgZGVjb3JhdGlvbiBoYXMgY29tcGxldGVkXCIpOyBleHRyYUluaXRpYWxpemVycy5wdXNoKGFjY2VwdChmIHx8IG51bGwpKTsgfTtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gKDAsIGRlY29yYXRvcnNbaV0pKGtpbmQgPT09IFwiYWNjZXNzb3JcIiA/IHsgZ2V0OiBkZXNjcmlwdG9yLmdldCwgc2V0OiBkZXNjcmlwdG9yLnNldCB9IDogZGVzY3JpcHRvcltrZXldLCBjb250ZXh0KTtcclxuICAgICAgICBpZiAoa2luZCA9PT0gXCJhY2Nlc3NvclwiKSB7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwgfHwgdHlwZW9mIHJlc3VsdCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZFwiKTtcclxuICAgICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmdldCkpIGRlc2NyaXB0b3IuZ2V0ID0gXztcclxuICAgICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LnNldCkpIGRlc2NyaXB0b3Iuc2V0ID0gXztcclxuICAgICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmluaXQpKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoXyA9IGFjY2VwdChyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIGlmIChraW5kID09PSBcImZpZWxkXCIpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xyXG4gICAgICAgICAgICBlbHNlIGRlc2NyaXB0b3Jba2V5XSA9IF87XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHRhcmdldCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29udGV4dEluLm5hbWUsIGRlc2NyaXB0b3IpO1xyXG4gICAgZG9uZSA9IHRydWU7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19ydW5Jbml0aWFsaXplcnModGhpc0FyZywgaW5pdGlhbGl6ZXJzLCB2YWx1ZSkge1xyXG4gICAgdmFyIHVzZVZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDI7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxpemVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhbHVlID0gdXNlVmFsdWUgPyBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnLCB2YWx1ZSkgOiBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnKTtcclxuICAgIH1cclxuICAgIHJldHVybiB1c2VWYWx1ZSA/IHZhbHVlIDogdm9pZCAwO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcHJvcEtleSh4KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHggPT09IFwic3ltYm9sXCIgPyB4IDogXCJcIi5jb25jYXQoeCk7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zZXRGdW5jdGlvbk5hbWUoZiwgbmFtZSwgcHJlZml4KSB7XHJcbiAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwic3ltYm9sXCIpIG5hbWUgPSBuYW1lLmRlc2NyaXB0aW9uID8gXCJbXCIuY29uY2F0KG5hbWUuZGVzY3JpcHRpb24sIFwiXVwiKSA6IFwiXCI7XHJcbiAgICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIFwibmFtZVwiLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCIgXCIsIG5hbWUpIDogbmFtZSB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcclxuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XHJcbiAgICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XHJcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcclxuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcclxuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IGZhbHNlIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tYWtlVGVtcGxhdGVPYmplY3QoY29va2VkLCByYXcpIHtcclxuICAgIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XHJcbiAgICByZXR1cm4gY29va2VkO1xyXG59O1xyXG5cclxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydFN0YXIobW9kKSB7XHJcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xyXG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgc3RhdGUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xyXG4gICAgcmV0dXJuIGtpbmQgPT09IFwibVwiID8gZiA6IGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyKSA6IGYgPyBmLnZhbHVlIDogc3RhdGUuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHN0YXRlLCB2YWx1ZSwga2luZCwgZikge1xyXG4gICAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xyXG4gICAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xyXG4gICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3Qgd3JpdGUgcHJpdmF0ZSBtZW1iZXIgdG8gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xyXG4gICAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XHJcbiAgICByZXR1cm4gdHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciA9PT0gc3RhdGUgOiBzdGF0ZS5oYXMocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hZGREaXNwb3NhYmxlUmVzb3VyY2UoZW52LCB2YWx1ZSwgYXN5bmMpIHtcclxuICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZC5cIik7XHJcbiAgICAgICAgdmFyIGRpc3Bvc2U7XHJcbiAgICAgICAgaWYgKGFzeW5jKSB7XHJcbiAgICAgICAgICAgIGlmICghU3ltYm9sLmFzeW5jRGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0Rpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgICAgICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmFzeW5jRGlzcG9zZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkaXNwb3NlID09PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgaWYgKCFTeW1ib2wuZGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5kaXNwb3NlIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgICAgICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5kaXNwb3NlXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkaXNwb3NlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3Qgbm90IGRpc3Bvc2FibGUuXCIpO1xyXG4gICAgICAgIGVudi5zdGFjay5wdXNoKHsgdmFsdWU6IHZhbHVlLCBkaXNwb3NlOiBkaXNwb3NlLCBhc3luYzogYXN5bmMgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhc3luYykge1xyXG4gICAgICAgIGVudi5zdGFjay5wdXNoKHsgYXN5bmM6IHRydWUgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuXHJcbnZhciBfU3VwcHJlc3NlZEVycm9yID0gdHlwZW9mIFN1cHByZXNzZWRFcnJvciA9PT0gXCJmdW5jdGlvblwiID8gU3VwcHJlc3NlZEVycm9yIDogZnVuY3Rpb24gKGVycm9yLCBzdXBwcmVzc2VkLCBtZXNzYWdlKSB7XHJcbiAgICB2YXIgZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcclxuICAgIHJldHVybiBlLm5hbWUgPSBcIlN1cHByZXNzZWRFcnJvclwiLCBlLmVycm9yID0gZXJyb3IsIGUuc3VwcHJlc3NlZCA9IHN1cHByZXNzZWQsIGU7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kaXNwb3NlUmVzb3VyY2VzKGVudikge1xyXG4gICAgZnVuY3Rpb24gZmFpbChlKSB7XHJcbiAgICAgICAgZW52LmVycm9yID0gZW52Lmhhc0Vycm9yID8gbmV3IF9TdXBwcmVzc2VkRXJyb3IoZSwgZW52LmVycm9yLCBcIkFuIGVycm9yIHdhcyBzdXBwcmVzc2VkIGR1cmluZyBkaXNwb3NhbC5cIikgOiBlO1xyXG4gICAgICAgIGVudi5oYXNFcnJvciA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBuZXh0KCkge1xyXG4gICAgICAgIHdoaWxlIChlbnYuc3RhY2subGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZhciByZWMgPSBlbnYuc3RhY2sucG9wKCk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gcmVjLmRpc3Bvc2UgJiYgcmVjLmRpc3Bvc2UuY2FsbChyZWMudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlYy5hc3luYykgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpLnRoZW4obmV4dCwgZnVuY3Rpb24oZSkgeyBmYWlsKGUpOyByZXR1cm4gbmV4dCgpOyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgZmFpbChlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZW52Lmhhc0Vycm9yKSB0aHJvdyBlbnYuZXJyb3I7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV4dCgpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBfX2V4dGVuZHM6IF9fZXh0ZW5kcyxcclxuICAgIF9fYXNzaWduOiBfX2Fzc2lnbixcclxuICAgIF9fcmVzdDogX19yZXN0LFxyXG4gICAgX19kZWNvcmF0ZTogX19kZWNvcmF0ZSxcclxuICAgIF9fcGFyYW06IF9fcGFyYW0sXHJcbiAgICBfX21ldGFkYXRhOiBfX21ldGFkYXRhLFxyXG4gICAgX19hd2FpdGVyOiBfX2F3YWl0ZXIsXHJcbiAgICBfX2dlbmVyYXRvcjogX19nZW5lcmF0b3IsXHJcbiAgICBfX2NyZWF0ZUJpbmRpbmc6IF9fY3JlYXRlQmluZGluZyxcclxuICAgIF9fZXhwb3J0U3RhcjogX19leHBvcnRTdGFyLFxyXG4gICAgX192YWx1ZXM6IF9fdmFsdWVzLFxyXG4gICAgX19yZWFkOiBfX3JlYWQsXHJcbiAgICBfX3NwcmVhZDogX19zcHJlYWQsXHJcbiAgICBfX3NwcmVhZEFycmF5czogX19zcHJlYWRBcnJheXMsXHJcbiAgICBfX3NwcmVhZEFycmF5OiBfX3NwcmVhZEFycmF5LFxyXG4gICAgX19hd2FpdDogX19hd2FpdCxcclxuICAgIF9fYXN5bmNHZW5lcmF0b3I6IF9fYXN5bmNHZW5lcmF0b3IsXHJcbiAgICBfX2FzeW5jRGVsZWdhdG9yOiBfX2FzeW5jRGVsZWdhdG9yLFxyXG4gICAgX19hc3luY1ZhbHVlczogX19hc3luY1ZhbHVlcyxcclxuICAgIF9fbWFrZVRlbXBsYXRlT2JqZWN0OiBfX21ha2VUZW1wbGF0ZU9iamVjdCxcclxuICAgIF9faW1wb3J0U3RhcjogX19pbXBvcnRTdGFyLFxyXG4gICAgX19pbXBvcnREZWZhdWx0OiBfX2ltcG9ydERlZmF1bHQsXHJcbiAgICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0OiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0LFxyXG4gICAgX19jbGFzc1ByaXZhdGVGaWVsZFNldDogX19jbGFzc1ByaXZhdGVGaWVsZFNldCxcclxuICAgIF9fY2xhc3NQcml2YXRlRmllbGRJbjogX19jbGFzc1ByaXZhdGVGaWVsZEluLFxyXG4gICAgX19hZGREaXNwb3NhYmxlUmVzb3VyY2U6IF9fYWRkRGlzcG9zYWJsZVJlc291cmNlLFxyXG4gICAgX19kaXNwb3NlUmVzb3VyY2VzOiBfX2Rpc3Bvc2VSZXNvdXJjZXMsXHJcbn07XHJcbiIsInZhciBtZXJnZVNvcnQsIGZpbmRJbnNlcnRJbmRleDtcbm1lcmdlU29ydCA9IHJlcXVpcmUoJ21lcmdlc29ydCcpO1xuZmluZEluc2VydEluZGV4ID0gcmVxdWlyZSgnZmluZC1pbnNlcnQtaW5kZXgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHdhbGtTdHJhdGVnaWVzO1xuXG4gIHdhbGtTdHJhdGVnaWVzID0ge307XG5cbiAgZnVuY3Rpb24gayhyZXN1bHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gVHJlZU1vZGVsKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICB0aGlzLmNvbmZpZy5jaGlsZHJlblByb3BlcnR5TmFtZSA9IGNvbmZpZy5jaGlsZHJlblByb3BlcnR5TmFtZSB8fCAnY2hpbGRyZW4nO1xuICAgIHRoaXMuY29uZmlnLm1vZGVsQ29tcGFyYXRvckZuID0gY29uZmlnLm1vZGVsQ29tcGFyYXRvckZuO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkQ2hpbGRUb05vZGUobm9kZSwgY2hpbGQpIHtcbiAgICBjaGlsZC5wYXJlbnQgPSBub2RlO1xuICAgIG5vZGUuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG5cbiAgZnVuY3Rpb24gTm9kZShjb25maWcsIG1vZGVsKSB7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgdGhpcy5tb2RlbCA9IG1vZGVsO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgfVxuXG4gIFRyZWVNb2RlbC5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAobW9kZWwpIHtcbiAgICB2YXIgaSwgY2hpbGRDb3VudCwgbm9kZTtcblxuICAgIGlmICghKG1vZGVsIGluc3RhbmNlb2YgT2JqZWN0KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTW9kZWwgbXVzdCBiZSBvZiB0eXBlIG9iamVjdC4nKTtcbiAgICB9XG5cbiAgICBub2RlID0gbmV3IE5vZGUodGhpcy5jb25maWcsIG1vZGVsKTtcbiAgICBpZiAobW9kZWxbdGhpcy5jb25maWcuY2hpbGRyZW5Qcm9wZXJ0eU5hbWVdIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGlmICh0aGlzLmNvbmZpZy5tb2RlbENvbXBhcmF0b3JGbikge1xuICAgICAgICBtb2RlbFt0aGlzLmNvbmZpZy5jaGlsZHJlblByb3BlcnR5TmFtZV0gPSBtZXJnZVNvcnQoXG4gICAgICAgICAgdGhpcy5jb25maWcubW9kZWxDb21wYXJhdG9yRm4sXG4gICAgICAgICAgbW9kZWxbdGhpcy5jb25maWcuY2hpbGRyZW5Qcm9wZXJ0eU5hbWVdKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDAsIGNoaWxkQ291bnQgPSBtb2RlbFt0aGlzLmNvbmZpZy5jaGlsZHJlblByb3BlcnR5TmFtZV0ubGVuZ3RoOyBpIDwgY2hpbGRDb3VudDsgaSsrKSB7XG4gICAgICAgIGFkZENoaWxkVG9Ob2RlKG5vZGUsIHRoaXMucGFyc2UobW9kZWxbdGhpcy5jb25maWcuY2hpbGRyZW5Qcm9wZXJ0eU5hbWVdW2ldKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGhhc0NvbXBhcmF0b3JGdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBub2RlLmNvbmZpZy5tb2RlbENvbXBhcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIE5vZGUucHJvdG90eXBlLmlzUm9vdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQgPT09IHVuZGVmaW5lZDtcbiAgfTtcblxuICBOb2RlLnByb3RvdHlwZS5oYXNDaGlsZHJlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5jaGlsZHJlbi5sZW5ndGggPiAwO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGFkZENoaWxkKHNlbGYsIGNoaWxkLCBpbnNlcnRJbmRleCkge1xuICAgIHZhciBpbmRleDtcblxuICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgTm9kZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NoaWxkIG11c3QgYmUgb2YgdHlwZSBOb2RlLicpO1xuICAgIH1cblxuICAgIGNoaWxkLnBhcmVudCA9IHNlbGY7XG4gICAgaWYgKCEoc2VsZi5tb2RlbFtzZWxmLmNvbmZpZy5jaGlsZHJlblByb3BlcnR5TmFtZV0gaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgIHNlbGYubW9kZWxbc2VsZi5jb25maWcuY2hpbGRyZW5Qcm9wZXJ0eU5hbWVdID0gW107XG4gICAgfVxuXG4gICAgaWYgKGhhc0NvbXBhcmF0b3JGdW5jdGlvbihzZWxmKSkge1xuICAgICAgLy8gRmluZCB0aGUgaW5kZXggdG8gaW5zZXJ0IHRoZSBjaGlsZFxuICAgICAgaW5kZXggPSBmaW5kSW5zZXJ0SW5kZXgoXG4gICAgICAgIHNlbGYuY29uZmlnLm1vZGVsQ29tcGFyYXRvckZuLFxuICAgICAgICBzZWxmLm1vZGVsW3NlbGYuY29uZmlnLmNoaWxkcmVuUHJvcGVydHlOYW1lXSxcbiAgICAgICAgY2hpbGQubW9kZWwpO1xuXG4gICAgICAvLyBBZGQgdG8gdGhlIG1vZGVsIGNoaWxkcmVuXG4gICAgICBzZWxmLm1vZGVsW3NlbGYuY29uZmlnLmNoaWxkcmVuUHJvcGVydHlOYW1lXS5zcGxpY2UoaW5kZXgsIDAsIGNoaWxkLm1vZGVsKTtcblxuICAgICAgLy8gQWRkIHRvIHRoZSBub2RlIGNoaWxkcmVuXG4gICAgICBzZWxmLmNoaWxkcmVuLnNwbGljZShpbmRleCwgMCwgY2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaW5zZXJ0SW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZWxmLm1vZGVsW3NlbGYuY29uZmlnLmNoaWxkcmVuUHJvcGVydHlOYW1lXS5wdXNoKGNoaWxkLm1vZGVsKTtcbiAgICAgICAgc2VsZi5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpbnNlcnRJbmRleCA8IDAgfHwgaW5zZXJ0SW5kZXggPiBzZWxmLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBpbmRleC4nKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLm1vZGVsW3NlbGYuY29uZmlnLmNoaWxkcmVuUHJvcGVydHlOYW1lXS5zcGxpY2UoaW5zZXJ0SW5kZXgsIDAsIGNoaWxkLm1vZGVsKTtcbiAgICAgICAgc2VsZi5jaGlsZHJlbi5zcGxpY2UoaW5zZXJ0SW5kZXgsIDAsIGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkO1xuICB9XG5cbiAgTm9kZS5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gYWRkQ2hpbGQodGhpcywgY2hpbGQpO1xuICB9O1xuXG4gIE5vZGUucHJvdG90eXBlLmFkZENoaWxkQXRJbmRleCA9IGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICBpZiAoaGFzQ29tcGFyYXRvckZ1bmN0aW9uKHRoaXMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBhZGQgY2hpbGQgYXQgaW5kZXggd2hlbiB1c2luZyBhIGNvbXBhcmF0b3IgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZENoaWxkKHRoaXMsIGNoaWxkLCBpbmRleCk7XG4gIH07XG5cbiAgTm9kZS5wcm90b3R5cGUuc2V0SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICBpZiAoaGFzQ29tcGFyYXRvckZ1bmN0aW9uKHRoaXMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzZXQgbm9kZSBpbmRleCB3aGVuIHVzaW5nIGEgY29tcGFyYXRvciBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1Jvb3QoKSkge1xuICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGluZGV4LicpO1xuICAgIH1cblxuICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5wYXJlbnQuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW5kZXguJyk7XG4gICAgfVxuXG4gICAgdmFyIG9sZEluZGV4ID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZih0aGlzKTtcblxuICAgIHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleCwgMCwgdGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKG9sZEluZGV4LCAxKVswXSk7XG5cbiAgICB0aGlzLnBhcmVudC5tb2RlbFt0aGlzLnBhcmVudC5jb25maWcuY2hpbGRyZW5Qcm9wZXJ0eU5hbWVdXG4gICAgICAuc3BsaWNlKGluZGV4LCAwLCB0aGlzLnBhcmVudC5tb2RlbFt0aGlzLnBhcmVudC5jb25maWcuY2hpbGRyZW5Qcm9wZXJ0eU5hbWVdLnNwbGljZShvbGRJbmRleCwgMSlbMF0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgTm9kZS5wcm90b3R5cGUuZ2V0UGF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGF0aCA9IFtdO1xuICAgIChmdW5jdGlvbiBhZGRUb1BhdGgobm9kZSkge1xuICAgICAgcGF0aC51bnNoaWZ0KG5vZGUpO1xuICAgICAgaWYgKCFub2RlLmlzUm9vdCgpKSB7XG4gICAgICAgIGFkZFRvUGF0aChub2RlLnBhcmVudCk7XG4gICAgICB9XG4gICAgfSkodGhpcyk7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH07XG5cbiAgTm9kZS5wcm90b3R5cGUuZ2V0SW5kZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuaXNSb290KCkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZih0aGlzKTtcbiAgfTtcblxuICAvKipcbiAgICogUGFyc2UgdGhlIGFyZ3VtZW50cyBvZiB0cmF2ZXJzYWwgZnVuY3Rpb25zLiBUaGVzZSBmdW5jdGlvbnMgY2FuIHRha2Ugb25lIG9wdGlvbmFsXG4gICAqIGZpcnN0IGFyZ3VtZW50IHdoaWNoIGlzIGFuIG9wdGlvbnMgb2JqZWN0LiBJZiBwcmVzZW50LCB0aGlzIG9iamVjdCB3aWxsIGJlIHN0b3JlZFxuICAgKiBpbiBhcmdzLm9wdGlvbnMuIFRoZSBvbmx5IG1hbmRhdG9yeSBhcmd1bWVudCBpcyB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gd2hpY2ggY2FuXG4gICAqIGFwcGVhciBpbiB0aGUgZmlyc3Qgb3Igc2Vjb25kIHBvc2l0aW9uIChpZiBhbiBvcHRpb25zIG9iamVjdCBpcyBnaXZlbikuIFRoaXNcbiAgICogZnVuY3Rpb24gd2lsbCBiZSBzYXZlZCB0byBhcmdzLmZuLiBUaGUgbGFzdCBvcHRpb25hbCBhcmd1bWVudCBpcyB0aGUgY29udGV4dCBvblxuICAgKiB3aGljaCB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQuIEl0IHdpbGwgYmUgYXZhaWxhYmxlIGluIGFyZ3MuY3R4LlxuICAgKlxuICAgKiBAcmV0dXJucyBQYXJzZWQgYXJndW1lbnRzLlxuICAgKi9cbiAgZnVuY3Rpb24gcGFyc2VBcmdzKCkge1xuICAgIHZhciBhcmdzID0ge307XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGFyZ3MuZm4gPSBhcmd1bWVudHNbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcmdzLm9wdGlvbnMgPSBhcmd1bWVudHNbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBhcmdzLmZuID0gYXJndW1lbnRzWzBdO1xuICAgICAgICBhcmdzLmN0eCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyZ3Mub3B0aW9ucyA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgYXJncy5mbiA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYXJncy5vcHRpb25zID0gYXJndW1lbnRzWzBdO1xuICAgICAgYXJncy5mbiA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIGFyZ3MuY3R4ID0gYXJndW1lbnRzWzJdO1xuICAgIH1cbiAgICBhcmdzLm9wdGlvbnMgPSBhcmdzLm9wdGlvbnMgfHwge307XG4gICAgaWYgKCFhcmdzLm9wdGlvbnMuc3RyYXRlZ3kpIHtcbiAgICAgIGFyZ3Mub3B0aW9ucy5zdHJhdGVneSA9ICdwcmUnO1xuICAgIH1cbiAgICBpZiAoIXdhbGtTdHJhdGVnaWVzW2FyZ3Mub3B0aW9ucy5zdHJhdGVneV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0cmVlIHdhbGsgc3RyYXRlZ3kuIFZhbGlkIHN0cmF0ZWdpZXMgYXJlIFxcJ3ByZVxcJyBbZGVmYXVsdF0sIFxcJ3Bvc3RcXCcgYW5kIFxcJ2JyZWFkdGhcXCcuJyk7XG4gICAgfVxuICAgIHJldHVybiBhcmdzO1xuICB9XG5cbiAgTm9kZS5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncztcbiAgICBhcmdzID0gcGFyc2VBcmdzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgd2Fsa1N0cmF0ZWdpZXNbYXJncy5vcHRpb25zLnN0cmF0ZWd5XS5jYWxsKHRoaXMsIGFyZ3MuZm4sIGFyZ3MuY3R4KTtcbiAgfTtcblxuICB3YWxrU3RyYXRlZ2llcy5wcmUgPSBmdW5jdGlvbiBkZXB0aEZpcnN0UHJlT3JkZXIoY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICB2YXIgaSwgY2hpbGRDb3VudCwga2VlcEdvaW5nO1xuICAgIGtlZXBHb2luZyA9IGNhbGxiYWNrLmNhbGwoY29udGV4dCwgdGhpcyk7XG4gICAgZm9yIChpID0gMCwgY2hpbGRDb3VudCA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgY2hpbGRDb3VudDsgaSsrKSB7XG4gICAgICBpZiAoa2VlcEdvaW5nID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBrZWVwR29pbmcgPSBkZXB0aEZpcnN0UHJlT3JkZXIuY2FsbCh0aGlzLmNoaWxkcmVuW2ldLCBjYWxsYmFjaywgY29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiBrZWVwR29pbmc7XG4gIH07XG5cbiAgd2Fsa1N0cmF0ZWdpZXMucG9zdCA9IGZ1bmN0aW9uIGRlcHRoRmlyc3RQb3N0T3JkZXIoY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICB2YXIgaSwgY2hpbGRDb3VudCwga2VlcEdvaW5nO1xuICAgIGZvciAoaSA9IDAsIGNoaWxkQ291bnQgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGNoaWxkQ291bnQ7IGkrKykge1xuICAgICAga2VlcEdvaW5nID0gZGVwdGhGaXJzdFBvc3RPcmRlci5jYWxsKHRoaXMuY2hpbGRyZW5baV0sIGNhbGxiYWNrLCBjb250ZXh0KTtcbiAgICAgIGlmIChrZWVwR29pbmcgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAga2VlcEdvaW5nID0gY2FsbGJhY2suY2FsbChjb250ZXh0LCB0aGlzKTtcbiAgICByZXR1cm4ga2VlcEdvaW5nO1xuICB9O1xuXG4gIHdhbGtTdHJhdGVnaWVzLmJyZWFkdGggPSBmdW5jdGlvbiBicmVhZHRoRmlyc3QoY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICB2YXIgcXVldWUgPSBbdGhpc107XG4gICAgKGZ1bmN0aW9uIHByb2Nlc3NRdWV1ZSgpIHtcbiAgICAgIHZhciBpLCBjaGlsZENvdW50LCBub2RlO1xuICAgICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBub2RlID0gcXVldWUuc2hpZnQoKTtcbiAgICAgIGZvciAoaSA9IDAsIGNoaWxkQ291bnQgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGNoaWxkQ291bnQ7IGkrKykge1xuICAgICAgICBxdWV1ZS5wdXNoKG5vZGUuY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgICAgaWYgKGNhbGxiYWNrLmNhbGwoY29udGV4dCwgbm9kZSkgIT09IGZhbHNlKSB7XG4gICAgICAgIHByb2Nlc3NRdWV1ZSgpO1xuICAgICAgfVxuICAgIH0pKCk7XG4gIH07XG5cbiAgTm9kZS5wcm90b3R5cGUuYWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzLCBhbGwgPSBbXTtcbiAgICBhcmdzID0gcGFyc2VBcmdzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgYXJncy5mbiA9IGFyZ3MuZm4gfHwgayh0cnVlKTtcbiAgICB3YWxrU3RyYXRlZ2llc1thcmdzLm9wdGlvbnMuc3RyYXRlZ3ldLmNhbGwodGhpcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGlmIChhcmdzLmZuLmNhbGwoYXJncy5jdHgsIG5vZGUpKSB7XG4gICAgICAgIGFsbC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH0sIGFyZ3MuY3R4KTtcbiAgICByZXR1cm4gYWxsO1xuICB9O1xuXG4gIE5vZGUucHJvdG90eXBlLmZpcnN0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzLCBmaXJzdDtcbiAgICBhcmdzID0gcGFyc2VBcmdzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgYXJncy5mbiA9IGFyZ3MuZm4gfHwgayh0cnVlKTtcbiAgICB3YWxrU3RyYXRlZ2llc1thcmdzLm9wdGlvbnMuc3RyYXRlZ3ldLmNhbGwodGhpcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGlmIChhcmdzLmZuLmNhbGwoYXJncy5jdHgsIG5vZGUpKSB7XG4gICAgICAgIGZpcnN0ID0gbm9kZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0sIGFyZ3MuY3R4KTtcbiAgICByZXR1cm4gZmlyc3Q7XG4gIH07XG5cbiAgTm9kZS5wcm90b3R5cGUuZHJvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5kZXhPZkNoaWxkO1xuICAgIGlmICghdGhpcy5pc1Jvb3QoKSkge1xuICAgICAgaW5kZXhPZkNoaWxkID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uaW5kZXhPZih0aGlzKTtcbiAgICAgIHRoaXMucGFyZW50LmNoaWxkcmVuLnNwbGljZShpbmRleE9mQ2hpbGQsIDEpO1xuICAgICAgdGhpcy5wYXJlbnQubW9kZWxbdGhpcy5jb25maWcuY2hpbGRyZW5Qcm9wZXJ0eU5hbWVdLnNwbGljZShpbmRleE9mQ2hpbGQsIDEpO1xuICAgICAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICBkZWxldGUgdGhpcy5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHJldHVybiBUcmVlTW9kZWw7XG59KSgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIFNvcnQgYW4gYXJyYXkgdXNpbmcgdGhlIG1lcmdlIHNvcnQgYWxnb3JpdGhtLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb21wYXJhdG9yRm4gVGhlIGNvbXBhcmF0b3IgZnVuY3Rpb24uXG4gICAqIEBwYXJhbSB7YXJyYXl9IGFyciBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHJldHVybnMge2FycmF5fSBUaGUgc29ydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gbWVyZ2VTb3J0KGNvbXBhcmF0b3JGbiwgYXJyKSB7XG4gICAgdmFyIGxlbiA9IGFyci5sZW5ndGgsIGZpcnN0SGFsZiwgc2Vjb25kSGFsZjtcbiAgICBpZiAobGVuID49IDIpIHtcbiAgICAgIGZpcnN0SGFsZiA9IGFyci5zbGljZSgwLCBsZW4gLyAyKTtcbiAgICAgIHNlY29uZEhhbGYgPSBhcnIuc2xpY2UobGVuIC8gMiwgbGVuKTtcbiAgICAgIHJldHVybiBtZXJnZShjb21wYXJhdG9yRm4sIG1lcmdlU29ydChjb21wYXJhdG9yRm4sIGZpcnN0SGFsZiksIG1lcmdlU29ydChjb21wYXJhdG9yRm4sIHNlY29uZEhhbGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFyci5zbGljZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbWVyZ2UgcGFydCBvZiB0aGUgbWVyZ2Ugc29ydCBhbGdvcml0aG0uXG4gICAqXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBhcmF0b3JGbiBUaGUgY29tcGFyYXRvciBmdW5jdGlvbi5cbiAgICogQHBhcmFtIHthcnJheX0gYXJyMSBUaGUgZmlyc3Qgc29ydGVkIGFycmF5LlxuICAgKiBAcGFyYW0ge2FycmF5fSBhcnIyIFRoZSBzZWNvbmQgc29ydGVkIGFycmF5LlxuICAgKiBAcmV0dXJucyB7YXJyYXl9IFRoZSBtZXJnZWQgYW5kIHNvcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIG1lcmdlKGNvbXBhcmF0b3JGbiwgYXJyMSwgYXJyMikge1xuICAgIHZhciByZXN1bHQgPSBbXSwgbGVmdDEgPSBhcnIxLmxlbmd0aCwgbGVmdDIgPSBhcnIyLmxlbmd0aDtcbiAgICB3aGlsZSAobGVmdDEgPiAwICYmIGxlZnQyID4gMCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3JGbihhcnIxWzBdLCBhcnIyWzBdKSA8PSAwKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGFycjEuc2hpZnQoKSk7XG4gICAgICAgIGxlZnQxLS07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQucHVzaChhcnIyLnNoaWZ0KCkpO1xuICAgICAgICBsZWZ0Mi0tO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobGVmdDEgPiAwKSB7XG4gICAgICByZXN1bHQucHVzaC5hcHBseShyZXN1bHQsIGFycjEpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQucHVzaC5hcHBseShyZXN1bHQsIGFycjIpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIG1lcmdlU29ydDtcbn0pKCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiAoKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogRmluZCB0aGUgaW5kZXggdG8gaW5zZXJ0IGFuIGVsZW1lbnQgaW4gYXJyYXkga2VlcGluZyB0aGUgc29ydCBvcmRlci5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY29tcGFyYXRvckZuIFRoZSBjb21wYXJhdG9yIGZ1bmN0aW9uIHdoaWNoIHNvcnRlZCB0aGUgYXJyYXkuXG4gICAqIEBwYXJhbSB7YXJyYXl9IGFyciBUaGUgc29ydGVkIGFycmF5LlxuICAgKiBAcGFyYW0ge29iamVjdH0gZWwgVGhlIGVsZW1lbnQgdG8gaW5zZXJ0LlxuICAgKi9cbiAgZnVuY3Rpb24gZmluZEluc2VydEluZGV4KGNvbXBhcmF0b3JGbiwgYXJyLCBlbCkge1xuICAgIHZhciBpLCBsZW47XG4gICAgZm9yIChpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoY29tcGFyYXRvckZuKGFycltpXSwgZWwpID4gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGk7XG4gIH1cblxuICByZXR1cm4gZmluZEluc2VydEluZGV4O1xufSkoKTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIExvZGFzaCA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIDxodHRwczovL29wZW5qc2Yub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuOyhmdW5jdGlvbigpIHtcblxuICAvKiogVXNlZCBhcyBhIHNhZmUgcmVmZXJlbmNlIGZvciBgdW5kZWZpbmVkYCBpbiBwcmUtRVM1IGVudmlyb25tZW50cy4gKi9cbiAgdmFyIHVuZGVmaW5lZDtcblxuICAvKiogVXNlZCBhcyB0aGUgc2VtYW50aWMgdmVyc2lvbiBudW1iZXIuICovXG4gIHZhciBWRVJTSU9OID0gJzQuMTcuMjEnO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xuICB2YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuICAvKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG4gIHZhciBDT1JFX0VSUk9SX1RFWFQgPSAnVW5zdXBwb3J0ZWQgY29yZS1qcyB1c2UuIFRyeSBodHRwczovL25wbXMuaW8vc2VhcmNoP3E9cG9ueWZpbGwuJyxcbiAgICAgIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJyxcbiAgICAgIElOVkFMSURfVEVNUExfVkFSX0VSUk9SX1RFWFQgPSAnSW52YWxpZCBgdmFyaWFibGVgIG9wdGlvbiBwYXNzZWQgaW50byBgXy50ZW1wbGF0ZWAnO1xuXG4gIC8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbiAgdmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbiAgdmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIGludGVybmFsIGFyZ3VtZW50IHBsYWNlaG9sZGVyLiAqL1xuICB2YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbiAgdmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgICBDTE9ORV9GTEFUX0ZMQUcgPSAyLFxuICAgICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbiAgdmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICB2YXIgV1JBUF9CSU5EX0ZMQUcgPSAxLFxuICAgICAgV1JBUF9CSU5EX0tFWV9GTEFHID0gMixcbiAgICAgIFdSQVBfQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgICBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgICAgV1JBUF9DVVJSWV9SSUdIVF9GTEFHID0gMTYsXG4gICAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuICAgICAgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgPSA2NCxcbiAgICAgIFdSQVBfQVJZX0ZMQUcgPSAxMjgsXG4gICAgICBXUkFQX1JFQVJHX0ZMQUcgPSAyNTYsXG4gICAgICBXUkFQX0ZMSVBfRkxBRyA9IDUxMjtcblxuICAvKiogVXNlZCBhcyBkZWZhdWx0IG9wdGlvbnMgZm9yIGBfLnRydW5jYXRlYC4gKi9cbiAgdmFyIERFRkFVTFRfVFJVTkNfTEVOR1RIID0gMzAsXG4gICAgICBERUZBVUxUX1RSVU5DX09NSVNTSU9OID0gJy4uLic7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xuICB2YXIgSE9UX0NPVU5UID0gODAwLFxuICAgICAgSE9UX1NQQU4gPSAxNjtcblxuICAvKiogVXNlZCB0byBpbmRpY2F0ZSB0aGUgdHlwZSBvZiBsYXp5IGl0ZXJhdGVlcy4gKi9cbiAgdmFyIExBWllfRklMVEVSX0ZMQUcgPSAxLFxuICAgICAgTEFaWV9NQVBfRkxBRyA9IDIsXG4gICAgICBMQVpZX1dISUxFX0ZMQUcgPSAzO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xuICB2YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICAgIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxLFxuICAgICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOCxcbiAgICAgIE5BTiA9IDAgLyAwO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHRoZSBtYXhpbXVtIGxlbmd0aCBhbmQgaW5kZXggb2YgYW4gYXJyYXkuICovXG4gIHZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSxcbiAgICAgIE1BWF9BUlJBWV9JTkRFWCA9IE1BWF9BUlJBWV9MRU5HVEggLSAxLFxuICAgICAgSEFMRl9NQVhfQVJSQVlfTEVOR1RIID0gTUFYX0FSUkFZX0xFTkdUSCA+Pj4gMTtcblxuICAvKiogVXNlZCB0byBhc3NvY2lhdGUgd3JhcCBtZXRob2RzIHdpdGggdGhlaXIgYml0IGZsYWdzLiAqL1xuICB2YXIgd3JhcEZsYWdzID0gW1xuICAgIFsnYXJ5JywgV1JBUF9BUllfRkxBR10sXG4gICAgWydiaW5kJywgV1JBUF9CSU5EX0ZMQUddLFxuICAgIFsnYmluZEtleScsIFdSQVBfQklORF9LRVlfRkxBR10sXG4gICAgWydjdXJyeScsIFdSQVBfQ1VSUllfRkxBR10sXG4gICAgWydjdXJyeVJpZ2h0JywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHXSxcbiAgICBbJ2ZsaXAnLCBXUkFQX0ZMSVBfRkxBR10sXG4gICAgWydwYXJ0aWFsJywgV1JBUF9QQVJUSUFMX0ZMQUddLFxuICAgIFsncGFydGlhbFJpZ2h0JywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUddLFxuICAgIFsncmVhcmcnLCBXUkFQX1JFQVJHX0ZMQUddXG4gIF07XG5cbiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xuICB2YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICAgIGRvbUV4Y1RhZyA9ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nLFxuICAgICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICAgIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nLFxuICAgICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJyxcbiAgICAgIHdlYWtTZXRUYWcgPSAnW29iamVjdCBXZWFrU2V0XSc7XG5cbiAgdmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBlbXB0eSBzdHJpbmcgbGl0ZXJhbHMgaW4gY29tcGlsZWQgdGVtcGxhdGUgc291cmNlLiAqL1xuICB2YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXFxiX19wIFxcKz0gJyc7L2csXG4gICAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csXG4gICAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlZEh0bWwgPSAvJig/OmFtcHxsdHxndHxxdW90fCMzOSk7L2csXG4gICAgICByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ10vZyxcbiAgICAgIHJlSGFzRXNjYXBlZEh0bWwgPSBSZWdFeHAocmVFc2NhcGVkSHRtbC5zb3VyY2UpLFxuICAgICAgcmVIYXNVbmVzY2FwZWRIdG1sID0gUmVnRXhwKHJlVW5lc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZUVzY2FwZSA9IC88JS0oW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVFdmFsdWF0ZSA9IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUludGVycG9sYXRlID0gLzwlPShbXFxzXFxTXSs/KSU+L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLyxcbiAgICAgIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAgICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gICAqL1xuICB2YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nLFxuICAgICAgcmVIYXNSZWdFeHBDaGFyID0gUmVnRXhwKHJlUmVnRXhwQ2hhci5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgd2hpdGVzcGFjZS4gKi9cbiAgdmFyIHJlVHJpbVN0YXJ0ID0gL15cXHMrLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhIHNpbmdsZSB3aGl0ZXNwYWNlIGNoYXJhY3Rlci4gKi9cbiAgdmFyIHJlV2hpdGVzcGFjZSA9IC9cXHMvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdyYXAgZGV0YWlsIGNvbW1lbnRzLiAqL1xuICB2YXIgcmVXcmFwQ29tbWVudCA9IC9cXHsoPzpcXG5cXC9cXCogXFxbd3JhcHBlZCB3aXRoIC4rXFxdIFxcKlxcLyk/XFxuPy8sXG4gICAgICByZVdyYXBEZXRhaWxzID0gL1xce1xcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggKC4rKVxcXSBcXCovLFxuICAgICAgcmVTcGxpdERldGFpbHMgPSAvLD8gJiAvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHdvcmRzIGNvbXBvc2VkIG9mIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gdmFsaWRhdGUgdGhlIGB2YWxpZGF0ZWAgb3B0aW9uIGluIGBfLnRlbXBsYXRlYCB2YXJpYWJsZS5cbiAgICpcbiAgICogRm9yYmlkcyBjaGFyYWN0ZXJzIHdoaWNoIGNvdWxkIHBvdGVudGlhbGx5IGNoYW5nZSB0aGUgbWVhbmluZyBvZiB0aGUgZnVuY3Rpb24gYXJndW1lbnQgZGVmaW5pdGlvbjpcbiAgICogLSBcIigpLFwiIChtb2RpZmljYXRpb24gb2YgZnVuY3Rpb24gcGFyYW1ldGVycylcbiAgICogLSBcIj1cIiAoZGVmYXVsdCB2YWx1ZSlcbiAgICogLSBcIltde31cIiAoZGVzdHJ1Y3R1cmluZyBvZiBmdW5jdGlvbiBwYXJhbWV0ZXJzKVxuICAgKiAtIFwiL1wiIChiZWdpbm5pbmcgb2YgYSBjb21tZW50KVxuICAgKiAtIHdoaXRlc3BhY2VcbiAgICovXG4gIHZhciByZUZvcmJpZGRlbklkZW50aWZpZXJDaGFycyA9IC9bKCk9LHt9XFxbXFxdXFwvXFxzXS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG4gIHZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuICAvKipcbiAgICogVXNlZCB0byBtYXRjaFxuICAgKiBbRVMgdGVtcGxhdGUgZGVsaW1pdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdGVtcGxhdGUtbGl0ZXJhbC1sZXhpY2FsLWNvbXBvbmVudHMpLlxuICAgKi9cbiAgdmFyIHJlRXNUZW1wbGF0ZSA9IC9cXCRcXHsoW15cXFxcfV0qKD86XFxcXC5bXlxcXFx9XSopKilcXH0vZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJpbmFyeSBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG4gIHZhciByZUlzSG9zdEN0b3IgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBvY3RhbCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG4gIHZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG4gIHZhciByZUxhdGluID0gL1tcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx4ZmZcXHUwMTAwLVxcdTAxN2ZdL2c7XG5cbiAgLyoqIFVzZWQgdG8gZW5zdXJlIGNhcHR1cmluZyBvcmRlciBvZiB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xuICB2YXIgcmVOb01hdGNoID0gLygkXikvO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHVuZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHJlVW5lc2NhcGVkU3RyaW5nID0gL1snXFxuXFxyXFx1MjAyOFxcdTIwMjlcXFxcXS9nO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbiAgdmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgICByc0RpbmdiYXRSYW5nZSA9ICdcXFxcdTI3MDAtXFxcXHUyN2JmJyxcbiAgICAgIHJzTG93ZXJSYW5nZSA9ICdhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmYnLFxuICAgICAgcnNNYXRoT3BSYW5nZSA9ICdcXFxceGFjXFxcXHhiMVxcXFx4ZDdcXFxceGY3JyxcbiAgICAgIHJzTm9uQ2hhclJhbmdlID0gJ1xcXFx4MDAtXFxcXHgyZlxcXFx4M2EtXFxcXHg0MFxcXFx4NWItXFxcXHg2MFxcXFx4N2ItXFxcXHhiZicsXG4gICAgICByc1B1bmN0dWF0aW9uUmFuZ2UgPSAnXFxcXHUyMDAwLVxcXFx1MjA2ZicsXG4gICAgICByc1NwYWNlUmFuZ2UgPSAnIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDAnLFxuICAgICAgcnNVcHBlclJhbmdlID0gJ0EtWlxcXFx4YzAtXFxcXHhkNlxcXFx4ZDgtXFxcXHhkZScsXG4gICAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZicsXG4gICAgICByc0JyZWFrUmFuZ2UgPSByc01hdGhPcFJhbmdlICsgcnNOb25DaGFyUmFuZ2UgKyByc1B1bmN0dWF0aW9uUmFuZ2UgKyByc1NwYWNlUmFuZ2U7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xuICB2YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCIsXG4gICAgICByc0FzdHJhbCA9ICdbJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc0JyZWFrID0gJ1snICsgcnNCcmVha1JhbmdlICsgJ10nLFxuICAgICAgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJyxcbiAgICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgICByc0RpbmdiYXQgPSAnWycgKyByc0RpbmdiYXRSYW5nZSArICddJyxcbiAgICAgIHJzTG93ZXIgPSAnWycgKyByc0xvd2VyUmFuZ2UgKyAnXScsXG4gICAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICAgIHJzTW9kaWZpZXIgPSAnKD86JyArIHJzQ29tYm8gKyAnfCcgKyByc0ZpdHogKyAnKScsXG4gICAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICAgIHJzU3VyclBhaXIgPSAnW1xcXFx1ZDgwMC1cXFxcdWRiZmZdW1xcXFx1ZGMwMC1cXFxcdWRmZmZdJyxcbiAgICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xuICB2YXIgcnNNaXNjTG93ZXIgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgICByc01pc2NVcHBlciA9ICcoPzonICsgcnNVcHBlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzT3B0Q29udHJMb3dlciA9ICcoPzonICsgcnNBcG9zICsgJyg/OmR8bGx8bXxyZXxzfHR8dmUpKT8nLFxuICAgICAgcnNPcHRDb250clVwcGVyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgICByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICAgIHJzT3JkTG93ZXIgPSAnXFxcXGQqKD86MXN0fDJuZHwzcmR8KD8hWzEyM10pXFxcXGR0aCkoPz1cXFxcYnxbQS1aX10pJyxcbiAgICAgIHJzT3JkVXBwZXIgPSAnXFxcXGQqKD86MVNUfDJORHwzUkR8KD8hWzEyM10pXFxcXGRUSCkoPz1cXFxcYnxbYS16X10pJyxcbiAgICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICAgIHJzRW1vamkgPSAnKD86JyArIFtyc0RpbmdiYXQsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzU2VxLFxuICAgICAgcnNTeW1ib2wgPSAnKD86JyArIFtyc05vbkFzdHJhbCArIHJzQ29tYm8gKyAnPycsIHJzQ29tYm8sIHJzUmVnaW9uYWwsIHJzU3VyclBhaXIsIHJzQXN0cmFsXS5qb2luKCd8JykgKyAnKSc7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggYXBvc3Ryb3BoZXMuICovXG4gIHZhciByZUFwb3MgPSBSZWdFeHAocnNBcG9zLCAnZycpO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykgYW5kXG4gICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3MgZm9yIHN5bWJvbHNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrc19mb3JfU3ltYm9scykuXG4gICAqL1xuICB2YXIgcmVDb21ib01hcmsgPSBSZWdFeHAocnNDb21ibywgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBbc3RyaW5nIHN5bWJvbHNdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LXVuaWNvZGUpLiAqL1xuICB2YXIgcmVVbmljb2RlID0gUmVnRXhwKHJzRml0eiArICcoPz0nICsgcnNGaXR6ICsgJyl8JyArIHJzU3ltYm9sICsgcnNTZXEsICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggY29tcGxleCBvciBjb21wb3VuZCB3b3Jkcy4gKi9cbiAgdmFyIHJlVW5pY29kZVdvcmQgPSBSZWdFeHAoW1xuICAgIHJzVXBwZXIgKyAnPycgKyByc0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyICsgJyg/PScgKyBbcnNCcmVhaywgcnNVcHBlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNNaXNjVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyICsgcnNNaXNjTG93ZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICAgIHJzVXBwZXIgKyAnPycgKyByc01pc2NMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlcixcbiAgICByc1VwcGVyICsgJysnICsgcnNPcHRDb250clVwcGVyLFxuICAgIHJzT3JkVXBwZXIsXG4gICAgcnNPcmRMb3dlcixcbiAgICByc0RpZ2l0cyxcbiAgICByc0Vtb2ppXG4gIF0uam9pbignfCcpLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqL1xuICB2YXIgcmVIYXNVbmljb2RlID0gUmVnRXhwKCdbJyArIHJzWldKICsgcnNBc3RyYWxSYW5nZSAgKyByc0NvbWJvUmFuZ2UgKyByc1ZhclJhbmdlICsgJ10nKTtcblxuICAvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB0aGF0IG5lZWQgYSBtb3JlIHJvYnVzdCByZWdleHAgdG8gbWF0Y2ggd29yZHMuICovXG4gIHZhciByZUhhc1VuaWNvZGVXb3JkID0gL1thLXpdW0EtWl18W0EtWl17Mn1bYS16XXxbMC05XVthLXpBLVpdfFthLXpBLVpdWzAtOV18W15hLXpBLVowLTkgXS87XG5cbiAgLyoqIFVzZWQgdG8gYXNzaWduIGRlZmF1bHQgYGNvbnRleHRgIG9iamVjdCBwcm9wZXJ0aWVzLiAqL1xuICB2YXIgY29udGV4dFByb3BzID0gW1xuICAgICdBcnJheScsICdCdWZmZXInLCAnRGF0YVZpZXcnLCAnRGF0ZScsICdFcnJvcicsICdGbG9hdDMyQXJyYXknLCAnRmxvYXQ2NEFycmF5JyxcbiAgICAnRnVuY3Rpb24nLCAnSW50OEFycmF5JywgJ0ludDE2QXJyYXknLCAnSW50MzJBcnJheScsICdNYXAnLCAnTWF0aCcsICdPYmplY3QnLFxuICAgICdQcm9taXNlJywgJ1JlZ0V4cCcsICdTZXQnLCAnU3RyaW5nJywgJ1N5bWJvbCcsICdUeXBlRXJyb3InLCAnVWludDhBcnJheScsXG4gICAgJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ1VpbnQxNkFycmF5JywgJ1VpbnQzMkFycmF5JywgJ1dlYWtNYXAnLFxuICAgICdfJywgJ2NsZWFyVGltZW91dCcsICdpc0Zpbml0ZScsICdwYXJzZUludCcsICdzZXRUaW1lb3V0J1xuICBdO1xuXG4gIC8qKiBVc2VkIHRvIG1ha2UgdGVtcGxhdGUgc291cmNlVVJMcyBlYXNpZXIgdG8gaWRlbnRpZnkuICovXG4gIHZhciB0ZW1wbGF0ZUNvdW50ZXIgPSAtMTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG4gIHZhciB0eXBlZEFycmF5VGFncyA9IHt9O1xuICB0eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQzMlRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50OFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICB0eXBlZEFycmF5VGFnc1thcmdzVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2FycmF5VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tlcnJvclRhZ10gPSB0eXBlZEFycmF5VGFnc1tmdW5jVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tzZXRUYWddID0gdHlwZWRBcnJheVRhZ3Nbc3RyaW5nVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbiAgdmFyIGNsb25lYWJsZVRhZ3MgPSB7fTtcbiAgY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbiAgY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbYm9vbFRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGVUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2ludDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbbWFwVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3Nbc3RyaW5nVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc3ltYm9sVGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbiAgY2xvbmVhYmxlVGFnc1tlcnJvclRhZ10gPSBjbG9uZWFibGVUYWdzW2Z1bmNUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBMYXRpbiBVbmljb2RlIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy4gKi9cbiAgdmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgICAvLyBMYXRpbi0xIFN1cHBsZW1lbnQgYmxvY2suXG4gICAgJ1xceGMwJzogJ0EnLCAgJ1xceGMxJzogJ0EnLCAnXFx4YzInOiAnQScsICdcXHhjMyc6ICdBJywgJ1xceGM0JzogJ0EnLCAnXFx4YzUnOiAnQScsXG4gICAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICAgJ1xceGM3JzogJ0MnLCAgJ1xceGU3JzogJ2MnLFxuICAgICdcXHhkMCc6ICdEJywgICdcXHhmMCc6ICdkJyxcbiAgICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAgICdcXHhlOCc6ICdlJywgICdcXHhlOSc6ICdlJywgJ1xceGVhJzogJ2UnLCAnXFx4ZWInOiAnZScsXG4gICAgJ1xceGNjJzogJ0knLCAgJ1xceGNkJzogJ0knLCAnXFx4Y2UnOiAnSScsICdcXHhjZic6ICdJJyxcbiAgICAnXFx4ZWMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAgICdcXHhkMSc6ICdOJywgICdcXHhmMSc6ICduJyxcbiAgICAnXFx4ZDInOiAnTycsICAnXFx4ZDMnOiAnTycsICdcXHhkNCc6ICdPJywgJ1xceGQ1JzogJ08nLCAnXFx4ZDYnOiAnTycsICdcXHhkOCc6ICdPJyxcbiAgICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgICAnXFx4ZDknOiAnVScsICAnXFx4ZGEnOiAnVScsICdcXHhkYic6ICdVJywgJ1xceGRjJzogJ1UnLFxuICAgICdcXHhmOSc6ICd1JywgICdcXHhmYSc6ICd1JywgJ1xceGZiJzogJ3UnLCAnXFx4ZmMnOiAndScsXG4gICAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICAgJ1xceGM2JzogJ0FlJywgJ1xceGU2JzogJ2FlJyxcbiAgICAnXFx4ZGUnOiAnVGgnLCAnXFx4ZmUnOiAndGgnLFxuICAgICdcXHhkZic6ICdzcycsXG4gICAgLy8gTGF0aW4gRXh0ZW5kZWQtQSBibG9jay5cbiAgICAnXFx1MDEwMCc6ICdBJywgICdcXHUwMTAyJzogJ0EnLCAnXFx1MDEwNCc6ICdBJyxcbiAgICAnXFx1MDEwMSc6ICdhJywgICdcXHUwMTAzJzogJ2EnLCAnXFx1MDEwNSc6ICdhJyxcbiAgICAnXFx1MDEwNic6ICdDJywgICdcXHUwMTA4JzogJ0MnLCAnXFx1MDEwYSc6ICdDJywgJ1xcdTAxMGMnOiAnQycsXG4gICAgJ1xcdTAxMDcnOiAnYycsICAnXFx1MDEwOSc6ICdjJywgJ1xcdTAxMGInOiAnYycsICdcXHUwMTBkJzogJ2MnLFxuICAgICdcXHUwMTBlJzogJ0QnLCAgJ1xcdTAxMTAnOiAnRCcsICdcXHUwMTBmJzogJ2QnLCAnXFx1MDExMSc6ICdkJyxcbiAgICAnXFx1MDExMic6ICdFJywgICdcXHUwMTE0JzogJ0UnLCAnXFx1MDExNic6ICdFJywgJ1xcdTAxMTgnOiAnRScsICdcXHUwMTFhJzogJ0UnLFxuICAgICdcXHUwMTEzJzogJ2UnLCAgJ1xcdTAxMTUnOiAnZScsICdcXHUwMTE3JzogJ2UnLCAnXFx1MDExOSc6ICdlJywgJ1xcdTAxMWInOiAnZScsXG4gICAgJ1xcdTAxMWMnOiAnRycsICAnXFx1MDExZSc6ICdHJywgJ1xcdTAxMjAnOiAnRycsICdcXHUwMTIyJzogJ0cnLFxuICAgICdcXHUwMTFkJzogJ2cnLCAgJ1xcdTAxMWYnOiAnZycsICdcXHUwMTIxJzogJ2cnLCAnXFx1MDEyMyc6ICdnJyxcbiAgICAnXFx1MDEyNCc6ICdIJywgICdcXHUwMTI2JzogJ0gnLCAnXFx1MDEyNSc6ICdoJywgJ1xcdTAxMjcnOiAnaCcsXG4gICAgJ1xcdTAxMjgnOiAnSScsICAnXFx1MDEyYSc6ICdJJywgJ1xcdTAxMmMnOiAnSScsICdcXHUwMTJlJzogJ0knLCAnXFx1MDEzMCc6ICdJJyxcbiAgICAnXFx1MDEyOSc6ICdpJywgICdcXHUwMTJiJzogJ2knLCAnXFx1MDEyZCc6ICdpJywgJ1xcdTAxMmYnOiAnaScsICdcXHUwMTMxJzogJ2knLFxuICAgICdcXHUwMTM0JzogJ0onLCAgJ1xcdTAxMzUnOiAnaicsXG4gICAgJ1xcdTAxMzYnOiAnSycsICAnXFx1MDEzNyc6ICdrJywgJ1xcdTAxMzgnOiAnaycsXG4gICAgJ1xcdTAxMzknOiAnTCcsICAnXFx1MDEzYic6ICdMJywgJ1xcdTAxM2QnOiAnTCcsICdcXHUwMTNmJzogJ0wnLCAnXFx1MDE0MSc6ICdMJyxcbiAgICAnXFx1MDEzYSc6ICdsJywgICdcXHUwMTNjJzogJ2wnLCAnXFx1MDEzZSc6ICdsJywgJ1xcdTAxNDAnOiAnbCcsICdcXHUwMTQyJzogJ2wnLFxuICAgICdcXHUwMTQzJzogJ04nLCAgJ1xcdTAxNDUnOiAnTicsICdcXHUwMTQ3JzogJ04nLCAnXFx1MDE0YSc6ICdOJyxcbiAgICAnXFx1MDE0NCc6ICduJywgICdcXHUwMTQ2JzogJ24nLCAnXFx1MDE0OCc6ICduJywgJ1xcdTAxNGInOiAnbicsXG4gICAgJ1xcdTAxNGMnOiAnTycsICAnXFx1MDE0ZSc6ICdPJywgJ1xcdTAxNTAnOiAnTycsXG4gICAgJ1xcdTAxNGQnOiAnbycsICAnXFx1MDE0Zic6ICdvJywgJ1xcdTAxNTEnOiAnbycsXG4gICAgJ1xcdTAxNTQnOiAnUicsICAnXFx1MDE1Nic6ICdSJywgJ1xcdTAxNTgnOiAnUicsXG4gICAgJ1xcdTAxNTUnOiAncicsICAnXFx1MDE1Nyc6ICdyJywgJ1xcdTAxNTknOiAncicsXG4gICAgJ1xcdTAxNWEnOiAnUycsICAnXFx1MDE1Yyc6ICdTJywgJ1xcdTAxNWUnOiAnUycsICdcXHUwMTYwJzogJ1MnLFxuICAgICdcXHUwMTViJzogJ3MnLCAgJ1xcdTAxNWQnOiAncycsICdcXHUwMTVmJzogJ3MnLCAnXFx1MDE2MSc6ICdzJyxcbiAgICAnXFx1MDE2Mic6ICdUJywgICdcXHUwMTY0JzogJ1QnLCAnXFx1MDE2Nic6ICdUJyxcbiAgICAnXFx1MDE2Myc6ICd0JywgICdcXHUwMTY1JzogJ3QnLCAnXFx1MDE2Nyc6ICd0JyxcbiAgICAnXFx1MDE2OCc6ICdVJywgICdcXHUwMTZhJzogJ1UnLCAnXFx1MDE2Yyc6ICdVJywgJ1xcdTAxNmUnOiAnVScsICdcXHUwMTcwJzogJ1UnLCAnXFx1MDE3Mic6ICdVJyxcbiAgICAnXFx1MDE2OSc6ICd1JywgICdcXHUwMTZiJzogJ3UnLCAnXFx1MDE2ZCc6ICd1JywgJ1xcdTAxNmYnOiAndScsICdcXHUwMTcxJzogJ3UnLCAnXFx1MDE3Myc6ICd1JyxcbiAgICAnXFx1MDE3NCc6ICdXJywgICdcXHUwMTc1JzogJ3cnLFxuICAgICdcXHUwMTc2JzogJ1knLCAgJ1xcdTAxNzcnOiAneScsICdcXHUwMTc4JzogJ1knLFxuICAgICdcXHUwMTc5JzogJ1onLCAgJ1xcdTAxN2InOiAnWicsICdcXHUwMTdkJzogJ1onLFxuICAgICdcXHUwMTdhJzogJ3onLCAgJ1xcdTAxN2MnOiAneicsICdcXHUwMTdlJzogJ3onLFxuICAgICdcXHUwMTMyJzogJ0lKJywgJ1xcdTAxMzMnOiAnaWonLFxuICAgICdcXHUwMTUyJzogJ09lJywgJ1xcdTAxNTMnOiAnb2UnLFxuICAgICdcXHUwMTQ5JzogXCInblwiLCAnXFx1MDE3Zic6ICdzJ1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBjaGFyYWN0ZXJzIHRvIEhUTUwgZW50aXRpZXMuICovXG4gIHZhciBodG1sRXNjYXBlcyA9IHtcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0OycsXG4gICAgJ1wiJzogJyZxdW90OycsXG4gICAgXCInXCI6ICcmIzM5OydcbiAgfTtcblxuICAvKiogVXNlZCB0byBtYXAgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLiAqL1xuICB2YXIgaHRtbFVuZXNjYXBlcyA9IHtcbiAgICAnJmFtcDsnOiAnJicsXG4gICAgJyZsdDsnOiAnPCcsXG4gICAgJyZndDsnOiAnPicsXG4gICAgJyZxdW90Oyc6ICdcIicsXG4gICAgJyYjMzk7JzogXCInXCJcbiAgfTtcblxuICAvKiogVXNlZCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbiAgdmFyIHN0cmluZ0VzY2FwZXMgPSB7XG4gICAgJ1xcXFwnOiAnXFxcXCcsXG4gICAgXCInXCI6IFwiJ1wiLFxuICAgICdcXG4nOiAnbicsXG4gICAgJ1xccic6ICdyJyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbiAgdmFyIGZyZWVQYXJzZUZsb2F0ID0gcGFyc2VGbG9hdCxcbiAgICAgIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG4gIHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xuICB2YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuICAvKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbiAgdmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbiAgdmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYC4gKi9cbiAgdmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuICAvKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xuICB2YXIgbW9kdWxlRXhwb3J0cyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5leHBvcnRzID09PSBmcmVlRXhwb3J0cztcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbiAgLyoqIFVzZWQgdG8gYWNjZXNzIGZhc3RlciBOb2RlLmpzIGhlbHBlcnMuICovXG4gIHZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgLy8gVXNlIGB1dGlsLnR5cGVzYCBmb3IgTm9kZS5qcyAxMCsuXG4gICAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgICAgaWYgKHR5cGVzKSB7XG4gICAgICAgIHJldHVybiB0eXBlcztcbiAgICAgIH1cblxuICAgICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICAgIHJldHVybiBmcmVlUHJvY2VzcyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9KCkpO1xuXG4gIC8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG4gIHZhciBub2RlSXNBcnJheUJ1ZmZlciA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzQXJyYXlCdWZmZXIsXG4gICAgICBub2RlSXNEYXRlID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNEYXRlLFxuICAgICAgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXAsXG4gICAgICBub2RlSXNSZWdFeHAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1JlZ0V4cCxcbiAgICAgIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0LFxuICAgICAgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvKipcbiAgICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZyk7XG4gICAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUFnZ3JlZ2F0b3JgIGZvciBhcnJheXMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYGFjY3VtdWxhdG9yYCB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGFjY3VtdWxhdG9yIFRoZSBpbml0aWFsIGFnZ3JlZ2F0ZWQgb2JqZWN0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGFjY3VtdWxhdG9yYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5QWdncmVnYXRvcihhcnJheSwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUVhY2hSaWdodChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGlmIChpdGVyYXRlZShhcnJheVtsZW5ndGhdLCBsZW5ndGgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZXZlcnlgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYWxsIGVsZW1lbnRzIHBhc3MgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RXZlcnkoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoIXByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZmlsdGVyYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXNJbmRleCA9IDAsXG4gICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmluY2x1ZGVzYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogc3BlY2lmeWluZyBhbiBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuICEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgMCkgPiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGFycmF5SW5jbHVkZXNgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYSBjb21wYXJhdG9yLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5SW5jbHVkZXNXaXRoKGFycmF5LCB2YWx1ZSwgY29tcGFyYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcih2YWx1ZSwgYXJyYXlbaW5kZXhdKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZShhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgICB9XG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VSaWdodGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gICAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlSZWR1Y2VSaWdodChhcnJheSwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yLCBpbml0QWNjdW0pIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gYXJyYXlbLS1sZW5ndGhdO1xuICAgIH1cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgKiBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAqICBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYW4gQVNDSUkgYHN0cmluZ2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdHJpbmcgc2l6ZS5cbiAgICovXG4gIHZhciBhc2NpaVNpemUgPSBiYXNlUHJvcGVydHkoJ2xlbmd0aCcpO1xuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBBU0NJSSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlUb0FycmF5KHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcuc3BsaXQoJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhbiBBU0NJSSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFzY2lpV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmZpbmRLZXlgIGFuZCBgXy5maW5kTGFzdEtleWAsXG4gICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcywgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgY29sbGVjdGlvbmBcbiAgICogdXNpbmcgYGVhY2hGdW5jYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZm91bmQgZWxlbWVudCBvciBpdHMga2V5LCBlbHNlIGB1bmRlZmluZWRgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUZpbmRLZXkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBlYWNoRnVuYykge1xuICAgIHZhciByZXN1bHQ7XG4gICAgZWFjaEZ1bmMoY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXN1bHQgPSBrZXk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZpbmRJbmRleGAgYW5kIGBfLmZpbmRMYXN0SW5kZXhgIHdpdGhvdXRcbiAgICogc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCwgZnJvbVJpZ2h0KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tSW5kZXggKyAoZnJvbVJpZ2h0ID8gMSA6IC0xKTtcblxuICAgIHdoaWxlICgoZnJvbVJpZ2h0ID8gaW5kZXgtLSA6ICsraW5kZXggPCBsZW5ndGgpKSB7XG4gICAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgPyBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KVxuICAgICAgOiBiYXNlRmluZEluZGV4KGFycmF5LCBiYXNlSXNOYU4sIGZyb21JbmRleCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBiYXNlSW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyYXRvciBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2ZXaXRoKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4LCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKGFycmF5W2luZGV4XSwgdmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmFOYCB3aXRob3V0IHN1cHBvcnQgZm9yIG51bWJlciBvYmplY3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VJc05hTih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ubWVhbmAgYW5kIGBfLm1lYW5CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZU1lYW4oYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgIHJldHVybiBsZW5ndGggPyAoYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIC8gbGVuZ3RoKSA6IE5BTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eU9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUHJvcGVydHlPZihvYmplY3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlZHVjZWAgYW5kIGBfLnJlZHVjZVJpZ2h0YCwgd2l0aG91dCBzdXBwb3J0XG4gICAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYCB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7Kn0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5pdEFjY3VtIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IG9yIGxhc3QgZWxlbWVudCBvZlxuICAgKiAgYGNvbGxlY3Rpb25gIGFzIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlYWNoRnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGBjb2xsZWN0aW9uYC5cbiAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgZWFjaEZ1bmMpIHtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaW5pdEFjY3VtXG4gICAgICAgID8gKGluaXRBY2N1bSA9IGZhbHNlLCB2YWx1ZSlcbiAgICAgICAgOiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc29ydEJ5YCB3aGljaCB1c2VzIGBjb21wYXJlcmAgdG8gZGVmaW5lIHRoZVxuICAgKiBzb3J0IG9yZGVyIG9mIGBhcnJheWAgYW5kIHJlcGxhY2VzIGNyaXRlcmlhIG9iamVjdHMgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nXG4gICAqIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNvcnQuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmVyIFRoZSBmdW5jdGlvbiB0byBkZWZpbmUgc29ydCBvcmRlci5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU29ydEJ5KGFycmF5LCBjb21wYXJlcikge1xuICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICBhcnJheS5zb3J0KGNvbXBhcmVyKTtcbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIGFycmF5W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc3VtYCBhbmQgYF8uc3VtQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVN1bShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgcmVzdWx0LFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBpdGVyYXRlZShhcnJheVtpbmRleF0pO1xuICAgICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGN1cnJlbnQgOiAocmVzdWx0ICsgY3VycmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICAgKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvUGFpcnNgIGFuZCBgXy50b1BhaXJzSW5gIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXlcbiAgICogb2Yga2V5LXZhbHVlIHBhaXJzIGZvciBgb2JqZWN0YCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lcyBvZiBgcHJvcHNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZVRvUGFpcnMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gW2tleSwgb2JqZWN0W2tleV1dO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRyaW1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVHJpbShzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nXG4gICAgICA/IHN0cmluZy5zbGljZSgwLCB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSArIDEpLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKVxuICAgICAgOiBzdHJpbmc7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICAgKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAgICogb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICAgIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltU3RhcnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBgcGxhY2Vob2xkZXJgIG9jY3VycmVuY2VzIGluIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjb3VudC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvdW50SG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSAwO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoYXJyYXlbbGVuZ3RoXSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgKytyZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gICAqL1xuICB2YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIGVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbEVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbY2hyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYGl0ZXJhdG9yYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZXJhdG9yIFRoZSBpdGVyYXRvciB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVG9BcnJheShpdGVyYXRvcikge1xuICAgIHZhciBkYXRhLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICghKGRhdGEgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBgcGxhY2Vob2xkZXJgIGVsZW1lbnRzIGluIGBhcnJheWAgd2l0aCBhbiBpbnRlcm5hbCBwbGFjZWhvbGRlclxuICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byByZXBsYWNlLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZUhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAodmFsdWUgPT09IHBsYWNlaG9sZGVyIHx8IHZhbHVlID09PSBQTEFDRUhPTERFUikge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBQTEFDRUhPTERFUjtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gaXRzIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvUGFpcnMoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5sYXN0SW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggKyAxO1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVTaXplKHN0cmluZylcbiAgICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlVG9BcnJheShzdHJpbmcpXG4gICAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udHJpbWAgYW5kIGBfLnRyaW1FbmRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2VcbiAgICogY2hhcmFjdGVyIG9mIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyLlxuICAgKi9cbiAgZnVuY3Rpb24gdHJpbW1lZEVuZEluZGV4KHN0cmluZykge1xuICAgIHZhciBpbmRleCA9IHN0cmluZy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaW5kZXgtLSAmJiByZVdoaXRlc3BhY2UudGVzdChzdHJpbmcuY2hhckF0KGluZGV4KSkpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byB1bmVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciB1bmVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbFVuZXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVVbmljb2RlLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKHJlVW5pY29kZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICsrcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgVW5pY29kZSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhIFVuaWNvZGUgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGBjb250ZXh0YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDEuMS4wXG4gICAqIEBjYXRlZ29yeSBVdGlsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD1yb290XSBUaGUgY29udGV4dCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIG5ldyBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5taXhpbih7ICdmb28nOiBfLmNvbnN0YW50KCdmb28nKSB9KTtcbiAgICpcbiAgICogdmFyIGxvZGFzaCA9IF8ucnVuSW5Db250ZXh0KCk7XG4gICAqIGxvZGFzaC5taXhpbih7ICdiYXInOiBsb2Rhc2guY29uc3RhbnQoJ2JhcicpIH0pO1xuICAgKlxuICAgKiBfLmlzRnVuY3Rpb24oXy5mb28pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqIF8uaXNGdW5jdGlvbihfLmJhcik7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5mb28pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guYmFyKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiAvLyBDcmVhdGUgYSBzdXBlZC11cCBgZGVmZXJgIGluIE5vZGUuanMuXG4gICAqIHZhciBkZWZlciA9IF8ucnVuSW5Db250ZXh0KHsgJ3NldFRpbWVvdXQnOiBzZXRJbW1lZGlhdGUgfSkuZGVmZXI7XG4gICAqL1xuICB2YXIgcnVuSW5Db250ZXh0ID0gKGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29udGV4dCA9IGNvbnRleHQgPT0gbnVsbCA/IHJvb3QgOiBfLmRlZmF1bHRzKHJvb3QuT2JqZWN0KCksIGNvbnRleHQsIF8ucGljayhyb290LCBjb250ZXh0UHJvcHMpKTtcblxuICAgIC8qKiBCdWlsdC1pbiBjb25zdHJ1Y3RvciByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBPYmplY3QgPSBjb250ZXh0Lk9iamVjdCxcbiAgICAgICAgUmVnRXhwID0gY29udGV4dC5SZWdFeHAsXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHQuU3RyaW5nLFxuICAgICAgICBUeXBlRXJyb3IgPSBjb250ZXh0LlR5cGVFcnJvcjtcblxuICAgIC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICAgICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG4gICAgdmFyIGNvcmVKc0RhdGEgPSBjb250ZXh0WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbiAgICB2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG4gICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgICAvKiogVXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzLiAqL1xuICAgIHZhciBpZENvdW50ZXIgPSAwO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbiAgICB2YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gICAgICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAgICAgKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAgICAgKiBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG4gICAgdmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgYF9gIHJlZmVyZW5jZSBpbiBgXy5ub0NvbmZsaWN0YC4gKi9cbiAgICB2YXIgb2xkRGFzaCA9IHJvb3QuXztcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG4gICAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbiAgICApO1xuXG4gICAgLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyBjb250ZXh0LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgU3ltYm9sID0gY29udGV4dC5TeW1ib2wsXG4gICAgICAgIFVpbnQ4QXJyYXkgPSBjb250ZXh0LlVpbnQ4QXJyYXksXG4gICAgICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkLFxuICAgICAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICAgICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICAgICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgICAgIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1JdGVyYXRvciA9IFN5bWJvbCA/IFN5bWJvbC5pdGVyYXRvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgICAgICBmdW5jKHt9LCAnJywge30pO1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfSgpKTtcblxuICAgIC8qKiBNb2NrZWQgYnVpbHQtaW5zLiAqL1xuICAgIHZhciBjdHhDbGVhclRpbWVvdXQgPSBjb250ZXh0LmNsZWFyVGltZW91dCAhPT0gcm9vdC5jbGVhclRpbWVvdXQgJiYgY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGN0eE5vdyA9IERhdGUgJiYgRGF0ZS5ub3cgIT09IHJvb3QuRGF0ZS5ub3cgJiYgRGF0ZS5ub3csXG4gICAgICAgIGN0eFNldFRpbWVvdXQgPSBjb250ZXh0LnNldFRpbWVvdXQgIT09IHJvb3Quc2V0VGltZW91dCAmJiBjb250ZXh0LnNldFRpbWVvdXQ7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG4gICAgdmFyIG5hdGl2ZUNlaWwgPSBNYXRoLmNlaWwsXG4gICAgICAgIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBuYXRpdmVJc0Zpbml0ZSA9IGNvbnRleHQuaXNGaW5pdGUsXG4gICAgICAgIG5hdGl2ZUpvaW4gPSBhcnJheVByb3RvLmpvaW4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpLFxuICAgICAgICBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sXG4gICAgICAgIG5hdGl2ZU5vdyA9IERhdGUubm93LFxuICAgICAgICBuYXRpdmVQYXJzZUludCA9IGNvbnRleHQucGFyc2VJbnQsXG4gICAgICAgIG5hdGl2ZVJhbmRvbSA9IE1hdGgucmFuZG9tLFxuICAgICAgICBuYXRpdmVSZXZlcnNlID0gYXJyYXlQcm90by5yZXZlcnNlO1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xuICAgIHZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShjb250ZXh0LCAnRGF0YVZpZXcnKSxcbiAgICAgICAgTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdNYXAnKSxcbiAgICAgICAgUHJvbWlzZSA9IGdldE5hdGl2ZShjb250ZXh0LCAnUHJvbWlzZScpLFxuICAgICAgICBTZXQgPSBnZXROYXRpdmUoY29udGV4dCwgJ1NldCcpLFxuICAgICAgICBXZWFrTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdXZWFrTWFwJyksXG4gICAgICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuICAgIC8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICAgIHZhciBtZXRhTWFwID0gV2Vha01hcCAmJiBuZXcgV2Vha01hcDtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xuICAgIHZhciByZWFsTmFtZXMgPSB7fTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG4gICAgdmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICAgICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgICAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4gICAgLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG4gICAgdmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBpbXBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMuIE1ldGhvZHMgdGhhdCBvcGVyYXRlIG9uIGFuZCByZXR1cm4gYXJyYXlzLCBjb2xsZWN0aW9ucyxcbiAgICAgKiBhbmQgZnVuY3Rpb25zIGNhbiBiZSBjaGFpbmVkIHRvZ2V0aGVyLiBNZXRob2RzIHRoYXQgcmV0cmlldmUgYSBzaW5nbGUgdmFsdWVcbiAgICAgKiBvciBtYXkgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlIHdpbGwgYXV0b21hdGljYWxseSBlbmQgdGhlIGNoYWluIHNlcXVlbmNlXG4gICAgICogYW5kIHJldHVybiB0aGUgdW53cmFwcGVkIHZhbHVlLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogRXhwbGljaXQgY2hhaW4gc2VxdWVuY2VzLCB3aGljaCBtdXN0IGJlIHVud3JhcHBlZCB3aXRoIGBfI3ZhbHVlYCwgbWF5IGJlXG4gICAgICogZW5hYmxlZCB1c2luZyBgXy5jaGFpbmAuXG4gICAgICpcbiAgICAgKiBUaGUgZXhlY3V0aW9uIG9mIGNoYWluZWQgbWV0aG9kcyBpcyBsYXp5LCB0aGF0IGlzLCBpdCdzIGRlZmVycmVkIHVudGlsXG4gICAgICogYF8jdmFsdWVgIGlzIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi5cbiAgICAgKiBTaG9ydGN1dCBmdXNpb24gaXMgYW4gb3B0aW1pemF0aW9uIHRvIG1lcmdlIGl0ZXJhdGVlIGNhbGxzOyB0aGlzIGF2b2lkc1xuICAgICAqIHRoZSBjcmVhdGlvbiBvZiBpbnRlcm1lZGlhdGUgYXJyYXlzIGFuZCBjYW4gZ3JlYXRseSByZWR1Y2UgdGhlIG51bWJlciBvZlxuICAgICAqIGl0ZXJhdGVlIGV4ZWN1dGlvbnMuIFNlY3Rpb25zIG9mIGEgY2hhaW4gc2VxdWVuY2UgcXVhbGlmeSBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaWYgdGhlIHNlY3Rpb24gaXMgYXBwbGllZCB0byBhbiBhcnJheSBhbmQgaXRlcmF0ZWVzIGFjY2VwdCBvbmx5XG4gICAgICogb25lIGFyZ3VtZW50LiBUaGUgaGV1cmlzdGljIGZvciB3aGV0aGVyIGEgc2VjdGlvbiBxdWFsaWZpZXMgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICAgICAqXG4gICAgICogQ2hhaW5pbmcgaXMgc3VwcG9ydGVkIGluIGN1c3RvbSBidWlsZHMgYXMgbG9uZyBhcyB0aGUgYF8jdmFsdWVgIG1ldGhvZCBpc1xuICAgICAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gbG9kYXNoIG1ldGhvZHMsIHdyYXBwZXJzIGhhdmUgYEFycmF5YCBhbmQgYFN0cmluZ2AgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBBcnJheWAgbWV0aG9kcyBhcmU6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHNoaWZ0YCwgYHNvcnRgLCBgc3BsaWNlYCwgYW5kIGB1bnNoaWZ0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYFN0cmluZ2AgbWV0aG9kcyBhcmU6XG4gICAgICogYHJlcGxhY2VgIGFuZCBgc3BsaXRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24gYXJlOlxuICAgICAqIGBhdGAsIGBjb21wYWN0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGRyb3BXaGlsZWAsIGBmaWx0ZXJgLCBgZmluZGAsXG4gICAgICogYGZpbmRMYXN0YCwgYGhlYWRgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGByZWplY3RgLCBgcmV2ZXJzZWAsIGBzbGljZWAsXG4gICAgICogYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLCBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYW5kIGB0b0FycmF5YFxuICAgICAqXG4gICAgICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhcnlgLCBgYXNzaWduYCwgYGFzc2lnbkluYCwgYGFzc2lnbkluV2l0aGAsIGBhc3NpZ25XaXRoYCwgYGF0YCxcbiAgICAgKiBgYmVmb3JlYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCwgYGNhc3RBcnJheWAsIGBjaGFpbmAsIGBjaHVua2AsXG4gICAgICogYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25mb3Jtc2AsIGBjb25zdGFudGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsXG4gICAgICogYGN1cnJ5YCwgYGRlYm91bmNlYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBkZWZlcmAsIGBkZWxheWAsXG4gICAgICogYGRpZmZlcmVuY2VgLCBgZGlmZmVyZW5jZUJ5YCwgYGRpZmZlcmVuY2VXaXRoYCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCxcbiAgICAgKiBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGV4dGVuZGAsIGBleHRlbmRXaXRoYCwgYGZpbGxgLCBgZmlsdGVyYCxcbiAgICAgKiBgZmxhdE1hcGAsIGBmbGF0TWFwRGVlcGAsIGBmbGF0TWFwRGVwdGhgLCBgZmxhdHRlbmAsIGBmbGF0dGVuRGVlcGAsXG4gICAgICogYGZsYXR0ZW5EZXB0aGAsIGBmbGlwYCwgYGZsb3dgLCBgZmxvd1JpZ2h0YCwgYGZyb21QYWlyc2AsIGBmdW5jdGlvbnNgLFxuICAgICAqIGBmdW5jdGlvbnNJbmAsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludGVyc2VjdGlvbkJ5YCxcbiAgICAgKiBgaW50ZXJzZWN0aW9uV2l0aGAsIGBpbnZlcnRgLCBgaW52ZXJ0QnlgLCBgaW52b2tlTWFwYCwgYGl0ZXJhdGVlYCwgYGtleUJ5YCxcbiAgICAgKiBga2V5c2AsIGBrZXlzSW5gLCBgbWFwYCwgYG1hcEtleXNgLCBgbWFwVmFsdWVzYCwgYG1hdGNoZXNgLCBgbWF0Y2hlc1Byb3BlcnR5YCxcbiAgICAgKiBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXJnZVdpdGhgLCBgbWV0aG9kYCwgYG1ldGhvZE9mYCwgYG1peGluYCwgYG5lZ2F0ZWAsXG4gICAgICogYG50aEFyZ2AsIGBvbWl0YCwgYG9taXRCeWAsIGBvbmNlYCwgYG9yZGVyQnlgLCBgb3ZlcmAsIGBvdmVyQXJnc2AsXG4gICAgICogYG92ZXJFdmVyeWAsIGBvdmVyU29tZWAsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwYXJ0aXRpb25gLCBgcGlja2AsXG4gICAgICogYHBpY2tCeWAsIGBwbGFudGAsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLCBgcHVsbEFsbGAsIGBwdWxsQWxsQnlgLFxuICAgICAqIGBwdWxsQWxsV2l0aGAsIGBwdWxsQXRgLCBgcHVzaGAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlYXJnYCwgYHJlamVjdGAsXG4gICAgICogYHJlbW92ZWAsIGByZXN0YCwgYHJldmVyc2VgLCBgc2FtcGxlU2l6ZWAsIGBzZXRgLCBgc2V0V2l0aGAsIGBzaHVmZmxlYCxcbiAgICAgKiBgc2xpY2VgLCBgc29ydGAsIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHNwcmVhZGAsIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYHRhcGAsIGB0aHJvdHRsZWAsIGB0aHJ1YCwgYHRvQXJyYXlgLFxuICAgICAqIGB0b1BhaXJzYCwgYHRvUGFpcnNJbmAsIGB0b1BhdGhgLCBgdG9QbGFpbk9iamVjdGAsIGB0cmFuc2Zvcm1gLCBgdW5hcnlgLFxuICAgICAqIGB1bmlvbmAsIGB1bmlvbkJ5YCwgYHVuaW9uV2l0aGAsIGB1bmlxYCwgYHVuaXFCeWAsIGB1bmlxV2l0aGAsIGB1bnNldGAsXG4gICAgICogYHVuc2hpZnRgLCBgdW56aXBgLCBgdW56aXBXaXRoYCwgYHVwZGF0ZWAsIGB1cGRhdGVXaXRoYCwgYHZhbHVlc2AsXG4gICAgICogYHZhbHVlc0luYCwgYHdpdGhvdXRgLCBgd3JhcGAsIGB4b3JgLCBgeG9yQnlgLCBgeG9yV2l0aGAsIGB6aXBgLFxuICAgICAqIGB6aXBPYmplY3RgLCBgemlwT2JqZWN0RGVlcGAsIGFuZCBgemlwV2l0aGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBhcmUgKipub3QqKiBjaGFpbmFibGUgYnkgZGVmYXVsdCBhcmU6XG4gICAgICogYGFkZGAsIGBhdHRlbXB0YCwgYGNhbWVsQ2FzZWAsIGBjYXBpdGFsaXplYCwgYGNlaWxgLCBgY2xhbXBgLCBgY2xvbmVgLFxuICAgICAqIGBjbG9uZURlZXBgLCBgY2xvbmVEZWVwV2l0aGAsIGBjbG9uZVdpdGhgLCBgY29uZm9ybXNUb2AsIGBkZWJ1cnJgLFxuICAgICAqIGBkZWZhdWx0VG9gLCBgZGl2aWRlYCwgYGVhY2hgLCBgZWFjaFJpZ2h0YCwgYGVuZHNXaXRoYCwgYGVxYCwgYGVzY2FwZWAsXG4gICAgICogYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCxcbiAgICAgKiBgZmluZExhc3RJbmRleGAsIGBmaW5kTGFzdEtleWAsIGBmaXJzdGAsIGBmbG9vcmAsIGBmb3JFYWNoYCwgYGZvckVhY2hSaWdodGAsXG4gICAgICogYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCwgYGdldGAsIGBndGAsIGBndGVgLCBgaGFzYCxcbiAgICAgKiBgaGFzSW5gLCBgaGVhZGAsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCwgYGluUmFuZ2VgLCBgaW52b2tlYCxcbiAgICAgKiBgaXNBcmd1bWVudHNgLCBgaXNBcnJheWAsIGBpc0FycmF5QnVmZmVyYCwgYGlzQXJyYXlMaWtlYCwgYGlzQXJyYXlMaWtlT2JqZWN0YCxcbiAgICAgKiBgaXNCb29sZWFuYCwgYGlzQnVmZmVyYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLCBgaXNFbXB0eWAsIGBpc0VxdWFsYCxcbiAgICAgKiBgaXNFcXVhbFdpdGhgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzSW50ZWdlcmAsIGBpc0xlbmd0aGAsXG4gICAgICogYGlzTWFwYCwgYGlzTWF0Y2hgLCBgaXNNYXRjaFdpdGhgLCBgaXNOYU5gLCBgaXNOYXRpdmVgLCBgaXNOaWxgLCBgaXNOdWxsYCxcbiAgICAgKiBgaXNOdW1iZXJgLCBgaXNPYmplY3RgLCBgaXNPYmplY3RMaWtlYCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLFxuICAgICAqIGBpc1NhZmVJbnRlZ2VyYCwgYGlzU2V0YCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsXG4gICAgICogYGlzV2Vha01hcGAsIGBpc1dlYWtTZXRgLCBgam9pbmAsIGBrZWJhYkNhc2VgLCBgbGFzdGAsIGBsYXN0SW5kZXhPZmAsXG4gICAgICogYGxvd2VyQ2FzZWAsIGBsb3dlckZpcnN0YCwgYGx0YCwgYGx0ZWAsIGBtYXhgLCBgbWF4QnlgLCBgbWVhbmAsIGBtZWFuQnlgLFxuICAgICAqIGBtaW5gLCBgbWluQnlgLCBgbXVsdGlwbHlgLCBgbm9Db25mbGljdGAsIGBub29wYCwgYG5vd2AsIGBudGhgLCBgcGFkYCxcbiAgICAgKiBgcGFkRW5kYCwgYHBhZFN0YXJ0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCwgYHJlZHVjZVJpZ2h0YCxcbiAgICAgKiBgcmVwZWF0YCwgYHJlc3VsdGAsIGByb3VuZGAsIGBydW5JbkNvbnRleHRgLCBgc2FtcGxlYCwgYHNoaWZ0YCwgYHNpemVgLFxuICAgICAqIGBzbmFrZUNhc2VgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBzb3J0ZWRJbmRleEJ5YCwgYHNvcnRlZExhc3RJbmRleGAsXG4gICAgICogYHNvcnRlZExhc3RJbmRleEJ5YCwgYHN0YXJ0Q2FzZWAsIGBzdGFydHNXaXRoYCwgYHN0dWJBcnJheWAsIGBzdHViRmFsc2VgLFxuICAgICAqIGBzdHViT2JqZWN0YCwgYHN0dWJTdHJpbmdgLCBgc3R1YlRydWVgLCBgc3VidHJhY3RgLCBgc3VtYCwgYHN1bUJ5YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdGltZXNgLCBgdG9GaW5pdGVgLCBgdG9JbnRlZ2VyYCwgYHRvSlNPTmAsIGB0b0xlbmd0aGAsXG4gICAgICogYHRvTG93ZXJgLCBgdG9OdW1iZXJgLCBgdG9TYWZlSW50ZWdlcmAsIGB0b1N0cmluZ2AsIGB0b1VwcGVyYCwgYHRyaW1gLFxuICAgICAqIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGB0cnVuY2F0ZWAsIGB1bmVzY2FwZWAsIGB1bmlxdWVJZGAsIGB1cHBlckNhc2VgLFxuICAgICAqIGB1cHBlckZpcnN0YCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBuYW1lIF9cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMiwgM10pO1xuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogd3JhcHBlZC5yZWR1Y2UoXy5hZGQpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYSB3cmFwcGVkIHZhbHVlLlxuICAgICAqIHZhciBzcXVhcmVzID0gd3JhcHBlZC5tYXAoc3F1YXJlKTtcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMudmFsdWUoKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvZGFzaCh2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcHBlckNsb25lKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gICAgICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgICAgIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB3aG9zZSBwcm90b3R5cGUgY2hhaW4gc2VxdWVuY2Ugd3JhcHBlcnMgaW5oZXJpdCBmcm9tLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTG9kYXNoKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBjb25zdHJ1Y3RvciBmb3IgY3JlYXRpbmcgYGxvZGFzaGAgd3JhcHBlciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NoYWluQWxsXSBFbmFibGUgZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2Rhc2hXcmFwcGVyKHZhbHVlLCBjaGFpbkFsbCkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2NoYWluX18gPSAhIWNoYWluQWxsO1xuICAgICAgdGhpcy5fX2luZGV4X18gPSAwO1xuICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgbG9kYXNoIGFyZSBsaWtlIHRob3NlIGluXG4gICAgICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gICAgICogZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncyA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXNjYXBlJzogcmVFc2NhcGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICAndmFyaWFibGUnOiAnJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgJ2ltcG9ydHMnOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgICdfJzogbG9kYXNoXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEVuc3VyZSB3cmFwcGVycyBhcmUgaW5zdGFuY2VzIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBsb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGxvZGFzaDtcblxuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMb2Rhc2hXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxhenkgd3JhcHBlciBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgbGF6eSBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExhenlXcmFwcGVyKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fZGlyX18gPSAxO1xuICAgICAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlZXNfXyA9IFtdO1xuICAgICAgdGhpcy5fX3Rha2VDb3VudF9fID0gTUFYX0FSUkFZX0xFTkdUSDtcbiAgICAgIHRoaXMuX192aWV3c19fID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBsYXp5IHdyYXBwZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbG9uZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5Q2xvbmUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMuX193cmFwcGVkX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX187XG4gICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX187XG4gICAgICByZXN1bHQuX19pdGVyYXRlZXNfXyA9IGNvcHlBcnJheSh0aGlzLl9faXRlcmF0ZWVzX18pO1xuICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSB0aGlzLl9fdGFrZUNvdW50X187XG4gICAgICByZXN1bHQuX192aWV3c19fID0gY29weUFycmF5KHRoaXMuX192aWV3c19fKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBsYXp5IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyByZXZlcnNlZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5UmV2ZXJzZSgpIHtcbiAgICAgIGlmICh0aGlzLl9fZmlsdGVyZWRfXykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyA9IC0xO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gKj0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB1bndyYXBwZWQgdmFsdWUgZnJvbSBpdHMgbGF6eSB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVZhbHVlKCkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLFxuICAgICAgICAgIGRpciA9IHRoaXMuX19kaXJfXyxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoYXJyYXkpLFxuICAgICAgICAgIGlzUmlnaHQgPSBkaXIgPCAwLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGlzQXJyID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICB2aWV3ID0gZ2V0VmlldygwLCBhcnJMZW5ndGgsIHRoaXMuX192aWV3c19fKSxcbiAgICAgICAgICBzdGFydCA9IHZpZXcuc3RhcnQsXG4gICAgICAgICAgZW5kID0gdmlldy5lbmQsXG4gICAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICAgICAgaW5kZXggPSBpc1JpZ2h0ID8gZW5kIDogKHN0YXJ0IC0gMSksXG4gICAgICAgICAgaXRlcmF0ZWVzID0gdGhpcy5fX2l0ZXJhdGVlc19fLFxuICAgICAgICAgIGl0ZXJMZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICB0YWtlQ291bnQgPSBuYXRpdmVNaW4obGVuZ3RoLCB0aGlzLl9fdGFrZUNvdW50X18pO1xuXG4gICAgICBpZiAoIWlzQXJyIHx8ICghaXNSaWdodCAmJiBhcnJMZW5ndGggPT0gbGVuZ3RoICYmIHRha2VDb3VudCA9PSBsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKGFycmF5LCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAobGVuZ3RoLS0gJiYgcmVzSW5kZXggPCB0YWtlQ291bnQpIHtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuXG4gICAgICAgIHZhciBpdGVySW5kZXggPSAtMSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIHdoaWxlICgrK2l0ZXJJbmRleCA8IGl0ZXJMZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGl0ZXJhdGVlc1tpdGVySW5kZXhdLFxuICAgICAgICAgICAgICBpdGVyYXRlZSA9IGRhdGEuaXRlcmF0ZWUsXG4gICAgICAgICAgICAgIHR5cGUgPSBkYXRhLnR5cGUsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9NQVBfRkxBRykge1xuICAgICAgICAgICAgdmFsdWUgPSBjb21wdXRlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjb21wdXRlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRykge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIGBMYXp5V3JhcHBlcmAgaXMgYW4gaW5zdGFuY2Ugb2YgYGJhc2VMb2Rhc2hgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhenlXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICAgICAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG4gICAgSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG4gICAgSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbiAgICBIYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuICAgIEhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG4gICAgSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgICAgICBkYXRhLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgLS10aGlzLnNpemU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgKyt0aGlzLnNpemU7XG4gICAgICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAgICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgYWRkXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQGFsaWFzIHB1c2hcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICAgICAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICAgICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICAgICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gICAgICB9XG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG4gICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcbiAgICBTdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG4gICAgU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuICAgIFN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcbiAgICBTdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICAgICAgKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2Jhc2VSYW5kb20oMCwgbGVuZ3RoIC0gMSldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVTaXplYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlU2l6ZShhcnJheSwgbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTaHVmZmxlKGFycmF5KSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAgICAgKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFnZ3JlZ2F0ZXMgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIG9uIGBhY2N1bXVsYXRvcmAgd2l0aCBrZXlzIHRyYW5zZm9ybWVkXG4gICAgICogYnkgYGl0ZXJhdGVlYCBhbmQgdmFsdWVzIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFnZ3JlZ2F0b3IoY29sbGVjdGlvbiwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICAgICAqIHZhbHVlIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBdChvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBza2lwID0gb2JqZWN0ID09IG51bGw7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBza2lwID8gdW5kZWZpbmVkIDogZ2V0KG9iamVjdCwgcGF0aHNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyIDw9IHVwcGVyID8gbnVtYmVyIDogdXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPj0gbG93ZXIgPyBudW1iZXIgOiBsb3dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gICAgICogdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIERlZXAgY2xvbmVcbiAgICAgKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAgICAgKiAgNCAtIENsb25lIHN5bWJvbHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZDtcbiAgICAgIH1cbiAgICAgIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICAgICAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gICAgICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgICAgIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zVG9gIHdoaWNoIGFjY2VwdHMgYHByb3BzYCB0byBjaGVjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbbGVuZ3RoXSxcbiAgICAgICAgICAgIHByZWRpY2F0ZSA9IHNvdXJjZVtrZXldLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICBpZiAoKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkgfHwgIXByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRlbGF5YCBhbmQgYF8uZGVmZXJgIHdoaWNoIGFjY2VwdHMgYGFyZ3NgXG4gICAgICogdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRpZmZlcmVuY2VgIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBleGNsdWRpbmcgbXVsdGlwbGUgYXJyYXlzIG9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHZhbHVlc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFsdWVzID0gYXJyYXlNYXAodmFsdWVzLCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzID0gbmV3IFNldENhY2hlKHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPT0gbnVsbCA/IHZhbHVlIDogaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHZhbHVlc0luZGV4ID0gdmFsdWVzTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICh2YWx1ZXNJbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzW3ZhbHVlc0luZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXModmFsdWVzLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hSaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2hSaWdodCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd25SaWdodCwgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ldmVyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFdmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9ICEhcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLm1heGAgYW5kIGBfLm1pbmAgd2hpY2ggYWNjZXB0cyBhXG4gICAgICogYGNvbXBhcmF0b3JgIHRvIGRldGVybWluZSB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIHVzZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFeHRyZW11bShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY3VycmVudCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICBpZiAoY3VycmVudCAhPSBudWxsICYmIChjb21wdXRlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKGN1cnJlbnQgPT09IGN1cnJlbnQgJiYgIWlzU3ltYm9sKGN1cnJlbnQpKVxuICAgICAgICAgICAgICA6IGNvbXBhcmF0b3IoY3VycmVudCwgY29tcHV0ZWQpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgdmFyIGNvbXB1dGVkID0gY3VycmVudCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsbGAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gbGVuZ3RoKSA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVuZCA9IHN0YXJ0ID4gZW5kID8gMCA6IHRvTGVuZ3RoKGVuZCk7XG4gICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgYXJyYXlbc3RhcnQrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWx0ZXJgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBzdXBwb3J0IGZvciByZXN0cmljdGluZyBmbGF0dGVuaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RyaWN0XSBSZXN0cmljdCB0byB2YWx1ZXMgdGhhdCBwYXNzIGBwcmVkaWNhdGVgIGNoZWNrcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gICAgICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAoZGVwdGggPiAxKSB7XG4gICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICAgICAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUZvcmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzXG4gICAgICogaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yUmlnaHQgPSBjcmVhdGVCYXNlRm9yKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93blJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JSaWdodChvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mdW5jdGlvbnNgIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXkgb2ZcbiAgICAgKiBgb2JqZWN0YCBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmaWx0ZXJlZCBmcm9tIGBwcm9wc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBmaWx0ZXIuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRnVuY3Rpb25zKG9iamVjdCwgcHJvcHMpIHtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iamVjdFtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gICAgICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgICAgIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgICAgIH1cbiAgICAgIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICAgICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmd0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pblJhbmdlYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiBudW1iZXIgPj0gbmF0aXZlTWluKHN0YXJ0LCBlbmQpICYmIG51bWJlciA8IG5hdGl2ZU1heChzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCwgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHNoYXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludGVyc2VjdGlvbihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5jbHVkZXMgPSBjb21wYXJhdG9yID8gYXJyYXlJbmNsdWRlc1dpdGggOiBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aCxcbiAgICAgICAgICBjYWNoZXMgPSBBcnJheShvdGhMZW5ndGgpLFxuICAgICAgICAgIG1heExlbmd0aCA9IEluZmluaXR5LFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAob3RoSW5kZXgtLSkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbb3RoSW5kZXhdO1xuICAgICAgICBpZiAob3RoSW5kZXggJiYgaXRlcmF0ZWUpIHtcbiAgICAgICAgICBhcnJheSA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhMZW5ndGggPSBuYXRpdmVNaW4oYXJyYXkubGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgICAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlIHx8IChsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApKVxuICAgICAgICAgID8gbmV3IFNldENhY2hlKG90aEluZGV4ICYmIGFycmF5KVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJyYXkgPSBhcnJheXNbMF07XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHNlZW4gPSBjYWNoZXNbMF07XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgcmVzdWx0Lmxlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmICghKHNlZW5cbiAgICAgICAgICAgICAgPyBjYWNoZUhhcyhzZWVuLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgOiBpbmNsdWRlcyhyZXN1bHQsIGNvbXB1dGVkLCBjb21wYXJhdG9yKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgtLW90aEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICAgICAgaWYgKCEoY2FjaGVcbiAgICAgICAgICAgICAgICAgID8gY2FjaGVIYXMoY2FjaGUsIGNvbXB1dGVkKVxuICAgICAgICAgICAgICAgICAgOiBpbmNsdWRlcyhhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludmVydGAgYW5kIGBfLmludmVydEJ5YCB3aGljaCBpbnZlcnRzXG4gICAgICogYG9iamVjdGAgd2l0aCB2YWx1ZXMgdHJhbnNmb3JtZWQgYnkgYGl0ZXJhdGVlYCBhbmQgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0gdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCBpdGVyYXRlZSh2YWx1ZSksIGtleSwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludm9rZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogbWV0aG9kIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgdmFyIGZ1bmMgPSBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYXBwbHkoZnVuYywgb2JqZWN0LCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcnJheUJ1ZmZlcmAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcnJheUJ1ZmZlclRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0RhdGVgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRGF0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gZGF0ZVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gICAgICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gICAgICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICAgICAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gICAgICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICAgICAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICAgICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgICAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICAgICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWlzU2FtZVRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICAgICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1JlZ0V4cGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzUmVnRXhwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSByZWdleHBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAgICAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICAgICAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmx0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gICAgICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgICAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLFxuICAgICAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5udGhgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU50aChhcnJheSwgbikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG4gKz0gbiA8IDAgPyBsZW5ndGggOiAwO1xuICAgICAgcmV0dXJuIGlzSW5kZXgobiwgbGVuZ3RoKSA/IGFycmF5W25dIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG4gICAgICBpZiAoaXRlcmF0ZWVzLmxlbmd0aCkge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkoaXRlcmF0ZWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2VHZXQodmFsdWUsIGl0ZXJhdGVlLmxlbmd0aCA9PT0gMSA/IGl0ZXJhdGVlWzBdIDogaXRlcmF0ZWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWU7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2lkZW50aXR5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNyaXRlcmlhID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBjcml0ZXJpYSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsIGZ1bmN0aW9uKG9iamVjdCwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucGlja2Agd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGljayhvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gaGFzSW4ob2JqZWN0LCBwYXRoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mICBgXy5waWNrQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhdGggPSBwYXRoc1tpbmRleF0sXG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcblxuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBwYXRoKSkge1xuICAgICAgICAgIGJhc2VTZXQocmVzdWx0LCBjYXN0UGF0aChwYXRoLCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBbGxCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgICAqIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleE9mID0gY29tcGFyYXRvciA/IGJhc2VJbmRleE9mV2l0aCA6IGJhc2VJbmRleE9mLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICBzZWVuID0gYXJyYXk7XG5cbiAgICAgIGlmIChhcnJheSA9PT0gdmFsdWVzKSB7XG4gICAgICAgIHZhbHVlcyA9IGNvcHlBcnJheSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4gPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZnJvbUluZGV4ID0gMCxcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB3aGlsZSAoKGZyb21JbmRleCA9IGluZGV4T2Yoc2VlbiwgY29tcHV0ZWQsIGZyb21JbmRleCwgY29tcGFyYXRvcikpID4gLTEpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gYXJyYXkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKHNlZW4sIGZyb21JbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBpbmRleGVzIG9yIGNhcHR1cmluZyB0aGUgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBpbmRleGVzIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBpbmRleGVzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKGxlbmd0aCA9PSBsYXN0SW5kZXggfHwgaW5kZXggIT09IHByZXZpb3VzKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzID0gaW5kZXg7XG4gICAgICAgICAgaWYgKGlzSW5kZXgoaW5kZXgpKSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgsIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXNlVW5zZXQoYXJyYXksIGluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5kb21gIHdpdGhvdXQgc3VwcG9ydCBmb3IgcmV0dXJuaW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd2VyIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpIHtcbiAgICAgIHJldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZ2VgIGFuZCBgXy5yYW5nZVJpZ2h0YCB3aGljaCBkb2Vzbid0XG4gICAgICogY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RlcCBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KG5hdGl2ZUNlaWwoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0O1xuICAgICAgICBzdGFydCArPSBzdGVwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXBlYXRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVwZWF0KHN0cmluZywgbikge1xuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgaWYgKCFzdHJpbmcgfHwgbiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIC8vIExldmVyYWdlIHRoZSBleHBvbmVudGlhdGlvbiBieSBzcXVhcmluZyBhbGdvcml0aG0gZm9yIGEgZmFzdGVyIHJlcGVhdC5cbiAgICAgIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FeHBvbmVudGlhdGlvbl9ieV9zcXVhcmluZyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgZG8ge1xuICAgICAgICBpZiAobiAlIDIpIHtcbiAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIG4gPSBuYXRpdmVGbG9vcihuIC8gMik7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAobik7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhcnJheVNhbXBsZSh2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZVNpemVgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZVNpemUoY29sbGVjdGlvbiwgbikge1xuICAgICAgdmFyIGFycmF5ID0gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGFycmF5LCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgICAgIG5lc3RlZCA9IG9iamVjdDtcblxuICAgICAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKSxcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycgfHwga2V5ID09PSAnY29uc3RydWN0b3InIHx8IGtleSA9PT0gJ3Byb3RvdHlwZScpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IGxhc3RJbmRleCkge1xuICAgICAgICAgIHZhciBvYmpWYWx1ZSA9IG5lc3RlZFtrZXldO1xuICAgICAgICAgIG5ld1ZhbHVlID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIGtleSwgbmVzdGVkKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpc09iamVjdChvYmpWYWx1ZSlcbiAgICAgICAgICAgICAgPyBvYmpWYWx1ZVxuICAgICAgICAgICAgICA6IChpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXNzaWduVmFsdWUobmVzdGVkLCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXREYXRhYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXREYXRhID0gIW1ldGFNYXAgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIGRhdGEpIHtcbiAgICAgIG1ldGFNYXAuc2V0KGZ1bmMsIGRhdGEpO1xuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2h1ZmZsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IGVuZCA+IGxlbmd0aCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gICAgICBzdGFydCA+Pj49IDA7XG5cbiAgICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb21lYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSBwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuICFyZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleGAgYW5kIGBfLnNvcnRlZExhc3RJbmRleGAgd2hpY2hcbiAgICAgKiBwZXJmb3JtcyBhIGJpbmFyeSBzZWFyY2ggb2YgYGFycmF5YCB0byBkZXRlcm1pbmUgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IGxvdyA6IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PT0gdmFsdWUgJiYgaGlnaCA8PSBIQUxGX01BWF9BUlJBWV9MRU5HVEgpIHtcbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGFycmF5W21pZF07XG5cbiAgICAgICAgICBpZiAoY29tcHV0ZWQgIT09IG51bGwgJiYgIWlzU3ltYm9sKGNvbXB1dGVkKSAmJlxuICAgICAgICAgICAgICAocmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSkpKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGlkZW50aXR5LCByZXRIaWdoZXN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleEJ5YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4QnlgXG4gICAgICogd2hpY2ggaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlXG4gICAgICogdGhlaXIgc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGhpZ2ggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgdmFyIHZhbElzTmFOID0gdmFsdWUgIT09IHZhbHVlLFxuICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpLFxuICAgICAgICAgIHZhbElzVW5kZWZpbmVkID0gdmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgdmFyIG1pZCA9IG5hdGl2ZUZsb29yKChsb3cgKyBoaWdoKSAvIDIpLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZShhcnJheVttaWRdKSxcbiAgICAgICAgICAgIG90aElzRGVmaW5lZCA9IGNvbXB1dGVkICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBjb21wdXRlZCA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gY29tcHV0ZWQgPT09IGNvbXB1dGVkLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChjb21wdXRlZCk7XG5cbiAgICAgICAgaWYgKHZhbElzTmFOKSB7XG4gICAgICAgICAgdmFyIHNldExvdyA9IHJldEhpZ2hlc3QgfHwgb3RoSXNSZWZsZXhpdmU7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNVbmRlZmluZWQpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiAocmV0SGlnaGVzdCB8fCBvdGhJc0RlZmluZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzTnVsbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNOdWxsKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAhb3RoSXNOdWxsICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc1N5bWJvbCk7XG4gICAgICAgIH0gZWxzZSBpZiAob3RoSXNOdWxsIHx8IG90aElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0TG93ID0gcmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNldExvdykge1xuICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1pbihoaWdoLCBNQVhfQVJSQVlfSU5ERVgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZFVuaXFgIGFuZCBgXy5zb3J0ZWRVbmlxQnlgIHdpdGhvdXRcbiAgICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIGlmICghaW5kZXggfHwgIWVxKGNvbXB1dGVkLCBzZWVuKSkge1xuICAgICAgICAgIHZhciBzZWVuID0gY29tcHV0ZWQ7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9OdW1iZXJgIHdoaWNoIGRvZXNuJ3QgZW5zdXJlIGNvcnJlY3RcbiAgICAgKiBjb252ZXJzaW9ucyBvZiBiaW5hcnksIGhleGFkZWNpbWFsLCBvciBvY3RhbCBzdHJpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgcmV0dXJuICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAgICAgKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuaXFCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgc2VlbiA9IHJlc3VsdDtcblxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIHZhciBzZXQgPSBpdGVyYXRlZSA/IG51bGwgOiBjcmVhdGVTZXQoYXJyYXkpO1xuICAgICAgICBpZiAoc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBzZWVuID0gbmV3IFNldENhY2hlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHNlZW4gPSBpdGVyYXRlZSA/IFtdIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHNlZW5JbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAoc2VlbltzZWVuSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHNlZW4sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHByb3BlcnR5IHBhdGggdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCB8fCBkZWxldGUgb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51cGRhdGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1cGRhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHJldHVybiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdXBkYXRlcihiYXNlR2V0KG9iamVjdCwgcGF0aCkpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZHJvcFdoaWxlYCBhbmQgYF8udGFrZVdoaWxlYFxuICAgICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRHJvcF0gU3BlY2lmeSBkcm9wcGluZyBlbGVtZW50cyBpbnN0ZWFkIG9mIHRha2luZyB0aGVtLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSwgaXNEcm9wLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMTtcblxuICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkgJiZcbiAgICAgICAgcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge31cblxuICAgICAgcmV0dXJuIGlzRHJvcFxuICAgICAgICA/IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IDAgOiBpbmRleCksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiBsZW5ndGgpKVxuICAgICAgICA6IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IDApLCAoZnJvbVJpZ2h0ID8gbGVuZ3RoIDogaW5kZXgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgd3JhcHBlclZhbHVlYCB3aGljaCByZXR1cm5zIHRoZSByZXN1bHQgb2ZcbiAgICAgKiBwZXJmb3JtaW5nIGEgc2VxdWVuY2Ugb2YgYWN0aW9ucyBvbiB0aGUgdW53cmFwcGVkIGB2YWx1ZWAsIHdoZXJlIGVhY2hcbiAgICAgKiBzdWNjZXNzaXZlIGFjdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFjdGlvbnMgQWN0aW9ucyB0byBwZXJmb3JtIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdyYXBwZXJWYWx1ZSh2YWx1ZSwgYWN0aW9ucykge1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC52YWx1ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKGFjdGlvbnMsIGZ1bmN0aW9uKHJlc3VsdCwgYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24uZnVuYy5hcHBseShhY3Rpb24udGhpc0FyZywgYXJyYXlQdXNoKFtyZXN1bHRdLCBhY3Rpb24uYXJncykpO1xuICAgICAgfSwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ueG9yYCwgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWG9yKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VVbmlxKGFycmF5c1swXSkgOiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tpbmRleF0sXG4gICAgICAgICAgICBvdGhJbmRleCA9IC0xO1xuXG4gICAgICAgIHdoaWxlICgrK290aEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKG90aEluZGV4ICE9IGluZGV4KSB7XG4gICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gYmFzZURpZmZlcmVuY2UocmVzdWx0W2luZGV4XSB8fCBhcnJheSwgYXJyYXlzW290aEluZGV4XSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKHJlc3VsdCwgMSksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uemlwT2JqZWN0YCB3aGljaCBhc3NpZ25zIHZhbHVlcyB1c2luZyBgYXNzaWduRnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25GdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVppcE9iamVjdChwcm9wcywgdmFsdWVzLCBhc3NpZ25GdW5jKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgdmFsc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGluZGV4IDwgdmFsc0xlbmd0aCA/IHZhbHVlc1tpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGFzc2lnbkZ1bmMocmVzdWx0LCBwcm9wc1tpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhbiBlbXB0eSBhcnJheSBpZiBpdCdzIG5vdCBhbiBhcnJheSBsaWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgPyB2YWx1ZSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYGlkZW50aXR5YCBpZiBpdCdzIG5vdCBhIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBjYXN0IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nID8gdmFsdWUgOiBpZGVudGl0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgYGJhc2VSZXN0YCBhbGlhcyB3aGljaCBjYW4gYmUgcmVwbGFjZWQgd2l0aCBgaWRlbnRpdHlgIGJ5IG1vZHVsZVxuICAgICAqIHJlcGxhY2VtZW50IHBsdWdpbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHZhciBjYXN0UmVzdCA9IGJhc2VSZXN0O1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYGFycmF5YCB0byBhIHNsaWNlIGlmIGl0J3MgbmVlZGVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3Qgc2xpY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQ7XG4gICAgICByZXR1cm4gKCFzdGFydCAmJiBlbmQgPj0gbGVuZ3RoKSA/IGFycmF5IDogYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgY2xlYXJUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vY2xlYXJUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ8T2JqZWN0fSBpZCBUaGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3Qgb2YgdGhlIHRpbWVyIHRvIGNsZWFyLlxuICAgICAqL1xuICAgIHZhciBjbGVhclRpbWVvdXQgPSBjdHhDbGVhclRpbWVvdXQgfHwgZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiByb290LmNsZWFyVGltZW91dChpZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICBidWZmZXIuY29weShyZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEYXRhVmlldyhkYXRhVmlldywgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gICAgICByZXN1bHQubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB2YWx1ZXMgdG8gc29ydCB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgdmFsdWVgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcodmFsdWUsIG90aGVyKSB7XG4gICAgICBpZiAodmFsdWUgIT09IG90aGVyKSB7XG4gICAgICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgICB2YWxJc1JlZmxleGl2ZSA9IHZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpO1xuXG4gICAgICAgIHZhciBvdGhJc0RlZmluZWQgPSBvdGhlciAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gb3RoZXIgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IG90aGVyID09PSBvdGhlcixcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2wob3RoZXIpO1xuXG4gICAgICAgIGlmICgoIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wgJiYgIXZhbElzU3ltYm9sICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAgICAgICAodmFsSXNTeW1ib2wgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlICYmICFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKHZhbElzTnVsbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIXZhbElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICF2YWxJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wgJiYgIW90aElzU3ltYm9sICYmIHZhbHVlIDwgb3RoZXIpIHx8XG4gICAgICAgICAgICAob3RoSXNTeW1ib2wgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlICYmICF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIW90aElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICFvdGhJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vcmRlckJ5YCB0byBjb21wYXJlIG11bHRpcGxlIHByb3BlcnRpZXMgb2YgYSB2YWx1ZSB0byBhbm90aGVyXG4gICAgICogYW5kIHN0YWJsZSBzb3J0IHRoZW0uXG4gICAgICpcbiAgICAgKiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLFxuICAgICAqIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAgICAgKiBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW5bXXxzdHJpbmdbXX0gb3JkZXJzIFRoZSBvcmRlciB0byBzb3J0IGJ5IGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBvYmpDcml0ZXJpYSA9IG9iamVjdC5jcml0ZXJpYSxcbiAgICAgICAgICBvdGhDcml0ZXJpYSA9IG90aGVyLmNyaXRlcmlhLFxuICAgICAgICAgIGxlbmd0aCA9IG9iakNyaXRlcmlhLmxlbmd0aCxcbiAgICAgICAgICBvcmRlcnNMZW5ndGggPSBvcmRlcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY29tcGFyZUFzY2VuZGluZyhvYmpDcml0ZXJpYVtpbmRleF0sIG90aENyaXRlcmlhW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb3JkZXIgPSBvcmRlcnNbaW5kZXhdO1xuICAgICAgICAgIHJldHVybiByZXN1bHQgKiAob3JkZXIgPT0gJ2Rlc2MnID8gLTEgOiAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRml4ZXMgYW4gYEFycmF5I3NvcnRgIGJ1ZyBpbiB0aGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIGFwcGxpY2F0aW9uc1xuICAgICAgLy8gdGhhdCBjYXVzZXMgaXQsIHVuZGVyIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcywgdG8gcHJvdmlkZSB0aGUgc2FtZSB2YWx1ZSBmb3JcbiAgICAgIC8vIGBvYmplY3RgIGFuZCBgb3RoZXJgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3B1bGwvMTI0N1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTkwIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMsXG4gICAgICogcGxhY2Vob2xkZXJzLCBhbmQgcHJvdmlkZWQgYXJndW1lbnRzIGludG8gYSBzaW5nbGUgYXJyYXkgb2YgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZWZ0TGVuZ3RoICsgcmFuZ2VMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W2hvbGRlcnNbYXJnc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlIChyYW5nZUxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXgrK10gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBjb21wb3NlQXJnc2AgZXhjZXB0IHRoYXQgdGhlIGFyZ3VtZW50cyBjb21wb3NpdGlvblxuICAgICAqIGlzIHRhaWxvcmVkIGZvciBgXy5wYXJ0aWFsUmlnaHRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzSW5kZXggPSAtMSxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgcmlnaHRJbmRleCA9IC0xLFxuICAgICAgICAgIHJpZ2h0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShyYW5nZUxlbmd0aCArIHJpZ2h0TGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IHJhbmdlTGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFthcmdzSW5kZXhdID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgfVxuICAgICAgdmFyIG9mZnNldCA9IGFyZ3NJbmRleDtcbiAgICAgIHdoaWxlICgrK3JpZ2h0SW5kZXggPCByaWdodExlbmd0aCkge1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgcmlnaHRJbmRleF0gPSBwYXJ0aWFsc1tyaWdodEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2hvbGRlcnNJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbb2Zmc2V0ICsgaG9sZGVyc1tob2xkZXJzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICAgICAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgICAgIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05ldykge1xuICAgICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5ncm91cEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpbml0aWFsaXplcl0gVGhlIGFjY3VtdWxhdG9yIG9iamVjdCBpbml0aWFsaXplci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhZ2dyZWdhdG9yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFnZ3JlZ2F0b3Ioc2V0dGVyLCBpbml0aWFsaXplcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5QWdncmVnYXRvciA6IGJhc2VBZ2dyZWdhdG9yLFxuICAgICAgICAgICAgYWNjdW11bGF0b3IgPSBpbml0aWFsaXplciA/IGluaXRpYWxpemVyKCkgOiB7fTtcblxuICAgICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBzZXR0ZXIsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYWNjdW11bGF0b3IpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBjdXN0b21pemVyID0gKGFzc2lnbmVyLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5sb3dlckZpcnN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBTdHJpbmdgIGNhc2UgbWV0aG9kIHRvIHVzZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhc2VGaXJzdChtZXRob2ROYW1lKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgICAgICA/IHN0cmluZ1RvQXJyYXkoc3RyaW5nKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHZhciBjaHIgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBzdHJTeW1ib2xzWzBdXG4gICAgICAgICAgOiBzdHJpbmcuY2hhckF0KDApO1xuXG4gICAgICAgIHZhciB0cmFpbGluZyA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAxKS5qb2luKCcnKVxuICAgICAgICAgIDogc3RyaW5nLnNsaWNlKDEpO1xuXG4gICAgICAgIHJldHVybiBjaHJbbWV0aG9kTmFtZV0oKSArIHRyYWlsaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5jYW1lbENhc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSBlYWNoIHdvcmQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG91bmRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDb21wb3VuZGVyKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgYW4gaW5zdGFuY2Ugb2YgYEN0b3JgIHJlZ2FyZGxlc3Mgb2ZcbiAgICAgKiB3aGV0aGVyIGl0IHdhcyBpbnZva2VkIGFzIHBhcnQgb2YgYSBgbmV3YCBleHByZXNzaW9uIG9yIGJ5IGBjYWxsYCBvciBgYXBwbHlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDdG9yIFRoZSBjb25zdHJ1Y3RvciB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3RvcihDdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFVzZSBhIGBzd2l0Y2hgIHN0YXRlbWVudCB0byB3b3JrIHdpdGggY2xhc3MgY29uc3RydWN0b3JzLiBTZWVcbiAgICAgICAgLy8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1mdW5jdGlvbi1vYmplY3RzLWNhbGwtdGhpc2FyZ3VtZW50LWFyZ3VtZW50c2xpc3RcbiAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQ3RvcjtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTtcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgICAgICBjYXNlIDc6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKEN0b3IucHJvdG90eXBlKSxcbiAgICAgICAgICAgIHJlc3VsdCA9IEN0b3IuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuXG4gICAgICAgIC8vIE1pbWljIHRoZSBjb25zdHJ1Y3RvcidzIGByZXR1cm5gIGJlaGF2aW9yLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTMuMi4yIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogdGhpc0JpbmRpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBlbmFibGUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXJpdHkgVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KSB7XG4gICAgICB2YXIgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBob2xkZXJzID0gKGxlbmd0aCA8IDMgJiYgYXJnc1swXSAhPT0gcGxhY2Vob2xkZXIgJiYgYXJnc1tsZW5ndGggLSAxXSAhPT0gcGxhY2Vob2xkZXIpXG4gICAgICAgICAgPyBbXVxuICAgICAgICAgIDogcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuXG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFyZ3MsIGhvbGRlcnMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSAtIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5maW5kYCBvciBgXy5maW5kTGFzdGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmRJbmRleEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGNvbGxlY3Rpb24gaW5kZXguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmluZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGaW5kKGZpbmRJbmRleEZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgICB2YXIgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgICAgIGNvbGxlY3Rpb24gPSBrZXlzKGNvbGxlY3Rpb24pO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gZmluZEluZGV4RnVuYyhjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCk7XG4gICAgICAgIHJldHVybiBpbmRleCA+IC0xID8gaXRlcmFibGVbaXRlcmF0ZWUgPyBjb2xsZWN0aW9uW2luZGV4XSA6IGluZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZsb3dgIG9yIGBfLmZsb3dSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsb3cgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmxvdyhmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihmdW5jcykge1xuICAgICAgICB2YXIgbGVuZ3RoID0gZnVuY3MubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwcmVyZXEgPSBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS50aHJ1O1xuXG4gICAgICAgIGlmIChmcm9tUmlnaHQpIHtcbiAgICAgICAgICBmdW5jcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmNzW2luZGV4XTtcbiAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJlcmVxICYmICF3cmFwcGVyICYmIGdldEZ1bmNOYW1lKGZ1bmMpID09ICd3cmFwcGVyJykge1xuICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBuZXcgTG9kYXNoV3JhcHBlcihbXSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gd3JhcHBlciA/IGluZGV4IDogbGVuZ3RoO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGZ1bmMgPSBmdW5jc1tpbmRleF07XG5cbiAgICAgICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICAgICAgZGF0YSA9IGZ1bmNOYW1lID09ICd3cmFwcGVyJyA/IGdldERhdGEoZnVuYykgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoZGF0YSAmJiBpc0xhemlhYmxlKGRhdGFbMF0pICYmXG4gICAgICAgICAgICAgICAgZGF0YVsxXSA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSAmJlxuICAgICAgICAgICAgICAgICFkYXRhWzRdLmxlbmd0aCAmJiBkYXRhWzldID09IDFcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gd3JhcHBlcltnZXRGdW5jTmFtZShkYXRhWzBdKV0uYXBwbHkod3JhcHBlciwgZGF0YVszXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSAoZnVuYy5sZW5ndGggPT0gMSAmJiBpc0xhemlhYmxlKGZ1bmMpKVxuICAgICAgICAgICAgICA/IHdyYXBwZXJbZnVuY05hbWVdKClcbiAgICAgICAgICAgICAgOiB3cmFwcGVyLnRocnUoZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgdmFsdWUgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgaWYgKHdyYXBwZXIgJiYgYXJncy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXIucGxhbnQodmFsdWUpLnZhbHVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGxlbmd0aCA/IGZ1bmNzW2luZGV4XS5hcHBseSh0aGlzLCBhcmdzKSA6IHZhbHVlO1xuXG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmNzW2luZGV4XS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AsIHBhcnRpYWwgYXBwbGljYXRpb24sIGFuZCBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzUmlnaHRdIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkXG4gICAgICogIHRvIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNSaWdodF0gVGhlIGBwYXJ0aWFsc1JpZ2h0YCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUh5YnJpZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0FyeSA9IGJpdG1hc2sgJiBXUkFQX0FSWV9GTEFHLFxuICAgICAgICAgIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHLFxuICAgICAgICAgIGlzQ3VycmllZCA9IGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSxcbiAgICAgICAgICBpc0ZsaXAgPSBiaXRtYXNrICYgV1JBUF9GTElQX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDdXJyaWVkKSB7XG4gICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpLFxuICAgICAgICAgICAgICBob2xkZXJzQ291bnQgPSBjb3VudEhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFscykge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHNSaWdodCkge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggLT0gaG9sZGVyc0NvdW50O1xuICAgICAgICBpZiAoaXNDdXJyaWVkICYmIGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgdmFyIG5ld0hvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHRoaXNBcmcsXG4gICAgICAgICAgICBhcmdzLCBuZXdIb2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkgLSBsZW5ndGhcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLFxuICAgICAgICAgICAgZm4gPSBpc0JpbmRLZXkgPyB0aGlzQmluZGluZ1tmdW5jXSA6IGZ1bmM7XG5cbiAgICAgICAgbGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gICAgICAgIGlmIChhcmdQb3MpIHtcbiAgICAgICAgICBhcmdzID0gcmVvcmRlcihhcmdzLCBhcmdQb3MpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRmxpcCAmJiBsZW5ndGggPiAxKSB7XG4gICAgICAgICAgYXJncy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJ5ICYmIGFyeSA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3MubGVuZ3RoID0gYXJ5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpIHtcbiAgICAgICAgICBmbiA9IEN0b3IgfHwgY3JlYXRlQ3Rvcihmbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmludmVydEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRvSXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludmVydGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmVydGVyKHNldHRlciwgdG9JdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgdG9JdGVyYXRlZShpdGVyYXRlZSksIHt9KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSB1c2VkIGZvciBgdW5kZWZpbmVkYCBhcmd1bWVudHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVNYXRoT3BlcmF0aW9uKG9wZXJhdG9yLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgb3RoZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9TdHJpbmcob3RoZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb051bWJlcihvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ub3ZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFycmF5RnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBvdmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU92ZXIoYXJyYXlGdW5jKSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oaXRlcmF0ZWVzKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICB2YXIgdGhpc0FyZyA9IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIGFycmF5RnVuYyhpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgIGJhc2VkIG9uIGBsZW5ndGhgLiBUaGUgYGNoYXJzYCBzdHJpbmdcbiAgICAgKiBpcyB0cnVuY2F0ZWQgaWYgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGV4Y2VlZHMgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYWRkaW5nKGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIGNoYXJzID0gY2hhcnMgPT09IHVuZGVmaW5lZCA/ICcgJyA6IGJhc2VUb1N0cmluZyhjaGFycyk7XG5cbiAgICAgIHZhciBjaGFyc0xlbmd0aCA9IGNoYXJzLmxlbmd0aDtcbiAgICAgIGlmIChjaGFyc0xlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGNoYXJzTGVuZ3RoID8gYmFzZVJlcGVhdChjaGFycywgbGVuZ3RoKSA6IGNoYXJzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VSZXBlYXQoY2hhcnMsIG5hdGl2ZUNlaWwobGVuZ3RoIC8gc3RyaW5nU2l6ZShjaGFycykpKTtcbiAgICAgIHJldHVybiBoYXNVbmljb2RlKGNoYXJzKVxuICAgICAgICA/IGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHJlc3VsdCksIDAsIGxlbmd0aCkuam9pbignJylcbiAgICAgICAgOiByZXN1bHQuc2xpY2UoMCwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nXG4gICAgICogb2YgYHRoaXNBcmdgIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZWZ0TGVuZ3RoICsgYXJnc0xlbmd0aCksXG4gICAgICAgICAgICBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG5cbiAgICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4KytdID0gYXJndW1lbnRzWysrYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJhbmdlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbiAgICAgICAgaWYgKHN0ZXAgJiYgdHlwZW9mIHN0ZXAgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RhcnQsIGVuZCwgc3RlcCkpIHtcbiAgICAgICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAoc3RhcnQgPCBlbmQgPyAxIDogLTEpIDogdG9GaW5pdGUoc3RlcCk7XG4gICAgICAgIHJldHVybiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSByZWxhdGlvbmFsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlbGF0aW9uYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24ob3BlcmF0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgaWYgKCEodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnICYmIHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICBvdGhlciA9IHRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGNvbnRpbnVlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYGZ1bmNgIHdyYXBwZXIuXG4gICAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlY3VycnkoZnVuYywgYml0bWFzaywgd3JhcEZ1bmMsIHBsYWNlaG9sZGVyLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNDdXJyeSA9IGJpdG1hc2sgJiBXUkFQX0NVUlJZX0ZMQUcsXG4gICAgICAgICAgbmV3SG9sZGVycyA9IGlzQ3VycnkgPyBob2xkZXJzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld0hvbGRlcnNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBob2xkZXJzLFxuICAgICAgICAgIG5ld1BhcnRpYWxzID0gaXNDdXJyeSA/IHBhcnRpYWxzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld1BhcnRpYWxzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogcGFydGlhbHM7XG5cbiAgICAgIGJpdG1hc2sgfD0gKGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfRkxBRyA6IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgIGJpdG1hc2sgJj0gfihpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgOiBXUkFQX1BBUlRJQUxfRkxBRyk7XG5cbiAgICAgIGlmICghKGJpdG1hc2sgJiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyk7XG4gICAgICB9XG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgbmV3UGFydGlhbHMsIG5ld0hvbGRlcnMsIG5ld1BhcnRpYWxzUmlnaHQsXG4gICAgICAgIG5ld0hvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gd3JhcEZ1bmMuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIGlmIChpc0xhemlhYmxlKGZ1bmMpKSB7XG4gICAgICAgIHNldERhdGEocmVzdWx0LCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhyZXN1bHQsIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLnJvdW5kYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBNYXRoYCBtZXRob2QgdG8gdXNlIHdoZW4gcm91bmRpbmcuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcm91bmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUm91bmQobWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBNYXRoW21ldGhvZE5hbWVdO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgcHJlY2lzaW9uKSB7XG4gICAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gMCA6IG5hdGl2ZU1pbih0b0ludGVnZXIocHJlY2lzaW9uKSwgMjkyKTtcbiAgICAgICAgaWYgKHByZWNpc2lvbiAmJiBuYXRpdmVJc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgICAgLy8gU2hpZnQgd2l0aCBleHBvbmVudGlhbCBub3RhdGlvbiB0byBhdm9pZCBmbG9hdGluZy1wb2ludCBpc3N1ZXMuXG4gICAgICAgICAgLy8gU2VlIFtNRE5dKGh0dHBzOi8vbWRuLmlvL3JvdW5kI0V4YW1wbGVzKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHZhciBwYWlyID0gKHRvU3RyaW5nKG51bWJlcikgKyAnZScpLnNwbGl0KCdlJyksXG4gICAgICAgICAgICAgIHZhbHVlID0gZnVuYyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdICsgcHJlY2lzaW9uKSk7XG5cbiAgICAgICAgICBwYWlyID0gKHRvU3RyaW5nKHZhbHVlKSArICdlJykuc3BsaXQoJ2UnKTtcbiAgICAgICAgICByZXR1cm4gKyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdIC0gcHJlY2lzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMobnVtYmVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNldCBvYmplY3Qgb2YgYHZhbHVlc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFkZCB0byB0aGUgc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBzZXQuXG4gICAgICovXG4gICAgdmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmICgxIC8gc2V0VG9BcnJheShuZXcgU2V0KFssLTBdKSlbMV0pID09IElORklOSVRZKSA/IG5vb3AgOiBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBuZXcgU2V0KHZhbHVlcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy50b1BhaXJzYCBvciBgXy50b1BhaXJzSW5gIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhaXJzIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVRvUGFpcnMoa2V5c0Z1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyhvYmplY3QpO1xuICAgICAgICBpZiAodGFnID09IG1hcFRhZykge1xuICAgICAgICAgIHJldHVybiBtYXBUb0FycmF5KG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9QYWlycyhvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlVG9QYWlycyhvYmplY3QsIGtleXNGdW5jKG9iamVjdCkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBlaXRoZXIgY3VycmllcyBvciBpbnZva2VzIGBmdW5jYCB3aXRoIG9wdGlvbmFsXG4gICAgICogYHRoaXNgIGJpbmRpbmcgYW5kIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogICAgMSAtIGBfLmJpbmRgXG4gICAgICogICAgMiAtIGBfLmJpbmRLZXlgXG4gICAgICogICAgNCAtIGBfLmN1cnJ5YCBvciBgXy5jdXJyeVJpZ2h0YCBvZiBhIGJvdW5kIGZ1bmN0aW9uXG4gICAgICogICAgOCAtIGBfLmN1cnJ5YFxuICAgICAqICAgMTYgLSBgXy5jdXJyeVJpZ2h0YFxuICAgICAqICAgMzIgLSBgXy5wYXJ0aWFsYFxuICAgICAqICAgNjQgLSBgXy5wYXJ0aWFsUmlnaHRgXG4gICAgICogIDEyOCAtIGBfLnJlYXJnYFxuICAgICAqICAyNTYgLSBgXy5hcnlgXG4gICAgICogIDUxMiAtIGBfLmZsaXBgXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmICghaXNCaW5kS2V5ICYmIHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhcnRpYWxzID8gcGFydGlhbHMubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJ5ID0gYXJ5ID09PSB1bmRlZmluZWQgPyBhcnkgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKGFyeSksIDApO1xuICAgICAgYXJpdHkgPSBhcml0eSA9PT0gdW5kZWZpbmVkID8gYXJpdHkgOiB0b0ludGVnZXIoYXJpdHkpO1xuICAgICAgbGVuZ3RoIC09IGhvbGRlcnMgPyBob2xkZXJzLmxlbmd0aCA6IDA7XG5cbiAgICAgIGlmIChiaXRtYXNrICYgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzUmlnaHQgPSBwYXJ0aWFscyxcbiAgICAgICAgICAgIGhvbGRlcnNSaWdodCA9IGhvbGRlcnM7XG5cbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBnZXREYXRhKGZ1bmMpO1xuXG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCxcbiAgICAgICAgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBtZXJnZURhdGEobmV3RGF0YSwgZGF0YSk7XG4gICAgICB9XG4gICAgICBmdW5jID0gbmV3RGF0YVswXTtcbiAgICAgIGJpdG1hc2sgPSBuZXdEYXRhWzFdO1xuICAgICAgdGhpc0FyZyA9IG5ld0RhdGFbMl07XG4gICAgICBwYXJ0aWFscyA9IG5ld0RhdGFbM107XG4gICAgICBob2xkZXJzID0gbmV3RGF0YVs0XTtcbiAgICAgIGFyaXR5ID0gbmV3RGF0YVs5XSA9IG5ld0RhdGFbOV0gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IChpc0JpbmRLZXkgPyAwIDogZnVuYy5sZW5ndGgpXG4gICAgICAgIDogbmF0aXZlTWF4KG5ld0RhdGFbOV0gLSBsZW5ndGgsIDApO1xuXG4gICAgICBpZiAoIWFyaXR5ICYmIGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKTtcbiAgICAgIH1cbiAgICAgIGlmICghYml0bWFzayB8fCBiaXRtYXNrID09IFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpO1xuICAgICAgfSBlbHNlIGlmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRyB8fCBiaXRtYXNrID09IFdSQVBfQ1VSUllfUklHSFRfRkxBRykge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSk7XG4gICAgICB9IGVsc2UgaWYgKChiaXRtYXNrID09IFdSQVBfUEFSVElBTF9GTEFHIHx8IGJpdG1hc2sgPT0gKFdSQVBfQklORF9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcpKSAmJiAhaG9sZGVycy5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVIeWJyaWQuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHZhciBzZXR0ZXIgPSBkYXRhID8gYmFzZVNldERhdGEgOiBzZXREYXRhO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhzZXR0ZXIocmVzdWx0LCBuZXdEYXRhKSwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c2AgdG8gY3VzdG9taXplIGl0cyBgXy5hc3NpZ25JbmAgdXNlIHRvIGFzc2lnbiBwcm9wZXJ0aWVzXG4gICAgICogb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXNcbiAgICAgKiB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgKGVxKG9ialZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgIHJldHVybiBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzRGVlcGAgdG8gY3VzdG9taXplIGl0cyBgXy5tZXJnZWAgdXNlIHRvIG1lcmdlIHNvdXJjZVxuICAgICAqIG9iamVjdHMgaW50byBkZXN0aW5hdGlvbiBvYmplY3RzIHRoYXQgYXJlIHBhc3NlZCB0aHJ1LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgcGFyZW50IG9iamVjdCBvZiBgc3JjVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykge1xuICAgICAgaWYgKGlzT2JqZWN0KG9ialZhbHVlKSAmJiBpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgb2JqVmFsdWUpO1xuICAgICAgICBiYXNlTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCB1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9taXRgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uY2xvbmVEZWVwYCB1c2UgdG8gb25seSBjbG9uZSBwbGFpblxuICAgICAqIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bmNsb25lZCB2YWx1ZSBvciBgdW5kZWZpbmVkYCB0byBkZWZlciBjbG9uaW5nIHRvIGBfLmNsb25lRGVlcGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tT21pdENsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNQbGFpbk9iamVjdCh2YWx1ZSkgPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gICAgICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgYXJyU3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gICAgICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gICAgICBpZiAoYXJyU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBhcnJTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gYXJyYXk7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gICAgICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gICAgICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICAgICAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgICAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgICAgIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgb2JqU3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICAgICAgaWYgKG9ialN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gb2JqU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gICAgICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgICAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgICAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIGZsYXR0ZW5zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRSZXN0KGZ1bmMpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCB1bmRlZmluZWQsIGZsYXR0ZW4pLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0luLCBnZXRTeW1ib2xzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGdldERhdGEgPSAhbWV0YU1hcCA/IG5vb3AgOiBmdW5jdGlvbihmdW5jKSB7XG4gICAgICByZXR1cm4gbWV0YU1hcC5nZXQoZnVuYyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hbWUgb2YgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEZ1bmNOYW1lKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSAoZnVuYy5uYW1lICsgJycpLFxuICAgICAgICAgIGFycmF5ID0gcmVhbE5hbWVzW3Jlc3VsdF0sXG4gICAgICAgICAgbGVuZ3RoID0gaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIHJlc3VsdCkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBhcnJheVtsZW5ndGhdLFxuICAgICAgICAgICAgb3RoZXJGdW5jID0gZGF0YS5mdW5jO1xuICAgICAgICBpZiAob3RoZXJGdW5jID09IG51bGwgfHwgb3RoZXJGdW5jID09IGZ1bmMpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YS5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFyZ3VtZW50IHBsYWNlaG9sZGVyIHZhbHVlIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEhvbGRlcihmdW5jKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gsICdwbGFjZWhvbGRlcicpID8gbG9kYXNoIDogZnVuYztcbiAgICAgIHJldHVybiBvYmplY3QucGxhY2Vob2xkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgXCJpdGVyYXRlZVwiIGZ1bmN0aW9uLiBJZiBgXy5pdGVyYXRlZWAgaXMgY3VzdG9taXplZCxcbiAgICAgKiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGN1c3RvbSBtZXRob2QsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBiYXNlSXRlcmF0ZWVgLlxuICAgICAqIElmIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIHRoZSBjaG9zZW4gZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIHRoZW0gYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWVdIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiB0aGUgY3JlYXRlZCBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNob3NlbiBmdW5jdGlvbiBvciBpdHMgcmVzdWx0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEl0ZXJhdGVlKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaC5pdGVyYXRlZSB8fCBpdGVyYXRlZTtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gaXRlcmF0ZWUgPyBiYXNlSXRlcmF0ZWUgOiByZXN1bHQ7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJlc3VsdChhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSkgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgICAgIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgICAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgICAgICA6IGRhdGEubWFwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICAgICAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgaWYgKHVubWFza2VkKSB7XG4gICAgICAgIGlmIChpc093bikge1xuICAgICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICB3aGlsZSAob2JqZWN0KSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIHZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4gICAgLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuICAgIGlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAgICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgICAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAgICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICAgICAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgICAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZpZXcsIGFwcGx5aW5nIGFueSBgdHJhbnNmb3Jtc2AgdG8gdGhlIGBzdGFydGAgYW5kIGBlbmRgIHBvc2l0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3JtcyBUaGUgdHJhbnNmb3JtYXRpb25zIHRvIGFwcGx5IHRvIHRoZSB2aWV3LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGBzdGFydGAgYW5kIGBlbmRgXG4gICAgICogIHBvc2l0aW9ucyBvZiB0aGUgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRWaWV3KHN0YXJ0LCBlbmQsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRyYW5zZm9ybXNbaW5kZXhdLFxuICAgICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2Ryb3AnOiAgICAgIHN0YXJ0ICs9IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2Ryb3BSaWdodCc6IGVuZCAtPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlJzogICAgICBlbmQgPSBuYXRpdmVNaW4oZW5kLCBzdGFydCArIHNpemUpOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlUmlnaHQnOiBzdGFydCA9IG5hdGl2ZU1heChzdGFydCwgZW5kIC0gc2l6ZSk7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyAnc3RhcnQnOiBzdGFydCwgJ2VuZCc6IGVuZCB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHdyYXBwZXIgZGV0YWlscyBmcm9tIHRoZSBgc291cmNlYCBib2R5IGNvbW1lbnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd3JhcHBlciBkZXRhaWxzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFdyYXBEZXRhaWxzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoID0gc291cmNlLm1hdGNoKHJlV3JhcERldGFpbHMpO1xuICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0uc3BsaXQocmVTcGxpdERldGFpbHMpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICAgICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAgICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBhcnJheSBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gICAgICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgICAgICByZXN1bHQuaW5kZXggPSBhcnJheS5pbmRleDtcbiAgICAgICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgICAgIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lIGJhc2VkIG9uIGl0cyBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE1hcGAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgYFNldGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGlzRGVlcCkge1xuICAgICAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgICAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyB3cmFwcGVyIGBkZXRhaWxzYCBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgYHNvdXJjZWAgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gaW5zZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHNvdXJjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIGRldGFpbHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBkZXRhaWxzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGRldGFpbHNbbGFzdEluZGV4XSA9IChsZW5ndGggPiAxID8gJyYgJyA6ICcnKSArIGRldGFpbHNbbGFzdEluZGV4XTtcbiAgICAgIGRldGFpbHMgPSBkZXRhaWxzLmpvaW4obGVuZ3RoID4gMiA/ICcsICcgOiAnICcpO1xuICAgICAgcmV0dXJuIHNvdXJjZS5yZXBsYWNlKHJlV3JhcENvbW1lbnQsICd7XFxuLyogW3dyYXBwZWQgd2l0aCAnICsgZGV0YWlscyArICddICovXFxuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmbGF0dGVuYWJsZSBgYXJndW1lbnRzYCBvYmplY3Qgb3IgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGbGF0dGVuYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICAgICAhIShzcHJlYWRhYmxlU3ltYm9sICYmIHZhbHVlICYmIHZhbHVlW3NwcmVhZGFibGVTeW1ib2xdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICAgICApIHtcbiAgICAgICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgICAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICAgICAgOiAodmFsdWUgPT09IG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMYXppYWJsZShmdW5jKSB7XG4gICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICBvdGhlciA9IGxvZGFzaFtmdW5jTmFtZV07XG5cbiAgICAgIGlmICh0eXBlb2Ygb3RoZXIgIT0gJ2Z1bmN0aW9uJyB8fCAhKGZ1bmNOYW1lIGluIExhenlXcmFwcGVyLnByb3RvdHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGZ1bmMgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBnZXREYXRhKG90aGVyKTtcbiAgICAgIHJldHVybiAhIWRhdGEgJiYgZnVuYyA9PT0gZGF0YVswXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gICAgICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaXMgY2FwYWJsZSBvZiBiZWluZyBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2FibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICB2YXIgaXNNYXNrYWJsZSA9IGNvcmVKc0RhdGEgPyBpc0Z1bmN0aW9uIDogc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICAgICAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICAgICAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gICAgICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gICAgICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gICAgICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWVyZ2VzIHRoZSBmdW5jdGlvbiBtZXRhZGF0YSBvZiBgc291cmNlYCBpbnRvIGBkYXRhYC5cbiAgICAgKlxuICAgICAqIE1lcmdpbmcgbWV0YWRhdGEgcmVkdWNlcyB0aGUgbnVtYmVyIG9mIHdyYXBwZXJzIHVzZWQgdG8gaW52b2tlIGEgZnVuY3Rpb24uXG4gICAgICogVGhpcyBpcyBwb3NzaWJsZSBiZWNhdXNlIG1ldGhvZHMgbGlrZSBgXy5iaW5kYCwgYF8uY3VycnlgLCBhbmQgYF8ucGFydGlhbGBcbiAgICAgKiBtYXkgYmUgYXBwbGllZCByZWdhcmRsZXNzIG9mIGV4ZWN1dGlvbiBvcmRlci4gTWV0aG9kcyBsaWtlIGBfLmFyeWAgYW5kXG4gICAgICogYF8ucmVhcmdgIG1vZGlmeSBmdW5jdGlvbiBhcmd1bWVudHMsIG1ha2luZyB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBhcmVcbiAgICAgKiBleGVjdXRlZCBpbXBvcnRhbnQsIHByZXZlbnRpbmcgdGhlIG1lcmdpbmcgb2YgbWV0YWRhdGEuIEhvd2V2ZXIsIHdlIG1ha2VcbiAgICAgKiBhbiBleGNlcHRpb24gZm9yIGEgc2FmZSBjb21iaW5lZCBjYXNlIHdoZXJlIGN1cnJpZWQgZnVuY3Rpb25zIGhhdmUgYF8uYXJ5YFxuICAgICAqIGFuZCBvciBgXy5yZWFyZ2AgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGF0YSBUaGUgZGVzdGluYXRpb24gbWV0YWRhdGEuXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBzb3VyY2UgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkYXRhYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZXJnZURhdGEoZGF0YSwgc291cmNlKSB7XG4gICAgICB2YXIgYml0bWFzayA9IGRhdGFbMV0sXG4gICAgICAgICAgc3JjQml0bWFzayA9IHNvdXJjZVsxXSxcbiAgICAgICAgICBuZXdCaXRtYXNrID0gYml0bWFzayB8IHNyY0JpdG1hc2ssXG4gICAgICAgICAgaXNDb21tb24gPSBuZXdCaXRtYXNrIDwgKFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHIHwgV1JBUF9BUllfRkxBRyk7XG5cbiAgICAgIHZhciBpc0NvbWJvID1cbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX1JFQVJHX0ZMQUcpICYmIChkYXRhWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpKSAmJiAoc291cmNlWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpO1xuXG4gICAgICAvLyBFeGl0IGVhcmx5IGlmIG1ldGFkYXRhIGNhbid0IGJlIG1lcmdlZC5cbiAgICAgIGlmICghKGlzQ29tbW9uIHx8IGlzQ29tYm8pKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgdGhpc0FyZ2AgaWYgYXZhaWxhYmxlLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICBkYXRhWzJdID0gc291cmNlWzJdO1xuICAgICAgICAvLyBTZXQgd2hlbiBjdXJyeWluZyBhIGJvdW5kIGZ1bmN0aW9uLlxuICAgICAgICBuZXdCaXRtYXNrIHw9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyA/IDAgOiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUc7XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgYXJndW1lbnRzLlxuICAgICAgdmFyIHZhbHVlID0gc291cmNlWzNdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFscyA9IGRhdGFbM107XG4gICAgICAgIGRhdGFbM10gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzKHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzRdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzRdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzNdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNF07XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgcmlnaHQgYXJndW1lbnRzLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbNV07XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcGFydGlhbHMgPSBkYXRhWzVdO1xuICAgICAgICBkYXRhWzVdID0gcGFydGlhbHMgPyBjb21wb3NlQXJnc1JpZ2h0KHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzZdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzZdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzVdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNl07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcmdQb3NgIGlmIGF2YWlsYWJsZS5cbiAgICAgIHZhbHVlID0gc291cmNlWzddO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGRhdGFbN10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyeWAgaWYgaXQncyBzbWFsbGVyLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0FSWV9GTEFHKSB7XG4gICAgICAgIGRhdGFbOF0gPSBkYXRhWzhdID09IG51bGwgPyBzb3VyY2VbOF0gOiBuYXRpdmVNaW4oZGF0YVs4XSwgc291cmNlWzhdKTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyaXR5YCBpZiBvbmUgaXMgbm90IHByb3ZpZGVkLlxuICAgICAgaWYgKGRhdGFbOV0gPT0gbnVsbCkge1xuICAgICAgICBkYXRhWzldID0gc291cmNlWzldO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgZnVuY2AgYW5kIG1lcmdlIGJpdG1hc2tzLlxuICAgICAgZGF0YVswXSA9IHNvdXJjZVswXTtcbiAgICAgIGRhdGFbMV0gPSBuZXdCaXRtYXNrO1xuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAgICAgKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICAgICAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcGFyZW50IHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhdGggVGhlIHBhdGggdG8gZ2V0IHRoZSBwYXJlbnQgdmFsdWUgb2YuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBhcmVudCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJlbnQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5sZW5ndGggPCAyID8gb2JqZWN0IDogYmFzZUdldChvYmplY3QsIGJhc2VTbGljZShwYXRoLCAwLCAtMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlb3JkZXIgYGFycmF5YCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBpbmRleGVzIHdoZXJlIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIGZpcnN0IGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBmaXJzdCBlbGVtZW50LCB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBzZWNvbmQgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIHNlY29uZCBlbGVtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byByZW9yZGVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFycmF5IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVvcmRlcihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oaW5kZXhlcy5sZW5ndGgsIGFyckxlbmd0aCksXG4gICAgICAgICAgb2xkQXJyYXkgPSBjb3B5QXJyYXkoYXJyYXkpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBhcnJheVtsZW5ndGhdID0gaXNJbmRleChpbmRleCwgYXJyTGVuZ3RoKSA/IG9sZEFycmF5W2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIgb3IgXCJjb25zdHJ1Y3RvclwiLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgICAgIGlmIChrZXkgPT09ICdjb25zdHJ1Y3RvcicgJiYgdHlwZW9mIG9iamVjdFtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgdGhpcyBmdW5jdGlvbiBiZWNvbWVzIGhvdCwgaS5lLiBpcyBpbnZva2VkIGEgbG90IGluIGEgc2hvcnRcbiAgICAgKiBwZXJpb2Qgb2YgdGltZSwgaXQgd2lsbCB0cmlwIGl0cyBicmVha2VyIGFuZCB0cmFuc2l0aW9uIHRvIGFuIGlkZW50aXR5XG4gICAgICogZnVuY3Rpb24gdG8gYXZvaWQgZ2FyYmFnZSBjb2xsZWN0aW9uIHBhdXNlcyBpbiBWOC4gU2VlXG4gICAgICogW1Y4IGlzc3VlIDIwNzBdKGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIwNzApXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXREYXRhID0gc2hvcnRPdXQoYmFzZVNldERhdGEpO1xuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYHNldFRpbWVvdXRgXShodHRwczovL21kbi5pby9zZXRUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIHNldFRpbWVvdXQgPSBjdHhTZXRUaW1lb3V0IHx8IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcbiAgICAgIHJldHVybiByb290LnNldFRpbWVvdXQoZnVuYywgd2FpdCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGB3cmFwcGVyYCB0byBtaW1pYyB0aGUgc291cmNlIG9mIGByZWZlcmVuY2VgXG4gICAgICogd2l0aCB3cmFwcGVyIGRldGFpbHMgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIHNvdXJjZSBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwcGVyIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVmZXJlbmNlIFRoZSByZWZlcmVuY2UgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYHdyYXBwZXJgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdyYXBUb1N0cmluZyh3cmFwcGVyLCByZWZlcmVuY2UsIGJpdG1hc2spIHtcbiAgICAgIHZhciBzb3VyY2UgPSAocmVmZXJlbmNlICsgJycpO1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKHdyYXBwZXIsIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgdXBkYXRlV3JhcERldGFpbHMoZ2V0V3JhcERldGFpbHMoc291cmNlKSwgYml0bWFzaykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAgICAgKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAgICAgKiBtaWxsaXNlY29uZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gICAgICB2YXIgY291bnQgPSAwLFxuICAgICAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgICAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgd2hpY2ggbXV0YXRlcyBhbmQgc2V0cyB0aGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9YXJyYXkubGVuZ3RoXSBUaGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGVTZWxmKGFycmF5LCBzaXplKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgc2l6ZSA9IHNpemUgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHNpemU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IHNpemUpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBiYXNlUmFuZG9tKGluZGV4LCBsYXN0SW5kZXgpLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtyYW5kXTtcblxuICAgICAgICBhcnJheVtyYW5kXSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBhcnJheS5sZW5ndGggPSBzaXplO1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIHZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgICAgIH1cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gICAgICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHdyYXBwZXIgYGRldGFpbHNgIGJhc2VkIG9uIGBiaXRtYXNrYCBmbGFncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGV0YWlsc2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV3JhcERldGFpbHMoZGV0YWlscywgYml0bWFzaykge1xuICAgICAgYXJyYXlFYWNoKHdyYXBGbGFncywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICB2YXIgdmFsdWUgPSAnXy4nICsgcGFpclswXTtcbiAgICAgICAgaWYgKChiaXRtYXNrICYgcGFpclsxXSkgJiYgIWFycmF5SW5jbHVkZXMoZGV0YWlscywgdmFsdWUpKSB7XG4gICAgICAgICAgZGV0YWlscy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGV0YWlscy5zb3J0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB3cmFwcGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHdyYXBwZXIgVGhlIHdyYXBwZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHdyYXBwZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNsb25lKHdyYXBwZXIpIHtcbiAgICAgIGlmICh3cmFwcGVyIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2xvbmUoKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVyLl9fd3JhcHBlZF9fLCB3cmFwcGVyLl9fY2hhaW5fXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkod3JhcHBlci5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19pbmRleF9fICA9IHdyYXBwZXIuX19pbmRleF9fO1xuICAgICAgcmVzdWx0Ll9fdmFsdWVzX18gPSB3cmFwcGVyLl9fdmFsdWVzX187XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byBncm91cHMgdGhlIGxlbmd0aCBvZiBgc2l6ZWAuXG4gICAgICogSWYgYGFycmF5YCBjYW4ndCBiZSBzcGxpdCBldmVubHksIHRoZSBmaW5hbCBjaHVuayB3aWxsIGJlIHRoZSByZW1haW5pbmdcbiAgICAgKiBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT0xXSBUaGUgbGVuZ3RoIG9mIGVhY2ggY2h1bmtcbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNodW5rcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMik7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsnYycsICdkJ11dXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAzKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InLCAnYyddLCBbJ2QnXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaHVuayhhcnJheSwgc2l6ZSwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc2l6ZSwgZ3VhcmQpIDogc2l6ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBzaXplID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemUgPSBuYXRpdmVNYXgodG9JbnRlZ2VyKHNpemUpLCAwKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHNpemUgPCAxKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KG5hdGl2ZUNlaWwobGVuZ3RoIC8gc2l6ZSkpO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gYmFzZVNsaWNlKGFycmF5LCBpbmRleCwgKGluZGV4ICs9IHNpemUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBmYWxzZXkgdmFsdWVzIHJlbW92ZWQuIFRoZSB2YWx1ZXMgYGZhbHNlYCwgYG51bGxgLFxuICAgICAqIGAwYCwgYFwiXCJgLCBgdW5kZWZpbmVkYCwgYW5kIGBOYU5gIGFyZSBmYWxzZXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY29tcGFjdChbMCwgMSwgZmFsc2UsIDIsICcnLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFjdChhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgY29uY2F0ZW5hdGluZyBgYXJyYXlgIHdpdGggYW55IGFkZGl0aW9uYWwgYXJyYXlzXG4gICAgICogYW5kL29yIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgY29uY2F0ZW5hdGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMV07XG4gICAgICogdmFyIG90aGVyID0gXy5jb25jYXQoYXJyYXksIDIsIFszXSwgW1s0XV0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob3RoZXIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uY2F0KCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgYXJncyA9IEFycmF5KGxlbmd0aCAtIDEpLFxuICAgICAgICAgIGFycmF5ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICBhcmdzW2luZGV4IC0gMV0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UHVzaChpc0FycmF5KGFycmF5KSA/IGNvcHlBcnJheShhcnJheSkgOiBbYXJyYXldLCBiYXNlRmxhdHRlbihhcmdzLCAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBgYXJyYXlgIHZhbHVlcyBub3QgaW5jbHVkZWQgaW4gdGhlIG90aGVyIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy53aXRob3V0LCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2UoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbEJ5YCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kaWZmZXJlbmNlQnkoW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCBbeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBvcmRlciBhbmRcbiAgICAgKiByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsV2l0aGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VXaXRoKG9iamVjdHMsIFt7ICd4JzogMSwgJ3knOiAyIH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoY29tcGFyYXRvcikpIHtcbiAgICAgICAgY29tcGFyYXRvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbGxzIGVsZW1lbnRzIG9mIGBhcnJheWAgd2l0aCBgdmFsdWVgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdFxuICAgICAqIGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLmZpbGwoYXJyYXksICdhJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdhJywgJ2EnXVxuICAgICAqXG4gICAgICogXy5maWxsKEFycmF5KDMpLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgMiwgMl1cbiAgICAgKlxuICAgICAqIF8uZmlsbChbNCwgNiwgOCwgMTBdLCAnKicsIDEsIDMpO1xuICAgICAqIC8vID0+IFs0LCAnKicsICcqJywgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCAmJiB0eXBlb2Ygc3RhcnQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHZhbHVlLCBzdGFydCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdiYXJuZXknOyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2ZyZWQnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ3BlYmJsZXMnOyB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0SW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4IDwgMFxuICAgICAgICAgID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKVxuICAgICAgICAgIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmxhdHRlbnMgYGFycmF5YCBhIHNpbmdsZSBsZXZlbCBkZWVwLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW4oWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbihhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCAxKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlZXAoWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNCwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVlcChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCBJTkZJTklUWSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVuIGBhcnJheWAgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIFsyLCBbMywgWzRdXSwgNV1dO1xuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZXB0aChhcnJheSwgZGVwdGgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8udG9QYWlyc2A7IHRoaXMgbWV0aG9kIHJldHVybnMgYW4gb2JqZWN0IGNvbXBvc2VkXG4gICAgICogZnJvbSBrZXktdmFsdWUgYHBhaXJzYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzIFRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mcm9tUGFpcnMoW1snYScsIDFdLCBbJ2InLCAyXV0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21QYWlycyhwYWlycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgICAgICByZXN1bHRbcGFpclswXV0gPSBwYWlyWzFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZmlyc3RcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5oZWFkKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5oZWFkKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoZWFkKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBhcnJheVswXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBgdmFsdWVgIGlzIGZvdW5kIGluIGBhcnJheWBcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhcyB0aGVcbiAgICAgKiBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5pdGlhbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRpYWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDAsIC0xKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGFyZSBpbmNsdWRlZCBpbiBhbGwgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMl1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZClcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgaWYgKGl0ZXJhdGVlID09PSBsYXN0KG1hcHBlZCkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzXG4gICAgICogb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGFsbCBlbGVtZW50cyBpbiBgYXJyYXlgIGludG8gYSBzdHJpbmcgc2VwYXJhdGVkIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzZXBhcmF0b3I9JywnXSBUaGUgZWxlbWVudCBzZXBhcmF0b3IuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgam9pbmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5qb2luKFsnYScsICdiJywgJ2MnXSwgJ34nKTtcbiAgICAgKiAvLyA9PiAnYX5ifmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gam9pbihhcnJheSwgc2VwYXJhdG9yKSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/ICcnIDogbmF0aXZlSm9pbi5jYWxsKGFycmF5LCBzZXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgYXJyYXlgIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGluZGV4IDwgMCA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCkgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgICA/IHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpXG4gICAgICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZWxlbWVudCBhdCBpbmRleCBgbmAgb2YgYGFycmF5YC4gSWYgYG5gIGlzIG5lZ2F0aXZlLCB0aGUgbnRoXG4gICAgICogZWxlbWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAtMik7XG4gICAgICogLy8gPT4gJ2MnO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aChhcnJheSwgbikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZU50aChhcnJheSwgdG9JbnRlZ2VyKG4pKSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBnaXZlbiB2YWx1ZXMgZnJvbSBgYXJyYXlgIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLndpdGhvdXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5yZW1vdmVgXG4gICAgICogdG8gcmVtb3ZlIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgcHJlZGljYXRlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGwoYXJyYXksICdhJywgJ2MnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIHZhciBwdWxsID0gYmFzZVJlc3QocHVsbEFsbCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGwoYXJyYXksIFsnYScsICdjJ10pO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbChhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZUJ5YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDMgfSwgeyAneCc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxCeShhcnJheSwgW3sgJ3gnOiAxIH0sIHsgJ3gnOiAzIH1dLCAneCcpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsQnkoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VXaXRoYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAzLCAneSc6IDQgfSwgeyAneCc6IDUsICd5JzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbFdpdGgoYXJyYXksIFt7ICd4JzogMywgJ3knOiA0IH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogNSwgJ3knOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbFdpdGgoYXJyYXksIHZhbHVlcywgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZWxlbWVudHMgZnJvbSBgYXJyYXlgIGNvcnJlc3BvbmRpbmcgdG8gYGluZGV4ZXNgIGFuZCByZXR1cm5zIGFuXG4gICAgICogYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uYXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IFtpbmRleGVzXSBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICogdmFyIHB1bGxlZCA9IF8ucHVsbEF0KGFycmF5LCBbMSwgM10pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdjJ11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKHB1bGxlZCk7XG4gICAgICogLy8gPT4gWydiJywgJ2QnXVxuICAgICAqL1xuICAgIHZhciBwdWxsQXQgPSBmbGF0UmVzdChmdW5jdGlvbihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGJhc2VBdChhcnJheSwgaW5kZXhlcyk7XG5cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGFycmF5TWFwKGluZGV4ZXMsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBpc0luZGV4KGluZGV4LCBsZW5ndGgpID8gK2luZGV4IDogaW5kZXg7XG4gICAgICB9KS5zb3J0KGNvbXBhcmVBc2NlbmRpbmcpKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGVsZW1lbnRzIGZyb20gYGFycmF5YCB0aGF0IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvclxuICAgICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSByZW1vdmVkIGVsZW1lbnRzLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5maWx0ZXJgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5wdWxsYFxuICAgICAqIHRvIHB1bGwgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCA0XTtcbiAgICAgKiB2YXIgZXZlbnMgPSBfLnJlbW92ZShhcnJheSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhldmVucyk7XG4gICAgICogLy8gPT4gWzIsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgaW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIGBhcnJheWAgc28gdGhhdCB0aGUgZmlyc3QgZWxlbWVudCBiZWNvbWVzIHRoZSBsYXN0LCB0aGUgc2Vjb25kXG4gICAgICogZWxlbWVudCBiZWNvbWVzIHRoZSBzZWNvbmQgdG8gbGFzdCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YCBhbmQgaXMgYmFzZWQgb25cbiAgICAgKiBbYEFycmF5I3JldmVyc2VgXShodHRwczovL21kbi5pby9BcnJheS9yZXZlcnNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8ucmV2ZXJzZShhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmV2ZXJzZShhcnJheSkge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyBhcnJheSA6IG5hdGl2ZVJldmVyc2UuY2FsbChhcnJheSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgdXNlZCBpbnN0ZWFkIG9mXG4gICAgICogW2BBcnJheSNzbGljZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3NsaWNlKSB0byBlbnN1cmUgZGVuc2UgYXJyYXlzIGFyZVxuICAgICAqIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgJiYgdHlwZW9mIGVuZCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc3RhcnQsIGVuZCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VzIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgdGhlIGxvd2VzdCBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXgoWzMwLCA1MF0sIDQwKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggPCBsZW5ndGggJiYgZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBoaWdoZXN0XG4gICAgICogaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvXG4gICAgICogbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleChbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRMYXN0SW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmxhc3RJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKSAtIDE7XG4gICAgICAgIGlmIChlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxKFsxLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXkpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxQnlgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxQnkoWzEuMSwgMS4yLCAyLjMsIDIuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjEsIDIuM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWlsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFpbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMSwgbGVuZ3RoKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2UoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuIEVsZW1lbnRzIGFyZVxuICAgICAqIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBmYWxzZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy4gRWxlbWVudHNcbiAgICAgKiBhcmUgdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIGZyb20gYWxsIGdpdmVuIGFycmF5cyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbihbMl0sIFsxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIHVuaW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tIHRoZSBmaXJzdFxuICAgICAqIGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbkJ5KFsyLjFdLCBbMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb21cbiAgICAgKiB0aGUgZmlyc3QgYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIGFuIGFycmF5LCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpbiB3aGljaCBvbmx5IHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGVhY2ggZWxlbWVudFxuICAgICAqIGlzIGtlcHQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXJcbiAgICAgKiBpbiB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxKFsyLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGVcbiAgICAgKiBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxQnkoWzIuMSwgMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaXFCeShbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pcVdpdGgob2JqZWN0cywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcVdpdGgoYXJyYXksIGNvbXBhcmF0b3IpIHtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgZ3JvdXBlZFxuICAgICAqIGVsZW1lbnRzIGFuZCBjcmVhdGVzIGFuIGFycmF5IHJlZ3JvdXBpbmcgdGhlIGVsZW1lbnRzIHRvIHRoZWlyIHByZS16aXBcbiAgICAgKiBjb25maWd1cmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqXG4gICAgICogXy51bnppcCh6aXBwZWQpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXAoYXJyYXkpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IDA7XG4gICAgICBhcnJheSA9IGFycmF5RmlsdGVyKGFycmF5LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoZ3JvdXApKSB7XG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGdyb3VwLmxlbmd0aCwgbGVuZ3RoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYmFzZVRpbWVzKGxlbmd0aCwgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKGFycmF5LCBiYXNlUHJvcGVydHkoaW5kZXgpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IHJlZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICByZWdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0pO1xuICAgICAqIC8vID0+IFtbMSwgMTAsIDEwMF0sIFsyLCAyMCwgMjAwXV1cbiAgICAgKlxuICAgICAqIF8udW56aXBXaXRoKHppcHBlZCwgXy5hZGQpO1xuICAgICAqIC8vID0+IFszLCAzMCwgMzAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwV2l0aChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHVuemlwKGFycmF5KTtcbiAgICAgIGlmIChpdGVyYXRlZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlNYXAocmVzdWx0LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHVuZGVmaW5lZCwgZ3JvdXApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBleGNsdWRpbmcgYWxsIGdpdmVuIHZhbHVlcyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53aXRob3V0KFsyLCAxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICovXG4gICAgdmFyIHdpdGhvdXQgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGlzIHRoZVxuICAgICAqIFtzeW1tZXRyaWMgZGlmZmVyZW5jZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3ltbWV0cmljX2RpZmZlcmVuY2UpXG4gICAgICogb2YgdGhlIGdpdmVuIGFycmF5cy4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXJcbiAgICAgKiB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLndpdGhvdXRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3IoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqL1xuICAgIHZhciB4b3IgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZFxuICAgICAqIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lXG4gICAgICogYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3JCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yLCAzLjRdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnhvckJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB4b3JCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ueG9yV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB4b3JXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLCB0aGUgZmlyc3Qgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogZmlyc3QgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgdGhlIHNlY29uZCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBzZWNvbmQgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICovXG4gICAgdmFyIHppcCA9IGJhc2VSZXN0KHVuemlwKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZnJvbVBhaXJzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIHR3byBhcnJheXMsXG4gICAgICogb25lIG9mIHByb3BlcnR5IGlkZW50aWZpZXJzIGFuZCBvbmUgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0KFsnYScsICdiJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0KHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGFzc2lnblZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcE9iamVjdGAgZXhjZXB0IHRoYXQgaXQgc3VwcG9ydHMgcHJvcGVydHkgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0RGVlcChbJ2EuYlswXS5jJywgJ2EuYlsxXS5kJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiBbeyAnYyc6IDEgfSwgeyAnZCc6IDIgfV0gfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0RGVlcChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBiYXNlU2V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIGdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwV2l0aChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdLCBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gYSArIGIgKyBjO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFsxMTEsIDIyMl1cbiAgICAgKi9cbiAgICB2YXIgemlwV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgaXRlcmF0ZWUgPSBsZW5ndGggPiAxID8gYXJyYXlzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpdGVyYXRlZSA9IHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nID8gKGFycmF5cy5wb3AoKSwgaXRlcmF0ZWUpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHVuemlwV2l0aChhcnJheXMsIGl0ZXJhdGVlKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHRoYXQgd3JhcHMgYHZhbHVlYCB3aXRoIGV4cGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLiBUaGUgcmVzdWx0IG9mIHN1Y2ggc2VxdWVuY2VzIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIHlvdW5nZXN0ID0gX1xuICAgICAqICAgLmNoYWluKHVzZXJzKVxuICAgICAqICAgLnNvcnRCeSgnYWdlJylcbiAgICAgKiAgIC5tYXAoZnVuY3Rpb24obykge1xuICAgICAqICAgICByZXR1cm4gby51c2VyICsgJyBpcyAnICsgby5hZ2U7XG4gICAgICogICB9KVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMgaXMgMSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaGFpbih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaCh2YWx1ZSk7XG4gICAgICByZXN1bHQuX19jaGFpbl9fID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBgaW50ZXJjZXB0b3JgIGFuZCByZXR1cm5zIGB2YWx1ZWAuIFRoZSBpbnRlcmNlcHRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvXG4gICAgICogXCJ0YXAgaW50b1wiIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlIGluIG9yZGVyIHRvIG1vZGlmeSBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSlcbiAgICAgKiAgLnRhcChmdW5jdGlvbihhcnJheSkge1xuICAgICAqICAgIC8vIE11dGF0ZSBpbnB1dCBhcnJheS5cbiAgICAgKiAgICBhcnJheS5wb3AoKTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnJldmVyc2UoKVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YXAodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy50YXBgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwicGFzcyB0aHJ1XCIgdmFsdWVzIHJlcGxhY2luZyBpbnRlcm1lZGlhdGVcbiAgICAgKiByZXN1bHRzIGluIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXygnICBhYmMgICcpXG4gICAgICogIC5jaGFpbigpXG4gICAgICogIC50cmltKClcbiAgICAgKiAgLnRocnUoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgICByZXR1cm4gW3ZhbHVlXTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocnUodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICByZXR1cm4gaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8uYXRgLlxuICAgICAqXG4gICAgICogQG5hbWUgYXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXyhvYmplY3QpLmF0KFsnYVswXS5iLmMnLCAnYVsxXSddKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciB3cmFwcGVyQXQgPSBmbGF0UmVzdChmdW5jdGlvbihwYXRocykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICBzdGFydCA9IGxlbmd0aCA/IHBhdGhzWzBdIDogMCxcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbihvYmplY3QpIHsgcmV0dXJuIGJhc2VBdChvYmplY3QsIHBhdGhzKTsgfTtcblxuICAgICAgaWYgKGxlbmd0aCA+IDEgfHwgdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGggfHxcbiAgICAgICAgICAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHx8ICFpc0luZGV4KHN0YXJ0KSkge1xuICAgICAgICByZXR1cm4gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2Uoc3RhcnQsICtzdGFydCArIChsZW5ndGggPyAxIDogMCkpO1xuICAgICAgdmFsdWUuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLFxuICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUsIHRoaXMuX19jaGFpbl9fKS50aHJ1KGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIGlmIChsZW5ndGggJiYgIWFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgIGFycmF5LnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHdpdGggZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQG5hbWUgY2hhaW5cbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRob3V0IGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpLmhlYWQoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGggZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycylcbiAgICAgKiAgIC5jaGFpbigpXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAucGljaygndXNlcicpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDaGFpbigpIHtcbiAgICAgIHJldHVybiBjaGFpbih0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgYW5kIHJldHVybnMgdGhlIHdyYXBwZWQgcmVzdWx0LlxuICAgICAqXG4gICAgICogQG5hbWUgY29tbWl0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyXTtcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oYXJyYXkpLnB1c2goMyk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkID0gd3JhcHBlZC5jb21taXQoKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLmxhc3QoKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNvbW1pdCgpIHtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih0aGlzLnZhbHVlKCksIHRoaXMuX19jaGFpbl9fKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuZXh0IHZhbHVlIG9uIGEgd3JhcHBlZCBvYmplY3QgZm9sbG93aW5nIHRoZVxuICAgICAqIFtpdGVyYXRvciBwcm90b2NvbF0oaHR0cHM6Ly9tZG4uaW8vaXRlcmF0aW9uX3Byb3RvY29scyNpdGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAbmFtZSBuZXh0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV4dCBpdGVyYXRvciB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDEgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAyIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiB0cnVlLCAndmFsdWUnOiB1bmRlZmluZWQgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJOZXh0KCkge1xuICAgICAgaWYgKHRoaXMuX192YWx1ZXNfXyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHRvQXJyYXkodGhpcy52YWx1ZSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciBkb25lID0gdGhpcy5fX2luZGV4X18gPj0gdGhpcy5fX3ZhbHVlc19fLmxlbmd0aCxcbiAgICAgICAgICB2YWx1ZSA9IGRvbmUgPyB1bmRlZmluZWQgOiB0aGlzLl9fdmFsdWVzX19bdGhpcy5fX2luZGV4X18rK107XG5cbiAgICAgIHJldHVybiB7ICdkb25lJzogZG9uZSwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSB3cmFwcGVyIHRvIGJlIGl0ZXJhYmxlLlxuICAgICAqXG4gICAgICogQG5hbWUgU3ltYm9sLml0ZXJhdG9yXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgd3JhcHBlciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZFtTeW1ib2wuaXRlcmF0b3JdKCkgPT09IHdyYXBwZWQ7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogQXJyYXkuZnJvbSh3cmFwcGVkKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVG9JdGVyYXRvcigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgY2hhaW4gc2VxdWVuY2UgcGxhbnRpbmcgYHZhbHVlYCBhcyB0aGUgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHBsYW50XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGxhbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSkubWFwKHNxdWFyZSk7XG4gICAgICogdmFyIG90aGVyID0gd3JhcHBlZC5wbGFudChbMywgNF0pO1xuICAgICAqXG4gICAgICogb3RoZXIudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbOSwgMTZdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclBsYW50KHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIHBhcmVudCA9IHRoaXM7XG5cbiAgICAgIHdoaWxlIChwYXJlbnQgaW5zdGFuY2VvZiBiYXNlTG9kYXNoKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHdyYXBwZXJDbG9uZShwYXJlbnQpO1xuICAgICAgICBjbG9uZS5fX2luZGV4X18gPSAwO1xuICAgICAgICBjbG9uZS5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSBjbG9uZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBjbG9uZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldmlvdXMgPSBjbG9uZTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50Ll9fd3JhcHBlZF9fO1xuICAgICAgfVxuICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5yZXZlcnNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIHRoZSB3cmFwcGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfKGFycmF5KS5yZXZlcnNlKCkudmFsdWUoKVxuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJSZXZlcnNlKCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXztcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHZhciB3cmFwcGVkID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCkge1xuICAgICAgICAgIHdyYXBwZWQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlZCA9IHdyYXBwZWQucmV2ZXJzZSgpO1xuICAgICAgICB3cmFwcGVkLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgICAnYXJncyc6IFtyZXZlcnNlXSxcbiAgICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZWQsIHRoaXMuX19jaGFpbl9fKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnRocnUocmV2ZXJzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgdG9KU09OLCB2YWx1ZU9mXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJWYWx1ZSgpIHtcbiAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKHRoaXMuX193cmFwcGVkX18sIHRoaXMuX19hY3Rpb25zX18pO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGtleSB3YXMgcmV0dXJuZWQgYnkgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb3VudEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmNvdW50QnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogMiwgJzUnOiAxIH1cbiAgICAgKi9cbiAgICB2YXIgY291bnRCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICAgKytyZXN1bHRba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgMSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYWxsKiogZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogW2VtcHR5IGNvbGxlY3Rpb25zXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FbXB0eV9zZXQpIGJlY2F1c2VcbiAgICAgKiBbZXZlcnl0aGluZyBpcyB0cnVlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9WYWN1b3VzX3RydXRoKSBvZlxuICAgICAqIGVsZW1lbnRzIG9mIGVtcHR5IGNvbGxlY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ldmVyeShbdHJ1ZSwgMSwgbnVsbCwgJ3llcyddLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFdmVyeSA6IGJhc2VFdmVyeTtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50c1xuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucmVtb3ZlYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAc2VlIF8ucmVqZWN0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gQ29tYmluaW5nIHNldmVyYWwgcHJlZGljYXRlcyB1c2luZyBgXy5vdmVyRXZlcnlgIG9yIGBfLm92ZXJTb21lYC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5vdmVyU29tZShbeyAnYWdlJzogMzYgfSwgWydhZ2UnLCA0MF1dKSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyB0aGUgZmlyc3QgZWxlbWVudFxuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqL1xuICAgIHZhciBmaW5kID0gY3JlYXRlRmluZChmaW5kSW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9Y29sbGVjdGlvbi5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3QoWzEsIDIsIDMsIDRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgdmFyIGZpbmRMYXN0ID0gY3JlYXRlRmluZChmaW5kTGFzdEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmbGF0dGVuZWQgYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYFxuICAgICAqIHRocnUgYGl0ZXJhdGVlYCBhbmQgZmxhdHRlbmluZyB0aGUgbWFwcGVkIHJlc3VsdHMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbbiwgbl07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlZXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZWVwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgSU5GSU5JVFkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlcHRoKFsxLCAyXSwgZHVwbGljYXRlLCAyKTtcbiAgICAgKiAvLyA9PiBbWzEsIDFdLCBbMiwgMl1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlcHRoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBkZXB0aCkge1xuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAgICAgKiBvciBgXy5mb3JPd25gIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGVhY2hcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMWAgdGhlbiBgMmAuXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCA6IGJhc2VFYWNoO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckVhY2hgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGFsaWFzIGVhY2hSaWdodFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaFJpZ2h0KFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAyYCB0aGVuIGAxYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaFJpZ2h0IDogYmFzZUVhY2hSaWdodDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBvcmRlciBvZiBncm91cGVkIHZhbHVlc1xuICAgICAqIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gYGNvbGxlY3Rpb25gLiBUaGUgY29ycmVzcG9uZGluZ1xuICAgICAqIHZhbHVlIG9mIGVhY2gga2V5IGlzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZVxuICAgICAqIGtleS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3JvdXBCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjNdIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZ3JvdXBCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiBbJ29uZScsICd0d28nXSwgJzUnOiBbJ3RocmVlJ10gfVxuICAgICAqL1xuICAgIHZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiBgY29sbGVjdGlvbmAuIElmIGBjb2xsZWN0aW9uYCBpcyBhIHN0cmluZywgaXQnc1xuICAgICAqIGNoZWNrZWQgZm9yIGEgc3Vic3RyaW5nIG9mIGB2YWx1ZWAsIG90aGVyd2lzZVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogaXMgdXNlZCBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXNcbiAgICAgKiB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyh7ICdhJzogMSwgJ2InOiAyIH0sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoJ2FiY2QnLCAnYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5jbHVkZXMoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgICAgIGNvbGxlY3Rpb24gPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IGNvbGxlY3Rpb24gOiB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICBmcm9tSW5kZXggPSAoZnJvbUluZGV4ICYmICFndWFyZCkgPyB0b0ludGVnZXIoZnJvbUluZGV4KSA6IDA7XG5cbiAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggPCAwKSB7XG4gICAgICAgIGZyb21JbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pXG4gICAgICAgID8gKGZyb21JbmRleCA8PSBsZW5ndGggJiYgY29sbGVjdGlvbi5pbmRleE9mKHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpXG4gICAgICAgIDogKCEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nXG4gICAgICogYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBpbnZva2VkIG1ldGhvZC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzXG4gICAgICogYXJlIHByb3ZpZGVkIHRvIGVhY2ggaW52b2tlZCBtZXRob2QuIElmIGBwYXRoYCBpcyBhIGZ1bmN0aW9uLCBpdCdzIGludm9rZWRcbiAgICAgKiBmb3IsIGFuZCBgdGhpc2AgYm91bmQgdG8sIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZSBvclxuICAgICAqICB0aGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGVhY2ggbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbWzUsIDEsIDddLCBbMywgMiwgMV1dLCAnc29ydCcpO1xuICAgICAqIC8vID0+IFtbMSwgNSwgN10sIFsxLCAyLCAzXV1cbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFsxMjMsIDQ1Nl0sIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsICcnKTtcbiAgICAgKiAvLyA9PiBbWycxJywgJzInLCAnMyddLCBbJzQnLCAnNScsICc2J11dXG4gICAgICovXG4gICAgdmFyIGludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXNGdW5jID8gYXBwbHkocGF0aCwgdmFsdWUsIGFyZ3MpIDogYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbGFzdCBlbGVtZW50IHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBrZXkuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtcbiAgICAgKiAgIHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LFxuICAgICAqICAgeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCBmdW5jdGlvbihvKSB7XG4gICAgICogICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShvLmNvZGUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksICdkaXInKTtcbiAgICAgKiAvLyA9PiB7ICdsZWZ0JzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdyaWdodCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqL1xuICAgIHZhciBrZXlCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIHZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICAgICAqIGBmaWxsYCwgYGludmVydGAsIGBwYXJzZUludGAsIGByYW5kb21gLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZXBlYXRgLFxuICAgICAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdXG4gICAgICpcbiAgICAgKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlNYXAgOiBiYXNlTWFwO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRCeWAgZXhjZXB0IHRoYXQgaXQgYWxsb3dzIHNwZWNpZnlpbmcgdGhlIHNvcnRcbiAgICAgKiBvcmRlcnMgb2YgdGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlc1xuICAgICAqIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yXG4gICAgICogZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlciBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXlbXXxGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtvcmRlcnNdIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBTb3J0IGJ5IGB1c2VyYCBpbiBhc2NlbmRpbmcgb3JkZXIgYW5kIGJ5IGBhZ2VgIGluIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICogXy5vcmRlckJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10sIFsnYXNjJywgJ2Rlc2MnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycywgZ3VhcmQpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0FycmF5KGl0ZXJhdGVlcykpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gaXRlcmF0ZWVzID09IG51bGwgPyBbXSA6IFtpdGVyYXRlZXNdO1xuICAgICAgfVxuICAgICAgb3JkZXJzID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBvcmRlcnM7XG4gICAgICBpZiAoIWlzQXJyYXkob3JkZXJzKSkge1xuICAgICAgICBvcmRlcnMgPSBvcmRlcnMgPT0gbnVsbCA/IFtdIDogW29yZGVyc107XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byB0d28gZ3JvdXBzLCB0aGUgZmlyc3Qgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IsIHRoZSBzZWNvbmQgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleSBmb3IuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydwZWJibGVzJ10sIFsnYmFybmV5JywgJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsICdwZWJibGVzJ10sIFsnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKi9cbiAgICB2YXIgcGFydGl0aW9uID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFtrZXkgPyAwIDogMV0ucHVzaCh2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24oKSB7IHJldHVybiBbW10sIFtdXTsgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2VzIGBjb2xsZWN0aW9uYCB0byBhIHZhbHVlIHdoaWNoIGlzIHRoZSBhY2N1bXVsYXRlZCByZXN1bHQgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLiBJZiBgYWNjdW11bGF0b3JgXG4gICAgICogaXMgbm90IGdpdmVuLCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgaXMgdXNlZCBhcyB0aGUgaW5pdGlhbFxuICAgICAqIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOlxuICAgICAqIChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5yZWR1Y2VgLCBgXy5yZWR1Y2VSaWdodGAsIGFuZCBgXy50cmFuc2Zvcm1gLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFzc2lnbmAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgaW5jbHVkZXNgLCBgbWVyZ2VgLCBgb3JkZXJCeWAsXG4gICAgICogYW5kIGBzb3J0QnlgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZShbMSwgMl0sIGZ1bmN0aW9uKHN1bSwgbikge1xuICAgICAqICAgcmV0dXJuIHN1bSArIG47XG4gICAgICogfSwgMCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZWR1Y2UoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiAgIHJldHVybiByZXN1bHQ7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZSA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2gpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmVkdWNlYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbWzAsIDFdLCBbMiwgM10sIFs0LCA1XV07XG4gICAgICpcbiAgICAgKiBfLnJlZHVjZVJpZ2h0KGFycmF5LCBmdW5jdGlvbihmbGF0dGVuZWQsIG90aGVyKSB7XG4gICAgICogICByZXR1cm4gZmxhdHRlbmVkLmNvbmNhdChvdGhlcik7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA1LCAyLCAzLCAwLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2VSaWdodCA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2hSaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmZpbHRlcmA7IHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYFxuICAgICAqIHRoYXQgYHByZWRpY2F0ZWAgZG9lcyAqKm5vdCoqIHJldHVybiB0cnV0aHkgZm9yLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5maWx0ZXJcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5yZWplY3QodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVqZWN0KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgcmFuZG9tIGVsZW1lbnQgZnJvbSBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZSA6IGJhc2VTYW1wbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGBuYCByYW5kb20gZWxlbWVudHMgYXQgdW5pcXVlIGtleXMgZnJvbSBgY29sbGVjdGlvbmAgdXAgdG8gdGhlXG4gICAgICogc2l6ZSBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzMsIDFdXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCA0KTtcbiAgICAgKiAvLyA9PiBbMiwgMywgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZVNpemUgOiBiYXNlU2FtcGxlU2l6ZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygc2h1ZmZsZWQgdmFsdWVzLCB1c2luZyBhIHZlcnNpb24gb2YgdGhlXG4gICAgICogW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXItWWF0ZXNfc2h1ZmZsZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2h1ZmZsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IFs0LCAxLCAzLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTaHVmZmxlIDogYmFzZVNodWZmbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzaXplIG9mIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgaXRzIGxlbmd0aCBmb3IgYXJyYXktbGlrZVxuICAgICAqIHZhbHVlcyBvciB0aGUgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb2xsZWN0aW9uIHNpemUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2l6ZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uc2l6ZSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8uc2l6ZSgncGViYmxlcycpO1xuICAgICAqIC8vID0+IDdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaXplKGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pID8gc3RyaW5nU2l6ZShjb2xsZWN0aW9uKSA6IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyhjb2xsZWN0aW9uKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uc2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlS2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFueSoqIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb21lKFtudWxsLCAwLCAneWVzJywgZmFsc2VdLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U29tZSA6IGJhc2VTb21lO1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMsIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIgYnkgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24gdGhydSBlYWNoIGl0ZXJhdGVlLiBUaGlzIG1ldGhvZFxuICAgICAqIHBlcmZvcm1zIGEgc3RhYmxlIHNvcnQsIHRoYXQgaXMsIGl0IHByZXNlcnZlcyB0aGUgb3JpZ2luYWwgc29ydCBvcmRlciBvZlxuICAgICAqIGVxdWFsIGVsZW1lbnRzLiBUaGUgaXRlcmF0ZWVzIGFyZSBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDMwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyOyB9XSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCAzMF1dXG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNF0sIFsnYmFybmV5JywgMzZdLCBbJ2ZyZWQnLCAzMF0sIFsnZnJlZCcsIDQ4XV1cbiAgICAgKi9cbiAgICB2YXIgc29ydEJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWVzKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA+IDEgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChsZW5ndGggPiAyICYmIGlzSXRlcmF0ZWVDYWxsKGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdLCBpdGVyYXRlZXNbMl0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtpdGVyYXRlZXNbMF1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGJhc2VGbGF0dGVuKGl0ZXJhdGVlcywgMSksIFtdKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICAgICAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IERhdGVcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gICAgICogfSwgXy5ub3coKSk7XG4gICAgICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgbm93ID0gY3R4Tm93IHx8IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbiAgICB9O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmJlZm9yZWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiBgZnVuY2Agb25jZSBpdCdzIGNhbGxlZCBgbmAgb3IgbW9yZSB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYmVmb3JlIGBmdW5jYCBpcyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXZlcyA9IFsncHJvZmlsZScsICdzZXR0aW5ncyddO1xuICAgICAqXG4gICAgICogdmFyIGRvbmUgPSBfLmFmdGVyKHNhdmVzLmxlbmd0aCwgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnZG9uZSBzYXZpbmchJyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goc2F2ZXMsIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgKiAgIGFzeW5jU2F2ZSh7ICd0eXBlJzogdHlwZSwgJ2NvbXBsZXRlJzogZG9uZSB9KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdkb25lIHNhdmluZyEnIGFmdGVyIHRoZSB0d28gYXN5bmMgc2F2ZXMgaGF2ZSBjb21wbGV0ZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWZ0ZXIobiwgZnVuYykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA8IDEpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHVwIHRvIGBuYCBhcmd1bWVudHMsXG4gICAgICogaWdub3JpbmcgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgY2FwLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLmFyeShwYXJzZUludCwgMSkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnkoZnVuYywgbiwgZ3VhcmQpIHtcbiAgICAgIG4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IG47XG4gICAgICBuID0gKGZ1bmMgJiYgbiA9PSBudWxsKSA/IGZ1bmMubGVuZ3RoIDogbjtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQVJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHNcbiAgICAgKiBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hpbGUgaXQncyBjYWxsZWQgbGVzcyB0aGFuIGBuYCB0aW1lcy4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBhdCB3aGljaCBgZnVuY2AgaXMgbm8gbG9uZ2VyIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uYmVmb3JlKDUsIGFkZENvbnRhY3RUb0xpc3QpKTtcbiAgICAgKiAvLyA9PiBBbGxvd3MgYWRkaW5nIHVwIHRvIDQgY29udGFjdHMgdG8gdGhlIGxpc3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmVmb3JlKG4sIGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uID4gMCkge1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgICAgZnVuYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgbmF0aXZlIGBGdW5jdGlvbiNiaW5kYCwgdGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmQpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgb2JqZWN0W2tleV1gIHdpdGggYHBhcnRpYWxzYFxuICAgICAqIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIGBfLmJpbmRgIGJ5IGFsbG93aW5nIGJvdW5kIGZ1bmN0aW9ucyB0byByZWZlcmVuY2VcbiAgICAgKiBtZXRob2RzIHRoYXQgbWF5IGJlIHJlZGVmaW5lZCBvciBkb24ndCB5ZXQgZXhpc3QuIFNlZVxuICAgICAqIFtQZXRlciBNaWNoYXV4J3MgYXJ0aWNsZV0oaHR0cDovL3BldGVyLm1pY2hhdXguY2EvYXJ0aWNsZXMvbGF6eS1mdW5jdGlvbi1kZWZpbml0aW9uLXBhdHRlcm4pXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kS2V5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52b2tlIHRoZSBtZXRob2Qgb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAndXNlcic6ICdmcmVkJyxcbiAgICAgKiAgICdncmVldCc6IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiBvYmplY3QuZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICd5YSAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kS2V5ID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBrZXksIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZEtleSkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoa2V5LCBiaXRtYXNrLCBvYmplY3QsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYXJndW1lbnRzIG9mIGBmdW5jYCBhbmQgZWl0aGVyIGludm9rZXNcbiAgICAgKiBgZnVuY2AgcmV0dXJuaW5nIGl0cyByZXN1bHQsIGlmIGF0IGxlYXN0IGBhcml0eWAgbnVtYmVyIG9mIGFyZ3VtZW50cyBoYXZlXG4gICAgICogYmVlbiBwcm92aWRlZCwgb3IgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0aGUgcmVtYWluaW5nIGBmdW5jYFxuICAgICAqIGFyZ3VtZW50cywgYW5kIHNvIG9uLiBUaGUgYXJpdHkgb2YgYGZ1bmNgIG1heSBiZSBzcGVjaWZpZWQgaWYgYGZ1bmMubGVuZ3RoYFxuICAgICAqIGlzIG5vdCBzdWZmaWNpZW50LlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEpKDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMSkoXywgMykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnkoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeS5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jdXJyeWAgZXhjZXB0IHRoYXQgYXJndW1lbnRzIGFyZSBhcHBsaWVkIHRvIGBmdW5jYFxuICAgICAqIGluIHRoZSBtYW5uZXIgb2YgYF8ucGFydGlhbFJpZ2h0YCBpbnN0ZWFkIG9mIGBfLnBhcnRpYWxgLlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5UmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnlSaWdodChhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgzKSgyKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMiwgMykoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDMpKDEsIF8pKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5UmlnaHQoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeVJpZ2h0LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAgICAgKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAgICAgKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gICAgICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gICAgICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gICAgICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICAgICAqIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICAgICAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gICAgICogICAnbGVhZGluZyc6IHRydWUsXG4gICAgICogICAndHJhaWxpbmcnOiBmYWxzZVxuICAgICAqIH0pKTtcbiAgICAgKlxuICAgICAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gICAgICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gICAgICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICAgICAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxhc3RBcmdzLFxuICAgICAgICAgIGxhc3RUaGlzLFxuICAgICAgICAgIG1heFdhaXQsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIHRpbWVySWQsXG4gICAgICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgICAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICAgICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgICAgICByZXR1cm4gbWF4aW5nXG4gICAgICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgICAgIDogdGltZVdhaXRpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICAgICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgICAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAgICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICAgICAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gICAgICByZXR1cm4gZGVib3VuY2VkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmVycyBpbnZva2luZyB0aGUgYGZ1bmNgIHVudGlsIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzIGNsZWFyZWQuIEFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWZlci5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAnZGVmZXJyZWQnKTtcbiAgICAgKiAvLyA9PiBMb2dzICdkZWZlcnJlZCcgYWZ0ZXIgb25lIG1pbGxpc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWZlciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgMSwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIGBmdW5jYCBhZnRlciBgd2FpdGAgbWlsbGlzZWNvbmRzLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWxheShmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAxMDAwLCAnbGF0ZXInKTtcbiAgICAgKiAvLyA9PiBMb2dzICdsYXRlcicgYWZ0ZXIgb25lIHNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVsYXkgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIHRvTnVtYmVyKHdhaXQpIHx8IDAsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgcmV2ZXJzZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBmbGlwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxpcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZsaXBwZWQgPSBfLmZsaXAoZnVuY3Rpb24oKSB7XG4gICAgICogICByZXR1cm4gXy50b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBmbGlwcGVkKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gWydkJywgJ2MnLCAnYicsICdhJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGlwKGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfRkxJUF9GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICAgICAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAgICAgKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICAgICAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICAgICAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gICAgICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAgICAgKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICAgICAqXG4gICAgICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB2YWx1ZXMob3RoZXIpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqXG4gICAgICogb2JqZWN0LmEgPSAyO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gICAgICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKlxuICAgICAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gICAgICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICB9XG5cbiAgICAvLyBFeHBvc2UgYE1hcENhY2hlYC5cbiAgICBtZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBuZWdhdGVzIHRoZSByZXN1bHQgb2YgdGhlIHByZWRpY2F0ZSBgZnVuY2AuIFRoZVxuICAgICAqIGBmdW5jYCBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIHByZWRpY2F0ZSB0byBuZWdhdGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbmVnYXRlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNFdmVuKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsxLCAyLCAzLCA0LCA1LCA2XSwgXy5uZWdhdGUoaXNFdmVuKSk7XG4gICAgICogLy8gPT4gWzEsIDMsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmVnYXRlKHByZWRpY2F0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpcyByZXN0cmljdGVkIHRvIGludm9raW5nIGBmdW5jYCBvbmNlLiBSZXBlYXQgY2FsbHNcbiAgICAgKiB0byB0aGUgZnVuY3Rpb24gcmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgaW52b2NhdGlvbi4gVGhlIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBpbml0aWFsaXplID0gXy5vbmNlKGNyZWF0ZUFwcGxpY2F0aW9uKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIC8vID0+IGBjcmVhdGVBcHBsaWNhdGlvbmAgaXMgaW52b2tlZCBvbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmVmb3JlKDIsIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50cyB0cmFuc2Zvcm1lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFt0cmFuc2Zvcm1zPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGFyZ3VtZW50IHRyYW5zZm9ybXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGRvdWJsZWQobikge1xuICAgICAqICAgcmV0dXJuIG4gKiAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJBcmdzKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiBbeCwgeV07XG4gICAgICogfSwgW3NxdWFyZSwgZG91YmxlZF0pO1xuICAgICAqXG4gICAgICogZnVuYyg5LCAzKTtcbiAgICAgKiAvLyA9PiBbODEsIDZdXG4gICAgICpcbiAgICAgKiBmdW5jKDEwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTAwLCAxMF1cbiAgICAgKi9cbiAgICB2YXIgb3ZlckFyZ3MgPSBjYXN0UmVzdChmdW5jdGlvbihmdW5jLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB0cmFuc2Zvcm1zID0gKHRyYW5zZm9ybXMubGVuZ3RoID09IDEgJiYgaXNBcnJheSh0cmFuc2Zvcm1zWzBdKSlcbiAgICAgICAgPyBhcnJheU1hcCh0cmFuc2Zvcm1zWzBdLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpXG4gICAgICAgIDogYXJyYXlNYXAoYmFzZUZsYXR0ZW4odHJhbnNmb3JtcywgMSksIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciBmdW5jc0xlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oYXJncy5sZW5ndGgsIGZ1bmNzTGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gdHJhbnNmb3Jtc1tpbmRleF0uY2FsbCh0aGlzLCBhcmdzW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZVxuICAgICAqIGFyZ3VtZW50cyBpdCByZWNlaXZlcy4gVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5iaW5kYCBleGNlcHQgaXQgZG9lcyAqKm5vdCoqXG4gICAgICogYWx0ZXIgdGhlIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWwucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWwoZ3JlZXQsICdoZWxsbycpO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWwoZ3JlZXQsIF8sICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsKSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnBhcnRpYWxgIGV4Y2VwdCB0aGF0IHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50c1xuICAgICAqIGFyZSBhcHBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWxSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2hlbGxvJywgXyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsUmlnaHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWxSaWdodCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgYXJyYW5nZWQgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIHNwZWNpZmllZCBgaW5kZXhlc2Agd2hlcmUgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBmaXJzdCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCwgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBzZWNvbmQgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZWFycmFuZ2UgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcmd1bWVudCBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcmVhcmdlZCA9IF8ucmVhcmcoZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9LCBbMiwgMCwgMV0pO1xuICAgICAqXG4gICAgICogcmVhcmdlZCgnYicsICdjJywgJ2EnKVxuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIHZhciByZWFyZyA9IGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmMsIGluZGV4ZXMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUkVBUkdfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5kZXhlcyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIGFuZCBhcmd1bWVudHMgZnJvbSBgc3RhcnRgIGFuZCBiZXlvbmQgcHJvdmlkZWQgYXNcbiAgICAgKiBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbcmVzdCBwYXJhbWV0ZXJdKGh0dHBzOi8vbWRuLmlvL3Jlc3RfcGFyYW1ldGVycykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8ucmVzdChmdW5jdGlvbih3aGF0LCBuYW1lcykge1xuICAgICAqICAgcmV0dXJuIHdoYXQgKyAnICcgKyBfLmluaXRpYWwobmFtZXMpLmpvaW4oJywgJykgK1xuICAgICAqICAgICAoXy5zaXplKG5hbWVzKSA+IDEgPyAnLCAmICcgOiAnJykgKyBfLmxhc3QobmFtZXMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KCdoZWxsbycsICdmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT09IHVuZGVmaW5lZCA/IHN0YXJ0IDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jLCBzdGFydCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlIGZ1bmN0aW9uIGFuZCBhbiBhcnJheSBvZiBhcmd1bWVudHMgbXVjaCBsaWtlXG4gICAgICogW2BGdW5jdGlvbiNhcHBseWBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtzcHJlYWQgb3BlcmF0b3JdKGh0dHBzOi8vbWRuLmlvL3NwcmVhZF9vcGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBzcHJlYWQgYXJndW1lbnRzIG92ZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHNwcmVhZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8uc3ByZWFkKGZ1bmN0aW9uKHdobywgd2hhdCkge1xuICAgICAqICAgcmV0dXJuIHdobyArICcgc2F5cyAnICsgd2hhdDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheShbJ2ZyZWQnLCAnaGVsbG8nXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQgc2F5cyBoZWxsbydcbiAgICAgKlxuICAgICAqIHZhciBudW1iZXJzID0gUHJvbWlzZS5hbGwoW1xuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDQwKSxcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSgzNilcbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIG51bWJlcnMudGhlbihfLnNwcmVhZChmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4geCArIHk7XG4gICAgICogfSkpO1xuICAgICAqIC8vID0+IGEgUHJvbWlzZSBvZiA3NlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwcmVhZChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IG5hdGl2ZU1heCh0b0ludGVnZXIoc3RhcnQpLCAwKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFyZ3Nbc3RhcnRdLFxuICAgICAgICAgICAgb3RoZXJBcmdzID0gY2FzdFNsaWNlKGFyZ3MsIDAsIHN0YXJ0KTtcblxuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBhcnJheVB1c2gob3RoZXJBcmdzLCBhcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gICAgICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAgICAgKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gICAgICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gICAgICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICAgICAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAgICAgKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gICAgICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gICAgICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAgICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHVwIHRvIG9uZSBhcmd1bWVudCwgaWdub3JpbmcgYW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8udW5hcnkocGFyc2VJbnQpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5hcnkoZnVuYykge1xuICAgICAgcmV0dXJuIGFyeShmdW5jLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBgdmFsdWVgIHRvIGB3cmFwcGVyYCBhcyBpdHMgZmlyc3RcbiAgICAgKiBhcmd1bWVudC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBmdW5jdGlvbiBhcmUgYXBwZW5kZWRcbiAgICAgKiB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgYHdyYXBwZXJgLiBUaGUgd3JhcHBlciBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFt3cmFwcGVyPWlkZW50aXR5XSBUaGUgd3JhcHBlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHAgPSBfLndyYXAoXy5lc2NhcGUsIGZ1bmN0aW9uKGZ1bmMsIHRleHQpIHtcbiAgICAgKiAgIHJldHVybiAnPHA+JyArIGZ1bmModGV4dCkgKyAnPC9wPic7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBwKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICc8cD5mcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXM8L3A+J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXAodmFsdWUsIHdyYXBwZXIpIHtcbiAgICAgIHJldHVybiBwYXJ0aWFsKGNhc3RGdW5jdGlvbih3cmFwcGVyKSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgYXMgYW4gYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoMSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbbnVsbF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKiBjb25zb2xlLmxvZyhfLmNhc3RBcnJheShhcnJheSkgPT09IGFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5KCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlXG4gICAgICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAgICAgKiBhbmQgc3VwcG9ydHMgY2xvbmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLCBkYXRlIG9iamVjdHMsIG1hcHMsXG4gICAgICogbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkXG4gICAgICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAgICAgKiBhcyBwbGFpbiBvYmplY3RzLiBBbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoXG4gICAgICogYXMgZXJyb3Igb2JqZWN0cywgZnVuY3Rpb25zLCBET00gbm9kZXMsIGFuZCBXZWFrTWFwcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKHNoYWxsb3dbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgY2xvbmVkIHZhbHVlLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCxcbiAgICAgKiBjbG9uaW5nIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHVwIHRvIGZvdXIgYXJndW1lbnRzOyAodmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIGRlZXAgPSBfLmNsb25lRGVlcChvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhkZWVwWzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lV2l0aGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVEZWVwV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXBXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgb2JqZWN0YCBjb25mb3JtcyB0byBgc291cmNlYCBieSBpbnZva2luZyB0aGUgcHJlZGljYXRlXG4gICAgICogcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMjsgfSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBzb3VyY2UgPT0gbnVsbCB8fCBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKE5hTiwgTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5ndCgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUd0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheUJ1ZmZlcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheUJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheUJ1ZmZlciA9IG5vZGVJc0FycmF5QnVmZmVyID8gYmFzZVVuYXJ5KG5vZGVJc0FycmF5QnVmZmVyKSA6IGJhc2VJc0FycmF5QnVmZmVyO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICAgICAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAgICAgKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gICAgICogaXMgYW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYm9vbGVhbiBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJvb2xlYW4sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4oZmFsc2UpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGJvb2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBEYXRlYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUobmV3IERhdGUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKCdNb24gQXByaWwgMjMgMjAxMicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzRGF0ZSA9IG5vZGVJc0RhdGUgPyBiYXNlVW5hcnkobm9kZUlzRGF0ZSkgOiBiYXNlSXNEYXRlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgRE9NIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoJzxib2R5PicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMSAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBjb2xsZWN0aW9uLCBtYXAsIG9yIHNldC5cbiAgICAgKlxuICAgICAqIE9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIG5vIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZFxuICAgICAqIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBBcnJheS1saWtlIHZhbHVlcyBzdWNoIGFzIGBhcmd1bWVudHNgIG9iamVjdHMsIGFycmF5cywgYnVmZmVycywgc3RyaW5ncywgb3JcbiAgICAgKiBqUXVlcnktbGlrZSBjb2xsZWN0aW9ucyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgbGVuZ3RoYCBvZiBgMGAuXG4gICAgICogU2ltaWxhcmx5LCBtYXBzIGFuZCBzZXRzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBzaXplYCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGVtcHR5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkodHJ1ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgICAoaXNBcnJheSh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zcGxpY2UgPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgaXNCdWZmZXIodmFsdWUpIHx8IGlzVHlwZWRBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gIXZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gIXZhbHVlLnNpemU7XG4gICAgICB9XG4gICAgICBpZiAoaXNQcm90b3R5cGUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAhYmFzZUtleXModmFsdWUpLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICAgICAqIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gICAgICogZGF0ZSBvYmplY3RzLCBlcnJvciBvYmplY3RzLCBtYXBzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLFxuICAgICAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gICAgICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gICAgICogbm9kZXMgYXJlIGNvbXBhcmVkIGJ5IHN0cmljdCBlcXVhbGl0eSwgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogb2JqZWN0ID09PSBvdGhlcjtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzRXF1YWxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCB1cCB0b1xuICAgICAqIHNpeCBhcmd1bWVudHM6IChvYmpWYWx1ZSwgb3RoVmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIG90aGVyLCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcob3RoVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnaGVsbG8nLCAnZ29vZGJ5ZSddO1xuICAgICAqIHZhciBvdGhlciA9IFsnaGknLCAnZ29vZGJ5ZSddO1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsV2l0aChhcnJheSwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsV2l0aCh2YWx1ZSwgb3RoZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcih2YWx1ZSwgb3RoZXIpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCB1bmRlZmluZWQsIGN1c3RvbWl6ZXIpIDogISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYEVycm9yYCwgYEV2YWxFcnJvcmAsIGBSYW5nZUVycm9yYCwgYFJlZmVyZW5jZUVycm9yYCxcbiAgICAgKiBgU3ludGF4RXJyb3JgLCBgVHlwZUVycm9yYCwgb3IgYFVSSUVycm9yYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGVycm9yIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IobmV3IEVycm9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IoRXJyb3IpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZXJyb3JUYWcgfHwgdGFnID09IGRvbUV4Y1RhZyB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlLm1lc3NhZ2UgPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlLm5hbWUgPT0gJ3N0cmluZycgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBwcmltaXRpdmUgbnVtYmVyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNGaW5pdGVgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNGaW5pdGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiBuYXRpdmVJc0Zpbml0ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbihfKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gICAgICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT0gdG9JbnRlZ2VyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgICAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gICAgICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICAgICAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3Qoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gICAgICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBgb2JqZWN0YCBhbmQgYHNvdXJjZWAgdG9cbiAgICAgKiBkZXRlcm1pbmUgaWYgYG9iamVjdGAgY29udGFpbnMgZXF1aXZhbGVudCBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5tYXRjaGVzYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaChvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc01hdGNoYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggZml2ZVxuICAgICAqIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwgaW5kZXh8a2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcoc3JjVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdncmVldGluZyc6ICdoZWxsbycgfTtcbiAgICAgKiB2YXIgc291cmNlID0geyAnZ3JlZXRpbmcnOiAnaGknIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNOYU5gXShodHRwczovL21kbi5pby9OdW1iZXIvaXNOYU4pIGFuZCBpcyBub3QgdGhlIHNhbWUgYXNcbiAgICAgKiBnbG9iYWwgW2Bpc05hTmBdKGh0dHBzOi8vbWRuLmlvL2lzTmFOKSB3aGljaCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBgdW5kZWZpbmVkYCBhbmQgb3RoZXIgbm9uLW51bWJlciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4oTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKG5ldyBOdW1iZXIoTmFOKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICAgICAgLy8gQW4gYE5hTmAgcHJpbWl0aXZlIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZi5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGB0b1N0cmluZ1RhZ2AgY2hlY2sgZmlyc3QgdG8gYXZvaWQgZXJyb3JzIHdpdGggc29tZVxuICAgICAgLy8gQWN0aXZlWCBvYmplY3RzIGluIElFLlxuICAgICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSAhPSArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcmlzdGluZSBuYXRpdmUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgY2FuJ3QgcmVsaWFibHkgZGV0ZWN0IG5hdGl2ZSBmdW5jdGlvbnMgaW4gdGhlIHByZXNlbmNlXG4gICAgICogb2YgdGhlIGNvcmUtanMgcGFja2FnZSBiZWNhdXNlIGNvcmUtanMgY2lyY3VtdmVudHMgdGhpcyBraW5kIG9mIGRldGVjdGlvbi5cbiAgICAgKiBEZXNwaXRlIG11bHRpcGxlIHJlcXVlc3RzLCB0aGUgY29yZS1qcyBtYWludGFpbmVyIGhhcyBtYWRlIGl0IGNsZWFyOiBhbnlcbiAgICAgKiBhdHRlbXB0IHRvIGZpeCB0aGUgZGV0ZWN0aW9uIHdpbGwgYmUgb2JzdHJ1Y3RlZC4gQXMgYSByZXN1bHQsIHdlJ3JlIGxlZnRcbiAgICAgKiB3aXRoIGxpdHRsZSBjaG9pY2UgYnV0IHRvIHRocm93IGFuIGVycm9yLiBVbmZvcnR1bmF0ZWx5LCB0aGlzIGFsc28gYWZmZWN0c1xuICAgICAqIHBhY2thZ2VzLCBsaWtlIFtiYWJlbC1wb2x5ZmlsbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYmFiZWwtcG9seWZpbGwpLFxuICAgICAqIHdoaWNoIHJlbHkgb24gY29yZS1qcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShBcnJheS5wcm90b3R5cGUucHVzaCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShfKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoaXNNYXNrYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKENPUkVfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBudWxsYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbCh2b2lkIDApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdWxsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBudWxsaXNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmlsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE51bWJlcmAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUbyBleGNsdWRlIGBJbmZpbml0eWAsIGAtSW5maW5pdHlgLCBhbmQgYE5hTmAsIHdoaWNoIGFyZVxuICAgICAqIGNsYXNzaWZpZWQgYXMgbnVtYmVycywgdXNlIHRoZSBgXy5pc0Zpbml0ZWAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gbnVtYmVyVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gICAgICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuOC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICAgICAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBSZWdFeHBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgvYWJjLyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgnL2FiYy8nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1JlZ0V4cCA9IG5vZGVJc1JlZ0V4cCA/IGJhc2VVbmFyeShub2RlSXNSZWdFeHApIDogYmFzZUlzUmVnRXhwO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIuIEFuIGludGVnZXIgaXMgc2FmZSBpZiBpdCdzIGFuIElFRUUtNzU0XG4gICAgICogZG91YmxlIHByZWNpc2lvbiBudW1iZXIgd2hpY2ggaXNuJ3QgdGhlIHJlc3VsdCBvZiBhIHJvdW5kZWQgdW5zYWZlIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc1NhZmVJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzU2FmZUludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID49IC1NQVhfU0FGRV9JTlRFR0VSICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gd2Vha01hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHdlYWtTZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0KDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHQgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VMdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDw9IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0FycmF5KHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KDEpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHN0cmluZ1RvQXJyYXkodmFsdWUpIDogY29weUFycmF5KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzeW1JdGVyYXRvciAmJiB2YWx1ZVtzeW1JdGVyYXRvcl0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVG9BcnJheSh2YWx1ZVtzeW1JdGVyYXRvcl0oKSk7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICBmdW5jID0gdGFnID09IG1hcFRhZyA/IG1hcFRvQXJyYXkgOiAodGFnID09IHNldFRhZyA/IHNldFRvQXJyYXkgOiB2YWx1ZXMpO1xuXG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMi4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICAgICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICAgICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0b0Zpbml0ZSh2YWx1ZSksXG4gICAgICAgICAgcmVtYWluZGVyID0gcmVzdWx0ICUgMTtcblxuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlciBzdWl0YWJsZSBmb3IgdXNlIGFzIHRoZSBsZW5ndGggb2YgYW5cbiAgICAgKiBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDQyOTQ5NjcyOTVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIDAsIE1BWF9BUlJBWV9MRU5HVEgpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b051bWJlcigzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IEluZmluaXR5XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IGJhc2VUcmltKHZhbHVlKTtcbiAgICAgIHZhciBpc0JpbmFyeSA9IHJlSXNCaW5hcnkudGVzdCh2YWx1ZSk7XG4gICAgICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICAgICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgICAgIDogKHJlSXNCYWRIZXgudGVzdCh2YWx1ZSkgPyBOQU4gOiArdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwbGFpbiBvYmplY3QgZmxhdHRlbmluZyBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmdcbiAgICAgKiBrZXllZCBwcm9wZXJ0aWVzIG9mIGB2YWx1ZWAgdG8gb3duIHByb3BlcnRpZXMgb2YgdGhlIHBsYWluIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgcGxhaW4gb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIF8udG9QbGFpbk9iamVjdChuZXcgRm9vKSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gICAgICByZXR1cm4gY29weU9iamVjdCh2YWx1ZSwga2V5c0luKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHNhZmUgaW50ZWdlci4gQSBzYWZlIGludGVnZXIgY2FuIGJlIGNvbXBhcmVkIGFuZFxuICAgICAqIHJlcHJlc2VudGVkIGNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKDMuMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gOTAwNzE5OTI1NDc0MDk5MVxuICAgICAqXG4gICAgICogXy50b1NhZmVJbnRlZ2VyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9TYWZlSW50ZWdlcih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIC1NQVhfU0FGRV9JTlRFR0VSLCBNQVhfU0FGRV9JTlRFR0VSKVxuICAgICAgICA6ICh2YWx1ZSA9PT0gMCA/IHZhbHVlIDogMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAgICAgKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKG51bGwpO1xuICAgICAqIC8vID0+ICcnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKC0wKTtcbiAgICAgKiAvLyA9PiAnLTAnXG4gICAgICpcbiAgICAgKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gJzEsMiwzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIHNvdXJjZSBvYmplY3RzIHRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIFN1YnNlcXVlbnQgc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgIGFuZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gICAgICogW2BPYmplY3QuYXNzaWduYF0oaHR0cHM6Ly9tZG4uaW8vT2JqZWN0L2Fzc2lnbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25JblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDAgfSwgbmV3IEZvbywgbmV3IEJhcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbiA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlKSB7XG4gICAgICBpZiAoaXNQcm90b3R5cGUoc291cmNlKSB8fCBpc0FycmF5TGlrZShzb3VyY2UpKSB7XG4gICAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgb3duIGFuZFxuICAgICAqIGluaGVyaXRlZCBzb3VyY2UgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGV4dGVuZFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogfVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gQmFyKCkge1xuICAgICAqICAgdGhpcy5jID0gMztcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmIgPSAyO1xuICAgICAqIEJhci5wcm90b3R5cGUuZCA9IDQ7XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbkluKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMywgJ2QnOiA0IH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduSW4gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25JbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAgICAgKiBgdW5kZWZpbmVkYCwgYXNzaWdubWVudCBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCBmaXZlIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRXaXRoXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbldpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiBfLmlzVW5kZWZpbmVkKG9ialZhbHVlKSA/IHNyY1ZhbHVlIDogb2JqVmFsdWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGRlZmF1bHRzID0gXy5wYXJ0aWFsUmlnaHQoXy5hc3NpZ25JbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXNJbihzb3VyY2UpLCBvYmplY3QsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduV2l0aCwgY3VzdG9taXplcik7XG4gICAgICpcbiAgICAgKiBkZWZhdWx0cyh7ICdhJzogMSB9LCB7ICdiJzogMiB9LCB7ICdhJzogMyB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKi9cbiAgICB2YXIgYXNzaWduV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gYHBhdGhzYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwaWNrZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXy5hdChvYmplY3QsIFsnYVswXS5iLmMnLCAnYVsxXSddKTtcbiAgICAgKiAvLyA9PiBbMywgNF1cbiAgICAgKi9cbiAgICB2YXIgYXQgPSBmbGF0UmVzdChiYXNlQXQpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIHRoZSBgcHJvdG90eXBlYCBvYmplY3QuIElmIGFcbiAgICAgKiBgcHJvcGVydGllc2Agb2JqZWN0IGlzIGdpdmVuLCBpdHMgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXNcbiAgICAgKiBhcmUgYXNzaWduZWQgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90b3R5cGUgVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXSBUaGUgcHJvcGVydGllcyB0byBhc3NpZ24gdG8gdGhlIG9iamVjdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBTaGFwZSgpIHtcbiAgICAgKiAgIHRoaXMueCA9IDA7XG4gICAgICogICB0aGlzLnkgPSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIENpcmNsZSgpIHtcbiAgICAgKiAgIFNoYXBlLmNhbGwodGhpcyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogQ2lyY2xlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFNoYXBlLnByb3RvdHlwZSwge1xuICAgICAqICAgJ2NvbnN0cnVjdG9yJzogQ2lyY2xlXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiB2YXIgY2lyY2xlID0gbmV3IENpcmNsZTtcbiAgICAgKiBjaXJjbGUgaW5zdGFuY2VvZiBDaXJjbGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgU2hhcGU7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZShwcm90b3R5cGUsIHByb3BlcnRpZXMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBiYXNlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgICByZXR1cm4gcHJvcGVydGllcyA9PSBudWxsID8gcmVzdWx0IDogYmFzZUFzc2lnbihyZXN1bHQsIHByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2VcbiAgICAgKiBvYmplY3RzIHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QgZm9yIGFsbCBkZXN0aW5hdGlvbiBwcm9wZXJ0aWVzIHRoYXRcbiAgICAgKiByZXNvbHZlIHRvIGB1bmRlZmluZWRgLiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICogT25jZSBhIHByb3BlcnR5IGlzIHNldCwgYWRkaXRpb25hbCB2YWx1ZXMgb2YgdGhlIHNhbWUgcHJvcGVydHkgYXJlIGlnbm9yZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICB2YXIgbGVuZ3RoID0gc291cmNlcy5sZW5ndGg7XG4gICAgICB2YXIgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKHNvdXJjZXNbMF0sIHNvdXJjZXNbMV0sIGd1YXJkKSkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgICAgIHZhciBwcm9wcyA9IGtleXNJbihzb3VyY2UpO1xuICAgICAgICB2YXIgcHJvcHNJbmRleCA9IC0xO1xuICAgICAgICB2YXIgcHJvcHNMZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKCsrcHJvcHNJbmRleCA8IHByb3BzTGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGtleSA9IHByb3BzW3Byb3BzSW5kZXhdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgKGVxKHZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgICBvYmplY3Rba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5kZWZhdWx0c2AgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgYXNzaWduc1xuICAgICAqIGRlZmF1bHQgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZGVmYXVsdHNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0c0RlZXAoeyAnYSc6IHsgJ2InOiAyIH0gfSwgeyAnYSc6IHsgJ2InOiAxLCAnYyc6IDMgfSB9KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogeyAnYic6IDIsICdjJzogMyB9IH1cbiAgICAgKi9cbiAgICB2YXIgZGVmYXVsdHNEZWVwID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgYXJncy5wdXNoKHVuZGVmaW5lZCwgY3VzdG9tRGVmYXVsdHNNZXJnZSk7XG4gICAgICByZXR1cm4gYXBwbHkobWVyZ2VXaXRoLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBrZXkgb2YgdGhlIGZpcnN0XG4gICAgICogZWxlbWVudCBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBpdHNlbGYuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlIDwgNDA7IH0pO1xuICAgICAqIC8vID0+ICdiYXJuZXknIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZEtleWAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZlxuICAgICAqIGEgY29sbGVjdGlvbiBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfSBSZXR1cm5zIHRoZSBrZXkgb2YgdGhlIG1hdGNoZWQgZWxlbWVudCxcbiAgICAgKiAgZWxzZSBgdW5kZWZpbmVkYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0ge1xuICAgICAqICAgJ2Jhcm5leSc6ICB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgICdmcmVkJzogICAgeyAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiByZXR1cm5zICdwZWJibGVzJyBhc3N1bWluZyBgXy5maW5kS2V5YCByZXR1cm5zICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIHsgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiAnZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RLZXkodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAncGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kTGFzdEtleShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIGJhc2VGaW5kS2V5KG9iamVjdCwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSwgYmFzZUZvck93blJpZ2h0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYW5cbiAgICAgKiBvYmplY3QgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdFxuICAgICAqIGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JJbihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnLCAnYicsIHRoZW4gJ2MnIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckluKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3Iob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mb3JJbmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9ySW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW5SaWdodChuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2MnLCAnYicsIHRoZW4gJ2EnIGFzc3VtaW5nIGBfLmZvckluYCBsb2dzICdhJywgJ2InLCB0aGVuICdjJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJblJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbFxuICAgICAgICA/IG9iamVjdFxuICAgICAgICA6IGJhc2VGb3JSaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCBhbmRcbiAgICAgKiBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uXG4gICAgICogZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvck93blJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93bihuZXcgRm9vLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd24ob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9yT3duYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIHByb3BlcnRpZXMgb2ZcbiAgICAgKiBgb2JqZWN0YCBpbiB0aGUgb3Bwb3NpdGUgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9yT3duUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdiJyB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JPd25gIGxvZ3MgJ2EnIHRoZW4gJ2InLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvck93blJpZ2h0KG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBvYmplY3QgJiYgYmFzZUZvck93blJpZ2h0KG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGVudW1lcmFibGUgcHJvcGVydGllc1xuICAgICAqIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc0luXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9ucyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZnVuY3Rpb25zKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIGZ1bmN0aW9uIHByb3BlcnR5IG5hbWVzIGZyb20gb3duIGFuZCBpbmhlcml0ZWRcbiAgICAgKiBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKiBAc2VlIF8uZnVuY3Rpb25zXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IF8uY29uc3RhbnQoJ2EnKTtcbiAgICAgKiAgIHRoaXMuYiA9IF8uY29uc3RhbnQoJ2InKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSBfLmNvbnN0YW50KCdjJyk7XG4gICAgICpcbiAgICAgKiBfLmZ1bmN0aW9uc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9uc0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlRnVuY3Rpb25zKG9iamVjdCwga2V5c0luKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gICAgICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IHsgJ2InOiAyIH0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhcyhvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYS5iJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhcyhvdGhlciwgJ2EnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhcyhvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzSW4ob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc0luKG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBpbnZlcnRlZCBrZXlzIGFuZCB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICogSWYgYG9iamVjdGAgY29udGFpbnMgZHVwbGljYXRlIHZhbHVlcywgc3Vic2VxdWVudCB2YWx1ZXMgb3ZlcndyaXRlXG4gICAgICogcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGludmVydGVkIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9O1xuICAgICAqXG4gICAgICogXy5pbnZlcnQob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogJ2MnLCAnMic6ICdiJyB9XG4gICAgICovXG4gICAgdmFyIGludmVydCA9IGNyZWF0ZUludmVydGVyKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiZcbiAgICAgICAgICB0eXBlb2YgdmFsdWUudG9TdHJpbmcgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YWx1ZSA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXN1bHRbdmFsdWVdID0ga2V5O1xuICAgIH0sIGNvbnN0YW50KGlkZW50aXR5KSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmludmVydGAgZXhjZXB0IHRoYXQgdGhlIGludmVydGVkIG9iamVjdCBpcyBnZW5lcmF0ZWRcbiAgICAgKiBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmcgZWFjaCBlbGVtZW50IG9mIGBvYmplY3RgIHRocnUgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogY29ycmVzcG9uZGluZyBpbnZlcnRlZCB2YWx1ZSBvZiBlYWNoIGludmVydGVkIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzXG4gICAgICogcmVzcG9uc2libGUgZm9yIGdlbmVyYXRpbmcgdGhlIGludmVydGVkIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnZlcnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0Qnkob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIHJldHVybiAnZ3JvdXAnICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnZ3JvdXAxJzogWydhJywgJ2MnXSwgJ2dyb3VwMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICB2YXIgaW52ZXJ0QnkgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwocmVzdWx0LCB2YWx1ZSkpIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXS5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbdmFsdWVdID0gW2tleV07XG4gICAgICB9XG4gICAgfSwgZ2V0SXRlcmF0ZWUpO1xuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgbWV0aG9kIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIG1ldGhvZCB0byBpbnZva2UuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IFsxLCAyLCAzLCA0XSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLmludm9rZShvYmplY3QsICdhWzBdLmIuYy5zbGljZScsIDEsIDMpO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqL1xuICAgIHZhciBpbnZva2UgPSBiYXNlUmVzdChiYXNlSW52b2tlKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAgICAgKiBbRVMgc3BlY10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5cyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLmtleXMoJ2hpJyk7XG4gICAgICogLy8gPT4gWycwJywgJzEnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5rZXlzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1hcFZhbHVlc2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlXG4gICAgICogc2FtZSB2YWx1ZXMgYXMgYG9iamVjdGAgYW5kIGtleXMgZ2VuZXJhdGVkIGJ5IHJ1bm5pbmcgZWFjaCBvd24gZW51bWVyYWJsZVxuICAgICAqIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gICAgICogQHNlZSBfLm1hcFZhbHVlc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcEtleXMoeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICByZXR1cm4ga2V5ICsgdmFsdWU7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4geyAnYTEnOiAxLCAnYjInOiAyIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBLZXlzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCksIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgYG9iamVjdGAgYW5kIHZhbHVlcyBnZW5lcmF0ZWRcbiAgICAgKiBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnVcbiAgICAgKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgKiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBLZXlzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdmcmVkJzogICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gICAgICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlOyB9KTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1hcFZhbHVlcyh1c2VycywgJ2FnZScpO1xuICAgICAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBWYWx1ZXMob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmFzc2lnbmAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgbWVyZ2VzIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyBpbnRvIHRoZVxuICAgICAqIGRlc3RpbmF0aW9uIG9iamVjdC4gU291cmNlIHByb3BlcnRpZXMgdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgIGFyZVxuICAgICAqIHNraXBwZWQgaWYgYSBkZXN0aW5hdGlvbiB2YWx1ZSBleGlzdHMuIEFycmF5IGFuZCBwbGFpbiBvYmplY3QgcHJvcGVydGllc1xuICAgICAqIGFyZSBtZXJnZWQgcmVjdXJzaXZlbHkuIE90aGVyIG9iamVjdHMgYW5kIHZhbHVlIHR5cGVzIGFyZSBvdmVycmlkZGVuIGJ5XG4gICAgICogYXNzaWdubWVudC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBTdWJzZXF1ZW50XG4gICAgICogc291cmNlcyBvdmVyd3JpdGUgcHJvcGVydHkgYXNzaWdubWVudHMgb2YgcHJldmlvdXMgc291cmNlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gW3NvdXJjZXNdIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYic6IDIgfSwgeyAnZCc6IDQgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIG90aGVyID0ge1xuICAgICAqICAgJ2EnOiBbeyAnYyc6IDMgfSwgeyAnZSc6IDUgfV1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZShvYmplY3QsIG90aGVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiAyLCAnYyc6IDMgfSwgeyAnZCc6IDQsICdlJzogNSB9XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KSB7XG4gICAgICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVyZ2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBtZXJnZWQgdmFsdWVzIG9mIHRoZSBkZXN0aW5hdGlvbiBhbmQgc291cmNlXG4gICAgICogcHJvcGVydGllcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIG1lcmdpbmcgaXMgaGFuZGxlZCBieSB0aGVcbiAgICAgKiBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggc2l4IGFyZ3VtZW50czpcbiAgICAgKiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAgICAgKiAgIGlmIChfLmlzQXJyYXkob2JqVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiBvYmpWYWx1ZS5jb25jYXQoc3JjVmFsdWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogWzFdLCAnYic6IFsyXSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiBbM10sICdiJzogWzRdIH07XG4gICAgICpcbiAgICAgKiBfLm1lcmdlV2l0aChvYmplY3QsIG90aGVyLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogWzEsIDNdLCAnYic6IFsyLCA0XSB9XG4gICAgICovXG4gICAgdmFyIG1lcmdlV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ucGlja2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZVxuICAgICAqIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgcGF0aHMgb2YgYG9iamVjdGAgdGhhdCBhcmUgbm90IG9taXR0ZWQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgY29uc2lkZXJhYmx5IHNsb3dlciB0aGFuIGBfLnBpY2tgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gb21pdC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ub21pdChvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIHZhciBvbWl0ID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICB2YXIgaXNEZWVwID0gZmFsc2U7XG4gICAgICBwYXRocyA9IGFycmF5TWFwKHBhdGhzLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuICAgICAgICBpc0RlZXAgfHwgKGlzRGVlcCA9IHBhdGgubGVuZ3RoID4gMSk7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgfSk7XG4gICAgICBjb3B5T2JqZWN0KG9iamVjdCwgZ2V0QWxsS2V5c0luKG9iamVjdCksIHJlc3VsdCk7XG4gICAgICBpZiAoaXNEZWVwKSB7XG4gICAgICAgIHJlc3VsdCA9IGJhc2VDbG9uZShyZXN1bHQsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX0ZMQVRfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9tT21pdENsb25lKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBwYXRocy5sZW5ndGg7XG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgYmFzZVVuc2V0KHJlc3VsdCwgcGF0aHNbbGVuZ3RoXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tCeWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mXG4gICAgICogdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2YgYG9iamVjdGAgdGhhdFxuICAgICAqIGBwcmVkaWNhdGVgIGRvZXNuJ3QgcmV0dXJuIHRydXRoeSBmb3IuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHR3b1xuICAgICAqIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXRCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2InOiAnMicgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG9taXRCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHBpY2tCeShvYmplY3QsIG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2YgdGhlIHBpY2tlZCBgb2JqZWN0YCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi4oc3RyaW5nfHN0cmluZ1tdKX0gW3BhdGhzXSBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGljayhvYmplY3QsIFsnYScsICdjJ10pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBwaWNrID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBwYXRocykge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8ge30gOiBiYXNlUGljayhvYmplY3QsIHBhdGhzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBgb2JqZWN0YCBwcm9wZXJ0aWVzIGBwcmVkaWNhdGVgIHJldHVybnNcbiAgICAgKiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAodmFsdWUsIGtleSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogJzInLCAnYyc6IDMgfTtcbiAgICAgKlxuICAgICAqIF8ucGlja0J5KG9iamVjdCwgXy5pc051bWJlcik7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gcGlja0J5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgICAgdmFyIHByb3BzID0gYXJyYXlNYXAoZ2V0QWxsS2V5c0luKG9iamVjdCksIGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIFtwcm9wXTtcbiAgICAgIH0pO1xuICAgICAgcHJlZGljYXRlID0gZ2V0SXRlcmF0ZWUocHJlZGljYXRlKTtcbiAgICAgIHJldHVybiBiYXNlUGlja0J5KG9iamVjdCwgcHJvcHMsIGZ1bmN0aW9uKHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHJldHVybiBwcmVkaWNhdGUodmFsdWUsIHBhdGhbMF0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5nZXRgIGV4Y2VwdCB0aGF0IGlmIHRoZSByZXNvbHZlZCB2YWx1ZSBpcyBhXG4gICAgICogZnVuY3Rpb24gaXQncyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGl0cyBwYXJlbnQgb2JqZWN0IGFuZFxuICAgICAqIGl0cyByZXN1bHQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byByZXNvbHZlLlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYzEnOiAzLCAnYzInOiBfLmNvbnN0YW50KDQpIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMScpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMicpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8ucmVzdWx0KG9iamVjdCwgJ2FbMF0uYi5jMycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCBfLmNvbnN0YW50KCdkZWZhdWx0JykpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3VsdChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGgubGVuZ3RoO1xuXG4gICAgICAvLyBFbnN1cmUgdGhlIGxvb3AgaXMgZW50ZXJlZCB3aGVuIHBhdGggaXMgZW1wdHkuXG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICBsZW5ndGggPSAxO1xuICAgICAgICBvYmplY3QgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFt0b0tleShwYXRoW2luZGV4XSldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIG9iamVjdCA9IGlzRnVuY3Rpb24odmFsdWUpID8gdmFsdWUuY2FsbChvYmplY3QpIDogdmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgYSBwb3J0aW9uIG9mIGBwYXRoYCBkb2Vzbid0IGV4aXN0LFxuICAgICAqIGl0J3MgY3JlYXRlZC4gQXJyYXlzIGFyZSBjcmVhdGVkIGZvciBtaXNzaW5nIGluZGV4IHByb3BlcnRpZXMgd2hpbGUgb2JqZWN0c1xuICAgICAqIGFyZSBjcmVhdGVkIGZvciBhbGwgb3RoZXIgbWlzc2luZyBwcm9wZXJ0aWVzLiBVc2UgYF8uc2V0V2l0aGAgdG8gY3VzdG9taXplXG4gICAgICogYHBhdGhgIGNyZWF0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5zZXQob2JqZWN0LCAnYVswXS5iLmMnLCA0KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgWyd4JywgJzAnLCAneScsICd6J10sIDUpO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC54WzBdLnkueik7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldChvYmplY3QsIHBhdGgsIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgb2JqZWN0cyBvZiBgcGF0aGAuICBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYFxuICAgICAqIHBhdGggY3JlYXRpb24gaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAobnNWYWx1ZSwga2V5LCBuc09iamVjdCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnNldFdpdGgob2JqZWN0LCAnWzBdWzFdJywgJ2EnLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdpdGgob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcikge1xuICAgICAgY3VzdG9taXplciA9IHR5cGVvZiBjdXN0b21pemVyID09ICdmdW5jdGlvbicgPyBjdXN0b21pemVyIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZC12YWx1ZSBwYWlycyBmb3IgYG9iamVjdGBcbiAgICAgKiB3aGljaCBjYW4gYmUgY29uc3VtZWQgYnkgYF8uZnJvbVBhaXJzYC4gSWYgYG9iamVjdGAgaXMgYSBtYXAgb3Igc2V0LCBpdHNcbiAgICAgKiBlbnRyaWVzIGFyZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBlbnRyaWVzXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlycyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzID0gY3JlYXRlVG9QYWlycyhrZXlzKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnNcbiAgICAgKiBmb3IgYG9iamVjdGAgd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwXG4gICAgICogb3Igc2V0LCBpdHMgZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc0luXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udG9QYWlyc0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxXSwgWydiJywgMl0sIFsnYycsIDNdXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIHZhciB0b1BhaXJzSW4gPSBjcmVhdGVUb1BhaXJzKGtleXNJbik7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhbHRlcm5hdGl2ZSB0byBgXy5yZWR1Y2VgOyB0aGlzIG1ldGhvZCB0cmFuc2Zvcm1zIGBvYmplY3RgIHRvIGEgbmV3XG4gICAgICogYGFjY3VtdWxhdG9yYCBvYmplY3Qgd2hpY2ggaXMgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGVhY2ggb2YgaXRzIG93blxuICAgICAqIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgdGhydSBgaXRlcmF0ZWVgLCB3aXRoIGVhY2ggaW52b2NhdGlvblxuICAgICAqIHBvdGVudGlhbGx5IG11dGF0aW5nIHRoZSBgYWNjdW11bGF0b3JgIG9iamVjdC4gSWYgYGFjY3VtdWxhdG9yYCBpcyBub3RcbiAgICAgKiBwcm92aWRlZCwgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHNhbWUgYFtbUHJvdG90eXBlXV1gIHdpbGwgYmUgdXNlZC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOiAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBjdXN0b20gYWNjdW11bGF0b3IgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybShbMiwgMywgNF0sIGZ1bmN0aW9uKHJlc3VsdCwgbikge1xuICAgICAqICAgcmVzdWx0LnB1c2gobiAqPSBuKTtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH0sIFtdKTtcbiAgICAgKiAvLyA9PiBbNCwgOV1cbiAgICAgKlxuICAgICAqIF8udHJhbnNmb3JtKHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMSB9LCBmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0ob2JqZWN0LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIHZhciBpc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBpc0Fyckxpa2UgPSBpc0FyciB8fCBpc0J1ZmZlcihvYmplY3QpIHx8IGlzVHlwZWRBcnJheShvYmplY3QpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KTtcbiAgICAgIGlmIChhY2N1bXVsYXRvciA9PSBudWxsKSB7XG4gICAgICAgIHZhciBDdG9yID0gb2JqZWN0ICYmIG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgICAgICAgaWYgKGlzQXJyTGlrZSkge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0gaXNBcnIgPyBuZXcgQ3RvciA6IFtdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzRnVuY3Rpb24oQ3RvcikgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKSA6IHt9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGFjY3VtdWxhdG9yID0ge307XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIChpc0Fyckxpa2UgPyBhcnJheUVhY2ggOiBiYXNlRm9yT3duKShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBvYmplY3QpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgcHJvcGVydHkgYXQgYHBhdGhgIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogNyB9IH1dIH07XG4gICAgICogXy51bnNldChvYmplY3QsICdhWzBdLmIuYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udW5zZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICdhJzogW3sgJ2InOiB7fSB9XSB9O1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdHJ1ZSA6IGJhc2VVbnNldChvYmplY3QsIHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc2V0YCBleGNlcHQgdGhhdCBhY2NlcHRzIGB1cGRhdGVyYCB0byBwcm9kdWNlIHRoZVxuICAgICAqIHZhbHVlIHRvIHNldC4gVXNlIGBfLnVwZGF0ZVdpdGhgIHRvIGN1c3RvbWl6ZSBgcGF0aGAgY3JlYXRpb24uIFRoZSBgdXBkYXRlcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ2FbMF0uYi5jJywgZnVuY3Rpb24obikgeyByZXR1cm4gbiAqIG47IH0pO1xuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdC5hWzBdLmIuYyk7XG4gICAgICogLy8gPT4gOVxuICAgICAqXG4gICAgICogXy51cGRhdGUob2JqZWN0LCAneFswXS55LnonLCBmdW5jdGlvbihuKSB7IHJldHVybiBuID8gbiArIDEgOiAwOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1cGRhdGUob2JqZWN0LCBwYXRoLCB1cGRhdGVyKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVwZGF0ZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHVwZGF0ZXIgVGhlIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHVwZGF0ZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7fTtcbiAgICAgKlxuICAgICAqIF8udXBkYXRlV2l0aChvYmplY3QsICdbMF1bMV0nLCBfLmNvbnN0YW50KCdhJyksIE9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMCc6IHsgJzEnOiAnYScgfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV2l0aChvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VVcGRhdGUob2JqZWN0LCBwYXRoLCBjYXN0RnVuY3Rpb24odXBkYXRlciksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSB2YWx1ZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIF8udmFsdWVzKCdoaScpO1xuICAgICAqIC8vID0+IFsnaCcsICdpJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5XG4gICAgICogdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB2YWx1ZXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDbGFtcHMgYG51bWJlcmAgd2l0aGluIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNsYW1wKC0xMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IC01XG4gICAgICpcbiAgICAgKiBfLmNsYW1wKDEwLCAtNSwgNSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsYW1wKG51bWJlciwgbG93ZXIsIHVwcGVyKSB7XG4gICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVwcGVyID0gdG9OdW1iZXIodXBwZXIpO1xuICAgICAgICB1cHBlciA9IHVwcGVyID09PSB1cHBlciA/IHVwcGVyIDogMDtcbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxvd2VyID0gdG9OdW1iZXIobG93ZXIpO1xuICAgICAgICBsb3dlciA9IGxvd2VyID09PSBsb3dlciA/IGxvd2VyIDogMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlQ2xhbXAodG9OdW1iZXIobnVtYmVyKSwgbG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYG5gIGlzIGJldHdlZW4gYHN0YXJ0YCBhbmQgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gSWZcbiAgICAgKiBgZW5kYCBpcyBub3Qgc3BlY2lmaWVkLCBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICogSWYgYHN0YXJ0YCBpcyBncmVhdGVyIHRoYW4gYGVuZGAgdGhlIHBhcmFtcyBhcmUgc3dhcHBlZCB0byBzdXBwb3J0XG4gICAgICogbmVnYXRpdmUgcmFuZ2VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMy4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG51bWJlcmAgaXMgaW4gdGhlIHJhbmdlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLnJhbmdlLCBfLnJhbmdlUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDMsIDIsIDQpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg0LCA4KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgyLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDEuMiwgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDUuMiwgNCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgtMywgLTIsIC02KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9GaW5pdGUoc3RhcnQpO1xuICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICBzdGFydCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgfVxuICAgICAgbnVtYmVyID0gdG9OdW1iZXIobnVtYmVyKTtcbiAgICAgIHJldHVybiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2R1Y2VzIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIHRoZSBpbmNsdXNpdmUgYGxvd2VyYCBhbmQgYHVwcGVyYCBib3VuZHMuXG4gICAgICogSWYgb25seSBvbmUgYXJndW1lbnQgaXMgcHJvdmlkZWQgYSBudW1iZXIgYmV0d2VlbiBgMGAgYW5kIHRoZSBnaXZlbiBudW1iZXJcbiAgICAgKiBpcyByZXR1cm5lZC4gSWYgYGZsb2F0aW5nYCBpcyBgdHJ1ZWAsIG9yIGVpdGhlciBgbG93ZXJgIG9yIGB1cHBlcmAgYXJlXG4gICAgICogZmxvYXRzLCBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mIGFuIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyPTBdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3VwcGVyPTFdIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmbG9hdGluZ10gU3BlY2lmeSByZXR1cm5pbmcgYSBmbG9hdGluZy1wb2ludCBudW1iZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcmFuZG9tIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMCwgNSk7XG4gICAgICogLy8gPT4gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUpO1xuICAgICAqIC8vID0+IGFsc28gYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDUsIHRydWUpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMCBhbmQgNVxuICAgICAqXG4gICAgICogXy5yYW5kb20oMS4yLCA1LjIpO1xuICAgICAqIC8vID0+IGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyIGJldHdlZW4gMS4yIGFuZCA1LjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByYW5kb20obG93ZXIsIHVwcGVyLCBmbG9hdGluZykge1xuICAgICAgaWYgKGZsb2F0aW5nICYmIHR5cGVvZiBmbG9hdGluZyAhPSAnYm9vbGVhbicgJiYgaXNJdGVyYXRlZUNhbGwobG93ZXIsIHVwcGVyLCBmbG9hdGluZykpIHtcbiAgICAgICAgdXBwZXIgPSBmbG9hdGluZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXBwZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSB1cHBlcjtcbiAgICAgICAgICB1cHBlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgbG93ZXIgPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgZmxvYXRpbmcgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID09PSB1bmRlZmluZWQgJiYgdXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIHVwcGVyID0gMTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBsb3dlciA9IHRvRmluaXRlKGxvd2VyKTtcbiAgICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB1cHBlciA9IGxvd2VyO1xuICAgICAgICAgIGxvd2VyID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB1cHBlciA9IHRvRmluaXRlKHVwcGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGxvd2VyID4gdXBwZXIpIHtcbiAgICAgICAgdmFyIHRlbXAgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1cHBlcjtcbiAgICAgICAgdXBwZXIgPSB0ZW1wO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0aW5nIHx8IGxvd2VyICUgMSB8fCB1cHBlciAlIDEpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBuYXRpdmVSYW5kb20oKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZU1pbihsb3dlciArIChyYW5kICogKHVwcGVyIC0gbG93ZXIgKyBmcmVlUGFyc2VGbG9hdCgnMWUtJyArICgocmFuZCArICcnKS5sZW5ndGggLSAxKSkpKSwgdXBwZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VSYW5kb20obG93ZXIsIHVwcGVyKTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBbY2FtZWwgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FtZWxDYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhbWVsIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqXG4gICAgICogXy5jYW1lbENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICovXG4gICAgdmFyIGNhbWVsQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgd29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyBjYXBpdGFsaXplKHdvcmQpIDogd29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UgYW5kIHRoZSByZW1haW5pbmdcbiAgICAgKiB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNhcGl0YWxpemUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FwaXRhbGl6ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNhcGl0YWxpemUoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICAgICAgcmV0dXJuIHVwcGVyRmlyc3QodG9TdHJpbmcoc3RyaW5nKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAgICAgKiBbTGF0aW4tMSBTdXBwbGVtZW50XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbi0xX1N1cHBsZW1lbnRfKFVuaWNvZGVfYmxvY2spI0NoYXJhY3Rlcl90YWJsZSlcbiAgICAgKiBhbmQgW0xhdGluIEV4dGVuZGVkLUFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX0V4dGVuZGVkLUEpXG4gICAgICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICAgICAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZGVidXJyLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWJ1cnIoJ2TDqWrDoCB2dScpO1xuICAgICAqIC8vID0+ICdkZWphIHZ1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlYnVycihzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gc3RyaW5nICYmIHN0cmluZy5yZXBsYWNlKHJlTGF0aW4sIGRlYnVyckxldHRlcikucmVwbGFjZShyZUNvbWJvTWFyaywgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBlbmRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249c3RyaW5nLmxlbmd0aF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdjJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5lbmRzV2l0aCgnYWJjJywgJ2InLCAyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZW5kc1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG5cbiAgICAgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gbGVuZ3RoXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIGxlbmd0aCk7XG5cbiAgICAgIHZhciBlbmQgPSBwb3NpdGlvbjtcbiAgICAgIHBvc2l0aW9uIC09IHRhcmdldC5sZW5ndGg7XG4gICAgICByZXR1cm4gcG9zaXRpb24gPj0gMCAmJiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIGVuZCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIFwiJlwiLCBcIjxcIiwgXCI+XCIsICdcIicsIGFuZCBcIidcIiBpbiBgc3RyaW5nYCB0byB0aGVpclxuICAgICAqIGNvcnJlc3BvbmRpbmcgSFRNTCBlbnRpdGllcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBObyBvdGhlciBjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkLiBUbyBlc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIGNoYXJhY3RlcnMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogVGhvdWdoIHRoZSBcIj5cIiBjaGFyYWN0ZXIgaXMgZXNjYXBlZCBmb3Igc3ltbWV0cnksIGNoYXJhY3RlcnMgbGlrZVxuICAgICAqIFwiPlwiIGFuZCBcIi9cIiBkb24ndCBuZWVkIGVzY2FwaW5nIGluIEhUTUwgYW5kIGhhdmUgbm8gc3BlY2lhbCBtZWFuaW5nXG4gICAgICogdW5sZXNzIHRoZXkncmUgcGFydCBvZiBhIHRhZyBvciB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuIFNlZVxuICAgICAqIFtNYXRoaWFzIEJ5bmVucydzIGFydGljbGVdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kcylcbiAgICAgKiAodW5kZXIgXCJzZW1pLXJlbGF0ZWQgZnVuIGZhY3RcIikgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFdoZW4gd29ya2luZyB3aXRoIEhUTUwgeW91IHNob3VsZCBhbHdheXNcbiAgICAgKiBbcXVvdGUgYXR0cmlidXRlIHZhbHVlc10oaHR0cDovL3dvbmtvLmNvbS9wb3N0L2h0bWwtZXNjYXBpbmcpIHRvIHJlZHVjZVxuICAgICAqIFhTUyB2ZWN0b3JzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlc2NhcGUoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZVVuZXNjYXBlZEh0bWwsIGVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFc2NhcGVzIHRoZSBgUmVnRXhwYCBzcGVjaWFsIGNoYXJhY3RlcnMgXCJeXCIsIFwiJFwiLCBcIlxcXCIsIFwiLlwiLCBcIipcIiwgXCIrXCIsXG4gICAgICogXCI/XCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiwgXCJ9XCIsIGFuZCBcInxcIiBpbiBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlUmVnRXhwKCdbbG9kYXNoXShodHRwczovL2xvZGFzaC5jb20vKScpO1xuICAgICAqIC8vID0+ICdcXFtsb2Rhc2hcXF1cXChodHRwczovL2xvZGFzaFxcLmNvbS9cXCknXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzUmVnRXhwQ2hhci50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBba2ViYWIgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3BlY2lhbF9jYXNlX3N0eWxlcykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBrZWJhYiBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ua2ViYWJDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vLWJhcidcbiAgICAgKi9cbiAgICB2YXIga2ViYWJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJy0nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIHNwYWNlIHNlcGFyYXRlZCB3b3JkcywgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGxvd2VyIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICpcbiAgICAgKiBfLmxvd2VyQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vIGJhcidcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byBsb3dlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGcmVkJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiBfLmxvd2VyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnZlJFRCdcbiAgICAgKi9cbiAgICB2YXIgbG93ZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9Mb3dlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFBhZHMgYHN0cmluZ2Agb24gdGhlIGxlZnQgYW5kIHJpZ2h0IHNpZGVzIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLlxuICAgICAqIFBhZGRpbmcgY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgY2FuJ3QgYmUgZXZlbmx5IGRpdmlkZWQgYnkgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDgpO1xuICAgICAqIC8vID0+ICcgIGFiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1hYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgaWYgKCFsZW5ndGggfHwgc3RyTGVuZ3RoID49IGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIG1pZCA9IChsZW5ndGggLSBzdHJMZW5ndGgpIC8gMjtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlRmxvb3IobWlkKSwgY2hhcnMpICtcbiAgICAgICAgc3RyaW5nICtcbiAgICAgICAgY3JlYXRlUGFkZGluZyhuYXRpdmVDZWlsKG1pZCksIGNoYXJzKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSByaWdodCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2KTtcbiAgICAgKiAvLyA9PiAnYWJjICAgJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmNfLV8nXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRFbmQoc3RyaW5nLCBsZW5ndGgsIGNoYXJzKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgbGVuZ3RoID0gdG9JbnRlZ2VyKGxlbmd0aCk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBsZW5ndGggPyBzdHJpbmdTaXplKHN0cmluZykgOiAwO1xuICAgICAgcmV0dXJuIChsZW5ndGggJiYgc3RyTGVuZ3RoIDwgbGVuZ3RoKVxuICAgICAgICA/IChzdHJpbmcgKyBjcmVhdGVQYWRkaW5nKGxlbmd0aCAtIHN0ckxlbmd0aCwgY2hhcnMpKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IHNpZGUgaWYgaXQncyBzaG9ydGVyIHRoYW4gYGxlbmd0aGAuIFBhZGRpbmdcbiAgICAgKiBjaGFyYWN0ZXJzIGFyZSB0cnVuY2F0ZWQgaWYgdGhleSBleGNlZWQgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcGFkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPTBdIFRoZSBwYWRkaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPScgJ10gVGhlIHN0cmluZyB1c2VkIGFzIHBhZGRpbmcuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcGFkZGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJyAgIGFiYydcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYsICdfLScpO1xuICAgICAqIC8vID0+ICdfLV9hYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCAzKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhZFN0YXJ0KHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSArIHN0cmluZylcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gaW50ZWdlciBvZiB0aGUgc3BlY2lmaWVkIHJhZGl4LiBJZiBgcmFkaXhgIGlzXG4gICAgICogYHVuZGVmaW5lZGAgb3IgYDBgLCBhIGByYWRpeGAgb2YgYDEwYCBpcyB1c2VkIHVubGVzcyBgdmFsdWVgIGlzIGFcbiAgICAgKiBoZXhhZGVjaW1hbCwgaW4gd2hpY2ggY2FzZSBhIGByYWRpeGAgb2YgYDE2YCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGFsaWducyB3aXRoIHRoZVxuICAgICAqIFtFUzUgaW1wbGVtZW50YXRpb25dKGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDE1LjEuMi4yKSBvZiBgcGFyc2VJbnRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmFkaXg9MTBdIFRoZSByYWRpeCB0byBpbnRlcnByZXQgYHZhbHVlYCBieS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhcnNlSW50KCcwOCcpO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICcwOCcsICcxMCddLCBfLnBhcnNlSW50KTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFyc2VJbnQoc3RyaW5nLCByYWRpeCwgZ3VhcmQpIHtcbiAgICAgIGlmIChndWFyZCB8fCByYWRpeCA9PSBudWxsKSB7XG4gICAgICAgIHJhZGl4ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocmFkaXgpIHtcbiAgICAgICAgcmFkaXggPSArcmFkaXg7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmF0aXZlUGFyc2VJbnQodG9TdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyksIHJhZGl4IHx8IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGVhdHMgdGhlIGdpdmVuIHN0cmluZyBgbmAgdGltZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gcmVwZWF0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmVwZWF0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnKicsIDMpO1xuICAgICAqIC8vID0+ICcqKionXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMik7XG4gICAgICogLy8gPT4gJ2FiY2FiYydcbiAgICAgKlxuICAgICAqIF8ucmVwZWF0KCdhYmMnLCAwKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBuLCBndWFyZCkgOiBuID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIG4gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmVwZWF0KHRvU3RyaW5nKHN0cmluZyksIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcGxhY2VzIG1hdGNoZXMgZm9yIGBwYXR0ZXJuYCBpbiBgc3RyaW5nYCB3aXRoIGByZXBsYWNlbWVudGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNyZXBsYWNlYF0oaHR0cHM6Ly9tZG4uaW8vU3RyaW5nL3JlcGxhY2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IHBhdHRlcm4gVGhlIHBhdHRlcm4gdG8gcmVwbGFjZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ30gcmVwbGFjZW1lbnQgVGhlIG1hdGNoIHJlcGxhY2VtZW50LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBsYWNlKCdIaSBGcmVkJywgJ0ZyZWQnLCAnQmFybmV5Jyk7XG4gICAgICogLy8gPT4gJ0hpIEJhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBsYWNlKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgICAgc3RyaW5nID0gdG9TdHJpbmcoYXJnc1swXSk7XG5cbiAgICAgIHJldHVybiBhcmdzLmxlbmd0aCA8IDMgPyBzdHJpbmcgOiBzdHJpbmcucmVwbGFjZShhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCB0b1xuICAgICAqIFtzbmFrZSBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbmFrZV9jYXNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNuYWtlIGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zbmFrZUNhc2UoJ0ZvbyBCYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCctLUZPTy1CQVItLScpO1xuICAgICAqIC8vID0+ICdmb29fYmFyJ1xuICAgICAqL1xuICAgIHZhciBzbmFrZUNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnXycgOiAnJykgKyB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBTcGxpdHMgYHN0cmluZ2AgYnkgYHNlcGFyYXRvcmAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYFN0cmluZyNzcGxpdGBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9zcGxpdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gc3BsaXQuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBzZXBhcmF0b3IgVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHNwbGl0IGJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGltaXRdIFRoZSBsZW5ndGggdG8gdHJ1bmNhdGUgcmVzdWx0cyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHN0cmluZyBzZWdtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zcGxpdCgnYS1iLWMnLCAnLScsIDIpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzcGxpdChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpIHtcbiAgICAgIGlmIChsaW1pdCAmJiB0eXBlb2YgbGltaXQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSkge1xuICAgICAgICBzZXBhcmF0b3IgPSBsaW1pdCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGxpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9BUlJBWV9MRU5HVEggOiBsaW1pdCA+Pj4gMDtcbiAgICAgIGlmICghbGltaXQpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGlmIChzdHJpbmcgJiYgKFxuICAgICAgICAgICAgdHlwZW9mIHNlcGFyYXRvciA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgKHNlcGFyYXRvciAhPSBudWxsICYmICFpc1JlZ0V4cChzZXBhcmF0b3IpKVxuICAgICAgICAgICkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gYmFzZVRvU3RyaW5nKHNlcGFyYXRvcik7XG4gICAgICAgIGlmICghc2VwYXJhdG9yICYmIGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyaW5nVG9BcnJheShzdHJpbmcpLCAwLCBsaW1pdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc3RhcnQgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGV0dGVyX2Nhc2UjU3R5bGlzdGljX29yX3NwZWNpYWxpc2VkX3VzYWdlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0YXJ0IGNhc2VkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZvbyBCYXInXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0Q2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgc3RhcnRDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgdXBwZXJGaXJzdCh3b3JkKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCB0aGUgZ2l2ZW4gdGFyZ2V0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdGFyZ2V0XSBUaGUgc3RyaW5nIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwb3NpdGlvbj0wXSBUaGUgcG9zaXRpb24gdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIHN0YXJ0cyB3aXRoIGB0YXJnZXRgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uc3RhcnRzV2l0aCgnYWJjJywgJ2InLCAxKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhcnRzV2l0aChzdHJpbmcsIHRhcmdldCwgcG9zaXRpb24pIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uID09IG51bGxcbiAgICAgICAgPyAwXG4gICAgICAgIDogYmFzZUNsYW1wKHRvSW50ZWdlcihwb3NpdGlvbiksIDAsIHN0cmluZy5sZW5ndGgpO1xuXG4gICAgICB0YXJnZXQgPSBiYXNlVG9TdHJpbmcodGFyZ2V0KTtcbiAgICAgIHJldHVybiBzdHJpbmcuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgdGFyZ2V0Lmxlbmd0aCkgPT0gdGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbiB0aGF0IGNhbiBpbnRlcnBvbGF0ZSBkYXRhIHByb3BlcnRpZXNcbiAgICAgKiBpbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVycywgSFRNTC1lc2NhcGUgaW50ZXJwb2xhdGVkIGRhdGEgcHJvcGVydGllcyBpblxuICAgICAqIFwiZXNjYXBlXCIgZGVsaW1pdGVycywgYW5kIGV4ZWN1dGUgSmF2YVNjcmlwdCBpbiBcImV2YWx1YXRlXCIgZGVsaW1pdGVycy4gRGF0YVxuICAgICAqIHByb3BlcnRpZXMgbWF5IGJlIGFjY2Vzc2VkIGFzIGZyZWUgdmFyaWFibGVzIGluIHRoZSB0ZW1wbGF0ZS4gSWYgYSBzZXR0aW5nXG4gICAgICogb2JqZWN0IGlzIGdpdmVuLCBpdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYF8udGVtcGxhdGVTZXR0aW5nc2AgdmFsdWVzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEluIHRoZSBkZXZlbG9wbWVudCBidWlsZCBgXy50ZW1wbGF0ZWAgdXRpbGl6ZXNcbiAgICAgKiBbc291cmNlVVJMc10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2ZWxvcGVydG9vbHMvc291cmNlbWFwcy8jdG9jLXNvdXJjZXVybClcbiAgICAgKiBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHByZWNvbXBpbGluZyB0ZW1wbGF0ZXMgc2VlXG4gICAgICogW2xvZGFzaCdzIGN1c3RvbSBidWlsZHMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9sb2Rhc2guY29tL2N1c3RvbS1idWlsZHMpLlxuICAgICAqXG4gICAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gQ2hyb21lIGV4dGVuc2lvbiBzYW5kYm94ZXMgc2VlXG4gICAgICogW0Nocm9tZSdzIGV4dGVuc2lvbnMgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9leHRlbnNpb25zL3NhbmRib3hpbmdFdmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHRlbXBsYXRlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXNjYXBlPV8udGVtcGxhdGVTZXR0aW5ncy5lc2NhcGVdXG4gICAgICogIFRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5ldmFsdWF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXZhbHVhdGVdXG4gICAgICogIFRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5pbXBvcnRzPV8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXVxuICAgICAqICBBbiBvYmplY3QgdG8gaW1wb3J0IGludG8gdGhlIHRlbXBsYXRlIGFzIGZyZWUgdmFyaWFibGVzLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5pbnRlcnBvbGF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGVdXG4gICAgICogIFRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5zb3VyY2VVUkw9J2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbbl0nXVxuICAgICAqICBUaGUgc291cmNlVVJMIG9mIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudmFyaWFibGU9J29iaiddXG4gICAgICogIFRoZSBkYXRhIG9iamVjdCB2YXJpYWJsZSBuYW1lLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjb21waWxlZCB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyIHRvIGNyZWF0ZSBhIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnZnJlZCcgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBIVE1MIFwiZXNjYXBlXCIgZGVsaW1pdGVyIHRvIGVzY2FwZSBkYXRhIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8Yj48JS0gdmFsdWUgJT48L2I+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnPHNjcmlwdD4nIH0pO1xuICAgICAqIC8vID0+ICc8Yj4mbHQ7c2NyaXB0Jmd0OzwvYj4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIgdG8gZXhlY3V0ZSBKYXZhU2NyaXB0IGFuZCBnZW5lcmF0ZSBIVE1MLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIF8uZm9yRWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGludGVybmFsIGBwcmludGAgZnVuY3Rpb24gaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgcHJpbnQoXCJoZWxsbyBcIiArIHVzZXIpOyAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2Jhcm5leScgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGJhcm5leSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIEVTIHRlbXBsYXRlIGxpdGVyYWwgZGVsaW1pdGVyIGFzIGFuIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogLy8gRGlzYWJsZSBzdXBwb3J0IGJ5IHJlcGxhY2luZyB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyAkeyB1c2VyIH0hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdwZWJibGVzJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gcGViYmxlcyEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgYmFja3NsYXNoZXMgdG8gdHJlYXQgZGVsaW1pdGVycyBhcyBwbGFpbiB0ZXh0LlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlPSBcIlxcXFw8JS0gdmFsdWUgJVxcXFw+XCIgJT4nKTtcbiAgICAgKiBjb21waWxlZCh7ICd2YWx1ZSc6ICdpZ25vcmVkJyB9KTtcbiAgICAgKiAvLyA9PiAnPCUtIHZhbHVlICU+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgaW1wb3J0c2Agb3B0aW9uIHRvIGltcG9ydCBgalF1ZXJ5YCBhcyBganFgLlxuICAgICAqIHZhciB0ZXh0ID0gJzwlIGpxLmVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPic7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSh0ZXh0LCB7ICdpbXBvcnRzJzogeyAnanEnOiBqUXVlcnkgfSB9KTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAgICAgKiAvLyA9PiAnPGxpPmZyZWQ8L2xpPjxsaT5iYXJuZXk8L2xpPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYHNvdXJjZVVSTGAgb3B0aW9uIHRvIHNwZWNpZnkgYSBjdXN0b20gc291cmNlVVJMIGZvciB0aGUgdGVtcGxhdGUuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gPCU9IHVzZXIgJT4hJywgeyAnc291cmNlVVJMJzogJy9iYXNpYy9ncmVldGluZy5qc3QnIH0pO1xuICAgICAqIGNvbXBpbGVkKGRhdGEpO1xuICAgICAqIC8vID0+IEZpbmQgdGhlIHNvdXJjZSBvZiBcImdyZWV0aW5nLmpzdFwiIHVuZGVyIHRoZSBTb3VyY2VzIHRhYiBvciBSZXNvdXJjZXMgcGFuZWwgb2YgdGhlIHdlYiBpbnNwZWN0b3IuXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGB2YXJpYWJsZWAgb3B0aW9uIHRvIGVuc3VyZSBhIHdpdGgtc3RhdGVtZW50IGlzbid0IHVzZWQgaW4gdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hpIDwlPSBkYXRhLnVzZXIgJT4hJywgeyAndmFyaWFibGUnOiAnZGF0YScgfSk7XG4gICAgICogY29tcGlsZWQuc291cmNlO1xuICAgICAqIC8vID0+IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgKiAvLyAgIHZhciBfX3QsIF9fcCA9ICcnO1xuICAgICAqIC8vICAgX19wICs9ICdoaSAnICsgKChfX3QgPSAoIGRhdGEudXNlciApKSA9PSBudWxsID8gJycgOiBfX3QpICsgJyEnO1xuICAgICAqIC8vICAgcmV0dXJuIF9fcDtcbiAgICAgKiAvLyB9XG4gICAgICpcbiAgICAgKiAvLyBVc2UgY3VzdG9tIHRlbXBsYXRlIGRlbGltaXRlcnMuXG4gICAgICogXy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlID0gL3t7KFtcXHNcXFNdKz8pfX0vZztcbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyB7eyB1c2VyIH19IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnbXVzdGFjaGUnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBtdXN0YWNoZSEnXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VgIHByb3BlcnR5IHRvIGlubGluZSBjb21waWxlZCB0ZW1wbGF0ZXMgZm9yIG1lYW5pbmdmdWxcbiAgICAgKiAvLyBsaW5lIG51bWJlcnMgaW4gZXJyb3IgbWVzc2FnZXMgYW5kIHN0YWNrIHRyYWNlcy5cbiAgICAgKiBmcy53cml0ZUZpbGVTeW5jKHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAnanN0LmpzJyksICdcXFxuICAgICAqICAgdmFyIEpTVCA9IHtcXFxuICAgICAqICAgICBcIm1haW5cIjogJyArIF8udGVtcGxhdGUobWFpblRleHQpLnNvdXJjZSArICdcXFxuICAgICAqICAgfTtcXFxuICAgICAqICcpO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRlbXBsYXRlKHN0cmluZywgb3B0aW9ucywgZ3VhcmQpIHtcbiAgICAgIC8vIEJhc2VkIG9uIEpvaG4gUmVzaWcncyBgdG1wbGAgaW1wbGVtZW50YXRpb25cbiAgICAgIC8vIChodHRwOi8vZWpvaG4ub3JnL2Jsb2cvamF2YXNjcmlwdC1taWNyby10ZW1wbGF0aW5nLylcbiAgICAgIC8vIGFuZCBMYXVyYSBEb2t0b3JvdmEncyBkb1QuanMgKGh0dHBzOi8vZ2l0aHViLmNvbS9vbGFkby9kb1QpLlxuICAgICAgdmFyIHNldHRpbmdzID0gbG9kYXNoLnRlbXBsYXRlU2V0dGluZ3M7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSkge1xuICAgICAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIG9wdGlvbnMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMsIHNldHRpbmdzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKTtcblxuICAgICAgdmFyIGltcG9ydHMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMuaW1wb3J0cywgc2V0dGluZ3MuaW1wb3J0cywgY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiksXG4gICAgICAgICAgaW1wb3J0c0tleXMgPSBrZXlzKGltcG9ydHMpLFxuICAgICAgICAgIGltcG9ydHNWYWx1ZXMgPSBiYXNlVmFsdWVzKGltcG9ydHMsIGltcG9ydHNLZXlzKTtcblxuICAgICAgdmFyIGlzRXNjYXBpbmcsXG4gICAgICAgICAgaXNFdmFsdWF0aW5nLFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBpbnRlcnBvbGF0ZSA9IG9wdGlvbnMuaW50ZXJwb2xhdGUgfHwgcmVOb01hdGNoLFxuICAgICAgICAgIHNvdXJjZSA9IFwiX19wICs9ICdcIjtcblxuICAgICAgLy8gQ29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyLlxuICAgICAgdmFyIHJlRGVsaW1pdGVycyA9IFJlZ0V4cChcbiAgICAgICAgKG9wdGlvbnMuZXNjYXBlIHx8IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgaW50ZXJwb2xhdGUuc291cmNlICsgJ3wnICtcbiAgICAgICAgKGludGVycG9sYXRlID09PSByZUludGVycG9sYXRlID8gcmVFc1RlbXBsYXRlIDogcmVOb01hdGNoKS5zb3VyY2UgKyAnfCcgK1xuICAgICAgICAob3B0aW9ucy5ldmFsdWF0ZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JCdcbiAgICAgICwgJ2cnKTtcblxuICAgICAgLy8gVXNlIGEgc291cmNlVVJMIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICAgICAgLy8gVGhlIHNvdXJjZVVSTCBnZXRzIGluamVjdGVkIGludG8gdGhlIHNvdXJjZSB0aGF0J3MgZXZhbC1lZCwgc28gYmUgY2FyZWZ1bFxuICAgICAgLy8gdG8gbm9ybWFsaXplIGFsbCBraW5kcyBvZiB3aGl0ZXNwYWNlLCBzbyBlLmcuIG5ld2xpbmVzIChhbmQgdW5pY29kZSB2ZXJzaW9ucyBvZiBpdCkgY2FuJ3Qgc25lYWsgaW5cbiAgICAgIC8vIGFuZCBlc2NhcGUgdGhlIGNvbW1lbnQsIHRodXMgaW5qZWN0aW5nIGNvZGUgdGhhdCBnZXRzIGV2YWxlZC5cbiAgICAgIHZhciBzb3VyY2VVUkwgPSAnLy8jIHNvdXJjZVVSTD0nICtcbiAgICAgICAgKGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3NvdXJjZVVSTCcpXG4gICAgICAgICAgPyAob3B0aW9ucy5zb3VyY2VVUkwgKyAnJykucmVwbGFjZSgvXFxzL2csICcgJylcbiAgICAgICAgICA6ICgnbG9kYXNoLnRlbXBsYXRlU291cmNlc1snICsgKCsrdGVtcGxhdGVDb3VudGVyKSArICddJylcbiAgICAgICAgKSArICdcXG4nO1xuXG4gICAgICBzdHJpbmcucmVwbGFjZShyZURlbGltaXRlcnMsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGVWYWx1ZSwgaW50ZXJwb2xhdGVWYWx1ZSwgZXNUZW1wbGF0ZVZhbHVlLCBldmFsdWF0ZVZhbHVlLCBvZmZzZXQpIHtcbiAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZSB8fCAoaW50ZXJwb2xhdGVWYWx1ZSA9IGVzVGVtcGxhdGVWYWx1ZSk7XG5cbiAgICAgICAgLy8gRXNjYXBlIGNoYXJhY3RlcnMgdGhhdCBjYW4ndCBiZSBpbmNsdWRlZCBpbiBzdHJpbmcgbGl0ZXJhbHMuXG4gICAgICAgIHNvdXJjZSArPSBzdHJpbmcuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShyZVVuZXNjYXBlZFN0cmluZywgZXNjYXBlU3RyaW5nQ2hhcik7XG5cbiAgICAgICAgLy8gUmVwbGFjZSBkZWxpbWl0ZXJzIHdpdGggc25pcHBldHMuXG4gICAgICAgIGlmIChlc2NhcGVWYWx1ZSkge1xuICAgICAgICAgIGlzRXNjYXBpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbl9fZShcIiArIGVzY2FwZVZhbHVlICsgXCIpICtcXG4nXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2YWx1YXRlVmFsdWUpIHtcbiAgICAgICAgICBpc0V2YWx1YXRpbmcgPSB0cnVlO1xuICAgICAgICAgIHNvdXJjZSArPSBcIic7XFxuXCIgKyBldmFsdWF0ZVZhbHVlICsgXCI7XFxuX19wICs9ICdcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJwb2xhdGVWYWx1ZSkge1xuICAgICAgICAgIHNvdXJjZSArPSBcIicgK1xcbigoX190ID0gKFwiICsgaW50ZXJwb2xhdGVWYWx1ZSArIFwiKSkgPT0gbnVsbCA/ICcnIDogX190KSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICAgIC8vIFRoZSBKUyBlbmdpbmUgZW1iZWRkZWQgaW4gQWRvYmUgcHJvZHVjdHMgbmVlZHMgYG1hdGNoYCByZXR1cm5lZCBpblxuICAgICAgICAvLyBvcmRlciB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGBvZmZzZXRgIHZhbHVlLlxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICB9KTtcblxuICAgICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgICAgLy8gSWYgYHZhcmlhYmxlYCBpcyBub3Qgc3BlY2lmaWVkIHdyYXAgYSB3aXRoLXN0YXRlbWVudCBhcm91bmQgdGhlIGdlbmVyYXRlZFxuICAgICAgLy8gY29kZSB0byBhZGQgdGhlIGRhdGEgb2JqZWN0IHRvIHRoZSB0b3Agb2YgdGhlIHNjb3BlIGNoYWluLlxuICAgICAgdmFyIHZhcmlhYmxlID0gaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCAndmFyaWFibGUnKSAmJiBvcHRpb25zLnZhcmlhYmxlO1xuICAgICAgaWYgKCF2YXJpYWJsZSkge1xuICAgICAgICBzb3VyY2UgPSAnd2l0aCAob2JqKSB7XFxuJyArIHNvdXJjZSArICdcXG59XFxuJztcbiAgICAgIH1cbiAgICAgIC8vIFRocm93IGFuIGVycm9yIGlmIGEgZm9yYmlkZGVuIGNoYXJhY3RlciB3YXMgZm91bmQgaW4gYHZhcmlhYmxlYCwgdG8gcHJldmVudFxuICAgICAgLy8gcG90ZW50aWFsIGNvbW1hbmQgaW5qZWN0aW9uIGF0dGFja3MuXG4gICAgICBlbHNlIGlmIChyZUZvcmJpZGRlbklkZW50aWZpZXJDaGFycy50ZXN0KHZhcmlhYmxlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSU5WQUxJRF9URU1QTF9WQVJfRVJST1JfVEVYVCk7XG4gICAgICB9XG5cbiAgICAgIC8vIENsZWFudXAgY29kZSBieSBzdHJpcHBpbmcgZW1wdHkgc3RyaW5ncy5cbiAgICAgIHNvdXJjZSA9IChpc0V2YWx1YXRpbmcgPyBzb3VyY2UucmVwbGFjZShyZUVtcHR5U3RyaW5nTGVhZGluZywgJycpIDogc291cmNlKVxuICAgICAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nTWlkZGxlLCAnJDEnKVxuICAgICAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nVHJhaWxpbmcsICckMTsnKTtcblxuICAgICAgLy8gRnJhbWUgY29kZSBhcyB0aGUgZnVuY3Rpb24gYm9keS5cbiAgICAgIHNvdXJjZSA9ICdmdW5jdGlvbignICsgKHZhcmlhYmxlIHx8ICdvYmonKSArICcpIHtcXG4nICtcbiAgICAgICAgKHZhcmlhYmxlXG4gICAgICAgICAgPyAnJ1xuICAgICAgICAgIDogJ29iaiB8fCAob2JqID0ge30pO1xcbidcbiAgICAgICAgKSArXG4gICAgICAgIFwidmFyIF9fdCwgX19wID0gJydcIiArXG4gICAgICAgIChpc0VzY2FwaW5nXG4gICAgICAgICAgID8gJywgX19lID0gXy5lc2NhcGUnXG4gICAgICAgICAgIDogJydcbiAgICAgICAgKSArXG4gICAgICAgIChpc0V2YWx1YXRpbmdcbiAgICAgICAgICA/ICcsIF9faiA9IEFycmF5LnByb3RvdHlwZS5qb2luO1xcbicgK1xuICAgICAgICAgICAgXCJmdW5jdGlvbiBwcmludCgpIHsgX19wICs9IF9fai5jYWxsKGFyZ3VtZW50cywgJycpIH1cXG5cIlxuICAgICAgICAgIDogJztcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBzb3VyY2UgK1xuICAgICAgICAncmV0dXJuIF9fcFxcbn0nO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYXR0ZW1wdChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uKGltcG9ydHNLZXlzLCBzb3VyY2VVUkwgKyAncmV0dXJuICcgKyBzb3VyY2UpXG4gICAgICAgICAgLmFwcGx5KHVuZGVmaW5lZCwgaW1wb3J0c1ZhbHVlcyk7XG4gICAgICB9KTtcblxuICAgICAgLy8gUHJvdmlkZSB0aGUgY29tcGlsZWQgZnVuY3Rpb24ncyBzb3VyY2UgYnkgaXRzIGB0b1N0cmluZ2AgbWV0aG9kIG9yXG4gICAgICAvLyB0aGUgYHNvdXJjZWAgcHJvcGVydHkgYXMgYSBjb252ZW5pZW5jZSBmb3IgaW5saW5pbmcgY29tcGlsZWQgdGVtcGxhdGVzLlxuICAgICAgcmVzdWx0LnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIGlmIChpc0Vycm9yKHJlc3VsdCkpIHtcbiAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgYSB3aG9sZSwgdG8gbG93ZXIgY2FzZSBqdXN0IGxpa2VcbiAgICAgKiBbU3RyaW5nI3RvTG93ZXJDYXNlXShodHRwczovL21kbi5pby90b0xvd2VyQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9Mb3dlcignLS1Gb28tQmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnLS1mb28tYmFyLS0nXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb29iYXInXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ19fZm9vX2Jhcl9fJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvTG93ZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0b1N0cmluZyh2YWx1ZSkudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgYSB3aG9sZSwgdG8gdXBwZXIgY2FzZSBqdXN0IGxpa2VcbiAgICAgKiBbU3RyaW5nI3RvVXBwZXJDYXNlXShodHRwczovL21kbi5pby90b1VwcGVyQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9VcHBlcignLS1mb28tYmFyLS0nKTtcbiAgICAgKiAvLyA9PiAnLS1GT08tQkFSLS0nXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGT09CQVInXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJ19fZm9vX2Jhcl9fJyk7XG4gICAgICogLy8gPT4gJ19fRk9PX0JBUl9fJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvVXBwZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0b1N0cmluZyh2YWx1ZSkudG9VcHBlckNhc2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2Ugb3Igc3BlY2lmaWVkIGNoYXJhY3RlcnMgZnJvbSBgc3RyaW5nYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byB0cmltLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9d2hpdGVzcGFjZV0gVGhlIGNoYXJhY3RlcnMgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRyaW1tZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRyaW0oJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjJ1xuICAgICAqXG4gICAgICogXy5tYXAoWycgIGZvbyAgJywgJyAgYmFyICAnXSwgXy50cmltKTtcbiAgICAgKiAvLyA9PiBbJ2ZvbycsICdiYXInXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW0oc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gYmFzZVRyaW0oc3RyaW5nKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgY2hyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoY2hhcnMpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIGNoclN5bWJvbHMpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykgKyAxO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0LCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdHJhaWxpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnICBhYmMgICcpO1xuICAgICAqIC8vID0+ICcgIGFiYydcbiAgICAgKlxuICAgICAqIF8udHJpbUVuZCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJy1fLWFiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltRW5kKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5zbGljZSgwLCB0cmltbWVkRW5kSW5kZXgoc3RyaW5nKSArIDEpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBlbmQgPSBjaGFyc0VuZEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGxlYWRpbmcgd2hpdGVzcGFjZSBvciBzcGVjaWZpZWQgY2hhcmFjdGVycyBmcm9tIGBzdHJpbmdgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRyaW0uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz13aGl0ZXNwYWNlXSBUaGUgY2hhcmFjdGVycyB0byB0cmltLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJpbW1lZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJpbVN0YXJ0KCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYyAgJ1xuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJy1fLWFiYy1fLScsICdfLScpO1xuICAgICAqIC8vID0+ICdhYmMtXy0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJpbVN0YXJ0KHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbVN0YXJ0LCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIHN0YXJ0ID0gY2hhcnNTdGFydEluZGV4KHN0clN5bWJvbHMsIHN0cmluZ1RvQXJyYXkoY2hhcnMpKTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCBzdGFydCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJ1bmNhdGVzIGBzdHJpbmdgIGlmIGl0J3MgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBUaGUgbGFzdCBjaGFyYWN0ZXJzIG9mIHRoZSB0cnVuY2F0ZWQgc3RyaW5nIGFyZSByZXBsYWNlZCB3aXRoIHRoZSBvbWlzc2lvblxuICAgICAqIHN0cmluZyB3aGljaCBkZWZhdWx0cyB0byBcIi4uLlwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHRydW5jYXRlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sZW5ndGg9MzBdIFRoZSBtYXhpbXVtIHN0cmluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLm9taXNzaW9uPScuLi4nXSBUaGUgc3RyaW5nIHRvIGluZGljYXRlIHRleHQgaXMgb21pdHRlZC5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtvcHRpb25zLnNlcGFyYXRvcl0gVGhlIHNlcGFyYXRvciBwYXR0ZXJuIHRvIHRydW5jYXRlIHRvLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHRydW5jYXRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nKTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAnICdcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLC4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnbGVuZ3RoJzogMjQsXG4gICAgICogICAnc2VwYXJhdG9yJzogLyw/ICsvXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZS4uLidcbiAgICAgKlxuICAgICAqIF8udHJ1bmNhdGUoJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZ2hib3Jpbm8nLCB7XG4gICAgICogICAnb21pc3Npb24nOiAnIFsuLi5dJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWcgWy4uLl0nXG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJ1bmNhdGUoc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gREVGQVVMVF9UUlVOQ19MRU5HVEgsXG4gICAgICAgICAgb21pc3Npb24gPSBERUZBVUxUX1RSVU5DX09NSVNTSU9OO1xuXG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9ICdzZXBhcmF0b3InIGluIG9wdGlvbnMgPyBvcHRpb25zLnNlcGFyYXRvciA6IHNlcGFyYXRvcjtcbiAgICAgICAgbGVuZ3RoID0gJ2xlbmd0aCcgaW4gb3B0aW9ucyA/IHRvSW50ZWdlcihvcHRpb25zLmxlbmd0aCkgOiBsZW5ndGg7XG4gICAgICAgIG9taXNzaW9uID0gJ29taXNzaW9uJyBpbiBvcHRpb25zID8gYmFzZVRvU3RyaW5nKG9wdGlvbnMub21pc3Npb24pIDogb21pc3Npb247XG4gICAgICB9XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIGlmIChoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyk7XG4gICAgICAgIHN0ckxlbmd0aCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aCA+PSBzdHJMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBlbmQgPSBsZW5ndGggLSBzdHJpbmdTaXplKG9taXNzaW9uKTtcbiAgICAgIGlmIChlbmQgPCAxKSB7XG4gICAgICAgIHJldHVybiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBzdHJTeW1ib2xzXG4gICAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDAsIGVuZCkuam9pbignJylcbiAgICAgICAgOiBzdHJpbmcuc2xpY2UoMCwgZW5kKTtcblxuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIGlmIChzdHJTeW1ib2xzKSB7XG4gICAgICAgIGVuZCArPSAocmVzdWx0Lmxlbmd0aCAtIGVuZCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNSZWdFeHAoc2VwYXJhdG9yKSkge1xuICAgICAgICBpZiAoc3RyaW5nLnNsaWNlKGVuZCkuc2VhcmNoKHNlcGFyYXRvcikpIHtcbiAgICAgICAgICB2YXIgbWF0Y2gsXG4gICAgICAgICAgICAgIHN1YnN0cmluZyA9IHJlc3VsdDtcblxuICAgICAgICAgIGlmICghc2VwYXJhdG9yLmdsb2JhbCkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIHRvU3RyaW5nKHJlRmxhZ3MuZXhlYyhzZXBhcmF0b3IpKSArICdnJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNlcGFyYXRvci5sYXN0SW5kZXggPSAwO1xuICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBzZXBhcmF0b3IuZXhlYyhzdWJzdHJpbmcpKSkge1xuICAgICAgICAgICAgdmFyIG5ld0VuZCA9IG1hdGNoLmluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgbmV3RW5kID09PSB1bmRlZmluZWQgPyBlbmQgOiBuZXdFbmQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZy5pbmRleE9mKGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpLCBlbmQpICE9IGVuZCkge1xuICAgICAgICB2YXIgaW5kZXggPSByZXN1bHQubGFzdEluZGV4T2Yoc2VwYXJhdG9yKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoMCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0ICsgb21pc3Npb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8uZXNjYXBlYDsgdGhpcyBtZXRob2QgY29udmVydHMgdGhlIEhUTUwgZW50aXRpZXNcbiAgICAgKiBgJmFtcDtgLCBgJmx0O2AsIGAmZ3Q7YCwgYCZxdW90O2AsIGFuZCBgJiMzOTtgIGluIGBzdHJpbmdgIHRvXG4gICAgICogdGhlaXIgY29ycmVzcG9uZGluZyBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vIG90aGVyIEhUTUwgZW50aXRpZXMgYXJlIHVuZXNjYXBlZC4gVG8gdW5lc2NhcGUgYWRkaXRpb25hbFxuICAgICAqIEhUTUwgZW50aXRpZXMgdXNlIGEgdGhpcmQtcGFydHkgbGlicmFyeSBsaWtlIFtfaGVfXShodHRwczovL210aHMuYmUvaGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNi4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHVuZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udW5lc2NhcGUoJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICYgcGViYmxlcydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmVzY2FwZShzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc0VzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICAgICAgPyBzdHJpbmcucmVwbGFjZShyZUVzY2FwZWRIdG1sLCB1bmVzY2FwZUh0bWxDaGFyKVxuICAgICAgICA6IHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgc3RyaW5nYCwgYXMgc3BhY2Ugc2VwYXJhdGVkIHdvcmRzLCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnLS1mb28tYmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICpcbiAgICAgKiBfLnVwcGVyQ2FzZSgnX19mb29fYmFyX18nKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJyAnIDogJycpICsgd29yZC50b1VwcGVyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51cHBlckZpcnN0KCdmcmVkJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ0ZSRUQnKTtcbiAgICAgKiAvLyA9PiAnRlJFRCdcbiAgICAgKi9cbiAgICB2YXIgdXBwZXJGaXJzdCA9IGNyZWF0ZUNhc2VGaXJzdCgndG9VcHBlckNhc2UnKTtcblxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAgICAgKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogXy53b3JkcygnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnLCAvW14sIF0rL2cpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3b3JkcyhzdHJpbmcsIHBhdHRlcm4sIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICAgICAgaWYgKHBhdHRlcm4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmluZy5tYXRjaChwYXR0ZXJuKSB8fCBbXTtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBdHRlbXB0cyB0byBpbnZva2UgYGZ1bmNgLCByZXR1cm5pbmcgZWl0aGVyIHRoZSByZXN1bHQgb3IgdGhlIGNhdWdodCBlcnJvclxuICAgICAqIG9iamVjdC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGF0dGVtcHQuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGBmdW5jYCByZXN1bHQgb3IgZXJyb3Igb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCB0aHJvd2luZyBlcnJvcnMgZm9yIGludmFsaWQgc2VsZWN0b3JzLlxuICAgICAqIHZhciBlbGVtZW50cyA9IF8uYXR0ZW1wdChmdW5jdGlvbihzZWxlY3Rvcikge1xuICAgICAqICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAqIH0sICc+Xz4nKTtcbiAgICAgKlxuICAgICAqIGlmIChfLmlzRXJyb3IoZWxlbWVudHMpKSB7XG4gICAgICogICBlbGVtZW50cyA9IFtdO1xuICAgICAqIH1cbiAgICAgKi9cbiAgICB2YXIgYXR0ZW1wdCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhcHBseShmdW5jLCB1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gaXNFcnJvcihlKSA/IGUgOiBuZXcgRXJyb3IoZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBCaW5kcyBtZXRob2RzIG9mIGFuIG9iamVjdCB0byB0aGUgb2JqZWN0IGl0c2VsZiwgb3ZlcndyaXRpbmcgdGhlIGV4aXN0aW5nXG4gICAgICogbWV0aG9kLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGJvdW5kIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGJpbmQgYW5kIGFzc2lnbiB0aGUgYm91bmQgbWV0aG9kcyB0by5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBtZXRob2ROYW1lcyBUaGUgb2JqZWN0IG1ldGhvZCBuYW1lcyB0byBiaW5kLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB2aWV3ID0ge1xuICAgICAqICAgJ2xhYmVsJzogJ2RvY3MnLFxuICAgICAqICAgJ2NsaWNrJzogZnVuY3Rpb24oKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdjbGlja2VkICcgKyB0aGlzLmxhYmVsKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5iaW5kQWxsKHZpZXcsIFsnY2xpY2snXSk7XG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHZpZXcuY2xpY2spO1xuICAgICAqIC8vID0+IExvZ3MgJ2NsaWNrZWQgZG9jcycgd2hlbiBjbGlja2VkLlxuICAgICAqL1xuICAgIHZhciBiaW5kQWxsID0gZmxhdFJlc3QoZnVuY3Rpb24ob2JqZWN0LCBtZXRob2ROYW1lcykge1xuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAga2V5ID0gdG9LZXkoa2V5KTtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBiaW5kKG9iamVjdFtrZXldLCBvYmplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGl0ZXJhdGVzIG92ZXIgYHBhaXJzYCBhbmQgaW52b2tlcyB0aGUgY29ycmVzcG9uZGluZ1xuICAgICAqIGZ1bmN0aW9uIG9mIHRoZSBmaXJzdCBwcmVkaWNhdGUgdG8gcmV0dXJuIHRydXRoeS4gVGhlIHByZWRpY2F0ZS1mdW5jdGlvblxuICAgICAqIHBhaXJzIGFyZSBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHMgb2YgdGhlIGNyZWF0ZWRcbiAgICAgKiBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFpcnMgVGhlIHByZWRpY2F0ZS1mdW5jdGlvbiBwYWlycy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5jb25kKFtcbiAgICAgKiAgIFtfLm1hdGNoZXMoeyAnYSc6IDEgfSksICAgICAgICAgICBfLmNvbnN0YW50KCdtYXRjaGVzIEEnKV0sXG4gICAgICogICBbXy5jb25mb3Jtcyh7ICdiJzogXy5pc051bWJlciB9KSwgXy5jb25zdGFudCgnbWF0Y2hlcyBCJyldLFxuICAgICAqICAgW18uc3R1YlRydWUsICAgICAgICAgICAgICAgICAgICAgIF8uY29uc3RhbnQoJ25vIG1hdGNoJyldXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gJ21hdGNoZXMgQSdcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDAsICdiJzogMSB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBCJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogJzEnLCAnYic6ICcyJyB9KTtcbiAgICAgKiAvLyA9PiAnbm8gbWF0Y2gnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZChwYWlycykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhaXJzID09IG51bGwgPyAwIDogcGFpcnMubGVuZ3RoLFxuICAgICAgICAgIHRvSXRlcmF0ZWUgPSBnZXRJdGVyYXRlZSgpO1xuXG4gICAgICBwYWlycyA9ICFsZW5ndGggPyBbXSA6IGFycmF5TWFwKHBhaXJzLCBmdW5jdGlvbihwYWlyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGFpclsxXSAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbdG9JdGVyYXRlZShwYWlyWzBdKSwgcGFpclsxXV07XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpbmRleF07XG4gICAgICAgICAgaWYgKGFwcGx5KHBhaXJbMF0sIHRoaXMsIGFyZ3MpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkocGFpclsxXSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBwcmVkaWNhdGUgcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoXG4gICAgICogdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsdWVzIG9mIGEgZ2l2ZW4gb2JqZWN0LCByZXR1cm5pbmcgYHRydWVgIGlmXG4gICAgICogYWxsIHByZWRpY2F0ZXMgcmV0dXJuIHRydXRoeSwgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uY29uZm9ybXNUb2Agd2l0aFxuICAgICAqIGBzb3VyY2VgIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDIsICdiJzogMSB9LFxuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8uY29uZm9ybXMoeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIGJhc2VDb25mb3JtcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29uc3RhbnQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLmNvbnN0YW50KHsgJ2EnOiAxIH0pKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSB9LCB7ICdhJzogMSB9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGB2YWx1ZWAgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBkZWZhdWx0IHZhbHVlIHNob3VsZCBiZSByZXR1cm5lZCBpblxuICAgICAqIGl0cyBwbGFjZS4gVGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGBudWxsYCxcbiAgICAgKiBvciBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjE0LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7Kn0gZGVmYXVsdFZhbHVlIFRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8oMSwgMTApO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdFRvKHVuZGVmaW5lZCwgMTApO1xuICAgICAqIC8vID0+IDEwXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVmYXVsdFRvKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUpID8gZGVmYXVsdFZhbHVlIDogdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBnaXZlbiBmdW5jdGlvbnNcbiAgICAgKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gICAgICogaW52b2NhdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtmdW5jc10gVGhlIGZ1bmN0aW9ucyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICAgICAqIEBzZWUgXy5mbG93UmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93KFtfLmFkZCwgc3F1YXJlXSk7XG4gICAgICogYWRkU3F1YXJlKDEsIDIpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKi9cbiAgICB2YXIgZmxvdyA9IGNyZWF0ZUZsb3coKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxvd2AgZXhjZXB0IHRoYXQgaXQgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXRcbiAgICAgKiBpbnZva2VzIHRoZSBnaXZlbiBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICogbjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgYWRkU3F1YXJlID0gXy5mbG93UmlnaHQoW3NxdWFyZSwgXy5hZGRdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93UmlnaHQgPSBjcmVhdGVGbG93KHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIGB2YWx1ZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggdGhlIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLiBJZiBgZnVuY2AgaXMgYSBwcm9wZXJ0eSBuYW1lLCB0aGUgY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIHRoZVxuICAgICAqIHByb3BlcnR5IHZhbHVlIGZvciBhIGdpdmVuIGVsZW1lbnQuIElmIGBmdW5jYCBpcyBhbiBhcnJheSBvciBvYmplY3QsIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24gcmV0dXJucyBgdHJ1ZWAgZm9yIGVsZW1lbnRzIHRoYXQgY29udGFpbiB0aGUgZXF1aXZhbGVudFxuICAgICAqIHNvdXJjZSBwcm9wZXJ0aWVzLCBvdGhlcndpc2UgaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IFtmdW5jPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGEgY2FsbGJhY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBjYWxsYmFjay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZSh7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0pKTtcbiAgICAgKiAvLyA9PiBbeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH1dXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8uaXRlcmF0ZWUoWyd1c2VyJywgJ2ZyZWQnXSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2ZyZWQnLCAnYWdlJzogNDAgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCBfLml0ZXJhdGVlKCd1c2VyJykpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gQ3JlYXRlIGN1c3RvbSBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqIF8uaXRlcmF0ZWUgPSBfLndyYXAoXy5pdGVyYXRlZSwgZnVuY3Rpb24oaXRlcmF0ZWUsIGZ1bmMpIHtcbiAgICAgKiAgIHJldHVybiAhXy5pc1JlZ0V4cChmdW5jKSA/IGl0ZXJhdGVlKGZ1bmMpIDogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICogICAgIHJldHVybiBmdW5jLnRlc3Qoc3RyaW5nKTtcbiAgICAgKiAgIH07XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihbJ2FiYycsICdkZWYnXSwgL2VmLyk7XG4gICAgICogLy8gPT4gWydkZWYnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGl0ZXJhdGVlKGZ1bmMpIHtcbiAgICAgIHJldHVybiBiYXNlSXRlcmF0ZWUodHlwZW9mIGZ1bmMgPT0gJ2Z1bmN0aW9uJyA/IGZ1bmMgOiBiYXNlQ2xvbmUoZnVuYywgQ0xPTkVfREVFUF9GTEFHKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIGEgZ2l2ZW5cbiAgICAgKiBvYmplY3QgYW5kIGBzb3VyY2VgLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGVxdWl2YWxlbnRcbiAgICAgKiBwcm9wZXJ0eSB2YWx1ZXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGUgY3JlYXRlZCBmdW5jdGlvbiBpcyBlcXVpdmFsZW50IHRvIGBfLmlzTWF0Y2hgIHdpdGggYHNvdXJjZWBcbiAgICAgKiBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIFBhcnRpYWwgY29tcGFyaXNvbnMgd2lsbCBtYXRjaCBlbXB0eSBhcnJheSBhbmQgZW1wdHkgb2JqZWN0IGBzb3VyY2VgXG4gICAgICogdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWUgYF8uaXNFcXVhbGBcbiAgICAgKiBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBNdWx0aXBsZSB2YWx1ZXMgY2FuIGJlIGNoZWNrZWQgYnkgY29tYmluaW5nIHNldmVyYWwgbWF0Y2hlcnNcbiAgICAgKiB1c2luZyBgXy5vdmVyU29tZWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5tYXRjaGVzKHsgJ2EnOiA0LCAnYyc6IDYgfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfV1cbiAgICAgKlxuICAgICAqIC8vIENoZWNraW5nIGZvciBzZXZlcmFsIHBvc3NpYmxlIHZhbHVlc1xuICAgICAqIF8uZmlsdGVyKG9iamVjdHMsIF8ub3ZlclNvbWUoW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgXy5tYXRjaGVzKHsgJ2EnOiA0IH0pXSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSwgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdGhlXG4gICAgICogdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0IHRvIGBzcmNWYWx1ZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlXG4gICAgICogb2JqZWN0IHZhbHVlIGlzIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdFxuICAgICAqIGBzcmNWYWx1ZWAgdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWVcbiAgICAgKiBgXy5pc0VxdWFsYCBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBNdWx0aXBsZSB2YWx1ZXMgY2FuIGJlIGNoZWNrZWQgYnkgY29tYmluaW5nIHNldmVyYWwgbWF0Y2hlcnNcbiAgICAgKiB1c2luZyBgXy5vdmVyU29tZWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKG9iamVjdHMsIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCkpO1xuICAgICAqIC8vID0+IHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICpcbiAgICAgKiAvLyBDaGVja2luZyBmb3Igc2V2ZXJhbCBwb3NzaWJsZSB2YWx1ZXNcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm92ZXJTb21lKFtfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDEpLCBfLm1hdGNoZXNQcm9wZXJ0eSgnYScsIDQpXSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSwgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBiYXNlQ2xvbmUoc3JjVmFsdWUsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gICAgICogQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byB0aGUgaW52b2tlZCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy43LjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogXy5jb25zdGFudCgyKSB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMSkgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ubWV0aG9kKCdhLmInKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZChbJ2EnLCAnYiddKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZCA9IGJhc2VSZXN0KGZ1bmN0aW9uKHBhdGgsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWV0aG9kYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlc1xuICAgICAqIHRoZSBtZXRob2QgYXQgYSBnaXZlbiBwYXRoIG9mIGBvYmplY3RgLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludm9rZXIgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IF8udGltZXMoMywgXy5jb25zdGFudCksXG4gICAgICogICAgIG9iamVjdCA9IHsgJ2EnOiBhcnJheSwgJ2InOiBhcnJheSwgJ2MnOiBhcnJheSB9O1xuICAgICAqXG4gICAgICogXy5tYXAoWydhWzJdJywgJ2NbMF0nXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5tZXRob2RPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICB2YXIgbWV0aG9kT2YgPSBiYXNlUmVzdChmdW5jdGlvbihvYmplY3QsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbGwgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIGZ1bmN0aW9uIHByb3BlcnRpZXMgb2YgYSBzb3VyY2VcbiAgICAgKiBvYmplY3QgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdC4gSWYgYG9iamVjdGAgaXMgYSBmdW5jdGlvbiwgdGhlbiBtZXRob2RzXG4gICAgICogYXJlIGFkZGVkIHRvIGl0cyBwcm90b3R5cGUgYXMgd2VsbC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVc2UgYF8ucnVuSW5Db250ZXh0YCB0byBjcmVhdGUgYSBwcmlzdGluZSBgbG9kYXNoYCBmdW5jdGlvbiB0b1xuICAgICAqIGF2b2lkIGNvbmZsaWN0cyBjYXVzZWQgYnkgbW9kaWZ5aW5nIHRoZSBvcmlnaW5hbC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IFtvYmplY3Q9bG9kYXNoXSBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBmdW5jdGlvbnMgdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2hhaW49dHJ1ZV0gU3BlY2lmeSB3aGV0aGVyIG1peGlucyBhcmUgY2hhaW5hYmxlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHZvd2VscyhzdHJpbmcpIHtcbiAgICAgKiAgIHJldHVybiBfLmZpbHRlcihzdHJpbmcsIGZ1bmN0aW9uKHYpIHtcbiAgICAgKiAgICAgcmV0dXJuIC9bYWVpb3VdL2kudGVzdCh2KTtcbiAgICAgKiAgIH0pO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8ubWl4aW4oeyAndm93ZWxzJzogdm93ZWxzIH0pO1xuICAgICAqIF8udm93ZWxzKCdmcmVkJyk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKlxuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9LCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuICAgICAqIF8oJ2ZyZWQnKS52b3dlbHMoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1peGluKG9iamVjdCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgICB2YXIgcHJvcHMgPSBrZXlzKHNvdXJjZSksXG4gICAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwgcHJvcHMpO1xuXG4gICAgICBpZiAob3B0aW9ucyA9PSBudWxsICYmXG4gICAgICAgICAgIShpc09iamVjdChzb3VyY2UpICYmIChtZXRob2ROYW1lcy5sZW5ndGggfHwgIXByb3BzLmxlbmd0aCkpKSB7XG4gICAgICAgIG9wdGlvbnMgPSBzb3VyY2U7XG4gICAgICAgIHNvdXJjZSA9IG9iamVjdDtcbiAgICAgICAgb2JqZWN0ID0gdGhpcztcbiAgICAgICAgbWV0aG9kTmFtZXMgPSBiYXNlRnVuY3Rpb25zKHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICAgIH1cbiAgICAgIHZhciBjaGFpbiA9ICEoaXNPYmplY3Qob3B0aW9ucykgJiYgJ2NoYWluJyBpbiBvcHRpb25zKSB8fCAhIW9wdGlvbnMuY2hhaW4sXG4gICAgICAgICAgaXNGdW5jID0gaXNGdW5jdGlvbihvYmplY3QpO1xuXG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgdmFyIGZ1bmMgPSBzb3VyY2VbbWV0aG9kTmFtZV07XG4gICAgICAgIG9iamVjdFttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIGlmIChpc0Z1bmMpIHtcbiAgICAgICAgICBvYmplY3QucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXztcbiAgICAgICAgICAgIGlmIChjaGFpbiB8fCBjaGFpbkFsbCkge1xuICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0KHRoaXMuX193cmFwcGVkX18pLFxuICAgICAgICAgICAgICAgICAgYWN0aW9ucyA9IHJlc3VsdC5fX2FjdGlvbnNfXyA9IGNvcHlBcnJheSh0aGlzLl9fYWN0aW9uc19fKTtcblxuICAgICAgICAgICAgICBhY3Rpb25zLnB1c2goeyAnZnVuYyc6IGZ1bmMsICdhcmdzJzogYXJndW1lbnRzLCAndGhpc0FyZyc6IG9iamVjdCB9KTtcbiAgICAgICAgICAgICAgcmVzdWx0Ll9fY2hhaW5fXyA9IGNoYWluQWxsO1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkob2JqZWN0LCBhcnJheVB1c2goW3RoaXMudmFsdWUoKV0sIGFyZ3VtZW50cykpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVydHMgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHMgcHJldmlvdXMgdmFsdWUgYW5kIHJldHVybnMgYSByZWZlcmVuY2UgdG9cbiAgICAgKiB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBsb2Rhc2ggPSBfLm5vQ29uZmxpY3QoKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBub0NvbmZsaWN0KCkge1xuICAgICAgaWYgKHJvb3QuXyA9PT0gdGhpcykge1xuICAgICAgICByb290Ll8gPSBvbGREYXNoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5ub29wKTtcbiAgICAgKiAvLyA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9vcCgpIHtcbiAgICAgIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgZ2V0cyB0aGUgYXJndW1lbnQgYXQgaW5kZXggYG5gLiBJZiBgbmAgaXMgbmVnYXRpdmUsXG4gICAgICogdGhlIG50aCBhcmd1bWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGFyZ3VtZW50IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXNzLXRocnUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoMSk7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdiJ1xuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm50aEFyZygtMik7XG4gICAgICogZnVuYygnYScsICdiJywgJ2MnLCAnZCcpO1xuICAgICAqIC8vID0+ICdjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aEFyZyhuKSB7XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VOdGgoYXJncywgbik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBpdGVyYXRlZXNgIHdpdGggdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlc1xuICAgICAqIGFuZCByZXR1cm5zIHRoZWlyIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBpbnZva2UuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyKFtNYXRoLm1heCwgTWF0aC5taW5dKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoMSwgMiwgMywgNCk7XG4gICAgICogLy8gPT4gWzQsIDFdXG4gICAgICovXG4gICAgdmFyIG92ZXIgPSBjcmVhdGVPdmVyKGFycmF5TWFwKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFsbCoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBGb2xsb3dpbmcgc2hvcnRoYW5kcyBhcmUgcG9zc2libGUgZm9yIHByb3ZpZGluZyBwcmVkaWNhdGVzLlxuICAgICAqIFBhc3MgYW4gYE9iamVjdGAgYW5kIGl0IHdpbGwgYmUgdXNlZCBhcyBhbiBwYXJhbWV0ZXIgZm9yIGBfLm1hdGNoZXNgIHRvIGNyZWF0ZSB0aGUgcHJlZGljYXRlLlxuICAgICAqIFBhc3MgYW4gYEFycmF5YCBvZiBwYXJhbWV0ZXJzIGZvciBgXy5tYXRjaGVzUHJvcGVydHlgIGFuZCB0aGUgcHJlZGljYXRlIHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0aGVtLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJFdmVyeShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBmdW5jKE5hTik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgb3ZlckV2ZXJ5ID0gY3JlYXRlT3ZlcihhcnJheUV2ZXJ5KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiAqKmFueSoqIG9mIHRoZSBgcHJlZGljYXRlc2AgcmV0dXJuXG4gICAgICogdHJ1dGh5IHdoZW4gaW52b2tlZCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXMuXG4gICAgICpcbiAgICAgKiBGb2xsb3dpbmcgc2hvcnRoYW5kcyBhcmUgcG9zc2libGUgZm9yIHByb3ZpZGluZyBwcmVkaWNhdGVzLlxuICAgICAqIFBhc3MgYW4gYE9iamVjdGAgYW5kIGl0IHdpbGwgYmUgdXNlZCBhcyBhbiBwYXJhbWV0ZXIgZm9yIGBfLm1hdGNoZXNgIHRvIGNyZWF0ZSB0aGUgcHJlZGljYXRlLlxuICAgICAqIFBhc3MgYW4gYEFycmF5YCBvZiBwYXJhbWV0ZXJzIGZvciBgXy5tYXRjaGVzUHJvcGVydHlgIGFuZCB0aGUgcHJlZGljYXRlIHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0aGVtLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW3ByZWRpY2F0ZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgcHJlZGljYXRlcyB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJTb21lKFtCb29sZWFuLCBpc0Zpbml0ZV0pO1xuICAgICAqXG4gICAgICogZnVuYygnMScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiB2YXIgbWF0Y2hlc0Z1bmMgPSBfLm92ZXJTb21lKFt7ICdhJzogMSB9LCB7ICdhJzogMiB9XSlcbiAgICAgKiB2YXIgbWF0Y2hlc1Byb3BlcnR5RnVuYyA9IF8ub3ZlclNvbWUoW1snYScsIDFdLCBbJ2EnLCAyXV0pXG4gICAgICovXG4gICAgdmFyIG92ZXJTb21lID0gY3JlYXRlT3ZlcihhcnJheVNvbWUpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gICAgICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKlxuICAgICAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICAgICAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnByb3BlcnR5YDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJuc1xuICAgICAqIHRoZSB2YWx1ZSBhdCBhIGdpdmVuIHBhdGggb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzAsIDEsIDJdLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKlxuICAgICAqIF8ubWFwKFtbJ2EnLCAnMiddLCBbJ2MnLCAnMCddXSwgXy5wcm9wZXJ0eU9mKG9iamVjdCkpO1xuICAgICAqIC8vID0+IFsyLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5T2Yob2JqZWN0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgbnVtYmVycyAocG9zaXRpdmUgYW5kL29yIG5lZ2F0aXZlKSBwcm9ncmVzc2luZyBmcm9tXG4gICAgICogYHN0YXJ0YCB1cCB0bywgYnV0IG5vdCBpbmNsdWRpbmcsIGBlbmRgLiBBIHN0ZXAgb2YgYC0xYCBpcyB1c2VkIGlmIGEgbmVnYXRpdmVcbiAgICAgKiBgc3RhcnRgIGlzIHNwZWNpZmllZCB3aXRob3V0IGFuIGBlbmRgIG9yIGBzdGVwYC4gSWYgYGVuZGAgaXMgbm90IHNwZWNpZmllZCxcbiAgICAgKiBpdCdzIHNldCB0byBgc3RhcnRgIHdpdGggYHN0YXJ0YCB0aGVuIHNldCB0byBgMGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSmF2YVNjcmlwdCBmb2xsb3dzIHRoZSBJRUVFLTc1NCBzdGFuZGFyZCBmb3IgcmVzb2x2aW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgdmFsdWVzIHdoaWNoIGNhbiBwcm9kdWNlIHVuZXhwZWN0ZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGVwPTFdIFRoZSB2YWx1ZSB0byBpbmNyZW1lbnQgb3IgZGVjcmVtZW50IGJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZ2Ugb2YgbnVtYmVycy5cbiAgICAgKiBAc2VlIF8uaW5SYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoNCk7XG4gICAgICogLy8gPT4gWzAsIDEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKC00KTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDMsIDRdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDAsIDIwLCA1KTtcbiAgICAgKiAvLyA9PiBbMCwgNSwgMTAsIDE1XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFswLCAtMSwgLTIsIC0zXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICB2YXIgcmFuZ2UgPSBjcmVhdGVSYW5nZSgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5yYW5nZWAgZXhjZXB0IHRoYXQgaXQgcG9wdWxhdGVzIHZhbHVlcyBpblxuICAgICAqIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDQpO1xuICAgICAqIC8vID0+IFszLCAyLCAxLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KC00KTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA1KTtcbiAgICAgKiAvLyA9PiBbNCwgMywgMiwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzE1LCAxMCwgNSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwLCAtNCwgLTEpO1xuICAgICAqIC8vID0+IFstMywgLTIsIC0xLCAwXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDEsIDQsIDApO1xuICAgICAqIC8vID0+IFsxLCAxLCAxXVxuICAgICAqXG4gICAgICogXy5yYW5nZVJpZ2h0KDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlUmlnaHQgPSBjcmVhdGVSYW5nZSh0cnVlKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzKTtcbiAgICAgKiAvLyA9PiBbW10sIFtdXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXlzWzBdID09PSBhcnJheXNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkFycmF5KCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICAgICAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uc3R1Yk9iamVjdCk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzKTtcbiAgICAgKiAvLyA9PiBbe30sIHt9XVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViT2JqZWN0KCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZW1wdHkgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlN0cmluZyk7XG4gICAgICogLy8gPT4gWycnLCAnJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViU3RyaW5nKCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHRydWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YlRydWUpO1xuICAgICAqIC8vID0+IFt0cnVlLCB0cnVlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJUcnVlKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlcyB0aGUgaXRlcmF0ZWUgYG5gIHRpbWVzLCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBlYWNoIGludm9jYXRpb24uIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OyAoaW5kZXgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygzLCBTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJywgJzInXVxuICAgICAqXG4gICAgICogIF8udGltZXMoNCwgXy5jb25zdGFudCgwKSk7XG4gICAgICogLy8gPT4gWzAsIDAsIDAsIDBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICBpZiAobiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gTUFYX0FSUkFZX0xFTkdUSCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4obiwgTUFYX0FSUkFZX0xFTkdUSCk7XG5cbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUpO1xuICAgICAgbiAtPSBNQVhfQVJSQVlfTEVOR1RIO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZVRpbWVzKGxlbmd0aCwgaXRlcmF0ZWUpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgICAgIGl0ZXJhdGVlKGluZGV4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2EuYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gICAgICpcbiAgICAgKiBfLnRvUGF0aCgnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnMCcsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgdG9LZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3ltYm9sKHZhbHVlKSA/IFt2YWx1ZV0gOiBjb3B5QXJyYXkoc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHVuaXF1ZSBJRC4gSWYgYHByZWZpeGAgaXMgZ2l2ZW4sIHRoZSBJRCBpcyBhcHBlbmRlZCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcmVmaXg9JyddIFRoZSB2YWx1ZSB0byBwcmVmaXggdGhlIElEIHdpdGguXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5pcXVlIElELlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCdjb250YWN0XycpO1xuICAgICAqIC8vID0+ICdjb250YWN0XzEwNCdcbiAgICAgKlxuICAgICAqIF8udW5pcXVlSWQoKTtcbiAgICAgKiAvLyA9PiAnMTA1J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuaXF1ZUlkKHByZWZpeCkge1xuICAgICAgdmFyIGlkID0gKytpZENvdW50ZXI7XG4gICAgICByZXR1cm4gdG9TdHJpbmcocHJlZml4KSArIGlkO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhdWdlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYWRkZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGFuIGFkZGl0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRvdGFsLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmFkZCg2LCA0KTtcbiAgICAgKiAvLyA9PiAxMFxuICAgICAqL1xuICAgIHZhciBhZGQgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGF1Z2VuZCwgYWRkZW5kKSB7XG4gICAgICByZXR1cm4gYXVnZW5kICsgYWRkZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB1cCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCB1cC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgdXAgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmNlaWwoNC4wMDYpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2LjAwNCwgMik7XG4gICAgICogLy8gPT4gNi4wMVxuICAgICAqXG4gICAgICogXy5jZWlsKDYwNDAsIC0yKTtcbiAgICAgKiAvLyA9PiA2MTAwXG4gICAgICovXG4gICAgdmFyIGNlaWwgPSBjcmVhdGVSb3VuZCgnY2VpbCcpO1xuXG4gICAgLyoqXG4gICAgICogRGl2aWRlIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aWRlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXZpc29yIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgZGl2aXNpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcXVvdGllbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGl2aWRlKDYsIDQpO1xuICAgICAqIC8vID0+IDEuNVxuICAgICAqL1xuICAgIHZhciBkaXZpZGUgPSBjcmVhdGVNYXRoT3BlcmF0aW9uKGZ1bmN0aW9uKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICByZXR1cm4gZGl2aWRlbmQgLyBkaXZpc29yO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCBkb3duIHRvIGBwcmVjaXNpb25gLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIHJvdW5kIGRvd24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCBkb3duIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgZG93biBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNC4wMDYpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoMC4wNDYsIDIpO1xuICAgICAqIC8vID0+IDAuMDRcbiAgICAgKlxuICAgICAqIF8uZmxvb3IoNDA2MCwgLTIpO1xuICAgICAqIC8vID0+IDQwMDBcbiAgICAgKi9cbiAgICB2YXIgZmxvb3IgPSBjcmVhdGVSb3VuZCgnZmxvb3InKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1heChbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDhcbiAgICAgKlxuICAgICAqIF8ubWF4KFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXgoYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5tYXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1heGltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5tYXhCeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAyIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4QnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUd0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWVhbiBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tZWFuKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgaWRlbnRpdHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWVhbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IGluIGBhcnJheWAgdG8gZ2VuZXJhdGUgdGhlIHZhbHVlIHRvIGJlIGF2ZXJhZ2VkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNy4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZWFuLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogNCB9LCB7ICduJzogMiB9LCB7ICduJzogOCB9LCB7ICduJzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gNVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tZWFuQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVhbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VNZWFuKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBtaW5pbXVtIHZhbHVlIG9mIGBhcnJheWAuIElmIGBhcnJheWAgaXMgZW1wdHkgb3IgZmFsc2V5LFxuICAgICAqIGB1bmRlZmluZWRgIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1pbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8ubWluKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaW4oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VFeHRyZW11bShhcnJheSwgaWRlbnRpdHksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5taW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb24gYnkgd2hpY2hcbiAgICAgKiB0aGUgdmFsdWUgaXMgcmFua2VkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1pbmltdW0gdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiAxIH0sIHsgJ24nOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5taW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IHsgJ24nOiAxIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYmFzZUx0KVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNdWx0aXBseSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG11bHRpcGxpZXIgVGhlIGZpcnN0IG51bWJlciBpbiBhIG11bHRpcGxpY2F0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWNhbmQgVGhlIHNlY29uZCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwcm9kdWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm11bHRpcGx5KDYsIDQpO1xuICAgICAqIC8vID0+IDI0XG4gICAgICovXG4gICAgdmFyIG11bHRpcGx5ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtdWx0aXBsaWVyLCBtdWx0aXBsaWNhbmQpIHtcbiAgICAgIHJldHVybiBtdWx0aXBsaWVyICogbXVsdGlwbGljYW5kO1xuICAgIH0sIDEpO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgYG51bWJlcmAgcm91bmRlZCB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3ByZWNpc2lvbj0wXSBUaGUgcHJlY2lzaW9uIHRvIHJvdW5kIHRvLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJvdW5kZWQgbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQuMDA2LCAyKTtcbiAgICAgKiAvLyA9PiA0LjAxXG4gICAgICpcbiAgICAgKiBfLnJvdW5kKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MTAwXG4gICAgICovXG4gICAgdmFyIHJvdW5kID0gY3JlYXRlUm91bmQoJ3JvdW5kJyk7XG5cbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdCB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pbnVlbmQgVGhlIGZpcnN0IG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdWJ0cmFoZW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgc3VidHJhY3Rpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgZGlmZmVyZW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zdWJ0cmFjdCg2LCA0KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgdmFyIHN1YnRyYWN0ID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihtaW51ZW5kLCBzdWJ0cmFoZW5kKSB7XG4gICAgICByZXR1cm4gbWludWVuZCAtIHN1YnRyYWhlbmQ7XG4gICAgfSwgMCk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgc3VtIG9mIHRoZSB2YWx1ZXMgaW4gYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjQuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VtKFs0LCAyLCA4LCA2XSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW0oYXJyYXkpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGlkZW50aXR5KVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zdW1gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBzdW1tZWQuXG4gICAgICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN1bS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8ubjsgfSk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc3VtQnkob2JqZWN0cywgJ24nKTtcbiAgICAgKiAvLyA9PiAyMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN1bUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVN1bShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IDA7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdGhhdCByZXR1cm4gd3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZnRlciA9IGFmdGVyO1xuICAgIGxvZGFzaC5hcnkgPSBhcnk7XG4gICAgbG9kYXNoLmFzc2lnbiA9IGFzc2lnbjtcbiAgICBsb2Rhc2guYXNzaWduSW4gPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guYXNzaWduSW5XaXRoID0gYXNzaWduSW5XaXRoO1xuICAgIGxvZGFzaC5hc3NpZ25XaXRoID0gYXNzaWduV2l0aDtcbiAgICBsb2Rhc2guYXQgPSBhdDtcbiAgICBsb2Rhc2guYmVmb3JlID0gYmVmb3JlO1xuICAgIGxvZGFzaC5iaW5kID0gYmluZDtcbiAgICBsb2Rhc2guYmluZEFsbCA9IGJpbmRBbGw7XG4gICAgbG9kYXNoLmJpbmRLZXkgPSBiaW5kS2V5O1xuICAgIGxvZGFzaC5jYXN0QXJyYXkgPSBjYXN0QXJyYXk7XG4gICAgbG9kYXNoLmNoYWluID0gY2hhaW47XG4gICAgbG9kYXNoLmNodW5rID0gY2h1bms7XG4gICAgbG9kYXNoLmNvbXBhY3QgPSBjb21wYWN0O1xuICAgIGxvZGFzaC5jb25jYXQgPSBjb25jYXQ7XG4gICAgbG9kYXNoLmNvbmQgPSBjb25kO1xuICAgIGxvZGFzaC5jb25mb3JtcyA9IGNvbmZvcm1zO1xuICAgIGxvZGFzaC5jb25zdGFudCA9IGNvbnN0YW50O1xuICAgIGxvZGFzaC5jb3VudEJ5ID0gY291bnRCeTtcbiAgICBsb2Rhc2guY3JlYXRlID0gY3JlYXRlO1xuICAgIGxvZGFzaC5jdXJyeSA9IGN1cnJ5O1xuICAgIGxvZGFzaC5jdXJyeVJpZ2h0ID0gY3VycnlSaWdodDtcbiAgICBsb2Rhc2guZGVib3VuY2UgPSBkZWJvdW5jZTtcbiAgICBsb2Rhc2guZGVmYXVsdHMgPSBkZWZhdWx0cztcbiAgICBsb2Rhc2guZGVmYXVsdHNEZWVwID0gZGVmYXVsdHNEZWVwO1xuICAgIGxvZGFzaC5kZWZlciA9IGRlZmVyO1xuICAgIGxvZGFzaC5kZWxheSA9IGRlbGF5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlID0gZGlmZmVyZW5jZTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZUJ5ID0gZGlmZmVyZW5jZUJ5O1xuICAgIGxvZGFzaC5kaWZmZXJlbmNlV2l0aCA9IGRpZmZlcmVuY2VXaXRoO1xuICAgIGxvZGFzaC5kcm9wID0gZHJvcDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0ID0gZHJvcFJpZ2h0O1xuICAgIGxvZGFzaC5kcm9wUmlnaHRXaGlsZSA9IGRyb3BSaWdodFdoaWxlO1xuICAgIGxvZGFzaC5kcm9wV2hpbGUgPSBkcm9wV2hpbGU7XG4gICAgbG9kYXNoLmZpbGwgPSBmaWxsO1xuICAgIGxvZGFzaC5maWx0ZXIgPSBmaWx0ZXI7XG4gICAgbG9kYXNoLmZsYXRNYXAgPSBmbGF0TWFwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVlcCA9IGZsYXRNYXBEZWVwO1xuICAgIGxvZGFzaC5mbGF0TWFwRGVwdGggPSBmbGF0TWFwRGVwdGg7XG4gICAgbG9kYXNoLmZsYXR0ZW4gPSBmbGF0dGVuO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVlcCA9IGZsYXR0ZW5EZWVwO1xuICAgIGxvZGFzaC5mbGF0dGVuRGVwdGggPSBmbGF0dGVuRGVwdGg7XG4gICAgbG9kYXNoLmZsaXAgPSBmbGlwO1xuICAgIGxvZGFzaC5mbG93ID0gZmxvdztcbiAgICBsb2Rhc2guZmxvd1JpZ2h0ID0gZmxvd1JpZ2h0O1xuICAgIGxvZGFzaC5mcm9tUGFpcnMgPSBmcm9tUGFpcnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9ucyA9IGZ1bmN0aW9ucztcbiAgICBsb2Rhc2guZnVuY3Rpb25zSW4gPSBmdW5jdGlvbnNJbjtcbiAgICBsb2Rhc2guZ3JvdXBCeSA9IGdyb3VwQnk7XG4gICAgbG9kYXNoLmluaXRpYWwgPSBpbml0aWFsO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb247XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbkJ5ID0gaW50ZXJzZWN0aW9uQnk7XG4gICAgbG9kYXNoLmludGVyc2VjdGlvbldpdGggPSBpbnRlcnNlY3Rpb25XaXRoO1xuICAgIGxvZGFzaC5pbnZlcnQgPSBpbnZlcnQ7XG4gICAgbG9kYXNoLmludmVydEJ5ID0gaW52ZXJ0Qnk7XG4gICAgbG9kYXNoLmludm9rZU1hcCA9IGludm9rZU1hcDtcbiAgICBsb2Rhc2guaXRlcmF0ZWUgPSBpdGVyYXRlZTtcbiAgICBsb2Rhc2gua2V5QnkgPSBrZXlCeTtcbiAgICBsb2Rhc2gua2V5cyA9IGtleXM7XG4gICAgbG9kYXNoLmtleXNJbiA9IGtleXNJbjtcbiAgICBsb2Rhc2gubWFwID0gbWFwO1xuICAgIGxvZGFzaC5tYXBLZXlzID0gbWFwS2V5cztcbiAgICBsb2Rhc2gubWFwVmFsdWVzID0gbWFwVmFsdWVzO1xuICAgIGxvZGFzaC5tYXRjaGVzID0gbWF0Y2hlcztcbiAgICBsb2Rhc2gubWF0Y2hlc1Byb3BlcnR5ID0gbWF0Y2hlc1Byb3BlcnR5O1xuICAgIGxvZGFzaC5tZW1vaXplID0gbWVtb2l6ZTtcbiAgICBsb2Rhc2gubWVyZ2UgPSBtZXJnZTtcbiAgICBsb2Rhc2gubWVyZ2VXaXRoID0gbWVyZ2VXaXRoO1xuICAgIGxvZGFzaC5tZXRob2QgPSBtZXRob2Q7XG4gICAgbG9kYXNoLm1ldGhvZE9mID0gbWV0aG9kT2Y7XG4gICAgbG9kYXNoLm1peGluID0gbWl4aW47XG4gICAgbG9kYXNoLm5lZ2F0ZSA9IG5lZ2F0ZTtcbiAgICBsb2Rhc2gubnRoQXJnID0gbnRoQXJnO1xuICAgIGxvZGFzaC5vbWl0ID0gb21pdDtcbiAgICBsb2Rhc2gub21pdEJ5ID0gb21pdEJ5O1xuICAgIGxvZGFzaC5vbmNlID0gb25jZTtcbiAgICBsb2Rhc2gub3JkZXJCeSA9IG9yZGVyQnk7XG4gICAgbG9kYXNoLm92ZXIgPSBvdmVyO1xuICAgIGxvZGFzaC5vdmVyQXJncyA9IG92ZXJBcmdzO1xuICAgIGxvZGFzaC5vdmVyRXZlcnkgPSBvdmVyRXZlcnk7XG4gICAgbG9kYXNoLm92ZXJTb21lID0gb3ZlclNvbWU7XG4gICAgbG9kYXNoLnBhcnRpYWwgPSBwYXJ0aWFsO1xuICAgIGxvZGFzaC5wYXJ0aWFsUmlnaHQgPSBwYXJ0aWFsUmlnaHQ7XG4gICAgbG9kYXNoLnBhcnRpdGlvbiA9IHBhcnRpdGlvbjtcbiAgICBsb2Rhc2gucGljayA9IHBpY2s7XG4gICAgbG9kYXNoLnBpY2tCeSA9IHBpY2tCeTtcbiAgICBsb2Rhc2gucHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICBsb2Rhc2gucHJvcGVydHlPZiA9IHByb3BlcnR5T2Y7XG4gICAgbG9kYXNoLnB1bGwgPSBwdWxsO1xuICAgIGxvZGFzaC5wdWxsQWxsID0gcHVsbEFsbDtcbiAgICBsb2Rhc2gucHVsbEFsbEJ5ID0gcHVsbEFsbEJ5O1xuICAgIGxvZGFzaC5wdWxsQWxsV2l0aCA9IHB1bGxBbGxXaXRoO1xuICAgIGxvZGFzaC5wdWxsQXQgPSBwdWxsQXQ7XG4gICAgbG9kYXNoLnJhbmdlID0gcmFuZ2U7XG4gICAgbG9kYXNoLnJhbmdlUmlnaHQgPSByYW5nZVJpZ2h0O1xuICAgIGxvZGFzaC5yZWFyZyA9IHJlYXJnO1xuICAgIGxvZGFzaC5yZWplY3QgPSByZWplY3Q7XG4gICAgbG9kYXNoLnJlbW92ZSA9IHJlbW92ZTtcbiAgICBsb2Rhc2gucmVzdCA9IHJlc3Q7XG4gICAgbG9kYXNoLnJldmVyc2UgPSByZXZlcnNlO1xuICAgIGxvZGFzaC5zYW1wbGVTaXplID0gc2FtcGxlU2l6ZTtcbiAgICBsb2Rhc2guc2V0ID0gc2V0O1xuICAgIGxvZGFzaC5zZXRXaXRoID0gc2V0V2l0aDtcbiAgICBsb2Rhc2guc2h1ZmZsZSA9IHNodWZmbGU7XG4gICAgbG9kYXNoLnNsaWNlID0gc2xpY2U7XG4gICAgbG9kYXNoLnNvcnRCeSA9IHNvcnRCeTtcbiAgICBsb2Rhc2guc29ydGVkVW5pcSA9IHNvcnRlZFVuaXE7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXFCeSA9IHNvcnRlZFVuaXFCeTtcbiAgICBsb2Rhc2guc3BsaXQgPSBzcGxpdDtcbiAgICBsb2Rhc2guc3ByZWFkID0gc3ByZWFkO1xuICAgIGxvZGFzaC50YWlsID0gdGFpbDtcbiAgICBsb2Rhc2gudGFrZSA9IHRha2U7XG4gICAgbG9kYXNoLnRha2VSaWdodCA9IHRha2VSaWdodDtcbiAgICBsb2Rhc2gudGFrZVJpZ2h0V2hpbGUgPSB0YWtlUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2gudGFrZVdoaWxlID0gdGFrZVdoaWxlO1xuICAgIGxvZGFzaC50YXAgPSB0YXA7XG4gICAgbG9kYXNoLnRocm90dGxlID0gdGhyb3R0bGU7XG4gICAgbG9kYXNoLnRocnUgPSB0aHJ1O1xuICAgIGxvZGFzaC50b0FycmF5ID0gdG9BcnJheTtcbiAgICBsb2Rhc2gudG9QYWlycyA9IHRvUGFpcnM7XG4gICAgbG9kYXNoLnRvUGFpcnNJbiA9IHRvUGFpcnNJbjtcbiAgICBsb2Rhc2gudG9QYXRoID0gdG9QYXRoO1xuICAgIGxvZGFzaC50b1BsYWluT2JqZWN0ID0gdG9QbGFpbk9iamVjdDtcbiAgICBsb2Rhc2gudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIGxvZGFzaC51bmFyeSA9IHVuYXJ5O1xuICAgIGxvZGFzaC51bmlvbiA9IHVuaW9uO1xuICAgIGxvZGFzaC51bmlvbkJ5ID0gdW5pb25CeTtcbiAgICBsb2Rhc2gudW5pb25XaXRoID0gdW5pb25XaXRoO1xuICAgIGxvZGFzaC51bmlxID0gdW5pcTtcbiAgICBsb2Rhc2gudW5pcUJ5ID0gdW5pcUJ5O1xuICAgIGxvZGFzaC51bmlxV2l0aCA9IHVuaXFXaXRoO1xuICAgIGxvZGFzaC51bnNldCA9IHVuc2V0O1xuICAgIGxvZGFzaC51bnppcCA9IHVuemlwO1xuICAgIGxvZGFzaC51bnppcFdpdGggPSB1bnppcFdpdGg7XG4gICAgbG9kYXNoLnVwZGF0ZSA9IHVwZGF0ZTtcbiAgICBsb2Rhc2gudXBkYXRlV2l0aCA9IHVwZGF0ZVdpdGg7XG4gICAgbG9kYXNoLnZhbHVlcyA9IHZhbHVlcztcbiAgICBsb2Rhc2gudmFsdWVzSW4gPSB2YWx1ZXNJbjtcbiAgICBsb2Rhc2gud2l0aG91dCA9IHdpdGhvdXQ7XG4gICAgbG9kYXNoLndvcmRzID0gd29yZHM7XG4gICAgbG9kYXNoLndyYXAgPSB3cmFwO1xuICAgIGxvZGFzaC54b3IgPSB4b3I7XG4gICAgbG9kYXNoLnhvckJ5ID0geG9yQnk7XG4gICAgbG9kYXNoLnhvcldpdGggPSB4b3JXaXRoO1xuICAgIGxvZGFzaC56aXAgPSB6aXA7XG4gICAgbG9kYXNoLnppcE9iamVjdCA9IHppcE9iamVjdDtcbiAgICBsb2Rhc2guemlwT2JqZWN0RGVlcCA9IHppcE9iamVjdERlZXA7XG4gICAgbG9kYXNoLnppcFdpdGggPSB6aXBXaXRoO1xuXG4gICAgLy8gQWRkIGFsaWFzZXMuXG4gICAgbG9kYXNoLmVudHJpZXMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC5lbnRyaWVzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLmV4dGVuZCA9IGFzc2lnbkluO1xuICAgIGxvZGFzaC5leHRlbmRXaXRoID0gYXNzaWduSW5XaXRoO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIG1peGluKGxvZGFzaCwgbG9kYXNoKTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHVud3JhcHBlZCB2YWx1ZXMgaW4gY2hhaW4gc2VxdWVuY2VzLlxuICAgIGxvZGFzaC5hZGQgPSBhZGQ7XG4gICAgbG9kYXNoLmF0dGVtcHQgPSBhdHRlbXB0O1xuICAgIGxvZGFzaC5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG4gICAgbG9kYXNoLmNhcGl0YWxpemUgPSBjYXBpdGFsaXplO1xuICAgIGxvZGFzaC5jZWlsID0gY2VpbDtcbiAgICBsb2Rhc2guY2xhbXAgPSBjbGFtcDtcbiAgICBsb2Rhc2guY2xvbmUgPSBjbG9uZTtcbiAgICBsb2Rhc2guY2xvbmVEZWVwID0gY2xvbmVEZWVwO1xuICAgIGxvZGFzaC5jbG9uZURlZXBXaXRoID0gY2xvbmVEZWVwV2l0aDtcbiAgICBsb2Rhc2guY2xvbmVXaXRoID0gY2xvbmVXaXRoO1xuICAgIGxvZGFzaC5jb25mb3Jtc1RvID0gY29uZm9ybXNUbztcbiAgICBsb2Rhc2guZGVidXJyID0gZGVidXJyO1xuICAgIGxvZGFzaC5kZWZhdWx0VG8gPSBkZWZhdWx0VG87XG4gICAgbG9kYXNoLmRpdmlkZSA9IGRpdmlkZTtcbiAgICBsb2Rhc2guZW5kc1dpdGggPSBlbmRzV2l0aDtcbiAgICBsb2Rhc2guZXEgPSBlcTtcbiAgICBsb2Rhc2guZXNjYXBlID0gZXNjYXBlO1xuICAgIGxvZGFzaC5lc2NhcGVSZWdFeHAgPSBlc2NhcGVSZWdFeHA7XG4gICAgbG9kYXNoLmV2ZXJ5ID0gZXZlcnk7XG4gICAgbG9kYXNoLmZpbmQgPSBmaW5kO1xuICAgIGxvZGFzaC5maW5kSW5kZXggPSBmaW5kSW5kZXg7XG4gICAgbG9kYXNoLmZpbmRLZXkgPSBmaW5kS2V5O1xuICAgIGxvZGFzaC5maW5kTGFzdCA9IGZpbmRMYXN0O1xuICAgIGxvZGFzaC5maW5kTGFzdEluZGV4ID0gZmluZExhc3RJbmRleDtcbiAgICBsb2Rhc2guZmluZExhc3RLZXkgPSBmaW5kTGFzdEtleTtcbiAgICBsb2Rhc2guZmxvb3IgPSBmbG9vcjtcbiAgICBsb2Rhc2guZm9yRWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmZvckVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZm9ySW4gPSBmb3JJbjtcbiAgICBsb2Rhc2guZm9ySW5SaWdodCA9IGZvckluUmlnaHQ7XG4gICAgbG9kYXNoLmZvck93biA9IGZvck93bjtcbiAgICBsb2Rhc2guZm9yT3duUmlnaHQgPSBmb3JPd25SaWdodDtcbiAgICBsb2Rhc2guZ2V0ID0gZ2V0O1xuICAgIGxvZGFzaC5ndCA9IGd0O1xuICAgIGxvZGFzaC5ndGUgPSBndGU7XG4gICAgbG9kYXNoLmhhcyA9IGhhcztcbiAgICBsb2Rhc2guaGFzSW4gPSBoYXNJbjtcbiAgICBsb2Rhc2guaGVhZCA9IGhlYWQ7XG4gICAgbG9kYXNoLmlkZW50aXR5ID0gaWRlbnRpdHk7XG4gICAgbG9kYXNoLmluY2x1ZGVzID0gaW5jbHVkZXM7XG4gICAgbG9kYXNoLmluZGV4T2YgPSBpbmRleE9mO1xuICAgIGxvZGFzaC5pblJhbmdlID0gaW5SYW5nZTtcbiAgICBsb2Rhc2guaW52b2tlID0gaW52b2tlO1xuICAgIGxvZGFzaC5pc0FyZ3VtZW50cyA9IGlzQXJndW1lbnRzO1xuICAgIGxvZGFzaC5pc0FycmF5ID0gaXNBcnJheTtcbiAgICBsb2Rhc2guaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlID0gaXNBcnJheUxpa2U7XG4gICAgbG9kYXNoLmlzQXJyYXlMaWtlT2JqZWN0ID0gaXNBcnJheUxpa2VPYmplY3Q7XG4gICAgbG9kYXNoLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjtcbiAgICBsb2Rhc2guaXNCdWZmZXIgPSBpc0J1ZmZlcjtcbiAgICBsb2Rhc2guaXNEYXRlID0gaXNEYXRlO1xuICAgIGxvZGFzaC5pc0VsZW1lbnQgPSBpc0VsZW1lbnQ7XG4gICAgbG9kYXNoLmlzRW1wdHkgPSBpc0VtcHR5O1xuICAgIGxvZGFzaC5pc0VxdWFsID0gaXNFcXVhbDtcbiAgICBsb2Rhc2guaXNFcXVhbFdpdGggPSBpc0VxdWFsV2l0aDtcbiAgICBsb2Rhc2guaXNFcnJvciA9IGlzRXJyb3I7XG4gICAgbG9kYXNoLmlzRmluaXRlID0gaXNGaW5pdGU7XG4gICAgbG9kYXNoLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuICAgIGxvZGFzaC5pc0ludGVnZXIgPSBpc0ludGVnZXI7XG4gICAgbG9kYXNoLmlzTGVuZ3RoID0gaXNMZW5ndGg7XG4gICAgbG9kYXNoLmlzTWFwID0gaXNNYXA7XG4gICAgbG9kYXNoLmlzTWF0Y2ggPSBpc01hdGNoO1xuICAgIGxvZGFzaC5pc01hdGNoV2l0aCA9IGlzTWF0Y2hXaXRoO1xuICAgIGxvZGFzaC5pc05hTiA9IGlzTmFOO1xuICAgIGxvZGFzaC5pc05hdGl2ZSA9IGlzTmF0aXZlO1xuICAgIGxvZGFzaC5pc05pbCA9IGlzTmlsO1xuICAgIGxvZGFzaC5pc051bGwgPSBpc051bGw7XG4gICAgbG9kYXNoLmlzTnVtYmVyID0gaXNOdW1iZXI7XG4gICAgbG9kYXNoLmlzT2JqZWN0ID0gaXNPYmplY3Q7XG4gICAgbG9kYXNoLmlzT2JqZWN0TGlrZSA9IGlzT2JqZWN0TGlrZTtcbiAgICBsb2Rhc2guaXNQbGFpbk9iamVjdCA9IGlzUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLmlzUmVnRXhwID0gaXNSZWdFeHA7XG4gICAgbG9kYXNoLmlzU2FmZUludGVnZXIgPSBpc1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc1NldCA9IGlzU2V0O1xuICAgIGxvZGFzaC5pc1N0cmluZyA9IGlzU3RyaW5nO1xuICAgIGxvZGFzaC5pc1N5bWJvbCA9IGlzU3ltYm9sO1xuICAgIGxvZGFzaC5pc1R5cGVkQXJyYXkgPSBpc1R5cGVkQXJyYXk7XG4gICAgbG9kYXNoLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7XG4gICAgbG9kYXNoLmlzV2Vha01hcCA9IGlzV2Vha01hcDtcbiAgICBsb2Rhc2guaXNXZWFrU2V0ID0gaXNXZWFrU2V0O1xuICAgIGxvZGFzaC5qb2luID0gam9pbjtcbiAgICBsb2Rhc2gua2ViYWJDYXNlID0ga2ViYWJDYXNlO1xuICAgIGxvZGFzaC5sYXN0ID0gbGFzdDtcbiAgICBsb2Rhc2gubGFzdEluZGV4T2YgPSBsYXN0SW5kZXhPZjtcbiAgICBsb2Rhc2gubG93ZXJDYXNlID0gbG93ZXJDYXNlO1xuICAgIGxvZGFzaC5sb3dlckZpcnN0ID0gbG93ZXJGaXJzdDtcbiAgICBsb2Rhc2gubHQgPSBsdDtcbiAgICBsb2Rhc2gubHRlID0gbHRlO1xuICAgIGxvZGFzaC5tYXggPSBtYXg7XG4gICAgbG9kYXNoLm1heEJ5ID0gbWF4Qnk7XG4gICAgbG9kYXNoLm1lYW4gPSBtZWFuO1xuICAgIGxvZGFzaC5tZWFuQnkgPSBtZWFuQnk7XG4gICAgbG9kYXNoLm1pbiA9IG1pbjtcbiAgICBsb2Rhc2gubWluQnkgPSBtaW5CeTtcbiAgICBsb2Rhc2guc3R1YkFycmF5ID0gc3R1YkFycmF5O1xuICAgIGxvZGFzaC5zdHViRmFsc2UgPSBzdHViRmFsc2U7XG4gICAgbG9kYXNoLnN0dWJPYmplY3QgPSBzdHViT2JqZWN0O1xuICAgIGxvZGFzaC5zdHViU3RyaW5nID0gc3R1YlN0cmluZztcbiAgICBsb2Rhc2guc3R1YlRydWUgPSBzdHViVHJ1ZTtcbiAgICBsb2Rhc2gubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICBsb2Rhc2gubnRoID0gbnRoO1xuICAgIGxvZGFzaC5ub0NvbmZsaWN0ID0gbm9Db25mbGljdDtcbiAgICBsb2Rhc2gubm9vcCA9IG5vb3A7XG4gICAgbG9kYXNoLm5vdyA9IG5vdztcbiAgICBsb2Rhc2gucGFkID0gcGFkO1xuICAgIGxvZGFzaC5wYWRFbmQgPSBwYWRFbmQ7XG4gICAgbG9kYXNoLnBhZFN0YXJ0ID0gcGFkU3RhcnQ7XG4gICAgbG9kYXNoLnBhcnNlSW50ID0gcGFyc2VJbnQ7XG4gICAgbG9kYXNoLnJhbmRvbSA9IHJhbmRvbTtcbiAgICBsb2Rhc2gucmVkdWNlID0gcmVkdWNlO1xuICAgIGxvZGFzaC5yZWR1Y2VSaWdodCA9IHJlZHVjZVJpZ2h0O1xuICAgIGxvZGFzaC5yZXBlYXQgPSByZXBlYXQ7XG4gICAgbG9kYXNoLnJlcGxhY2UgPSByZXBsYWNlO1xuICAgIGxvZGFzaC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgbG9kYXNoLnJvdW5kID0gcm91bmQ7XG4gICAgbG9kYXNoLnJ1bkluQ29udGV4dCA9IHJ1bkluQ29udGV4dDtcbiAgICBsb2Rhc2guc2FtcGxlID0gc2FtcGxlO1xuICAgIGxvZGFzaC5zaXplID0gc2l6ZTtcbiAgICBsb2Rhc2guc25ha2VDYXNlID0gc25ha2VDYXNlO1xuICAgIGxvZGFzaC5zb21lID0gc29tZTtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXggPSBzb3J0ZWRJbmRleDtcbiAgICBsb2Rhc2guc29ydGVkSW5kZXhCeSA9IHNvcnRlZEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4T2YgPSBzb3J0ZWRJbmRleE9mO1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXggPSBzb3J0ZWRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleEJ5ID0gc29ydGVkTGFzdEluZGV4Qnk7XG4gICAgbG9kYXNoLnNvcnRlZExhc3RJbmRleE9mID0gc29ydGVkTGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLnN0YXJ0Q2FzZSA9IHN0YXJ0Q2FzZTtcbiAgICBsb2Rhc2guc3RhcnRzV2l0aCA9IHN0YXJ0c1dpdGg7XG4gICAgbG9kYXNoLnN1YnRyYWN0ID0gc3VidHJhY3Q7XG4gICAgbG9kYXNoLnN1bSA9IHN1bTtcbiAgICBsb2Rhc2guc3VtQnkgPSBzdW1CeTtcbiAgICBsb2Rhc2gudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICBsb2Rhc2gudGltZXMgPSB0aW1lcztcbiAgICBsb2Rhc2gudG9GaW5pdGUgPSB0b0Zpbml0ZTtcbiAgICBsb2Rhc2gudG9JbnRlZ2VyID0gdG9JbnRlZ2VyO1xuICAgIGxvZGFzaC50b0xlbmd0aCA9IHRvTGVuZ3RoO1xuICAgIGxvZGFzaC50b0xvd2VyID0gdG9Mb3dlcjtcbiAgICBsb2Rhc2gudG9OdW1iZXIgPSB0b051bWJlcjtcbiAgICBsb2Rhc2gudG9TYWZlSW50ZWdlciA9IHRvU2FmZUludGVnZXI7XG4gICAgbG9kYXNoLnRvU3RyaW5nID0gdG9TdHJpbmc7XG4gICAgbG9kYXNoLnRvVXBwZXIgPSB0b1VwcGVyO1xuICAgIGxvZGFzaC50cmltID0gdHJpbTtcbiAgICBsb2Rhc2gudHJpbUVuZCA9IHRyaW1FbmQ7XG4gICAgbG9kYXNoLnRyaW1TdGFydCA9IHRyaW1TdGFydDtcbiAgICBsb2Rhc2gudHJ1bmNhdGUgPSB0cnVuY2F0ZTtcbiAgICBsb2Rhc2gudW5lc2NhcGUgPSB1bmVzY2FwZTtcbiAgICBsb2Rhc2gudW5pcXVlSWQgPSB1bmlxdWVJZDtcbiAgICBsb2Rhc2gudXBwZXJDYXNlID0gdXBwZXJDYXNlO1xuICAgIGxvZGFzaC51cHBlckZpcnN0ID0gdXBwZXJGaXJzdDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lYWNoID0gZm9yRWFjaDtcbiAgICBsb2Rhc2guZWFjaFJpZ2h0ID0gZm9yRWFjaFJpZ2h0O1xuICAgIGxvZGFzaC5maXJzdCA9IGhlYWQ7XG5cbiAgICBtaXhpbihsb2Rhc2gsIChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzb3VyY2UgPSB7fTtcbiAgICAgIGJhc2VGb3JPd24obG9kYXNoLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gucHJvdG90eXBlLCBtZXRob2ROYW1lKSkge1xuICAgICAgICAgIHNvdXJjZVttZXRob2ROYW1lXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHNvdXJjZTtcbiAgICB9KCkpLCB7ICdjaGFpbic6IGZhbHNlIH0pO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNlbWFudGljIHZlcnNpb24gbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBsb2Rhc2guVkVSU0lPTiA9IFZFUlNJT047XG5cbiAgICAvLyBBc3NpZ24gZGVmYXVsdCBwbGFjZWhvbGRlcnMuXG4gICAgYXJyYXlFYWNoKFsnYmluZCcsICdiaW5kS2V5JywgJ2N1cnJ5JywgJ2N1cnJ5UmlnaHQnLCAncGFydGlhbCcsICdwYXJ0aWFsUmlnaHQnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xuICAgICAgbG9kYXNoW21ldGhvZE5hbWVdLnBsYWNlaG9sZGVyID0gbG9kYXNoO1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uZHJvcGAgYW5kIGBfLnRha2VgIHZhcmlhbnRzLlxuICAgIGFycmF5RWFjaChbJ2Ryb3AnLCAndGFrZSddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24obikge1xuICAgICAgICBuID0gbiA9PT0gdW5kZWZpbmVkID8gMSA6IG5hdGl2ZU1heCh0b0ludGVnZXIobiksIDApO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSAodGhpcy5fX2ZpbHRlcmVkX18gJiYgIWluZGV4KVxuICAgICAgICAgID8gbmV3IExhenlXcmFwcGVyKHRoaXMpXG4gICAgICAgICAgOiB0aGlzLmNsb25lKCk7XG5cbiAgICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18pIHtcbiAgICAgICAgICByZXN1bHQuX190YWtlQ291bnRfXyA9IG5hdGl2ZU1pbihuLCByZXN1bHQuX190YWtlQ291bnRfXyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdmlld3NfXy5wdXNoKHtcbiAgICAgICAgICAgICdzaXplJzogbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpLFxuICAgICAgICAgICAgJ3R5cGUnOiBtZXRob2ROYW1lICsgKHJlc3VsdC5fX2Rpcl9fIDwgMCA/ICdSaWdodCcgOiAnJylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWUgKyAnUmlnaHQnXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpW21ldGhvZE5hbWVdKG4pLnJldmVyc2UoKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIHRoYXQgYWNjZXB0IGFuIGBpdGVyYXRlZWAgdmFsdWUuXG4gICAgYXJyYXlFYWNoKFsnZmlsdGVyJywgJ21hcCcsICd0YWtlV2hpbGUnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciB0eXBlID0gaW5kZXggKyAxLFxuICAgICAgICAgIGlzRmlsdGVyID0gdHlwZSA9PSBMQVpZX0ZJTFRFUl9GTEFHIHx8IHR5cGUgPT0gTEFaWV9XSElMRV9GTEFHO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICByZXN1bHQuX19pdGVyYXRlZXNfXy5wdXNoKHtcbiAgICAgICAgICAnaXRlcmF0ZWUnOiBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksXG4gICAgICAgICAgJ3R5cGUnOiB0eXBlXG4gICAgICAgIH0pO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gcmVzdWx0Ll9fZmlsdGVyZWRfXyB8fCBpc0ZpbHRlcjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYExhenlXcmFwcGVyYCBtZXRob2RzIGZvciBgXy5oZWFkYCBhbmQgYF8ubGFzdGAuXG4gICAgYXJyYXlFYWNoKFsnaGVhZCcsICdsYXN0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdGFrZU5hbWUgPSAndGFrZScgKyAoaW5kZXggPyAnUmlnaHQnIDogJycpO1xuXG4gICAgICBMYXp5V3JhcHBlci5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFrZU5hbWVdKDEpLnZhbHVlKClbMF07XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaW5pdGlhbGAgYW5kIGBfLnRhaWxgLlxuICAgIGFycmF5RWFjaChbJ2luaXRpYWwnLCAndGFpbCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIGRyb3BOYW1lID0gJ2Ryb3AnICsgKGluZGV4ID8gJycgOiAnUmlnaHQnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9fZmlsdGVyZWRfXyA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKSA6IHRoaXNbZHJvcE5hbWVdKDEpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWx0ZXIoaWRlbnRpdHkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKHByZWRpY2F0ZSkuaGVhZCgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuZmluZExhc3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5pbnZva2VNYXAgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICBpZiAodHlwZW9mIHBhdGggPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKHZhbHVlLCBwYXRoLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKG5lZ2F0ZShnZXRJdGVyYXRlZShwcmVkaWNhdGUpKSk7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHN0YXJ0ID0gdG9JbnRlZ2VyKHN0YXJ0KTtcblxuICAgICAgdmFyIHJlc3VsdCA9IHRoaXM7XG4gICAgICBpZiAocmVzdWx0Ll9fZmlsdGVyZWRfXyAmJiAoc3RhcnQgPiAwIHx8IGVuZCA8IDApKSB7XG4gICAgICAgIHJldHVybiBuZXcgTGF6eVdyYXBwZXIocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnRha2VSaWdodCgtc3RhcnQpO1xuICAgICAgfSBlbHNlIGlmIChzdGFydCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZHJvcChzdGFydCk7XG4gICAgICB9XG4gICAgICBpZiAoZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZW5kID0gdG9JbnRlZ2VyKGVuZCk7XG4gICAgICAgIHJlc3VsdCA9IGVuZCA8IDAgPyByZXN1bHQuZHJvcFJpZ2h0KC1lbmQpIDogcmVzdWx0LnRha2UoZW5kIC0gc3RhcnQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRha2VSaWdodFdoaWxlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkudGFrZVdoaWxlKHByZWRpY2F0ZSkucmV2ZXJzZSgpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMudGFrZShNQVhfQVJSQVlfTEVOR1RIKTtcbiAgICB9O1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBjaGVja0l0ZXJhdGVlID0gL14oPzpmaWx0ZXJ8ZmluZHxtYXB8cmVqZWN0KXxXaGlsZSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgaXNUYWtlciA9IC9eKD86aGVhZHxsYXN0KSQvLnRlc3QobWV0aG9kTmFtZSksXG4gICAgICAgICAgbG9kYXNoRnVuYyA9IGxvZGFzaFtpc1Rha2VyID8gKCd0YWtlJyArIChtZXRob2ROYW1lID09ICdsYXN0JyA/ICdSaWdodCcgOiAnJykpIDogbWV0aG9kTmFtZV0sXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gaXNUYWtlciB8fCAvXmZpbmQvLnRlc3QobWV0aG9kTmFtZSk7XG5cbiAgICAgIGlmICghbG9kYXNoRnVuYykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgICBhcmdzID0gaXNUYWtlciA/IFsxXSA6IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGlzTGF6eSA9IHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIsXG4gICAgICAgICAgICBpdGVyYXRlZSA9IGFyZ3NbMF0sXG4gICAgICAgICAgICB1c2VMYXp5ID0gaXNMYXp5IHx8IGlzQXJyYXkodmFsdWUpO1xuXG4gICAgICAgIHZhciBpbnRlcmNlcHRvciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaEZ1bmMuYXBwbHkobG9kYXNoLCBhcnJheVB1c2goW3ZhbHVlXSwgYXJncykpO1xuICAgICAgICAgIHJldHVybiAoaXNUYWtlciAmJiBjaGFpbkFsbCkgPyByZXN1bHRbMF0gOiByZXN1bHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHVzZUxhenkgJiYgY2hlY2tJdGVyYXRlZSAmJiB0eXBlb2YgaXRlcmF0ZWUgPT0gJ2Z1bmN0aW9uJyAmJiBpdGVyYXRlZS5sZW5ndGggIT0gMSkge1xuICAgICAgICAgIC8vIEF2b2lkIGxhenkgdXNlIGlmIHRoZSBpdGVyYXRlZSBoYXMgYSBcImxlbmd0aFwiIHZhbHVlIG90aGVyIHRoYW4gYDFgLlxuICAgICAgICAgIGlzTGF6eSA9IHVzZUxhenkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhaW5BbGwgPSB0aGlzLl9fY2hhaW5fXyxcbiAgICAgICAgICAgIGlzSHlicmlkID0gISF0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCxcbiAgICAgICAgICAgIGlzVW53cmFwcGVkID0gcmV0VW53cmFwcGVkICYmICFjaGFpbkFsbCxcbiAgICAgICAgICAgIG9ubHlMYXp5ID0gaXNMYXp5ICYmICFpc0h5YnJpZDtcblxuICAgICAgICBpZiAoIXJldFVud3JhcHBlZCAmJiB1c2VMYXp5KSB7XG4gICAgICAgICAgdmFsdWUgPSBvbmx5TGF6eSA/IHZhbHVlIDogbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICAgICAgICByZXN1bHQuX19hY3Rpb25zX18ucHVzaCh7ICdmdW5jJzogdGhydSwgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLCAndGhpc0FyZyc6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIocmVzdWx0LCBjaGFpbkFsbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW53cmFwcGVkICYmIG9ubHlMYXp5KSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgICAgcmV0dXJuIGlzVW53cmFwcGVkID8gKGlzVGFrZXIgPyByZXN1bHQudmFsdWUoKVswXSA6IHJlc3VsdC52YWx1ZSgpKSA6IHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBBZGQgYEFycmF5YCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBhcnJheUVhY2goWydwb3AnLCAncHVzaCcsICdzaGlmdCcsICdzb3J0JywgJ3NwbGljZScsICd1bnNoaWZ0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gYXJyYXlQcm90b1ttZXRob2ROYW1lXSxcbiAgICAgICAgICBjaGFpbk5hbWUgPSAvXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3QobWV0aG9kTmFtZSkgPyAndGFwJyA6ICd0aHJ1JyxcbiAgICAgICAgICByZXRVbndyYXBwZWQgPSAvXig/OnBvcHxzaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBsb2Rhc2gucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBpZiAocmV0VW53cmFwcGVkICYmICF0aGlzLl9fY2hhaW5fXykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWUoKTtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzW2NoYWluTmFtZV0oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseShpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW10sIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICAvLyBNYXAgbWluaWZpZWQgbWV0aG9kIG5hbWVzIHRvIHRoZWlyIHJlYWwgbmFtZXMuXG4gICAgYmFzZUZvck93bihMYXp5V3JhcHBlci5wcm90b3R5cGUsIGZ1bmN0aW9uKGZ1bmMsIG1ldGhvZE5hbWUpIHtcbiAgICAgIHZhciBsb2Rhc2hGdW5jID0gbG9kYXNoW21ldGhvZE5hbWVdO1xuICAgICAgaWYgKGxvZGFzaEZ1bmMpIHtcbiAgICAgICAgdmFyIGtleSA9IGxvZGFzaEZ1bmMubmFtZSArICcnO1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwocmVhbE5hbWVzLCBrZXkpKSB7XG4gICAgICAgICAgcmVhbE5hbWVzW2tleV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICByZWFsTmFtZXNba2V5XS5wdXNoKHsgJ25hbWUnOiBtZXRob2ROYW1lLCAnZnVuYyc6IGxvZGFzaEZ1bmMgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZWFsTmFtZXNbY3JlYXRlSHlicmlkKHVuZGVmaW5lZCwgV1JBUF9CSU5EX0tFWV9GTEFHKS5uYW1lXSA9IFt7XG4gICAgICAnbmFtZSc6ICd3cmFwcGVyJyxcbiAgICAgICdmdW5jJzogdW5kZWZpbmVkXG4gICAgfV07XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgTGF6eVdyYXBwZXJgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jbG9uZSA9IGxhenlDbG9uZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUucmV2ZXJzZSA9IGxhenlSZXZlcnNlO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS52YWx1ZSA9IGxhenlWYWx1ZTtcblxuICAgIC8vIEFkZCBjaGFpbiBzZXF1ZW5jZSBtZXRob2RzIHRvIHRoZSBgbG9kYXNoYCB3cmFwcGVyLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuYXQgPSB3cmFwcGVyQXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jaGFpbiA9IHdyYXBwZXJDaGFpbjtcbiAgICBsb2Rhc2gucHJvdG90eXBlLmNvbW1pdCA9IHdyYXBwZXJDb21taXQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5uZXh0ID0gd3JhcHBlck5leHQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5wbGFudCA9IHdyYXBwZXJQbGFudDtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnJldmVyc2UgPSB3cmFwcGVyUmV2ZXJzZTtcbiAgICBsb2Rhc2gucHJvdG90eXBlLnRvSlNPTiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWVPZiA9IGxvZGFzaC5wcm90b3R5cGUudmFsdWUgPSB3cmFwcGVyVmFsdWU7XG5cbiAgICAvLyBBZGQgbGF6eSBhbGlhc2VzLlxuICAgIGxvZGFzaC5wcm90b3R5cGUuZmlyc3QgPSBsb2Rhc2gucHJvdG90eXBlLmhlYWQ7XG5cbiAgICBpZiAoc3ltSXRlcmF0b3IpIHtcbiAgICAgIGxvZGFzaC5wcm90b3R5cGVbc3ltSXRlcmF0b3JdID0gd3JhcHBlclRvSXRlcmF0b3I7XG4gICAgfVxuICAgIHJldHVybiBsb2Rhc2g7XG4gIH0pO1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8vIEV4cG9ydCBsb2Rhc2guXG4gIHZhciBfID0gcnVuSW5Db250ZXh0KCk7XG5cbiAgLy8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3IgY29uZGl0aW9uIHBhdHRlcm5zIGxpa2U6XG4gIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuICAgIC8vIEV4cG9zZSBMb2Rhc2ggb24gdGhlIGdsb2JhbCBvYmplY3QgdG8gcHJldmVudCBlcnJvcnMgd2hlbiBMb2Rhc2ggaXNcbiAgICAvLyBsb2FkZWQgYnkgYSBzY3JpcHQgdGFnIGluIHRoZSBwcmVzZW5jZSBvZiBhbiBBTUQgbG9hZGVyLlxuICAgIC8vIFNlZSBodHRwOi8vcmVxdWlyZWpzLm9yZy9kb2NzL2Vycm9ycy5odG1sI21pc21hdGNoIGZvciBtb3JlIGRldGFpbHMuXG4gICAgLy8gVXNlIGBfLm5vQ29uZmxpY3RgIHRvIHJlbW92ZSBMb2Rhc2ggZnJvbSB0aGUgZ2xvYmFsIG9iamVjdC5cbiAgICByb290Ll8gPSBfO1xuXG4gICAgLy8gRGVmaW5lIGFzIGFuIGFub255bW91cyBtb2R1bGUgc28sIHRocm91Z2ggcGF0aCBtYXBwaW5nLCBpdCBjYW4gYmVcbiAgICAvLyByZWZlcmVuY2VkIGFzIHRoZSBcInVuZGVyc2NvcmVcIiBtb2R1bGUuXG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIF87XG4gICAgfSk7XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGBleHBvcnRzYCBhZnRlciBgZGVmaW5lYCBpbiBjYXNlIGEgYnVpbGQgb3B0aW1pemVyIGFkZHMgaXQuXG4gIGVsc2UgaWYgKGZyZWVNb2R1bGUpIHtcbiAgICAvLyBFeHBvcnQgZm9yIE5vZGUuanMuXG4gICAgKGZyZWVNb2R1bGUuZXhwb3J0cyA9IF8pLl8gPSBfO1xuICAgIC8vIEV4cG9ydCBmb3IgQ29tbW9uSlMgc3VwcG9ydC5cbiAgICBmcmVlRXhwb3J0cy5fID0gXztcbiAgfVxuICBlbHNlIHtcbiAgICAvLyBFeHBvcnQgdG8gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcbiAgfVxufS5jYWxsKHRoaXMpKTtcbiIsIi8qKlxuICogT3B0aW9ucyBmb3IgY29uZmlndXJpbmcgR2hvc3RCYW4uXG4gKi9cbmV4cG9ydCB0eXBlIEdob3N0QmFuT3B0aW9ucyA9IHtcbiAgYm9hcmRTaXplOiBudW1iZXI7XG4gIHNpemU/OiBudW1iZXI7XG4gIGR5bmFtaWNQYWRkaW5nOiBib29sZWFuO1xuICBwYWRkaW5nOiBudW1iZXI7XG4gIHpvb20/OiBib29sZWFuO1xuICBleHRlbnQ6IG51bWJlcjtcbiAgdGhlbWU6IFRoZW1lO1xuICBhbmFseXNpc1BvaW50VGhlbWU6IEFuYWx5c2lzUG9pbnRUaGVtZTtcbiAgY29vcmRpbmF0ZTogYm9vbGVhbjtcbiAgaW50ZXJhY3RpdmU6IGJvb2xlYW47XG4gIGJhY2tncm91bmQ6IGJvb2xlYW47XG4gIHNob3dBbmFseXNpczogYm9vbGVhbjtcbiAgYWRhcHRpdmVCb2FyZExpbmU6IGJvb2xlYW47XG4gIGJvYXJkRWRnZUxpbmVXaWR0aDogbnVtYmVyO1xuICBib2FyZExpbmVXaWR0aDogbnVtYmVyO1xuICBib2FyZExpbmVFeHRlbnQ6IG51bWJlcjtcbiAgdGhlbWVGbGF0Qm9hcmRDb2xvcjogc3RyaW5nO1xuICBwb3NpdGl2ZU5vZGVDb2xvcjogc3RyaW5nO1xuICBuZWdhdGl2ZU5vZGVDb2xvcjogc3RyaW5nO1xuICBuZXV0cmFsTm9kZUNvbG9yOiBzdHJpbmc7XG4gIGRlZmF1bHROb2RlQ29sb3I6IHN0cmluZztcbiAgdGhlbWVSZXNvdXJjZXM6IFRoZW1lUmVzb3VyY2VzO1xuICBtb3ZlU291bmQ6IGJvb2xlYW47XG4gIHN0YXJTaXplOiBudW1iZXI7XG4gIGFkYXB0aXZlU3RhclNpemU6IGJvb2xlYW47XG4gIGZvcmNlQW5hbHlzaXNCb2FyZFNpemU/OiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBHaG9zdEJhbk9wdGlvbnNQYXJhbXMgPSB7XG4gIGJvYXJkU2l6ZT86IG51bWJlcjtcbiAgc2l6ZT86IG51bWJlcjtcbiAgZHluYW1pY1BhZGRpbmc/OiBib29sZWFuO1xuICBwYWRkaW5nPzogbnVtYmVyO1xuICB6b29tPzogYm9vbGVhbjtcbiAgZXh0ZW50PzogbnVtYmVyO1xuICB0aGVtZT86IFRoZW1lO1xuICBhbmFseXNpc1BvaW50VGhlbWU/OiBBbmFseXNpc1BvaW50VGhlbWU7XG4gIGNvb3JkaW5hdGU/OiBib29sZWFuO1xuICBpbnRlcmFjdGl2ZT86IGJvb2xlYW47XG4gIGJhY2tncm91bmQ/OiBib29sZWFuO1xuICBzaG93QW5hbHlzaXM/OiBib29sZWFuO1xuICBhZGFwdGl2ZUJvYXJkTGluZT86IGJvb2xlYW47XG4gIGJvYXJkRWRnZUxpbmVXaWR0aD86IG51bWJlcjtcbiAgYm9hcmRMaW5lV2lkdGg/OiBudW1iZXI7XG4gIHRoZW1lRmxhdEJvYXJkQ29sb3I/OiBzdHJpbmc7XG4gIHBvc2l0aXZlTm9kZUNvbG9yPzogc3RyaW5nO1xuICBuZWdhdGl2ZU5vZGVDb2xvcj86IHN0cmluZztcbiAgbmV1dHJhbE5vZGVDb2xvcj86IHN0cmluZztcbiAgZGVmYXVsdE5vZGVDb2xvcj86IHN0cmluZztcbiAgdGhlbWVSZXNvdXJjZXM/OiBUaGVtZVJlc291cmNlcztcbiAgbW92ZVNvdW5kPzogYm9vbGVhbjtcbiAgc3RhclNpemU/OiBudW1iZXI7XG4gIGFkYXB0aXZlU3RhclNpemU/OiBib29sZWFuO1xuICBmb3JjZUFuYWx5c2lzQm9hcmRTaXplPzogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgVGhlbWVSZXNvdXJjZXMgPSB7XG4gIFtrZXkgaW4gVGhlbWVdOiB7Ym9hcmQ/OiBzdHJpbmc7IGJsYWNrczogc3RyaW5nW107IHdoaXRlczogc3RyaW5nW119O1xufTtcblxuZXhwb3J0IHR5cGUgQ29uc3VtZWRBbmFseXNpcyA9IHtcbiAgcmVzdWx0czogQW5hbHlzaXNbXTtcbiAgcGFyYW1zOiBBbmFseXNpc1BhcmFtcyB8IG51bGw7XG59O1xuXG5leHBvcnQgdHlwZSBBbmFseXNlcyA9IHtcbiAgcmVzdWx0czogQW5hbHlzaXNbXTtcbiAgcGFyYW1zOiBBbmFseXNpc1BhcmFtcyB8IG51bGw7XG59O1xuXG5leHBvcnQgdHlwZSBBbmFseXNpcyA9IHtcbiAgaWQ6IHN0cmluZztcbiAgaXNEdXJpbmdTZWFyY2g6IGJvb2xlYW47XG4gIG1vdmVJbmZvczogTW92ZUluZm9bXTtcbiAgcm9vdEluZm86IFJvb3RJbmZvO1xuICBwb2xpY3k6IG51bWJlcltdO1xuICBvd25lcnNoaXA6IG51bWJlcltdO1xuICB0dXJuTnVtYmVyOiBudW1iZXI7XG59O1xuXG5leHBvcnQgdHlwZSBBbmFseXNpc1BhcmFtcyA9IHtcbiAgaWQ6IHN0cmluZztcbiAgaW5pdGlhbFBsYXllcjogc3RyaW5nO1xuICBtb3ZlczogYW55W107XG4gIHJ1bGVzOiBzdHJpbmc7XG4gIGtvbWk6IHN0cmluZztcbiAgYm9hcmRYU2l6ZTogbnVtYmVyO1xuICBib2FyZFlTaXplOiBudW1iZXI7XG4gIGluY2x1ZGVQb2xpY3k6IGJvb2xlYW47XG4gIHByaW9yaXR5OiBudW1iZXI7XG4gIG1heFZpc2l0czogbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgTW92ZUluZm8gPSB7XG4gIGlzU3ltbWV0cnlPZjogc3RyaW5nO1xuICBsY2I6IG51bWJlcjtcbiAgbW92ZTogc3RyaW5nO1xuICBvcmRlcjogbnVtYmVyO1xuICBwcmlvcjogbnVtYmVyO1xuICBwdjogc3RyaW5nW107XG4gIHNjb3JlTGVhZDogbnVtYmVyO1xuICBzY29yZU1lYW46IG51bWJlcjtcbiAgc2NvcmVTZWxmUGxheTogbnVtYmVyO1xuICBzY29yZVN0ZGV2OiBudW1iZXI7XG4gIHV0aWxpdHk6IG51bWJlcjtcbiAgdXRpbGl0eUxjYjogbnVtYmVyO1xuICB2aXNpdHM6IG51bWJlcjtcbiAgd2lucmF0ZTogbnVtYmVyO1xuICB3ZWlnaHQ6IG51bWJlcjtcbn07XG5cbmV4cG9ydCB0eXBlIFJvb3RJbmZvID0ge1xuICAvLyBjdXJyZW50UGxheWVyIGlzIG5vdCBvZmZpY2lhbGx5IHBhcnQgb2YgdGhlIEdUUCByZXN1bHRzIGJ1dCBpdCBpcyBoZWxwZnVsIHRvIGhhdmUgaXQgaGVyZSB0byBhdm9pZCBwYXNzaW5nIGl0IHRocm91Z2ggdGhlIGFyZ3VtZW50c1xuICBjdXJyZW50UGxheWVyOiBzdHJpbmc7XG4gIHNjb3JlTGVhZDogbnVtYmVyO1xuICBzY29yZVNlbGZwbGF5OiBudW1iZXI7XG4gIHNjb3JlU3RkZXY6IG51bWJlcjtcbiAgdXRpbGl0eTogbnVtYmVyO1xuICB2aXNpdHM6IG51bWJlcjtcbiAgd2lucmF0ZTogbnVtYmVyO1xuICB3ZWlnaHQ/OiBudW1iZXI7XG4gIHJhd1N0V3JFcnJvcj86IG51bWJlcjtcbiAgcmF3U3RTY29yZUVycm9yPzogbnVtYmVyO1xuICByYXdWYXJUaW1lTGVmdD86IG51bWJlcjtcbiAgLy8gR1RQIHJlc3VsdHMgZG9uJ3QgaW5jbHVkZSB0aGUgZm9sbG93aW5nIGZpZWxkc1xuICBsY2I/OiBudW1iZXI7XG4gIHN5bUhhc2g/OiBzdHJpbmc7XG4gIHRoaXNIYXNoPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgQW5hbHlzaXNQb2ludE9wdGlvbnMgPSB7XG4gIHNob3dPcmRlcj86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgZW51bSBLaSB7XG4gIEJsYWNrID0gMSxcbiAgV2hpdGUgPSAtMSxcbiAgRW1wdHkgPSAwLFxufVxuXG5leHBvcnQgZW51bSBUaGVtZSB7XG4gIEJsYWNrQW5kV2hpdGUgPSAnYmxhY2tfYW5kX3doaXRlJyxcbiAgRmxhdCA9ICdmbGF0JyxcbiAgU3ViZHVlZCA9ICdzdWJkdWVkJyxcbiAgU2hlbGxTdG9uZSA9ICdzaGVsbF9zdG9uZScsXG4gIFNsYXRlQW5kU2hlbGwgPSAnc2xhdGVfYW5kX3NoZWxsJyxcbiAgV2FsbnV0ID0gJ3dhbG51dCcsXG4gIFBob3RvcmVhbGlzdGljID0gJ3Bob3RvcmVhbGlzdGljJyxcbn1cblxuZXhwb3J0IGVudW0gQW5hbHlzaXNQb2ludFRoZW1lIHtcbiAgRGVmYXVsdCA9ICdkZWZhdWx0JyxcbiAgUHJvYmxlbSA9ICdwcm9ibGVtJyxcbn1cblxuZXhwb3J0IGVudW0gQ2VudGVyIHtcbiAgTGVmdCA9ICdsJyxcbiAgUmlnaHQgPSAncicsXG4gIFRvcCA9ICd0JyxcbiAgQm90dG9tID0gJ2InLFxuICBUb3BSaWdodCA9ICd0cicsXG4gIFRvcExlZnQgPSAndGwnLFxuICBCb3R0b21MZWZ0ID0gJ2JsJyxcbiAgQm90dG9tUmlnaHQgPSAnYnInLFxuICBDZW50ZXIgPSAnYycsXG59XG5cbmV4cG9ydCBlbnVtIEVmZmVjdCB7XG4gIE5vbmUgPSAnJyxcbiAgQmFuID0gJ2JhbicsXG4gIERpbSA9ICdkaW0nLFxuICBIaWdobGlnaHQgPSAnaGlnaGxpZ2h0Jyxcbn1cblxuZXhwb3J0IGVudW0gTWFya3VwIHtcbiAgQ3VycmVudCA9ICdjdScsXG4gIENpcmNsZSA9ICdjaScsXG4gIENpcmNsZVNvbGlkID0gJ2NpcycsXG4gIFNxdWFyZSA9ICdzcScsXG4gIFNxdWFyZVNvbGlkID0gJ3NxcycsXG4gIFRyaWFuZ2xlID0gJ3RyaScsXG4gIENyb3NzID0gJ2NyJyxcbiAgTnVtYmVyID0gJ251bScsXG4gIExldHRlciA9ICdsZScsXG4gIFBvc2l0aXZlTm9kZSA9ICdwb3MnLFxuICBOZWdhdGl2ZU5vZGUgPSAnbmVnJyxcbiAgTmV1dHJhbE5vZGUgPSAnbmV1JyxcbiAgTm9kZSA9ICdub2RlJyxcblxuICBOb25lID0gJycsXG59XG5cbmV4cG9ydCBlbnVtIEN1cnNvciB7XG4gIE5vbmUgPSAnJyxcbiAgQmxhY2tTdG9uZSA9ICdiJyxcbiAgV2hpdGVTdG9uZSA9ICd3JyxcbiAgQ2lyY2xlID0gJ2MnLFxuICBTcXVhcmUgPSAncycsXG4gIFRyaWFuZ2xlID0gJ3RyaScsXG4gIENyb3NzID0gJ2NyJyxcbiAgQ2xlYXIgPSAnY2wnLFxuICBUZXh0ID0gJ3QnLFxufVxuXG5leHBvcnQgZW51bSBQcm9ibGVtQW5zd2VyVHlwZSB7XG4gIFJpZ2h0ID0gJzEnLFxuICBXcm9uZyA9ICcyJyxcbiAgVmFyaWFudCA9ICczJyxcbn1cblxuZXhwb3J0IGVudW0gUGF0aERldGVjdGlvblN0cmF0ZWd5IHtcbiAgUG9zdCA9ICdwb3N0JyxcbiAgUHJlID0gJ3ByZScsXG4gIEJvdGggPSAnYm90aCcsXG59XG4iLCJpbXBvcnQge2NodW5rfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHtUaGVtZX0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IHNldHRpbmdzID0ge2NkbjogJ2h0dHBzOi8vcy5zaGFvd3EuY29tJ307XG5cbmV4cG9ydCBjb25zdCBNQVhfQk9BUkRfU0laRSA9IDI5O1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfQk9BUkRfU0laRSA9IDE5O1xuZXhwb3J0IGNvbnN0IEExX0xFVFRFUlMgPSBbXG4gICdBJyxcbiAgJ0InLFxuICAnQycsXG4gICdEJyxcbiAgJ0UnLFxuICAnRicsXG4gICdHJyxcbiAgJ0gnLFxuICAnSicsXG4gICdLJyxcbiAgJ0wnLFxuICAnTScsXG4gICdOJyxcbiAgJ08nLFxuICAnUCcsXG4gICdRJyxcbiAgJ1InLFxuICAnUycsXG4gICdUJyxcbl07XG5leHBvcnQgY29uc3QgQTFfTEVUVEVSU19XSVRIX0kgPSBbXG4gICdBJyxcbiAgJ0InLFxuICAnQycsXG4gICdEJyxcbiAgJ0UnLFxuICAnRicsXG4gICdHJyxcbiAgJ0gnLFxuICAnSScsXG4gICdKJyxcbiAgJ0snLFxuICAnTCcsXG4gICdNJyxcbiAgJ04nLFxuICAnTycsXG4gICdQJyxcbiAgJ1EnLFxuICAnUicsXG4gICdTJyxcbl07XG5leHBvcnQgY29uc3QgQTFfTlVNQkVSUyA9IFtcbiAgMTksIDE4LCAxNywgMTYsIDE1LCAxNCwgMTMsIDEyLCAxMSwgMTAsIDksIDgsIDcsIDYsIDUsIDQsIDMsIDIsIDEsXG5dO1xuZXhwb3J0IGNvbnN0IFNHRl9MRVRURVJTID0gW1xuICAnYScsXG4gICdiJyxcbiAgJ2MnLFxuICAnZCcsXG4gICdlJyxcbiAgJ2YnLFxuICAnZycsXG4gICdoJyxcbiAgJ2knLFxuICAnaicsXG4gICdrJyxcbiAgJ2wnLFxuICAnbScsXG4gICduJyxcbiAgJ28nLFxuICAncCcsXG4gICdxJyxcbiAgJ3InLFxuICAncycsXG5dO1xuLy8gZXhwb3J0IGNvbnN0IEJMQU5LX0FSUkFZID0gY2h1bmsobmV3IEFycmF5KDM2MSkuZmlsbCgwKSwgMTkpO1xuZXhwb3J0IGNvbnN0IERPVF9TSVpFID0gMztcbmV4cG9ydCBjb25zdCBFWFBBTkRfSCA9IDU7XG5leHBvcnQgY29uc3QgRVhQQU5EX1YgPSA1O1xuZXhwb3J0IGNvbnN0IFJFU1BPTlNFX1RJTUUgPSAxMDA7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX09QVElPTlMgPSB7XG4gIGJvYXJkU2l6ZTogMTksXG4gIHBhZGRpbmc6IDE1LFxuICBleHRlbnQ6IDIsXG4gIGludGVyYWN0aXZlOiBmYWxzZSxcbiAgY29vcmRpbmF0ZTogdHJ1ZSxcbiAgdGhlbWU6IFRoZW1lLkZsYXQsXG4gIGJhY2tncm91bmQ6IGZhbHNlLFxuICB6b29tOiBmYWxzZSxcbiAgc2hvd0FuYWx5c2lzOiBmYWxzZSxcbn07XG5cbmV4cG9ydCBjb25zdCBUSEVNRV9SRVNPVVJDRVM6IHtcbiAgW2tleSBpbiBUaGVtZV06IHtib2FyZD86IHN0cmluZzsgYmxhY2tzOiBzdHJpbmdbXTsgd2hpdGVzOiBzdHJpbmdbXX07XG59ID0ge1xuICBbVGhlbWUuQmxhY2tBbmRXaGl0ZV06IHtcbiAgICBibGFja3M6IFtdLFxuICAgIHdoaXRlczogW10sXG4gIH0sXG4gIFtUaGVtZS5TdWJkdWVkXToge1xuICAgIGJvYXJkOiBgJHtzZXR0aW5ncy5jZG59L2Fzc2V0cy90aGVtZS9zdWJkdWVkL2JvYXJkLnBuZ2AsXG4gICAgYmxhY2tzOiBbYCR7c2V0dGluZ3MuY2RufS9hc3NldHMvdGhlbWUvc3ViZHVlZC9ibGFjay5wbmdgXSxcbiAgICB3aGl0ZXM6IFtgJHtzZXR0aW5ncy5jZG59L2Fzc2V0cy90aGVtZS9zdWJkdWVkL3doaXRlLnBuZ2BdLFxuICB9LFxuICBbVGhlbWUuU2hlbGxTdG9uZV06IHtcbiAgICBib2FyZDogYCR7c2V0dGluZ3MuY2RufS9hc3NldHMvdGhlbWUvc2hlbGwtc3RvbmUvYm9hcmQucG5nYCxcbiAgICBibGFja3M6IFtgJHtzZXR0aW5ncy5jZG59L2Fzc2V0cy90aGVtZS9zaGVsbC1zdG9uZS9ibGFjay5wbmdgXSxcbiAgICB3aGl0ZXM6IFtcbiAgICAgIGAke3NldHRpbmdzLmNkbn0vYXNzZXRzL3RoZW1lL3NoZWxsLXN0b25lL3doaXRlMC5wbmdgLFxuICAgICAgYCR7c2V0dGluZ3MuY2RufS9hc3NldHMvdGhlbWUvc2hlbGwtc3RvbmUvd2hpdGUxLnBuZ2AsXG4gICAgICBgJHtzZXR0aW5ncy5jZG59L2Fzc2V0cy90aGVtZS9zaGVsbC1zdG9uZS93aGl0ZTIucG5nYCxcbiAgICAgIGAke3NldHRpbmdzLmNkbn0vYXNzZXRzL3RoZW1lL3NoZWxsLXN0b25lL3doaXRlMy5wbmdgLFxuICAgICAgYCR7c2V0dGluZ3MuY2RufS9hc3NldHMvdGhlbWUvc2hlbGwtc3RvbmUvd2hpdGU0LnBuZ2AsXG4gICAgXSxcbiAgfSxcbiAgW1RoZW1lLlNsYXRlQW5kU2hlbGxdOiB7XG4gICAgYm9hcmQ6IGAke3NldHRpbmdzLmNkbn0vYXNzZXRzL3RoZW1lL3NsYXRlLWFuZC1zaGVsbC9ib2FyZC5wbmdgLFxuICAgIGJsYWNrczogW1xuICAgICAgYCR7c2V0dGluZ3MuY2RufS9hc3NldHMvdGhlbWUvc2xhdGUtYW5kLXNoZWxsL3NsYXRlMS5wbmdgLFxuICAgICAgYCR7c2V0dGluZ3MuY2RufS9hc3NldHMvdGhlbWUvc2xhdGUtYW5kLXNoZWxsL3NsYXRlMi5wbmdgLFxuICAgICAgYCR7c2V0dGluZ3MuY2RufS9hc3NldHMvdGhlbWUvc2xhdGUtYW5kLXNoZWxsL3NsYXRlMy5wbmdgLFxuICAgICAgYCR7c2V0dGluZ3MuY2RufS9hc3NldHMvdGhlbWUvc2xhdGUtYW5kLXNoZWxsL3NsYXRlNC5wbmdgLFxuICAgICAgYCR7c2V0dGluZ3MuY2RufS9hc3NldHMvdGhlbWUvc2xhdGUtYW5kLXNoZWxsL3NsYXRlNS5wbmdgLFxuICAgIF0sXG4gICAgd2hpdGVzOiBbXG4gICAgICBgJHtzZXR0aW5ncy5jZG59L2Fzc2V0cy90aGVtZS9zbGF0ZS1hbmQtc2hlbGwvc2hlbGwxLnBuZ2AsXG4gICAgICBgJHtzZXR0aW5ncy5jZG59L2Fzc2V0cy90aGVtZS9zbGF0ZS1hbmQtc2hlbGwvc2hlbGwyLnBuZ2AsXG4gICAgICBgJHtzZXR0aW5ncy5jZG59L2Fzc2V0cy90aGVtZS9zbGF0ZS1hbmQtc2hlbGwvc2hlbGwzLnBuZ2AsXG4gICAgICBgJHtzZXR0aW5ncy5jZG59L2Fzc2V0cy90aGVtZS9zbGF0ZS1hbmQtc2hlbGwvc2hlbGw0LnBuZ2AsXG4gICAgICBgJHtzZXR0aW5ncy5jZG59L2Fzc2V0cy90aGVtZS9zbGF0ZS1hbmQtc2hlbGwvc2hlbGw1LnBuZ2AsXG4gICAgXSxcbiAgfSxcbiAgW1RoZW1lLldhbG51dF06IHtcbiAgICBib2FyZDogYCR7c2V0dGluZ3MuY2RufS9hc3NldHMvdGhlbWUvd2FsbnV0L2JvYXJkLmpwZ2AsXG4gICAgYmxhY2tzOiBbYCR7c2V0dGluZ3MuY2RufS9hc3NldHMvdGhlbWUvd2FsbnV0L2JsYWNrLnBuZ2BdLFxuICAgIHdoaXRlczogW2Ake3NldHRpbmdzLmNkbn0vYXNzZXRzL3RoZW1lL3dhbG51dC93aGl0ZS5wbmdgXSxcbiAgfSxcbiAgW1RoZW1lLlBob3RvcmVhbGlzdGljXToge1xuICAgIGJvYXJkOiBgJHtzZXR0aW5ncy5jZG59L2Fzc2V0cy90aGVtZS9waG90b3JlYWxpc3RpYy9ib2FyZC5wbmdgLFxuICAgIGJsYWNrczogW2Ake3NldHRpbmdzLmNkbn0vYXNzZXRzL3RoZW1lL3Bob3RvcmVhbGlzdGljL2JsYWNrLnBuZ2BdLFxuICAgIHdoaXRlczogW2Ake3NldHRpbmdzLmNkbn0vYXNzZXRzL3RoZW1lL3Bob3RvcmVhbGlzdGljL3doaXRlLnBuZ2BdLFxuICB9LFxuICBbVGhlbWUuRmxhdF06IHtcbiAgICBibGFja3M6IFtdLFxuICAgIHdoaXRlczogW10sXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgTElHSFRfR1JFRU5fUkdCID0gJ3JnYmEoMTM2LCAxNzAsIDYwLCAxKSc7XG5leHBvcnQgY29uc3QgTElHSFRfWUVMTE9XX1JHQiA9ICdyZ2JhKDIwNiwgMjEwLCA4MywgMSknO1xuZXhwb3J0IGNvbnN0IFlFTExPV19SR0IgPSAncmdiYSgyNDIsIDIxNywgNjAsIDEpJztcbmV4cG9ydCBjb25zdCBMSUdIVF9SRURfUkdCID0gJ3JnYmEoMjM2LCAxNDYsIDczLCAxKSc7XG4iLCJleHBvcnQgY29uc3QgTU9WRV9QUk9QX0xJU1QgPSBbXG4gICdCJyxcbiAgLy8gS08gaXMgc3RhbmRhcmQgaW4gbW92ZSBsaXN0IGJ1dCB1c3VhbGx5IGJlIHVzZWQgZm9yIGtvbWkgaW4gZ2FtZWluZm8gcHJvcHNcbiAgLy8gJ0tPJyxcbiAgJ01OJyxcbiAgJ1cnLFxuXTtcbmV4cG9ydCBjb25zdCBTRVRVUF9QUk9QX0xJU1QgPSBbXG4gICdBQicsXG4gICdBRScsXG4gICdBVycsXG4gIC8vVE9ETzogUEwgaXMgYSB2YWx1ZSBvZiBjb2xvciB0eXBlXG4gIC8vICdQTCdcbl07XG5leHBvcnQgY29uc3QgTk9ERV9BTk5PVEFUSU9OX1BST1BfTElTVCA9IFtcbiAgJ0EnLFxuICAnQycsXG4gICdETScsXG4gICdHQicsXG4gICdHVycsXG4gICdITycsXG4gICdOJyxcbiAgJ1VDJyxcbiAgJ1YnLFxuXTtcbmV4cG9ydCBjb25zdCBNT1ZFX0FOTk9UQVRJT05fUFJPUF9MSVNUID0gW1xuICAnQk0nLFxuICAnRE8nLFxuICAnSVQnLFxuICAvLyBURSBpcyBzdGFuZGFyZCBpbiBtb3ZlIGFubm90YXRpb24gZm9yIHRlc3VqaVxuICAvLyAnVEUnLFxuXTtcbmV4cG9ydCBjb25zdCBNQVJLVVBfUFJPUF9MSVNUID0gW1xuICAnQVInLFxuICAnQ1InLFxuICAnTEInLFxuICAnTE4nLFxuICAnTUEnLFxuICAnU0wnLFxuICAnU1EnLFxuICAnVFInLFxuXTtcblxuZXhwb3J0IGNvbnN0IFJPT1RfUFJPUF9MSVNUID0gWydBUCcsICdDQScsICdGRicsICdHTScsICdTVCcsICdTWiddO1xuZXhwb3J0IGNvbnN0IEdBTUVfSU5GT19QUk9QX0xJU1QgPSBbXG4gIC8vVEUgTm9uLXN0YW5kYXJkXG4gICdURScsXG4gIC8vS08gTm9uLXN0YW5kYXJkXG4gICdLTycsXG4gICdBTicsXG4gICdCUicsXG4gICdCVCcsXG4gICdDUCcsXG4gICdEVCcsXG4gICdFVicsXG4gICdHTicsXG4gICdHQycsXG4gICdPTicsXG4gICdPVCcsXG4gICdQQicsXG4gICdQQycsXG4gICdQVycsXG4gICdSRScsXG4gICdSTycsXG4gICdSVScsXG4gICdTTycsXG4gICdUTScsXG4gICdVUycsXG4gICdXUicsXG4gICdXVCcsXG5dO1xuZXhwb3J0IGNvbnN0IFRJTUlOR19QUk9QX0xJU1QgPSBbJ0JMJywgJ09CJywgJ09XJywgJ1dMJ107XG5leHBvcnQgY29uc3QgTUlTQ0VMTEFORU9VU19QUk9QX0xJU1QgPSBbJ0ZHJywgJ1BNJywgJ1ZXJ107XG5cbmV4cG9ydCBjb25zdCBDVVNUT01fUFJPUF9MSVNUID0gWydQSScsICdQQUknLCAnTklEJywgJ1BBVCddO1xuXG5leHBvcnQgY29uc3QgTElTVF9PRl9QT0lOVFNfUFJPUCA9IFsnQUInLCAnQUUnLCAnQVcnLCAnTUEnLCAnU0wnLCAnU1EnLCAnVFInXTtcblxuY29uc3QgVE9LRU5fUkVHRVggPSBuZXcgUmVnRXhwKC8oW0EtWl0qKVxcWyhbXFxzXFxTXSo/KVxcXS8pO1xuXG5leHBvcnQgY2xhc3MgU2dmUHJvcEJhc2Uge1xuICBwdWJsaWMgdG9rZW46IHN0cmluZztcbiAgcHVibGljIHR5cGU6IHN0cmluZyA9ICctJztcbiAgcHJvdGVjdGVkIF92YWx1ZTogc3RyaW5nID0gJyc7XG4gIHByb3RlY3RlZCBfdmFsdWVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKHRva2VuOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlIGFzIHN0cmluZztcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICB0aGlzLnZhbHVlcyA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGdldCB2YWx1ZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIHNldCB2YWx1ZShuZXdWYWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICBpZiAoTElTVF9PRl9QT0lOVFNfUFJPUC5pbmNsdWRlcyh0aGlzLnRva2VuKSkge1xuICAgICAgdGhpcy5fdmFsdWVzID0gbmV3VmFsdWUuc3BsaXQoJywnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fdmFsdWVzID0gW25ld1ZhbHVlXTtcbiAgICB9XG4gIH1cblxuICBnZXQgdmFsdWVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWVzO1xuICB9XG5cbiAgc2V0IHZhbHVlcyhuZXdWYWx1ZXM6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5fdmFsdWVzID0gbmV3VmFsdWVzO1xuICAgIHRoaXMuX3ZhbHVlID0gbmV3VmFsdWVzLmpvaW4oJywnKTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBgJHt0aGlzLnRva2VufSR7dGhpcy5fdmFsdWVzLm1hcCh2ID0+IGBbJHt2fV1gKS5qb2luKCcnKX1gO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNb3ZlUHJvcCBleHRlbmRzIFNnZlByb3BCYXNlIHtcbiAgY29uc3RydWN0b3IodG9rZW46IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xuICAgIHN1cGVyKHRva2VuLCB2YWx1ZSk7XG4gICAgdGhpcy50eXBlID0gJ21vdmUnO1xuICB9XG5cbiAgc3RhdGljIGZyb20oc3RyOiBzdHJpbmcpIHtcbiAgICBjb25zdCBtYXRjaCA9IHN0ci5tYXRjaCgvKFtBLVpdKilcXFsoW1xcc1xcU10qPylcXF0vKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIGNvbnN0IHRva2VuID0gbWF0Y2hbMV07XG4gICAgICBjb25zdCB2YWwgPSBtYXRjaFsyXTtcbiAgICAgIHJldHVybiBuZXcgTW92ZVByb3AodG9rZW4sIHZhbCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgTW92ZVByb3AoJycsICcnKTtcbiAgfVxuXG4gIC8vIER1cGxpY2F0ZWQgY29kZTogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zMzhcbiAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKG5ld1ZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIGlmIChMSVNUX09GX1BPSU5UU19QUk9QLmluY2x1ZGVzKHRoaXMudG9rZW4pKSB7XG4gICAgICB0aGlzLl92YWx1ZXMgPSBuZXdWYWx1ZS5zcGxpdCgnLCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl92YWx1ZXMgPSBbbmV3VmFsdWVdO1xuICAgIH1cbiAgfVxuXG4gIGdldCB2YWx1ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZXM7XG4gIH1cblxuICBzZXQgdmFsdWVzKG5ld1ZhbHVlczogc3RyaW5nW10pIHtcbiAgICB0aGlzLl92YWx1ZXMgPSBuZXdWYWx1ZXM7XG4gICAgdGhpcy5fdmFsdWUgPSBuZXdWYWx1ZXMuam9pbignLCcpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTZXR1cFByb3AgZXh0ZW5kcyBTZ2ZQcm9wQmFzZSB7XG4gIGNvbnN0cnVjdG9yKHRva2VuOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIHN1cGVyKHRva2VuLCB2YWx1ZSk7XG4gICAgdGhpcy50eXBlID0gJ3NldHVwJztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tKHN0cjogc3RyaW5nKSB7XG4gICAgY29uc3QgdG9rZW5NYXRjaCA9IHN0ci5tYXRjaChUT0tFTl9SRUdFWCk7XG4gICAgY29uc3QgdmFsTWF0Y2hlcyA9IHN0ci5tYXRjaEFsbCgvXFxbKFtcXHNcXFNdKj8pXFxdL2cpO1xuXG4gICAgbGV0IHRva2VuID0gJyc7XG4gICAgY29uc3QgdmFscyA9IFsuLi52YWxNYXRjaGVzXS5tYXAobSA9PiBtWzFdKTtcbiAgICBpZiAodG9rZW5NYXRjaCkgdG9rZW4gPSB0b2tlbk1hdGNoWzFdO1xuICAgIHJldHVybiBuZXcgU2V0dXBQcm9wKHRva2VuLCB2YWxzKTtcbiAgfVxuXG4gIC8vIER1cGxpY2F0ZWQgY29kZTogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zMzhcbiAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKG5ld1ZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIGlmIChMSVNUX09GX1BPSU5UU19QUk9QLmluY2x1ZGVzKHRoaXMudG9rZW4pKSB7XG4gICAgICB0aGlzLl92YWx1ZXMgPSBuZXdWYWx1ZS5zcGxpdCgnLCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl92YWx1ZXMgPSBbbmV3VmFsdWVdO1xuICAgIH1cbiAgfVxuXG4gIGdldCB2YWx1ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZXM7XG4gIH1cblxuICBzZXQgdmFsdWVzKG5ld1ZhbHVlczogc3RyaW5nW10pIHtcbiAgICB0aGlzLl92YWx1ZXMgPSBuZXdWYWx1ZXM7XG4gICAgdGhpcy5fdmFsdWUgPSBuZXdWYWx1ZXMuam9pbignLCcpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBOb2RlQW5ub3RhdGlvblByb3AgZXh0ZW5kcyBTZ2ZQcm9wQmFzZSB7XG4gIGNvbnN0cnVjdG9yKHRva2VuOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0b2tlbiwgdmFsdWUpO1xuICAgIHRoaXMudHlwZSA9ICdub2RlLWFubm90YXRpb24nO1xuICB9XG4gIHN0YXRpYyBmcm9tKHN0cjogc3RyaW5nKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBzdHIubWF0Y2goLyhbQS1aXSopXFxbKFtcXHNcXFNdKj8pXFxdLyk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBjb25zdCB0b2tlbiA9IG1hdGNoWzFdO1xuICAgICAgY29uc3QgdmFsID0gbWF0Y2hbMl07XG4gICAgICByZXR1cm4gbmV3IE5vZGVBbm5vdGF0aW9uUHJvcCh0b2tlbiwgdmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBOb2RlQW5ub3RhdGlvblByb3AoJycsICcnKTtcbiAgfVxuXG4gIC8vIER1cGxpY2F0ZWQgY29kZTogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zMzhcbiAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKG5ld1ZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIGlmIChMSVNUX09GX1BPSU5UU19QUk9QLmluY2x1ZGVzKHRoaXMudG9rZW4pKSB7XG4gICAgICB0aGlzLl92YWx1ZXMgPSBuZXdWYWx1ZS5zcGxpdCgnLCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl92YWx1ZXMgPSBbbmV3VmFsdWVdO1xuICAgIH1cbiAgfVxuXG4gIGdldCB2YWx1ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZXM7XG4gIH1cblxuICBzZXQgdmFsdWVzKG5ld1ZhbHVlczogc3RyaW5nW10pIHtcbiAgICB0aGlzLl92YWx1ZXMgPSBuZXdWYWx1ZXM7XG4gICAgdGhpcy5fdmFsdWUgPSBuZXdWYWx1ZXMuam9pbignLCcpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNb3ZlQW5ub3RhdGlvblByb3AgZXh0ZW5kcyBTZ2ZQcm9wQmFzZSB7XG4gIGNvbnN0cnVjdG9yKHRva2VuOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0b2tlbiwgdmFsdWUpO1xuICAgIHRoaXMudHlwZSA9ICdtb3ZlLWFubm90YXRpb24nO1xuICB9XG4gIHN0YXRpYyBmcm9tKHN0cjogc3RyaW5nKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBzdHIubWF0Y2goLyhbQS1aXSopXFxbKFtcXHNcXFNdKj8pXFxdLyk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBjb25zdCB0b2tlbiA9IG1hdGNoWzFdO1xuICAgICAgY29uc3QgdmFsID0gbWF0Y2hbMl07XG4gICAgICByZXR1cm4gbmV3IE1vdmVBbm5vdGF0aW9uUHJvcCh0b2tlbiwgdmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBNb3ZlQW5ub3RhdGlvblByb3AoJycsICcnKTtcbiAgfVxuXG4gIC8vIER1cGxpY2F0ZWQgY29kZTogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zMzhcbiAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKG5ld1ZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIGlmIChMSVNUX09GX1BPSU5UU19QUk9QLmluY2x1ZGVzKHRoaXMudG9rZW4pKSB7XG4gICAgICB0aGlzLl92YWx1ZXMgPSBuZXdWYWx1ZS5zcGxpdCgnLCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl92YWx1ZXMgPSBbbmV3VmFsdWVdO1xuICAgIH1cbiAgfVxuXG4gIGdldCB2YWx1ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZXM7XG4gIH1cblxuICBzZXQgdmFsdWVzKG5ld1ZhbHVlczogc3RyaW5nW10pIHtcbiAgICB0aGlzLl92YWx1ZXMgPSBuZXdWYWx1ZXM7XG4gICAgdGhpcy5fdmFsdWUgPSBuZXdWYWx1ZXMuam9pbignLCcpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBbm5vdGF0aW9uUHJvcCBleHRlbmRzIFNnZlByb3BCYXNlIHt9XG5leHBvcnQgY2xhc3MgTWFya3VwUHJvcCBleHRlbmRzIFNnZlByb3BCYXNlIHtcbiAgY29uc3RydWN0b3IodG9rZW46IHN0cmluZywgdmFsdWU6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gICAgc3VwZXIodG9rZW4sIHZhbHVlKTtcbiAgICB0aGlzLnR5cGUgPSAnbWFya3VwJztcbiAgfVxuICBzdGF0aWMgZnJvbShzdHI6IHN0cmluZykge1xuICAgIGNvbnN0IHRva2VuTWF0Y2ggPSBzdHIubWF0Y2goVE9LRU5fUkVHRVgpO1xuICAgIGNvbnN0IHZhbE1hdGNoZXMgPSBzdHIubWF0Y2hBbGwoL1xcWyhbXFxzXFxTXSo/KVxcXS9nKTtcblxuICAgIGxldCB0b2tlbiA9ICcnO1xuICAgIGNvbnN0IHZhbHMgPSBbLi4udmFsTWF0Y2hlc10ubWFwKG0gPT4gbVsxXSk7XG4gICAgaWYgKHRva2VuTWF0Y2gpIHRva2VuID0gdG9rZW5NYXRjaFsxXTtcbiAgICByZXR1cm4gbmV3IE1hcmt1cFByb3AodG9rZW4sIHZhbHMpO1xuICB9XG5cbiAgLy8gRHVwbGljYXRlZCBjb2RlOiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzMzOFxuICBnZXQgdmFsdWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBzZXQgdmFsdWUobmV3VmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3ZhbHVlID0gbmV3VmFsdWU7XG4gICAgaWYgKExJU1RfT0ZfUE9JTlRTX1BST1AuaW5jbHVkZXModGhpcy50b2tlbikpIHtcbiAgICAgIHRoaXMuX3ZhbHVlcyA9IG5ld1ZhbHVlLnNwbGl0KCcsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3ZhbHVlcyA9IFtuZXdWYWx1ZV07XG4gICAgfVxuICB9XG5cbiAgZ2V0IHZhbHVlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlcztcbiAgfVxuXG4gIHNldCB2YWx1ZXMobmV3VmFsdWVzOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuX3ZhbHVlcyA9IG5ld1ZhbHVlcztcbiAgICB0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlcy5qb2luKCcsJyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJvb3RQcm9wIGV4dGVuZHMgU2dmUHJvcEJhc2Uge1xuICBjb25zdHJ1Y3Rvcih0b2tlbjogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgc3VwZXIodG9rZW4sIHZhbHVlKTtcbiAgICB0aGlzLnR5cGUgPSAncm9vdCc7XG4gIH1cbiAgc3RhdGljIGZyb20oc3RyOiBzdHJpbmcpIHtcbiAgICBjb25zdCBtYXRjaCA9IHN0ci5tYXRjaCgvKFtBLVpdKilcXFsoW1xcc1xcU10qPylcXF0vKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIGNvbnN0IHRva2VuID0gbWF0Y2hbMV07XG4gICAgICBjb25zdCB2YWwgPSBtYXRjaFsyXTtcbiAgICAgIHJldHVybiBuZXcgUm9vdFByb3AodG9rZW4sIHZhbCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUm9vdFByb3AoJycsICcnKTtcbiAgfVxuXG4gIC8vIER1cGxpY2F0ZWQgY29kZTogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zMzhcbiAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKG5ld1ZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIGlmIChMSVNUX09GX1BPSU5UU19QUk9QLmluY2x1ZGVzKHRoaXMudG9rZW4pKSB7XG4gICAgICB0aGlzLl92YWx1ZXMgPSBuZXdWYWx1ZS5zcGxpdCgnLCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl92YWx1ZXMgPSBbbmV3VmFsdWVdO1xuICAgIH1cbiAgfVxuXG4gIGdldCB2YWx1ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZXM7XG4gIH1cblxuICBzZXQgdmFsdWVzKG5ld1ZhbHVlczogc3RyaW5nW10pIHtcbiAgICB0aGlzLl92YWx1ZXMgPSBuZXdWYWx1ZXM7XG4gICAgdGhpcy5fdmFsdWUgPSBuZXdWYWx1ZXMuam9pbignLCcpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBHYW1lSW5mb1Byb3AgZXh0ZW5kcyBTZ2ZQcm9wQmFzZSB7XG4gIGNvbnN0cnVjdG9yKHRva2VuOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0b2tlbiwgdmFsdWUpO1xuICAgIHRoaXMudHlwZSA9ICdnYW1lLWluZm8nO1xuICB9XG4gIHN0YXRpYyBmcm9tKHN0cjogc3RyaW5nKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBzdHIubWF0Y2goLyhbQS1aXSopXFxbKFtcXHNcXFNdKj8pXFxdLyk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICBjb25zdCB0b2tlbiA9IG1hdGNoWzFdO1xuICAgICAgY29uc3QgdmFsID0gbWF0Y2hbMl07XG4gICAgICByZXR1cm4gbmV3IEdhbWVJbmZvUHJvcCh0b2tlbiwgdmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBHYW1lSW5mb1Byb3AoJycsICcnKTtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIHNldCB2YWx1ZShuZXdWYWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICBpZiAoTElTVF9PRl9QT0lOVFNfUFJPUC5pbmNsdWRlcyh0aGlzLnRva2VuKSkge1xuICAgICAgdGhpcy5fdmFsdWVzID0gbmV3VmFsdWUuc3BsaXQoJywnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fdmFsdWVzID0gW25ld1ZhbHVlXTtcbiAgICB9XG4gIH1cblxuICBnZXQgdmFsdWVzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWVzO1xuICB9XG5cbiAgc2V0IHZhbHVlcyhuZXdWYWx1ZXM6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5fdmFsdWVzID0gbmV3VmFsdWVzO1xuICAgIHRoaXMuX3ZhbHVlID0gbmV3VmFsdWVzLmpvaW4oJywnKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ3VzdG9tUHJvcCBleHRlbmRzIFNnZlByb3BCYXNlIHtcbiAgY29uc3RydWN0b3IodG9rZW46IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xuICAgIHN1cGVyKHRva2VuLCB2YWx1ZSk7XG4gICAgdGhpcy50eXBlID0gJ2N1c3RvbSc7XG4gIH1cbiAgc3RhdGljIGZyb20oc3RyOiBzdHJpbmcpIHtcbiAgICBjb25zdCBtYXRjaCA9IHN0ci5tYXRjaCgvKFtBLVpdKilcXFsoW1xcc1xcU10qPylcXF0vKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIGNvbnN0IHRva2VuID0gbWF0Y2hbMV07XG4gICAgICBjb25zdCB2YWwgPSBtYXRjaFsyXTtcbiAgICAgIHJldHVybiBuZXcgQ3VzdG9tUHJvcCh0b2tlbiwgdmFsKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDdXN0b21Qcm9wKCcnLCAnJyk7XG4gIH1cblxuICBnZXQgdmFsdWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICBzZXQgdmFsdWUobmV3VmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3ZhbHVlID0gbmV3VmFsdWU7XG4gICAgaWYgKExJU1RfT0ZfUE9JTlRTX1BST1AuaW5jbHVkZXModGhpcy50b2tlbikpIHtcbiAgICAgIHRoaXMuX3ZhbHVlcyA9IG5ld1ZhbHVlLnNwbGl0KCcsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3ZhbHVlcyA9IFtuZXdWYWx1ZV07XG4gICAgfVxuICB9XG5cbiAgZ2V0IHZhbHVlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlcztcbiAgfVxuXG4gIHNldCB2YWx1ZXMobmV3VmFsdWVzOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuX3ZhbHVlcyA9IG5ld1ZhbHVlcztcbiAgICB0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlcy5qb2luKCcsJyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRpbWluZ1Byb3AgZXh0ZW5kcyBTZ2ZQcm9wQmFzZSB7XG4gIGNvbnN0cnVjdG9yKHRva2VuOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICBzdXBlcih0b2tlbiwgdmFsdWUpO1xuICAgIHRoaXMudHlwZSA9ICdUaW1pbmcnO1xuICB9XG5cbiAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKG5ld1ZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIGlmIChMSVNUX09GX1BPSU5UU19QUk9QLmluY2x1ZGVzKHRoaXMudG9rZW4pKSB7XG4gICAgICB0aGlzLl92YWx1ZXMgPSBuZXdWYWx1ZS5zcGxpdCgnLCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl92YWx1ZXMgPSBbbmV3VmFsdWVdO1xuICAgIH1cbiAgfVxuXG4gIGdldCB2YWx1ZXMoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZXM7XG4gIH1cblxuICBzZXQgdmFsdWVzKG5ld1ZhbHVlczogc3RyaW5nW10pIHtcbiAgICB0aGlzLl92YWx1ZXMgPSBuZXdWYWx1ZXM7XG4gICAgdGhpcy5fdmFsdWUgPSBuZXdWYWx1ZXMuam9pbignLCcpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNaXNjZWxsYW5lb3VzUHJvcCBleHRlbmRzIFNnZlByb3BCYXNlIHt9XG4iLCJpbXBvcnQge2Nsb25lRGVlcH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7c2dmVG9Qb3N9IGZyb20gJy4vaGVscGVyJztcblxubGV0IGxpYmVydGllcyA9IDA7XG5sZXQgcmVjdXJzaW9uUGF0aDogc3RyaW5nW10gPSBbXTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBzaXplIG9mIGEgbWF0cml4LlxuICogQHBhcmFtIG1hdCBUaGUgbWF0cml4IHRvIGNhbGN1bGF0ZSB0aGUgc2l6ZSBvZi5cbiAqIEByZXR1cm5zIEFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWJlciBvZiByb3dzIGFuZCBjb2x1bW5zIGluIHRoZSBtYXRyaXguXG4gKi9cbmNvbnN0IGNhbGNTaXplID0gKG1hdDogbnVtYmVyW11bXSkgPT4ge1xuICBjb25zdCByb3dzU2l6ZSA9IG1hdC5sZW5ndGg7XG4gIGNvbnN0IGNvbHVtbnNTaXplID0gbWF0Lmxlbmd0aCA+IDAgPyBtYXRbMF0ubGVuZ3RoIDogMDtcbiAgcmV0dXJuIFtyb3dzU2l6ZSwgY29sdW1uc1NpemVdO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBsaWJlcnR5IG9mIGEgc3RvbmUgb24gdGhlIGJvYXJkLlxuICogQHBhcmFtIG1hdCAtIFRoZSBib2FyZCBtYXRyaXguXG4gKiBAcGFyYW0geCAtIFRoZSB4LWNvb3JkaW5hdGUgb2YgdGhlIHN0b25lLlxuICogQHBhcmFtIHkgLSBUaGUgeS1jb29yZGluYXRlIG9mIHRoZSBzdG9uZS5cbiAqIEBwYXJhbSBraSAtIFRoZSB2YWx1ZSBvZiB0aGUgc3RvbmUuXG4gKi9cbmNvbnN0IGNhbGNMaWJlcnR5Q29yZSA9IChtYXQ6IG51bWJlcltdW10sIHg6IG51bWJlciwgeTogbnVtYmVyLCBraTogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IHNpemUgPSBjYWxjU2l6ZShtYXQpO1xuICBpZiAoeCA+PSAwICYmIHggPCBzaXplWzFdICYmIHkgPj0gMCAmJiB5IDwgc2l6ZVswXSkge1xuICAgIGlmIChtYXRbeF1beV0gPT09IGtpICYmICFyZWN1cnNpb25QYXRoLmluY2x1ZGVzKGAke3h9LCR7eX1gKSkge1xuICAgICAgcmVjdXJzaW9uUGF0aC5wdXNoKGAke3h9LCR7eX1gKTtcbiAgICAgIGNhbGNMaWJlcnR5Q29yZShtYXQsIHggLSAxLCB5LCBraSk7XG4gICAgICBjYWxjTGliZXJ0eUNvcmUobWF0LCB4ICsgMSwgeSwga2kpO1xuICAgICAgY2FsY0xpYmVydHlDb3JlKG1hdCwgeCwgeSAtIDEsIGtpKTtcbiAgICAgIGNhbGNMaWJlcnR5Q29yZShtYXQsIHgsIHkgKyAxLCBraSk7XG4gICAgfSBlbHNlIGlmIChtYXRbeF1beV0gPT09IDApIHtcbiAgICAgIGxpYmVydGllcyArPSAxO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgY2FsY0xpYmVydHkgPSAobWF0OiBudW1iZXJbXVtdLCB4OiBudW1iZXIsIHk6IG51bWJlciwga2k6IG51bWJlcikgPT4ge1xuICBjb25zdCBzaXplID0gY2FsY1NpemUobWF0KTtcbiAgbGliZXJ0aWVzID0gMDtcbiAgcmVjdXJzaW9uUGF0aCA9IFtdO1xuXG4gIGlmICh4IDwgMCB8fCB5IDwgMCB8fCB4ID4gc2l6ZVsxXSAtIDEgfHwgeSA+IHNpemVbMF0gLSAxKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxpYmVydHk6IDQsXG4gICAgICByZWN1cnNpb25QYXRoOiBbXSxcbiAgICB9O1xuICB9XG5cbiAgaWYgKG1hdFt4XVt5XSA9PT0gMCkge1xuICAgIHJldHVybiB7XG4gICAgICBsaWJlcnR5OiA0LFxuICAgICAgcmVjdXJzaW9uUGF0aDogW10sXG4gICAgfTtcbiAgfVxuICBjYWxjTGliZXJ0eUNvcmUobWF0LCB4LCB5LCBraSk7XG4gIHJldHVybiB7XG4gICAgbGliZXJ0eTogbGliZXJ0aWVzLFxuICAgIHJlY3Vyc2lvblBhdGgsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZXhlY0NhcHR1cmUgPSAoXG4gIG1hdDogbnVtYmVyW11bXSxcbiAgaTogbnVtYmVyLFxuICBqOiBudW1iZXIsXG4gIGtpOiBudW1iZXJcbikgPT4ge1xuICBjb25zdCBuZXdBcnJheSA9IG1hdDtcbiAgY29uc3Qge2xpYmVydHk6IGxpYmVydHlVcCwgcmVjdXJzaW9uUGF0aDogcmVjdXJzaW9uUGF0aFVwfSA9IGNhbGNMaWJlcnR5KFxuICAgIG1hdCxcbiAgICBpLFxuICAgIGogLSAxLFxuICAgIGtpXG4gICk7XG4gIGNvbnN0IHtsaWJlcnR5OiBsaWJlcnR5RG93biwgcmVjdXJzaW9uUGF0aDogcmVjdXJzaW9uUGF0aERvd259ID0gY2FsY0xpYmVydHkoXG4gICAgbWF0LFxuICAgIGksXG4gICAgaiArIDEsXG4gICAga2lcbiAgKTtcbiAgY29uc3Qge2xpYmVydHk6IGxpYmVydHlMZWZ0LCByZWN1cnNpb25QYXRoOiByZWN1cnNpb25QYXRoTGVmdH0gPSBjYWxjTGliZXJ0eShcbiAgICBtYXQsXG4gICAgaSAtIDEsXG4gICAgaixcbiAgICBraVxuICApO1xuICBjb25zdCB7bGliZXJ0eTogbGliZXJ0eVJpZ2h0LCByZWN1cnNpb25QYXRoOiByZWN1cnNpb25QYXRoUmlnaHR9ID1cbiAgICBjYWxjTGliZXJ0eShtYXQsIGkgKyAxLCBqLCBraSk7XG4gIGlmIChsaWJlcnR5VXAgPT09IDApIHtcbiAgICByZWN1cnNpb25QYXRoVXAuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGNvbnN0IGNvb3JkID0gaXRlbS5zcGxpdCgnLCcpO1xuICAgICAgbmV3QXJyYXlbcGFyc2VJbnQoY29vcmRbMF0pXVtwYXJzZUludChjb29yZFsxXSldID0gMDtcbiAgICB9KTtcbiAgfVxuICBpZiAobGliZXJ0eURvd24gPT09IDApIHtcbiAgICByZWN1cnNpb25QYXRoRG93bi5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgY29uc3QgY29vcmQgPSBpdGVtLnNwbGl0KCcsJyk7XG4gICAgICBuZXdBcnJheVtwYXJzZUludChjb29yZFswXSldW3BhcnNlSW50KGNvb3JkWzFdKV0gPSAwO1xuICAgIH0pO1xuICB9XG4gIGlmIChsaWJlcnR5TGVmdCA9PT0gMCkge1xuICAgIHJlY3Vyc2lvblBhdGhMZWZ0LmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBjb25zdCBjb29yZCA9IGl0ZW0uc3BsaXQoJywnKTtcbiAgICAgIG5ld0FycmF5W3BhcnNlSW50KGNvb3JkWzBdKV1bcGFyc2VJbnQoY29vcmRbMV0pXSA9IDA7XG4gICAgfSk7XG4gIH1cbiAgaWYgKGxpYmVydHlSaWdodCA9PT0gMCkge1xuICAgIHJlY3Vyc2lvblBhdGhSaWdodC5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgY29uc3QgY29vcmQgPSBpdGVtLnNwbGl0KCcsJyk7XG4gICAgICBuZXdBcnJheVtwYXJzZUludChjb29yZFswXSldW3BhcnNlSW50KGNvb3JkWzFdKV0gPSAwO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBuZXdBcnJheTtcbn07XG5cbmNvbnN0IGNhbkNhcHR1cmUgPSAobWF0OiBudW1iZXJbXVtdLCBpOiBudW1iZXIsIGo6IG51bWJlciwga2k6IG51bWJlcikgPT4ge1xuICBjb25zdCB7bGliZXJ0eTogbGliZXJ0eVVwLCByZWN1cnNpb25QYXRoOiByZWN1cnNpb25QYXRoVXB9ID0gY2FsY0xpYmVydHkoXG4gICAgbWF0LFxuICAgIGksXG4gICAgaiAtIDEsXG4gICAga2lcbiAgKTtcbiAgY29uc3Qge2xpYmVydHk6IGxpYmVydHlEb3duLCByZWN1cnNpb25QYXRoOiByZWN1cnNpb25QYXRoRG93bn0gPSBjYWxjTGliZXJ0eShcbiAgICBtYXQsXG4gICAgaSxcbiAgICBqICsgMSxcbiAgICBraVxuICApO1xuICBjb25zdCB7bGliZXJ0eTogbGliZXJ0eUxlZnQsIHJlY3Vyc2lvblBhdGg6IHJlY3Vyc2lvblBhdGhMZWZ0fSA9IGNhbGNMaWJlcnR5KFxuICAgIG1hdCxcbiAgICBpIC0gMSxcbiAgICBqLFxuICAgIGtpXG4gICk7XG4gIGNvbnN0IHtsaWJlcnR5OiBsaWJlcnR5UmlnaHQsIHJlY3Vyc2lvblBhdGg6IHJlY3Vyc2lvblBhdGhSaWdodH0gPVxuICAgIGNhbGNMaWJlcnR5KG1hdCwgaSArIDEsIGosIGtpKTtcbiAgaWYgKGxpYmVydHlVcCA9PT0gMCAmJiByZWN1cnNpb25QYXRoVXAubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChsaWJlcnR5RG93biA9PT0gMCAmJiByZWN1cnNpb25QYXRoRG93bi5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGxpYmVydHlMZWZ0ID09PSAwICYmIHJlY3Vyc2lvblBhdGhMZWZ0Lmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAobGliZXJ0eVJpZ2h0ID09PSAwICYmIHJlY3Vyc2lvblBhdGhSaWdodC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IGNvbnN0IGNhbk1vdmUgPSAobWF0OiBudW1iZXJbXVtdLCBpOiBudW1iZXIsIGo6IG51bWJlciwga2k6IG51bWJlcikgPT4ge1xuICBjb25zdCBuZXdBcnJheSA9IGNsb25lRGVlcChtYXQpO1xuICBpZiAoaSA8IDAgfHwgaiA8IDApIHJldHVybiBmYWxzZTtcbiAgaWYgKG1hdFtpXVtqXSAhPT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIG5ld0FycmF5W2ldW2pdID0ga2k7XG4gIGNvbnN0IHtsaWJlcnR5fSA9IGNhbGNMaWJlcnR5KG5ld0FycmF5LCBpLCBqLCBraSk7XG4gIGlmIChjYW5DYXB0dXJlKG5ld0FycmF5LCBpLCBqLCAta2kpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGNhbkNhcHR1cmUobmV3QXJyYXksIGksIGosIGtpKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAobGliZXJ0eSA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmV4cG9ydCBjb25zdCBzaG93S2kgPSAoXG4gIGFycmF5OiBudW1iZXJbXVtdLFxuICBzdGVwczogc3RyaW5nW10sXG4gIGlzQ2FwdHVyZWQgPSB0cnVlXG4pID0+IHtcbiAgbGV0IG5ld01hdCA9IGNsb25lRGVlcChhcnJheSk7XG4gIGxldCBoYXNNb3ZlZCA9IGZhbHNlO1xuICBzdGVwcy5mb3JFYWNoKHN0ciA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgeCxcbiAgICAgIHksXG4gICAgICBraSxcbiAgICB9OiB7XG4gICAgICB4OiBudW1iZXI7XG4gICAgICB5OiBudW1iZXI7XG4gICAgICBraTogbnVtYmVyO1xuICAgIH0gPSBzZ2ZUb1BvcyhzdHIpO1xuICAgIGlmIChpc0NhcHR1cmVkKSB7XG4gICAgICBpZiAoY2FuTW92ZShuZXdNYXQsIHgsIHksIGtpKSkge1xuICAgICAgICBuZXdNYXRbeF1beV0gPSBraTtcbiAgICAgICAgbmV3TWF0ID0gZXhlY0NhcHR1cmUobmV3TWF0LCB4LCB5LCAta2kpO1xuICAgICAgICBoYXNNb3ZlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld01hdFt4XVt5XSA9IGtpO1xuICAgICAgaGFzTW92ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBhcnJhbmdlbWVudDogbmV3TWF0LFxuICAgIGhhc01vdmVkLFxuICB9O1xufTtcbiIsImltcG9ydCBUcmVlTW9kZWwgZnJvbSAndHJlZS1tb2RlbCc7XG5pbXBvcnQge1Jvb3RQcm9wfSBmcm9tICcuL3Byb3BzJztcbmltcG9ydCB7U2dmTm9kZX0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IHRyZWU6IFRyZWVNb2RlbCA9IG5ldyBUcmVlTW9kZWwoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2hhcmFjdGVySW5Ob2RlKFxuICBzZ2Y6IHN0cmluZyxcbiAgbjogbnVtYmVyLFxuICBub2RlcyA9IFsnQycsICdUTScsICdHTiddXG4pIHtcbiAgY29uc3QgcmVzID0gbm9kZXMubWFwKG5vZGUgPT4ge1xuICAgIGNvbnN0IGluZGV4T2YgPSBzZ2Yuc2xpY2UoMCwgbikubGFzdEluZGV4T2Yobm9kZSk7XG4gICAgaWYgKGluZGV4T2YgPT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgICBjb25zdCBzdGFydEluZGV4ID0gaW5kZXhPZiArIG5vZGUubGVuZ3RoO1xuICAgIGNvbnN0IGVuZEluZGV4ID0gc2dmLmluZGV4T2YoJ10nLCBzdGFydEluZGV4KTtcblxuICAgIGlmIChlbmRJbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBuID49IHN0YXJ0SW5kZXggJiYgbiA8PSBlbmRJbmRleDtcbiAgfSk7XG5cbiAgcmV0dXJuIHJlcy5pbmNsdWRlcyh0cnVlKTtcbn1cbiIsImltcG9ydCB7Y29tcGFjdCwgcmVwbGFjZX0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7aXNDaGFyYWN0ZXJJbk5vZGV9IGZyb20gJy4vaGVscGVycyc7XG5cbmltcG9ydCBUcmVlTW9kZWwgZnJvbSAndHJlZS1tb2RlbCc7XG5pbXBvcnQge1xuICBNb3ZlUHJvcCxcbiAgU2V0dXBQcm9wLFxuICBSb290UHJvcCxcbiAgR2FtZUluZm9Qcm9wLFxuICBTZ2ZQcm9wQmFzZSxcbiAgTm9kZUFubm90YXRpb25Qcm9wLFxuICBNb3ZlQW5ub3RhdGlvblByb3AsXG4gIE1hcmt1cFByb3AsXG4gIEN1c3RvbVByb3AsXG4gIFJPT1RfUFJPUF9MSVNULFxuICBNT1ZFX1BST1BfTElTVCxcbiAgU0VUVVBfUFJPUF9MSVNULFxuICBNQVJLVVBfUFJPUF9MSVNULFxuICBOT0RFX0FOTk9UQVRJT05fUFJPUF9MSVNULFxuICBNT1ZFX0FOTk9UQVRJT05fUFJPUF9MSVNULFxuICBHQU1FX0lORk9fUFJPUF9MSVNULFxuICBDVVNUT01fUFJPUF9MSVNULFxufSBmcm9tICcuL3Byb3BzJztcbmltcG9ydCB0eXBlIHtTZ2ZOb2RlfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7Z2V0RGVkdXBsaWNhdGVkUHJvcHMsIGdldE5vZGVOdW1iZXJ9IGZyb20gJy4uL2hlbHBlcic7XG5pbXBvcnQge2NhbGNTSEF9IGZyb20gJy4uL2hlbHBlcic7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhbiBTR0YgKFNtYXJ0IEdhbWUgRm9ybWF0KSBmaWxlLlxuICovXG5leHBvcnQgY2xhc3MgU2dmIHtcbiAgTkVXX05PREUgPSAnOyc7XG4gIEJSQU5DSElORyA9IFsnKCcsICcpJ107XG4gIFBST1BFUlRZID0gWydbJywgJ10nXTtcbiAgTElTVF9JREVOVElUSUVTID0gW1xuICAgICdBVycsXG4gICAgJ0FCJyxcbiAgICAnQUUnLFxuICAgICdBUicsXG4gICAgJ0NSJyxcbiAgICAnREQnLFxuICAgICdMQicsXG4gICAgJ0xOJyxcbiAgICAnTUEnLFxuICAgICdTTCcsXG4gICAgJ1NRJyxcbiAgICAnVFInLFxuICAgICdWVycsXG4gICAgJ1RCJyxcbiAgICAnVFcnLFxuICBdO1xuICBOT0RFX0RFTElNSVRFUlMgPSBbdGhpcy5ORVdfTk9ERV0uY29uY2F0KHRoaXMuQlJBTkNISU5HKTtcblxuICB0cmVlOiBUcmVlTW9kZWwgPSBuZXcgVHJlZU1vZGVsKCk7XG4gIHJvb3Q6IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+IHwgbnVsbCA9IG51bGw7XG4gIG5vZGU6IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+IHwgbnVsbCA9IG51bGw7XG4gIGN1cnJlbnROb2RlOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPiB8IG51bGwgPSBudWxsO1xuICBwYXJlbnROb2RlOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPiB8IG51bGwgPSBudWxsO1xuICBub2RlUHJvcHM6IE1hcDxzdHJpbmcsIHN0cmluZz4gPSBuZXcgTWFwKCk7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIFNnZiBjbGFzcy5cbiAgICogQHBhcmFtIGNvbnRlbnQgVGhlIGNvbnRlbnQgb2YgdGhlIFNnZiwgZWl0aGVyIGFzIGEgc3RyaW5nIG9yIGFzIGEgVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4oUm9vdCBub2RlKS5cbiAgICogQHBhcmFtIHBhcnNlT3B0aW9ucyBUaGUgb3B0aW9ucyBmb3IgcGFyc2luZyB0aGUgU2dmIGNvbnRlbnQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNvbnRlbnQ/OiBzdHJpbmcgfCBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPixcbiAgICBwcml2YXRlIHBhcnNlT3B0aW9ucyA9IHtcbiAgICAgIGlnbm9yZVByb3BMaXN0OiBbXSxcbiAgICB9XG4gICkge1xuICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMucGFyc2UoY29udGVudCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHRoaXMuc2V0Um9vdChjb250ZW50KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcm9vdCBub2RlIG9mIHRoZSBTR0YgdHJlZS5cbiAgICpcbiAgICogQHBhcmFtIHJvb3QgVGhlIHJvb3Qgbm9kZSB0byBzZXQuXG4gICAqIEByZXR1cm5zIFRoZSB1cGRhdGVkIFNHRiBpbnN0YW5jZS5cbiAgICovXG4gIHNldFJvb3Qocm9vdDogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4pIHtcbiAgICB0aGlzLnJvb3QgPSByb290O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBjdXJyZW50IFNHRiB0cmVlIHRvIGFuIFNHRiBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gICAqIEByZXR1cm5zIFRoZSBTR0Ygc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0cmVlLlxuICAgKi9cbiAgdG9TZ2YoKSB7XG4gICAgcmV0dXJuIGAoJHt0aGlzLm5vZGVUb1N0cmluZyh0aGlzLnJvb3QpfSlgO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBnYW1lIHRyZWUgdG8gU0dGIGZvcm1hdCB3aXRob3V0IGluY2x1ZGluZyBhbmFseXNpcyBkYXRhLlxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUgU0dGIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnYW1lIHRyZWUuXG4gICAqL1xuICB0b1NnZldpdGhvdXRBbmFseXNpcygpIHtcbiAgICBjb25zdCBzZ2YgPSBgKCR7dGhpcy5ub2RlVG9TdHJpbmcodGhpcy5yb290KX0pYDtcbiAgICByZXR1cm4gcmVwbGFjZShzZ2YsIC9dKEFcXFsuKj9cXF0pL2csICddJyk7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2VzIHRoZSBnaXZlbiBTR0YgKFNtYXJ0IEdhbWUgRm9ybWF0KSBzdHJpbmcuXG4gICAqXG4gICAqIEBwYXJhbSBzZ2YgLSBUaGUgU0dGIHN0cmluZyB0byBwYXJzZS5cbiAgICovXG4gIHBhcnNlKHNnZjogc3RyaW5nKSB7XG4gICAgaWYgKCFzZ2YpIHJldHVybjtcbiAgICBzZ2YgPSBzZ2YucmVwbGFjZSgvXFxzKyg/IVteXFxbXFxdXSpdKS9nbSwgJycpO1xuICAgIGxldCBub2RlU3RhcnQgPSAwO1xuICAgIGxldCBjb3VudGVyID0gMDtcbiAgICBjb25zdCBzdGFjazogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT5bXSA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZ2YubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGMgPSBzZ2ZbaV07XG4gICAgICBpZiAodGhpcy5OT0RFX0RFTElNSVRFUlMuaW5jbHVkZXMoYykgJiYgIWlzQ2hhcmFjdGVySW5Ob2RlKHNnZiwgaSkpIHtcbiAgICAgICAgY29uc3QgY29udGVudCA9IHNnZi5zbGljZShub2RlU3RhcnQsIGkpO1xuICAgICAgICBpZiAoY29udGVudCAhPT0gJycpIHtcbiAgICAgICAgICBjb25zdCBtb3ZlUHJvcHM6IE1vdmVQcm9wW10gPSBbXTtcbiAgICAgICAgICBjb25zdCBzZXR1cFByb3BzOiBTZXR1cFByb3BbXSA9IFtdO1xuICAgICAgICAgIGNvbnN0IHJvb3RQcm9wczogUm9vdFByb3BbXSA9IFtdO1xuICAgICAgICAgIGNvbnN0IG1hcmt1cFByb3BzOiBNYXJrdXBQcm9wW10gPSBbXTtcbiAgICAgICAgICBjb25zdCBnYW1lSW5mb1Byb3BzOiBHYW1lSW5mb1Byb3BbXSA9IFtdO1xuICAgICAgICAgIGNvbnN0IG5vZGVBbm5vdGF0aW9uUHJvcHM6IE5vZGVBbm5vdGF0aW9uUHJvcFtdID0gW107XG4gICAgICAgICAgY29uc3QgbW92ZUFubm90YXRpb25Qcm9wczogTW92ZUFubm90YXRpb25Qcm9wW10gPSBbXTtcbiAgICAgICAgICBjb25zdCBjdXN0b21Qcm9wczogQ3VzdG9tUHJvcFtdID0gW107XG5cbiAgICAgICAgICBjb25zdCBtYXRjaGVzID0gW1xuICAgICAgICAgICAgLi4uY29udGVudC5tYXRjaEFsbChcbiAgICAgICAgICAgICAgLy8gUmVnRXhwKC8oW0EtWl0rXFxbW2EtelxcW1xcXV0qXFxdKykvLCAnZycpXG4gICAgICAgICAgICAgIC8vIFJlZ0V4cCgvKFtBLVpdK1xcWy4qP1xcXSspLywgJ2cnKVxuICAgICAgICAgICAgICAvLyBSZWdFeHAoL1tBLVpdKyhcXFsuKj9cXF0pezEsfS8sICdnJylcbiAgICAgICAgICAgICAgLy8gUmVnRXhwKC9bQS1aXSsoXFxbW1xcc1xcU10qP1xcXSl7MSx9LywgJ2cnKSxcbiAgICAgICAgICAgICAgUmVnRXhwKC9cXHcrKFxcW1teXFxdXSo/XFxdKD86XFxyP1xcbj9cXHNbXlxcXV0qPykqKXsxLH0vLCAnZycpXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF07XG5cbiAgICAgICAgICBtYXRjaGVzLmZvckVhY2gobSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0b2tlbk1hdGNoID0gbVswXS5tYXRjaCgvKFtBLVpdKylcXFsvKTtcbiAgICAgICAgICAgIGlmICh0b2tlbk1hdGNoKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHRva2VuID0gdG9rZW5NYXRjaFsxXTtcbiAgICAgICAgICAgICAgaWYgKE1PVkVfUFJPUF9MSVNULmluY2x1ZGVzKHRva2VuKSkge1xuICAgICAgICAgICAgICAgIG1vdmVQcm9wcy5wdXNoKE1vdmVQcm9wLmZyb20obVswXSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChTRVRVUF9QUk9QX0xJU1QuaW5jbHVkZXModG9rZW4pKSB7XG4gICAgICAgICAgICAgICAgc2V0dXBQcm9wcy5wdXNoKFNldHVwUHJvcC5mcm9tKG1bMF0pKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoUk9PVF9QUk9QX0xJU1QuaW5jbHVkZXModG9rZW4pKSB7XG4gICAgICAgICAgICAgICAgcm9vdFByb3BzLnB1c2goUm9vdFByb3AuZnJvbShtWzBdKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKE1BUktVUF9QUk9QX0xJU1QuaW5jbHVkZXModG9rZW4pKSB7XG4gICAgICAgICAgICAgICAgbWFya3VwUHJvcHMucHVzaChNYXJrdXBQcm9wLmZyb20obVswXSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChHQU1FX0lORk9fUFJPUF9MSVNULmluY2x1ZGVzKHRva2VuKSkge1xuICAgICAgICAgICAgICAgIGdhbWVJbmZvUHJvcHMucHVzaChHYW1lSW5mb1Byb3AuZnJvbShtWzBdKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKE5PREVfQU5OT1RBVElPTl9QUk9QX0xJU1QuaW5jbHVkZXModG9rZW4pKSB7XG4gICAgICAgICAgICAgICAgbm9kZUFubm90YXRpb25Qcm9wcy5wdXNoKE5vZGVBbm5vdGF0aW9uUHJvcC5mcm9tKG1bMF0pKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoTU9WRV9BTk5PVEFUSU9OX1BST1BfTElTVC5pbmNsdWRlcyh0b2tlbikpIHtcbiAgICAgICAgICAgICAgICBtb3ZlQW5ub3RhdGlvblByb3BzLnB1c2goTW92ZUFubm90YXRpb25Qcm9wLmZyb20obVswXSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChDVVNUT01fUFJPUF9MSVNULmluY2x1ZGVzKHRva2VuKSkge1xuICAgICAgICAgICAgICAgIGN1c3RvbVByb3BzLnB1c2goQ3VzdG9tUHJvcC5mcm9tKG1bMF0pKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKG1hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3Qgc2hhID0gY2FsY1NIQSh0aGlzLmN1cnJlbnROb2RlLCBtb3ZlUHJvcHMpO1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMudHJlZS5wYXJzZTxTZ2ZOb2RlPih7XG4gICAgICAgICAgICAgIGlkOiBzaGEsXG4gICAgICAgICAgICAgIG5hbWU6IHNoYSxcbiAgICAgICAgICAgICAgaW5kZXg6IGNvdW50ZXIsXG4gICAgICAgICAgICAgIG51bWJlcjogMCxcbiAgICAgICAgICAgICAgbW92ZVByb3BzLFxuICAgICAgICAgICAgICBzZXR1cFByb3BzLFxuICAgICAgICAgICAgICByb290UHJvcHMsXG4gICAgICAgICAgICAgIG1hcmt1cFByb3BzLFxuICAgICAgICAgICAgICBnYW1lSW5mb1Byb3BzLFxuICAgICAgICAgICAgICBub2RlQW5ub3RhdGlvblByb3BzLFxuICAgICAgICAgICAgICBtb3ZlQW5ub3RhdGlvblByb3BzLFxuICAgICAgICAgICAgICBjdXN0b21Qcm9wcyxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50Tm9kZSkge1xuICAgICAgICAgICAgICB0aGlzLmN1cnJlbnROb2RlLmFkZENoaWxkKG5vZGUpO1xuXG4gICAgICAgICAgICAgIG5vZGUubW9kZWwubnVtYmVyID0gZ2V0Tm9kZU51bWJlcihub2RlKTtcbiAgICAgICAgICAgICAgLy8gVE9ETzogbWF5YmUgdW5uZWNlc3Nhcnk/XG4gICAgICAgICAgICAgIG5vZGUubW9kZWwuY2hpbGRyZW4gPSBbbm9kZV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLnJvb3QgPSBub2RlO1xuICAgICAgICAgICAgICB0aGlzLnBhcmVudE5vZGUgPSBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Tm9kZSA9IG5vZGU7XG4gICAgICAgICAgICBjb3VudGVyICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYyA9PT0gJygnICYmIHRoaXMuY3VycmVudE5vZGUgJiYgIWlzQ2hhcmFjdGVySW5Ob2RlKHNnZiwgaSkpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coYCR7c2dmW2ldfSR7c2dmW2kgKyAxXX0ke3NnZltpICsgMl19YCk7XG4gICAgICAgIHN0YWNrLnB1c2godGhpcy5jdXJyZW50Tm9kZSk7XG4gICAgICB9XG4gICAgICBpZiAoYyA9PT0gJyknICYmICFpc0NoYXJhY3RlckluTm9kZShzZ2YsIGkpICYmIHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICBpZiAobm9kZSkge1xuICAgICAgICAgIHRoaXMuY3VycmVudE5vZGUgPSBub2RlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLk5PREVfREVMSU1JVEVSUy5pbmNsdWRlcyhjKSAmJiAhaXNDaGFyYWN0ZXJJbk5vZGUoc2dmLCBpKSkge1xuICAgICAgICBub2RlU3RhcnQgPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIG5vZGUgdG8gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSBub2RlIC0gVGhlIG5vZGUgdG8gY29udmVydC5cbiAgICogQHJldHVybnMgVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbm9kZS5cbiAgICovXG4gIHByaXZhdGUgbm9kZVRvU3RyaW5nKG5vZGU6IGFueSkge1xuICAgIGxldCBjb250ZW50ID0gJyc7XG4gICAgbm9kZS53YWxrKChuOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPikgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICByb290UHJvcHMsXG4gICAgICAgIG1vdmVQcm9wcyxcbiAgICAgICAgY3VzdG9tUHJvcHMsXG4gICAgICAgIHNldHVwUHJvcHMsXG4gICAgICAgIG1hcmt1cFByb3BzLFxuICAgICAgICBub2RlQW5ub3RhdGlvblByb3BzLFxuICAgICAgICBtb3ZlQW5ub3RhdGlvblByb3BzLFxuICAgICAgICBnYW1lSW5mb1Byb3BzLFxuICAgICAgfSA9IG4ubW9kZWw7XG4gICAgICBjb25zdCBub2RlcyA9IGNvbXBhY3QoW1xuICAgICAgICAuLi5yb290UHJvcHMsXG4gICAgICAgIC4uLmN1c3RvbVByb3BzLFxuICAgICAgICAuLi5tb3ZlUHJvcHMsXG4gICAgICAgIC4uLmdldERlZHVwbGljYXRlZFByb3BzKHNldHVwUHJvcHMpLFxuICAgICAgICAuLi5nZXREZWR1cGxpY2F0ZWRQcm9wcyhtYXJrdXBQcm9wcyksXG4gICAgICAgIC4uLmdhbWVJbmZvUHJvcHMsXG4gICAgICAgIC4uLm5vZGVBbm5vdGF0aW9uUHJvcHMsXG4gICAgICAgIC4uLm1vdmVBbm5vdGF0aW9uUHJvcHMsXG4gICAgICBdKTtcbiAgICAgIGNvbnRlbnQgKz0gJzsnO1xuICAgICAgbm9kZXMuZm9yRWFjaCgobjogU2dmUHJvcEJhc2UpID0+IHtcbiAgICAgICAgY29udGVudCArPSBuLnRvU3RyaW5nKCk7XG4gICAgICB9KTtcbiAgICAgIGlmIChuLmNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgbi5jaGlsZHJlbi5mb3JFYWNoKChjaGlsZDogU2dmUHJvcEJhc2UpID0+IHtcbiAgICAgICAgICBjb250ZW50ICs9IGAoJHt0aGlzLm5vZGVUb1N0cmluZyhjaGlsZCl9KWA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4uY2hpbGRyZW4ubGVuZ3RoIDwgMjtcbiAgICB9KTtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxufVxuIiwiaW1wb3J0IFRyZWVNb2RlbCBmcm9tICd0cmVlLW1vZGVsJztcbmltcG9ydCB7XG4gIGNsb25lRGVlcCxcbiAgZmxhdHRlbkRlcHRoLFxuICBjbG9uZSxcbiAgc3VtLFxuICBmaWx0ZXIsXG4gIGZpbmRMYXN0SW5kZXgsXG4gIGNvbXBhY3QsXG4gIHNhbXBsZSxcbn0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7U2dmTm9kZSwgU2dmTm9kZU9wdGlvbnN9IGZyb20gJy4vY29yZS90eXBlcyc7XG5pbXBvcnQge1xuICBBMV9MRVRURVJTLFxuICBBMV9OVU1CRVJTLFxuICBTR0ZfTEVUVEVSUyxcbiAgTUFYX0JPQVJEX1NJWkUsXG4gIExJR0hUX0dSRUVOX1JHQixcbiAgTElHSFRfWUVMTE9XX1JHQixcbiAgTElHSFRfUkVEX1JHQixcbiAgWUVMTE9XX1JHQixcbiAgREVGQVVMVF9CT0FSRF9TSVpFLFxufSBmcm9tICcuL2NvbnN0JztcbmltcG9ydCB7XG4gIFNldHVwUHJvcCxcbiAgTW92ZVByb3AsXG4gIEN1c3RvbVByb3AsXG4gIFNnZlByb3BCYXNlLFxuICBOb2RlQW5ub3RhdGlvblByb3AsXG4gIEdhbWVJbmZvUHJvcCxcbiAgTW92ZUFubm90YXRpb25Qcm9wLFxuICBSb290UHJvcCxcbiAgTWFya3VwUHJvcCxcbiAgTU9WRV9QUk9QX0xJU1QsXG4gIFNFVFVQX1BST1BfTElTVCxcbiAgTk9ERV9BTk5PVEFUSU9OX1BST1BfTElTVCxcbiAgTU9WRV9BTk5PVEFUSU9OX1BST1BfTElTVCxcbiAgTUFSS1VQX1BST1BfTElTVCxcbiAgUk9PVF9QUk9QX0xJU1QsXG4gIEdBTUVfSU5GT19QUk9QX0xJU1QsXG4gIFRJTUlOR19QUk9QX0xJU1QsXG4gIE1JU0NFTExBTkVPVVNfUFJPUF9MSVNULFxuICBDVVNUT01fUFJPUF9MSVNULFxufSBmcm9tICcuL2NvcmUvcHJvcHMnO1xuaW1wb3J0IHtcbiAgQW5hbHlzaXMsXG4gIEdob3N0QmFuT3B0aW9ucyxcbiAgS2ksXG4gIE1vdmVJbmZvLFxuICBQcm9ibGVtQW5zd2VyVHlwZSBhcyBQQVQsXG4gIFJvb3RJbmZvLFxuICBNYXJrdXAsXG4gIFBhdGhEZXRlY3Rpb25TdHJhdGVneSxcbn0gZnJvbSAnLi90eXBlcyc7XG5cbmltcG9ydCB7Q2VudGVyfSBmcm9tICcuL3R5cGVzJztcblxuaW1wb3J0IHtjYW5Nb3ZlLCBleGVjQ2FwdHVyZX0gZnJvbSAnLi9ib2FyZGNvcmUnO1xuZXhwb3J0IHtjYW5Nb3ZlLCBleGVjQ2FwdHVyZX07XG4vLyBleHBvcnQgKiBmcm9tICcuL2JvYXJkY29yZSc7XG5cbi8vIGVzNiBpbXBvcnQgc3R5bGUgc29tZXRpbWVzIHRyaWdnZXIgZXJyb3IgJ2dnL2dob3N0YmFuL2J1aWxkL2luZGV4LmpzXCIgY29udGFpbnMgYSByZWZlcmVuY2UgdG8gdGhlIGZpbGUgXCJjcnlwdG8nXG4vLyB1c2UgcmVxdWlyZSBpbnN0ZWFkXG4vLyBpbXBvcnQgc2hhMjU2IGZyb20gJ2NyeXB0by1qcy9zaGEyNTYnO1xuY29uc3Qgc2hhMjU2ID0gcmVxdWlyZSgnY3J5cHRvLWpzL3NoYTI1NicpO1xuaW1wb3J0IHtTZ2Z9IGZyb20gJy4vY29yZS9zZ2YnO1xuXG50eXBlIFN0cmF0ZWd5ID0gJ3Bvc3QnIHwgJ3ByZScgfCAnYm90aCc7XG5cbmV4cG9ydCBjb25zdCBjYWxjRG91YnRmdWxNb3Zlc1RocmVzaG9sZFJhbmdlID0gKHRocmVzaG9sZDogbnVtYmVyKSA9PiB7XG4gIC8vIDhELTlEXG4gIGlmICh0aHJlc2hvbGQgPj0gMjUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXZpbDoge3dpbnJhdGVSYW5nZTogWy0xLCAtMC4xNV0sIHNjb3JlUmFuZ2U6IFstMTAwLCAtM119LFxuICAgICAgYmFkOiB7d2lucmF0ZVJhbmdlOiBbLTAuMTUsIC0wLjFdLCBzY29yZVJhbmdlOiBbLTMsIC0yXX0sXG4gICAgICBwb29yOiB7d2lucmF0ZVJhbmdlOiBbLTAuMSwgLTAuMDVdLCBzY29yZVJhbmdlOiBbLTIsIC0xXX0sXG4gICAgICBvazoge3dpbnJhdGVSYW5nZTogWy0wLjA1LCAtMC4wMl0sIHNjb3JlUmFuZ2U6IFstMSwgLTAuNV19LFxuICAgICAgZ29vZDoge3dpbnJhdGVSYW5nZTogWy0wLjAyLCAwXSwgc2NvcmVSYW5nZTogWzAsIDEwMF19LFxuICAgICAgZ3JlYXQ6IHt3aW5yYXRlUmFuZ2U6IFswLCAxXSwgc2NvcmVSYW5nZTogWzAsIDEwMF19LFxuICAgIH07XG4gIH1cbiAgLy8gNUQtN0RcbiAgaWYgKHRocmVzaG9sZCA+PSAyMyAmJiB0aHJlc2hvbGQgPCAyNSkge1xuICAgIHJldHVybiB7XG4gICAgICBldmlsOiB7d2lucmF0ZVJhbmdlOiBbLTEsIC0wLjJdLCBzY29yZVJhbmdlOiBbLTEwMCwgLThdfSxcbiAgICAgIGJhZDoge3dpbnJhdGVSYW5nZTogWy0wLjIsIC0wLjE1XSwgc2NvcmVSYW5nZTogWy04LCAtNF19LFxuICAgICAgcG9vcjoge3dpbnJhdGVSYW5nZTogWy0wLjE1LCAtMC4wNV0sIHNjb3JlUmFuZ2U6IFstNCwgLTJdfSxcbiAgICAgIG9rOiB7d2lucmF0ZVJhbmdlOiBbLTAuMDUsIC0wLjAyXSwgc2NvcmVSYW5nZTogWy0yLCAtMV19LFxuICAgICAgZ29vZDoge3dpbnJhdGVSYW5nZTogWy0wLjAyLCAwXSwgc2NvcmVSYW5nZTogWzAsIDEwMF19LFxuICAgICAgZ3JlYXQ6IHt3aW5yYXRlUmFuZ2U6IFswLCAxXSwgc2NvcmVSYW5nZTogWzAsIDEwMF19LFxuICAgIH07XG4gIH1cblxuICAvLyAzRC01RFxuICBpZiAodGhyZXNob2xkID49IDIwICYmIHRocmVzaG9sZCA8IDIzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV2aWw6IHt3aW5yYXRlUmFuZ2U6IFstMSwgLTAuMjVdLCBzY29yZVJhbmdlOiBbLTEwMCwgLTEyXX0sXG4gICAgICBiYWQ6IHt3aW5yYXRlUmFuZ2U6IFstMC4yNSwgLTAuMV0sIHNjb3JlUmFuZ2U6IFstMTIsIC01XX0sXG4gICAgICBwb29yOiB7d2lucmF0ZVJhbmdlOiBbLTAuMSwgLTAuMDVdLCBzY29yZVJhbmdlOiBbLTUsIC0yXX0sXG4gICAgICBvazoge3dpbnJhdGVSYW5nZTogWy0wLjA1LCAtMC4wMl0sIHNjb3JlUmFuZ2U6IFstMiwgLTFdfSxcbiAgICAgIGdvb2Q6IHt3aW5yYXRlUmFuZ2U6IFstMC4wMiwgMF0sIHNjb3JlUmFuZ2U6IFswLCAxMDBdfSxcbiAgICAgIGdyZWF0OiB7d2lucmF0ZVJhbmdlOiBbMCwgMV0sIHNjb3JlUmFuZ2U6IFswLCAxMDBdfSxcbiAgICB9O1xuICB9XG4gIC8vIDFELTNEXG4gIGlmICh0aHJlc2hvbGQgPj0gMTggJiYgdGhyZXNob2xkIDwgMjApIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXZpbDoge3dpbnJhdGVSYW5nZTogWy0xLCAtMC4zXSwgc2NvcmVSYW5nZTogWy0xMDAsIC0xNV19LFxuICAgICAgYmFkOiB7d2lucmF0ZVJhbmdlOiBbLTAuMywgLTAuMV0sIHNjb3JlUmFuZ2U6IFstMTUsIC03XX0sXG4gICAgICBwb29yOiB7d2lucmF0ZVJhbmdlOiBbLTAuMSwgLTAuMDVdLCBzY29yZVJhbmdlOiBbLTcsIC01XX0sXG4gICAgICBvazoge3dpbnJhdGVSYW5nZTogWy0wLjA1LCAtMC4wMl0sIHNjb3JlUmFuZ2U6IFstNSwgLTFdfSxcbiAgICAgIGdvb2Q6IHt3aW5yYXRlUmFuZ2U6IFstMC4wMiwgMF0sIHNjb3JlUmFuZ2U6IFswLCAxMDBdfSxcbiAgICAgIGdyZWF0OiB7d2lucmF0ZVJhbmdlOiBbMCwgMV0sIHNjb3JlUmFuZ2U6IFswLCAxMDBdfSxcbiAgICB9O1xuICB9XG4gIC8vIDVLLTFLXG4gIGlmICh0aHJlc2hvbGQgPj0gMTMgJiYgdGhyZXNob2xkIDwgMTgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXZpbDoge3dpbnJhdGVSYW5nZTogWy0xLCAtMC4zNV0sIHNjb3JlUmFuZ2U6IFstMTAwLCAtMjBdfSxcbiAgICAgIGJhZDoge3dpbnJhdGVSYW5nZTogWy0wLjM1LCAtMC4xMl0sIHNjb3JlUmFuZ2U6IFstMjAsIC0xMF19LFxuICAgICAgcG9vcjoge3dpbnJhdGVSYW5nZTogWy0wLjEyLCAtMC4wOF0sIHNjb3JlUmFuZ2U6IFstMTAsIC01XX0sXG4gICAgICBvazoge3dpbnJhdGVSYW5nZTogWy0wLjA4LCAtMC4wMl0sIHNjb3JlUmFuZ2U6IFstNSwgLTFdfSxcbiAgICAgIGdvb2Q6IHt3aW5yYXRlUmFuZ2U6IFstMC4wMiwgMF0sIHNjb3JlUmFuZ2U6IFswLCAxMDBdfSxcbiAgICAgIGdyZWF0OiB7d2lucmF0ZVJhbmdlOiBbMCwgMV0sIHNjb3JlUmFuZ2U6IFswLCAxMDBdfSxcbiAgICB9O1xuICB9XG4gIC8vIDVLLTEwS1xuICBpZiAodGhyZXNob2xkID49IDggJiYgdGhyZXNob2xkIDwgMTMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXZpbDoge3dpbnJhdGVSYW5nZTogWy0xLCAtMC40XSwgc2NvcmVSYW5nZTogWy0xMDAsIC0yNV19LFxuICAgICAgYmFkOiB7d2lucmF0ZVJhbmdlOiBbLTAuNCwgLTAuMTVdLCBzY29yZVJhbmdlOiBbLTI1LCAtMTBdfSxcbiAgICAgIHBvb3I6IHt3aW5yYXRlUmFuZ2U6IFstMC4xNSwgLTAuMV0sIHNjb3JlUmFuZ2U6IFstMTAsIC01XX0sXG4gICAgICBvazoge3dpbnJhdGVSYW5nZTogWy0wLjEsIC0wLjAyXSwgc2NvcmVSYW5nZTogWy01LCAtMV19LFxuICAgICAgZ29vZDoge3dpbnJhdGVSYW5nZTogWy0wLjAyLCAwXSwgc2NvcmVSYW5nZTogWzAsIDEwMF19LFxuICAgICAgZ3JlYXQ6IHt3aW5yYXRlUmFuZ2U6IFswLCAxXSwgc2NvcmVSYW5nZTogWzAsIDEwMF19LFxuICAgIH07XG4gIH1cbiAgLy8gMThLLTEwS1xuICBpZiAodGhyZXNob2xkID49IDAgJiYgdGhyZXNob2xkIDwgOCkge1xuICAgIHJldHVybiB7XG4gICAgICBldmlsOiB7d2lucmF0ZVJhbmdlOiBbLTEsIC0wLjQ1XSwgc2NvcmVSYW5nZTogWy0xMDAsIC0zNV19LFxuICAgICAgYmFkOiB7d2lucmF0ZVJhbmdlOiBbLTAuNDUsIC0wLjJdLCBzY29yZVJhbmdlOiBbLTM1LCAtMjBdfSxcbiAgICAgIHBvb3I6IHt3aW5yYXRlUmFuZ2U6IFstMC4yLCAtMC4xXSwgc2NvcmVSYW5nZTogWy0yMCwgLTEwXX0sXG4gICAgICBvazoge3dpbnJhdGVSYW5nZTogWy0wLjEsIC0wLjAyXSwgc2NvcmVSYW5nZTogWy0xMCwgLTFdfSxcbiAgICAgIGdvb2Q6IHt3aW5yYXRlUmFuZ2U6IFstMC4wMiwgMF0sIHNjb3JlUmFuZ2U6IFswLCAxMDBdfSxcbiAgICAgIGdyZWF0OiB7d2lucmF0ZVJhbmdlOiBbMCwgMV0sIHNjb3JlUmFuZ2U6IFswLCAxMDBdfSxcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgZXZpbDoge3dpbnJhdGVSYW5nZTogWy0xLCAtMC4zXSwgc2NvcmVSYW5nZTogWy0xMDAsIC0zMF19LFxuICAgIGJhZDoge3dpbnJhdGVSYW5nZTogWy0wLjMsIC0wLjJdLCBzY29yZVJhbmdlOiBbLTMwLCAtMjBdfSxcbiAgICBwb29yOiB7d2lucmF0ZVJhbmdlOiBbLTAuMiwgLTAuMV0sIHNjb3JlUmFuZ2U6IFstMjAsIC0xMF19LFxuICAgIG9rOiB7d2lucmF0ZVJhbmdlOiBbLTAuMSwgLTAuMDJdLCBzY29yZVJhbmdlOiBbLTEwLCAtMV19LFxuICAgIGdvb2Q6IHt3aW5yYXRlUmFuZ2U6IFstMC4wMiwgMF0sIHNjb3JlUmFuZ2U6IFswLCAxMDBdfSxcbiAgICBncmVhdDoge3dpbnJhdGVSYW5nZTogWzAsIDFdLCBzY29yZVJhbmdlOiBbMCwgMTAwXX0sXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3Qgcm91bmQyID0gKHY6IG51bWJlciwgc2NhbGUgPSAxLCBmaXhlZCA9IDIpID0+IHtcbiAgcmV0dXJuICgoTWF0aC5yb3VuZCh2ICogMTAwKSAvIDEwMCkgKiBzY2FsZSkudG9GaXhlZChmaXhlZCk7XG59O1xuXG5leHBvcnQgY29uc3Qgcm91bmQzID0gKHY6IG51bWJlciwgc2NhbGUgPSAxLCBmaXhlZCA9IDMpID0+IHtcbiAgcmV0dXJuICgoTWF0aC5yb3VuZCh2ICogMTAwMCkgLyAxMDAwKSAqIHNjYWxlKS50b0ZpeGVkKGZpeGVkKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXREZWR1cGxpY2F0ZWRQcm9wcyA9ICh0YXJnZXRQcm9wczogU2dmUHJvcEJhc2VbXSkgPT4ge1xuICByZXR1cm4gZmlsdGVyKFxuICAgIHRhcmdldFByb3BzLFxuICAgIChwcm9wOiBTZ2ZQcm9wQmFzZSwgaW5kZXg6IG51bWJlcikgPT5cbiAgICAgIGluZGV4ID09PVxuICAgICAgZmluZExhc3RJbmRleChcbiAgICAgICAgdGFyZ2V0UHJvcHMsXG4gICAgICAgIChsYXN0UHJvOiBTZ2ZQcm9wQmFzZSkgPT5cbiAgICAgICAgICBwcm9wLnRva2VuID09PSBsYXN0UHJvLnRva2VuICYmIHByb3AudmFsdWUgPT09IGxhc3RQcm8udmFsdWVcbiAgICAgIClcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc01vdmVOb2RlID0gKG46IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+KSA9PiB7XG4gIHJldHVybiBuLm1vZGVsLm1vdmVQcm9wcy5sZW5ndGggPiAwO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzUm9vdE5vZGUgPSAobjogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4pID0+IHtcbiAgcmV0dXJuIG4ubW9kZWwucm9vdFByb3BzLmxlbmd0aCA+IDAgfHwgbi5pc1Jvb3QoKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1NldHVwTm9kZSA9IChuOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPikgPT4ge1xuICByZXR1cm4gbi5tb2RlbC5zZXR1cFByb3BzLmxlbmd0aCA+IDA7XG59O1xuXG5leHBvcnQgY29uc3QgaXNBbnN3ZXJOb2RlID0gKG46IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+LCBraW5kOiBQQVQpID0+IHtcbiAgY29uc3QgcGF0ID0gbi5tb2RlbC5jdXN0b21Qcm9wcz8uZmluZCgocDogQ3VzdG9tUHJvcCkgPT4gcC50b2tlbiA9PT0gJ1BBVCcpO1xuICByZXR1cm4gcGF0Py52YWx1ZSA9PT0ga2luZDtcbn07XG5cbmV4cG9ydCBjb25zdCBpc0Nob2ljZU5vZGUgPSAobjogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4pID0+IHtcbiAgY29uc3QgYyA9IG4ubW9kZWwubm9kZUFubm90YXRpb25Qcm9wcz8uZmluZChcbiAgICAocDogTm9kZUFubm90YXRpb25Qcm9wKSA9PiBwLnRva2VuID09PSAnQydcbiAgKTtcbiAgcmV0dXJuIGM/LnZhbHVlLmluY2x1ZGVzKCdDSE9JQ0UnKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1RhcmdldE5vZGUgPSBpc0Nob2ljZU5vZGU7XG5cbmV4cG9ydCBjb25zdCBpc0ZvcmNlTm9kZSA9IChuOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPikgPT4ge1xuICBjb25zdCBjID0gbi5tb2RlbC5ub2RlQW5ub3RhdGlvblByb3BzPy5maW5kKFxuICAgIChwOiBOb2RlQW5ub3RhdGlvblByb3ApID0+IHAudG9rZW4gPT09ICdDJ1xuICApO1xuICByZXR1cm4gYz8udmFsdWUuaW5jbHVkZXMoJ0ZPUkNFJyk7XG59O1xuXG5leHBvcnQgY29uc3QgaXNQcmV2ZW50TW92ZU5vZGUgPSAobjogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4pID0+IHtcbiAgY29uc3QgYyA9IG4ubW9kZWwubm9kZUFubm90YXRpb25Qcm9wcz8uZmluZChcbiAgICAocDogTm9kZUFubm90YXRpb25Qcm9wKSA9PiBwLnRva2VuID09PSAnQydcbiAgKTtcbiAgcmV0dXJuIGM/LnZhbHVlLmluY2x1ZGVzKCdOT1RUSElTJyk7XG59O1xuXG4vLyBleHBvcnQgY29uc3QgaXNSaWdodExlYWYgPSAobjogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4pID0+IHtcbi8vICAgcmV0dXJuIGlzUmlnaHROb2RlKG4pICYmICFuLmhhc0NoaWxkcmVuKCk7XG4vLyB9O1xuXG5leHBvcnQgY29uc3QgaXNSaWdodE5vZGUgPSAobjogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4pID0+IHtcbiAgY29uc3QgYyA9IG4ubW9kZWwubm9kZUFubm90YXRpb25Qcm9wcz8uZmluZChcbiAgICAocDogTm9kZUFubm90YXRpb25Qcm9wKSA9PiBwLnRva2VuID09PSAnQydcbiAgKTtcbiAgcmV0dXJuIGM/LnZhbHVlLmluY2x1ZGVzKCdSSUdIVCcpO1xufTtcblxuLy8gZXhwb3J0IGNvbnN0IGlzRmlyc3RSaWdodExlYWYgPSAobjogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4pID0+IHtcbi8vICAgY29uc3Qgcm9vdCA9IG4uZ2V0UGF0aCgpWzBdO1xuLy8gICBjb25zdCBmaXJzdFJpZ2h0TGVhdmUgPSByb290LmZpcnN0KChuOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPikgPT5cbi8vICAgICBpc1JpZ2h0TGVhZihuKVxuLy8gICApO1xuLy8gICByZXR1cm4gZmlyc3RSaWdodExlYXZlPy5tb2RlbC5pZCA9PT0gbi5tb2RlbC5pZDtcbi8vIH07XG5cbmV4cG9ydCBjb25zdCBpc0ZpcnN0UmlnaHROb2RlID0gKG46IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+KSA9PiB7XG4gIGNvbnN0IHJvb3QgPSBuLmdldFBhdGgoKVswXTtcbiAgY29uc3QgZmlyc3RSaWdodE5vZGUgPSByb290LmZpcnN0KChuOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPikgPT5cbiAgICBpc1JpZ2h0Tm9kZShuKVxuICApO1xuICByZXR1cm4gZmlyc3RSaWdodE5vZGU/Lm1vZGVsLmlkID09PSBuLm1vZGVsLmlkO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzVmFyaWFudE5vZGUgPSAobjogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4pID0+IHtcbiAgY29uc3QgYyA9IG4ubW9kZWwubm9kZUFubm90YXRpb25Qcm9wcz8uZmluZChcbiAgICAocDogTm9kZUFubm90YXRpb25Qcm9wKSA9PiBwLnRva2VuID09PSAnQydcbiAgKTtcbiAgcmV0dXJuIGM/LnZhbHVlLmluY2x1ZGVzKCdWQVJJQU5UJyk7XG59O1xuXG4vLyBleHBvcnQgY29uc3QgaXNWYXJpYW50TGVhZiA9IChuOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPikgPT4ge1xuLy8gICByZXR1cm4gaXNWYXJpYW50Tm9kZShuKSAmJiAhbi5oYXNDaGlsZHJlbigpO1xuLy8gfTtcblxuZXhwb3J0IGNvbnN0IGlzV3JvbmdOb2RlID0gKG46IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+KSA9PiB7XG4gIGNvbnN0IGMgPSBuLm1vZGVsLm5vZGVBbm5vdGF0aW9uUHJvcHM/LmZpbmQoXG4gICAgKHA6IE5vZGVBbm5vdGF0aW9uUHJvcCkgPT4gcC50b2tlbiA9PT0gJ0MnXG4gICk7XG4gIHJldHVybiAoIWM/LnZhbHVlLmluY2x1ZGVzKCdWQVJJQU5UJykgJiYgIWM/LnZhbHVlLmluY2x1ZGVzKCdSSUdIVCcpKSB8fCAhYztcbn07XG5cbi8vIGV4cG9ydCBjb25zdCBpc1dyb25nTGVhZiA9IChuOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPikgPT4ge1xuLy8gICByZXR1cm4gaXNXcm9uZ05vZGUobikgJiYgIW4uaGFzQ2hpbGRyZW4oKTtcbi8vIH07XG5cbmV4cG9ydCBjb25zdCBpblBhdGggPSAoXG4gIG5vZGU6IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+LFxuICBkZXRlY3Rpb25NZXRob2Q6IChuOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPikgPT4gYm9vbGVhbixcbiAgc3RyYXRlZ3k6IFBhdGhEZXRlY3Rpb25TdHJhdGVneSA9IFBhdGhEZXRlY3Rpb25TdHJhdGVneS5Qb3N0LFxuICBwcmVOb2RlczogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT5bXSB8IHVuZGVmaW5lZCxcbiAgcG9zdE5vZGVzOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPltdIHwgdW5kZWZpbmVkXG4pID0+IHtcbiAgY29uc3QgcGF0aCA9IHByZU5vZGVzID8/IG5vZGUuZ2V0UGF0aCgpO1xuICBjb25zdCBwb3N0UmlnaHROb2RlcyA9XG4gICAgcG9zdE5vZGVzPy5maWx0ZXIoKG46IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+KSA9PiBkZXRlY3Rpb25NZXRob2QobikpID8/XG4gICAgbm9kZS5hbGwoKG46IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+KSA9PiBkZXRlY3Rpb25NZXRob2QobikpO1xuICBjb25zdCBwcmVSaWdodE5vZGVzID0gcGF0aC5maWx0ZXIoKG46IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+KSA9PlxuICAgIGRldGVjdGlvbk1ldGhvZChuKVxuICApO1xuXG4gIHN3aXRjaCAoc3RyYXRlZ3kpIHtcbiAgICBjYXNlIFBhdGhEZXRlY3Rpb25TdHJhdGVneS5Qb3N0OlxuICAgICAgcmV0dXJuIHBvc3RSaWdodE5vZGVzLmxlbmd0aCA+IDA7XG4gICAgY2FzZSBQYXRoRGV0ZWN0aW9uU3RyYXRlZ3kuUHJlOlxuICAgICAgcmV0dXJuIHByZVJpZ2h0Tm9kZXMubGVuZ3RoID4gMDtcbiAgICBjYXNlIFBhdGhEZXRlY3Rpb25TdHJhdGVneS5Cb3RoOlxuICAgICAgcmV0dXJuIHByZVJpZ2h0Tm9kZXMubGVuZ3RoID4gMCB8fCBwb3N0UmlnaHROb2Rlcy5sZW5ndGggPiAwO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpblJpZ2h0UGF0aCA9IChcbiAgbm9kZTogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4sXG4gIHN0cmF0ZWd5OiBQYXRoRGV0ZWN0aW9uU3RyYXRlZ3kgPSBQYXRoRGV0ZWN0aW9uU3RyYXRlZ3kuUG9zdCxcbiAgcHJlTm9kZXM/OiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPltdIHwgdW5kZWZpbmVkLFxuICBwb3N0Tm9kZXM/OiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPltdIHwgdW5kZWZpbmVkXG4pID0+IHtcbiAgcmV0dXJuIGluUGF0aChub2RlLCBpc1JpZ2h0Tm9kZSwgc3RyYXRlZ3ksIHByZU5vZGVzLCBwb3N0Tm9kZXMpO1xufTtcblxuZXhwb3J0IGNvbnN0IGluRmlyc3RSaWdodFBhdGggPSAoXG4gIG5vZGU6IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+LFxuICBzdHJhdGVneTogUGF0aERldGVjdGlvblN0cmF0ZWd5ID0gUGF0aERldGVjdGlvblN0cmF0ZWd5LlBvc3QsXG4gIHByZU5vZGVzPzogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT5bXSB8IHVuZGVmaW5lZCxcbiAgcG9zdE5vZGVzPzogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT5bXSB8IHVuZGVmaW5lZFxuKTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiBpblBhdGgobm9kZSwgaXNGaXJzdFJpZ2h0Tm9kZSwgc3RyYXRlZ3ksIHByZU5vZGVzLCBwb3N0Tm9kZXMpO1xufTtcblxuZXhwb3J0IGNvbnN0IGluRmlyc3RCcmFuY2hSaWdodFBhdGggPSAoXG4gIG5vZGU6IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+LFxuICBzdHJhdGVneTogUGF0aERldGVjdGlvblN0cmF0ZWd5ID0gUGF0aERldGVjdGlvblN0cmF0ZWd5LlByZSxcbiAgcHJlTm9kZXM/OiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPltdIHwgdW5kZWZpbmVkLFxuICBwb3N0Tm9kZXM/OiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPltdIHwgdW5kZWZpbmVkXG4pOiBib29sZWFuID0+IHtcbiAgaWYgKCFpblJpZ2h0UGF0aChub2RlKSkgcmV0dXJuIGZhbHNlO1xuXG4gIGNvbnN0IHBhdGggPSBwcmVOb2RlcyA/PyBub2RlLmdldFBhdGgoKTtcbiAgY29uc3QgcG9zdFJpZ2h0Tm9kZXMgPSBwb3N0Tm9kZXMgPz8gbm9kZS5hbGwoKCkgPT4gdHJ1ZSk7XG5cbiAgbGV0IHJlc3VsdCA9IFtdO1xuICBzd2l0Y2ggKHN0cmF0ZWd5KSB7XG4gICAgY2FzZSBQYXRoRGV0ZWN0aW9uU3RyYXRlZ3kuUG9zdDpcbiAgICAgIHJlc3VsdCA9IHBvc3RSaWdodE5vZGVzLmZpbHRlcihuID0+IG4uZ2V0SW5kZXgoKSA+IDApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBQYXRoRGV0ZWN0aW9uU3RyYXRlZ3kuUHJlOlxuICAgICAgcmVzdWx0ID0gcGF0aC5maWx0ZXIobiA9PiBuLmdldEluZGV4KCkgPiAwKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgUGF0aERldGVjdGlvblN0cmF0ZWd5LkJvdGg6XG4gICAgICByZXN1bHQgPSBwYXRoLmNvbmNhdChwb3N0UmlnaHROb2RlcykuZmlsdGVyKG4gPT4gbi5nZXRJbmRleCgpID4gMCk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAwO1xufTtcblxuZXhwb3J0IGNvbnN0IGluQ2hvaWNlUGF0aCA9IChcbiAgbm9kZTogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4sXG4gIHN0cmF0ZWd5OiBQYXRoRGV0ZWN0aW9uU3RyYXRlZ3kgPSBQYXRoRGV0ZWN0aW9uU3RyYXRlZ3kuUG9zdCxcbiAgcHJlTm9kZXM/OiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPltdIHwgdW5kZWZpbmVkLFxuICBwb3N0Tm9kZXM/OiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPltdIHwgdW5kZWZpbmVkXG4pOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIGluUGF0aChub2RlLCBpc0Nob2ljZU5vZGUsIHN0cmF0ZWd5LCBwcmVOb2RlcywgcG9zdE5vZGVzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpblRhcmdldFBhdGggPSBpbkNob2ljZVBhdGg7XG5cbmV4cG9ydCBjb25zdCBpblZhcmlhbnRQYXRoID0gKFxuICBub2RlOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPixcbiAgc3RyYXRlZ3k6IFBhdGhEZXRlY3Rpb25TdHJhdGVneSA9IFBhdGhEZXRlY3Rpb25TdHJhdGVneS5Qb3N0LFxuICBwcmVOb2Rlcz86IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+W10gfCB1bmRlZmluZWQsXG4gIHBvc3ROb2Rlcz86IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+W10gfCB1bmRlZmluZWRcbik6IGJvb2xlYW4gPT4ge1xuICByZXR1cm4gaW5QYXRoKG5vZGUsIGlzVmFyaWFudE5vZGUsIHN0cmF0ZWd5LCBwcmVOb2RlcywgcG9zdE5vZGVzKTtcbn07XG5cbmV4cG9ydCBjb25zdCBpbldyb25nUGF0aCA9IChcbiAgbm9kZTogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4sXG4gIHN0cmF0ZWd5OiBQYXRoRGV0ZWN0aW9uU3RyYXRlZ3kgPSBQYXRoRGV0ZWN0aW9uU3RyYXRlZ3kuUG9zdCxcbiAgcHJlTm9kZXM/OiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPltdIHwgdW5kZWZpbmVkLFxuICBwb3N0Tm9kZXM/OiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPltdIHwgdW5kZWZpbmVkXG4pOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIGluUGF0aChub2RlLCBpc1dyb25nTm9kZSwgc3RyYXRlZ3ksIHByZU5vZGVzLCBwb3N0Tm9kZXMpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldE5vZGVOdW1iZXIgPSAoXG4gIG46IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+LFxuICBwYXJlbnQ/OiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPlxuKSA9PiB7XG4gIGNvbnN0IHBhdGggPSBuLmdldFBhdGgoKTtcbiAgbGV0IG1vdmVzQ291bnQgPSBwYXRoLmZpbHRlcihuID0+IGlzTW92ZU5vZGUobikpLmxlbmd0aDtcbiAgaWYgKHBhcmVudCkge1xuICAgIG1vdmVzQ291bnQgKz0gcGFyZW50LmdldFBhdGgoKS5maWx0ZXIobiA9PiBpc01vdmVOb2RlKG4pKS5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIG1vdmVzQ291bnQ7XG59O1xuXG5leHBvcnQgY29uc3QgY2FsY1NIQSA9IChcbiAgbm9kZTogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4gfCBudWxsIHwgdW5kZWZpbmVkLFxuICBtb3ZlUHJvcHM6IE1vdmVQcm9wW10gPSBbXVxuKSA9PiB7XG4gIGxldCBmdWxsbmFtZSA9ICduJztcbiAgaWYgKG1vdmVQcm9wcy5sZW5ndGggPiAwKSB7XG4gICAgZnVsbG5hbWUgKz0gYCR7bW92ZVByb3BzWzBdLnRva2VufSR7bW92ZVByb3BzWzBdLnZhbHVlfWA7XG4gIH1cblxuICBpZiAobm9kZSkge1xuICAgIGNvbnN0IHBhdGggPSBub2RlLmdldFBhdGgoKTtcblxuICAgIGlmIChwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgIGZ1bGxuYW1lID1cbiAgICAgICAgcGF0aC5tYXAoKG46IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+KSA9PiBuLm1vZGVsLmlkKS5qb2luKCc9PicpICtcbiAgICAgICAgYD0+JHtmdWxsbmFtZX1gO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHNoYSA9IHNoYTI1NihmdWxsbmFtZSkudG9TdHJpbmcoKS5zbGljZSgwLCA2KTtcbiAgcmV0dXJuIHNoYTtcbn07XG5cbmV4cG9ydCBjb25zdCBfX2NhbGNTSEFfRGVwcmVjYXRlZCA9IChcbiAgbm9kZTogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4gfCBudWxsIHwgdW5kZWZpbmVkLFxuICBtb3ZlUHJvcHM6IGFueSA9IFtdLFxuICBzZXR1cFByb3BzOiBhbnkgPSBbXVxuKSA9PiB7XG4gIGxldCBub2RlVHlwZSA9ICdyJztcbiAgaWYgKG1vdmVQcm9wcy5sZW5ndGggPiAwKSBub2RlVHlwZSA9ICdtJztcbiAgaWYgKHNldHVwUHJvcHMubGVuZ3RoID4gMCkgbm9kZVR5cGUgPSAncyc7XG5cbiAgbGV0IG4gPSBgJHtub2RlVHlwZX1gO1xuICBpZiAobW92ZVByb3BzLmxlbmd0aCA+IDApIG4gKz0gYCR7bW92ZVByb3BzWzBdLnRva2VufSR7bW92ZVByb3BzWzBdLnZhbHVlfWA7XG5cbiAgbGV0IGZ1bGxuYW1lID0gbjtcbiAgaWYgKG5vZGUpIHtcbiAgICBmdWxsbmFtZSA9XG4gICAgICBub2RlXG4gICAgICAgIC5nZXRQYXRoKClcbiAgICAgICAgLm1hcCgobjogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4pID0+IG4ubW9kZWwuaWQpXG4gICAgICAgIC5qb2luKCc9PicpICtcbiAgICAgICc9PicgK1xuICAgICAgbjtcbiAgfVxuXG4gIGNvbnN0IHNoYSA9IHNoYTI1NihmdWxsbmFtZSkudG9TdHJpbmcoKS5zbGljZSgwLCA2KTtcbiAgcmV0dXJuIHNoYTtcbn07XG5cbmV4cG9ydCBjb25zdCBuRm9ybWF0dGVyID0gKG51bTogbnVtYmVyLCBmaXhlZCA9IDEpID0+IHtcbiAgY29uc3QgbG9va3VwID0gW1xuICAgIHt2YWx1ZTogMSwgc3ltYm9sOiAnJ30sXG4gICAge3ZhbHVlOiAxZTMsIHN5bWJvbDogJ2snfSxcbiAgICB7dmFsdWU6IDFlNiwgc3ltYm9sOiAnTSd9LFxuICAgIHt2YWx1ZTogMWU5LCBzeW1ib2w6ICdHJ30sXG4gICAge3ZhbHVlOiAxZTEyLCBzeW1ib2w6ICdUJ30sXG4gICAge3ZhbHVlOiAxZTE1LCBzeW1ib2w6ICdQJ30sXG4gICAge3ZhbHVlOiAxZTE4LCBzeW1ib2w6ICdFJ30sXG4gIF07XG4gIGNvbnN0IHJ4ID0gL1xcLjArJHwoXFwuWzAtOV0qWzEtOV0pMCskLztcbiAgY29uc3QgaXRlbSA9IGxvb2t1cFxuICAgIC5zbGljZSgpXG4gICAgLnJldmVyc2UoKVxuICAgIC5maW5kKGl0ZW0gPT4ge1xuICAgICAgcmV0dXJuIG51bSA+PSBpdGVtLnZhbHVlO1xuICAgIH0pO1xuICByZXR1cm4gaXRlbVxuICAgID8gKG51bSAvIGl0ZW0udmFsdWUpLnRvRml4ZWQoZml4ZWQpLnJlcGxhY2UocngsICckMScpICsgaXRlbS5zeW1ib2xcbiAgICA6ICcwJztcbn07XG5cbmV4cG9ydCBjb25zdCBwYXRoVG9JbmRleGVzID0gKHBhdGg6IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+W10pOiBudW1iZXJbXSA9PiB7XG4gIHJldHVybiBwYXRoLm1hcChuID0+IG4ubW9kZWwuaWQpO1xufTtcblxuZXhwb3J0IGNvbnN0IHBhdGhUb0luaXRpYWxTdG9uZXMgPSAoXG4gIHBhdGg6IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+W10sXG4gIHhPZmZzZXQgPSAwLFxuICB5T2Zmc2V0ID0gMFxuKTogc3RyaW5nW11bXSA9PiB7XG4gIGNvbnN0IGluaXRzID0gcGF0aFxuICAgIC5maWx0ZXIobiA9PiBuLm1vZGVsLnNldHVwUHJvcHMubGVuZ3RoID4gMClcbiAgICAubWFwKG4gPT4ge1xuICAgICAgcmV0dXJuIG4ubW9kZWwuc2V0dXBQcm9wcy5tYXAoKHNldHVwOiBTZXR1cFByb3ApID0+IHtcbiAgICAgICAgcmV0dXJuIHNldHVwLnZhbHVlcy5tYXAoKHY6IHN0cmluZykgPT4ge1xuICAgICAgICAgIGNvbnN0IGEgPSBBMV9MRVRURVJTW1NHRl9MRVRURVJTLmluZGV4T2YodlswXSkgKyB4T2Zmc2V0XTtcbiAgICAgICAgICBjb25zdCBiID0gQTFfTlVNQkVSU1tTR0ZfTEVUVEVSUy5pbmRleE9mKHZbMV0pICsgeU9mZnNldF07XG4gICAgICAgICAgY29uc3QgdG9rZW4gPSBzZXR1cC50b2tlbiA9PT0gJ0FCJyA/ICdCJyA6ICdXJztcbiAgICAgICAgICByZXR1cm4gW3Rva2VuLCBhICsgYl07XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIHJldHVybiBmbGF0dGVuRGVwdGgoaW5pdHNbMF0sIDEpO1xufTtcblxuZXhwb3J0IGNvbnN0IHBhdGhUb0FpTW92ZXMgPSAoXG4gIHBhdGg6IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+W10sXG4gIHhPZmZzZXQgPSAwLFxuICB5T2Zmc2V0ID0gMFxuKSA9PiB7XG4gIGNvbnN0IG1vdmVzID0gcGF0aFxuICAgIC5maWx0ZXIobiA9PiBuLm1vZGVsLm1vdmVQcm9wcy5sZW5ndGggPiAwKVxuICAgIC5tYXAobiA9PiB7XG4gICAgICBjb25zdCBwcm9wID0gbi5tb2RlbC5tb3ZlUHJvcHNbMF07XG4gICAgICBjb25zdCBhID0gQTFfTEVUVEVSU1tTR0ZfTEVUVEVSUy5pbmRleE9mKHByb3AudmFsdWVbMF0pICsgeE9mZnNldF07XG4gICAgICBjb25zdCBiID0gQTFfTlVNQkVSU1tTR0ZfTEVUVEVSUy5pbmRleE9mKHByb3AudmFsdWVbMV0pICsgeU9mZnNldF07XG4gICAgICByZXR1cm4gW3Byb3AudG9rZW4sIGEgKyBiXTtcbiAgICB9KTtcbiAgcmV0dXJuIG1vdmVzO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEluZGV4RnJvbUFuYWx5c2lzID0gKGE6IEFuYWx5c2lzKSA9PiB7XG4gIGlmICgvaW5kZXhlcy8udGVzdChhLmlkKSkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKGEuaWQpLmluZGV4ZXNbMF07XG4gIH1cbiAgcmV0dXJuICcnO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzTWFpblBhdGggPSAobm9kZTogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4pID0+IHtcbiAgcmV0dXJuIHN1bShub2RlLmdldFBhdGgoKS5tYXAobiA9PiBuLmdldEluZGV4KCkpKSA9PT0gMDtcbn07XG5cbmV4cG9ydCBjb25zdCBzZ2ZUb1BvcyA9IChzdHI6IHN0cmluZykgPT4ge1xuICBjb25zdCBraSA9IHN0clswXSA9PT0gJ0InID8gMSA6IC0xO1xuICBjb25zdCB0ZW1wU3RyID0gL1xcWyguKilcXF0vLmV4ZWMoc3RyKTtcbiAgaWYgKHRlbXBTdHIpIHtcbiAgICBjb25zdCBwb3MgPSB0ZW1wU3RyWzFdO1xuICAgIGNvbnN0IHggPSBTR0ZfTEVUVEVSUy5pbmRleE9mKHBvc1swXSk7XG4gICAgY29uc3QgeSA9IFNHRl9MRVRURVJTLmluZGV4T2YocG9zWzFdKTtcbiAgICByZXR1cm4ge3gsIHksIGtpfTtcbiAgfVxuICByZXR1cm4ge3g6IC0xLCB5OiAtMSwga2k6IDB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHNnZlRvQTEgPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgY29uc3Qge3gsIHl9ID0gc2dmVG9Qb3Moc3RyKTtcbiAgcmV0dXJuIEExX0xFVFRFUlNbeF0gKyBBMV9OVU1CRVJTW3ldO1xufTtcblxuZXhwb3J0IGNvbnN0IGExVG9Qb3MgPSAobW92ZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHggPSBBMV9MRVRURVJTLmluZGV4T2YobW92ZVswXSk7XG4gIGNvbnN0IHkgPSBBMV9OVU1CRVJTLmluZGV4T2YocGFyc2VJbnQobW92ZS5zdWJzdHIoMSksIDApKTtcbiAgcmV0dXJuIHt4LCB5fTtcbn07XG5cbmV4cG9ydCBjb25zdCBhMVRvSW5kZXggPSAobW92ZTogc3RyaW5nLCBib2FyZFNpemUgPSAxOSkgPT4ge1xuICBjb25zdCB4ID0gQTFfTEVUVEVSUy5pbmRleE9mKG1vdmVbMF0pO1xuICBjb25zdCB5ID0gQTFfTlVNQkVSUy5pbmRleE9mKHBhcnNlSW50KG1vdmUuc3Vic3RyKDEpLCAwKSk7XG4gIHJldHVybiB4ICogYm9hcmRTaXplICsgeTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZ2ZPZmZzZXQgPSAoc2dmOiBhbnksIG9mZnNldCA9IDApID0+IHtcbiAgaWYgKG9mZnNldCA9PT0gMCkgcmV0dXJuIHNnZjtcbiAgY29uc3QgcmVzID0gY2xvbmUoc2dmKTtcbiAgY29uc3QgY2hhckluZGV4ID0gU0dGX0xFVFRFUlMuaW5kZXhPZihzZ2ZbMl0pIC0gb2Zmc2V0O1xuICByZXR1cm4gcmVzLnN1YnN0cigwLCAyKSArIFNHRl9MRVRURVJTW2NoYXJJbmRleF0gKyByZXMuc3Vic3RyKDIgKyAxKTtcbn07XG5cbmV4cG9ydCBjb25zdCBhMVRvU0dGID0gKHN0cjogYW55LCB0eXBlID0gJ0InLCBvZmZzZXRYID0gMCwgb2Zmc2V0WSA9IDApID0+IHtcbiAgaWYgKHN0ciA9PT0gJ3Bhc3MnKSByZXR1cm4gYCR7dHlwZX1bXWA7XG4gIGNvbnN0IGlueCA9IEExX0xFVFRFUlMuaW5kZXhPZihzdHJbMF0pICsgb2Zmc2V0WDtcbiAgY29uc3QgaW55ID0gQTFfTlVNQkVSUy5pbmRleE9mKHBhcnNlSW50KHN0ci5zdWJzdHIoMSksIDApKSArIG9mZnNldFk7XG4gIGNvbnN0IHNnZiA9IGAke3R5cGV9WyR7U0dGX0xFVFRFUlNbaW54XX0ke1NHRl9MRVRURVJTW2lueV19XWA7XG4gIHJldHVybiBzZ2Y7XG59O1xuXG5leHBvcnQgY29uc3QgcG9zVG9TZ2YgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIsIGtpOiBudW1iZXIpID0+IHtcbiAgY29uc3QgYXggPSBTR0ZfTEVUVEVSU1t4XTtcbiAgY29uc3QgYXkgPSBTR0ZfTEVUVEVSU1t5XTtcbiAgaWYgKGtpID09PSAwKSByZXR1cm4gJyc7XG4gIGlmIChraSA9PT0gMSkgcmV0dXJuIGBCWyR7YXh9JHtheX1dYDtcbiAgaWYgKGtpID09PSAtMSkgcmV0dXJuIGBXWyR7YXh9JHtheX1dYDtcbiAgcmV0dXJuICcnO1xufTtcblxuZXhwb3J0IGNvbnN0IG1hdFRvUG9zaXRpb24gPSAoXG4gIG1hdDogbnVtYmVyW11bXSxcbiAgeE9mZnNldD86IG51bWJlcixcbiAgeU9mZnNldD86IG51bWJlclxuKSA9PiB7XG4gIGxldCByZXN1bHQgPSAnJztcbiAgeE9mZnNldCA9IHhPZmZzZXQgPz8gMDtcbiAgeU9mZnNldCA9IHlPZmZzZXQgPz8gREVGQVVMVF9CT0FSRF9TSVpFIC0gbWF0Lmxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXQubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1hdFtpXS5sZW5ndGg7IGorKykge1xuICAgICAgY29uc3QgdmFsdWUgPSBtYXRbaV1bal07XG4gICAgICBpZiAodmFsdWUgIT09IDApIHtcbiAgICAgICAgY29uc3QgeCA9IEExX0xFVFRFUlNbaSArIHhPZmZzZXRdO1xuICAgICAgICBjb25zdCB5ID0gQTFfTlVNQkVSU1tqICsgeU9mZnNldF07XG4gICAgICAgIGNvbnN0IGNvbG9yID0gdmFsdWUgPT09IDEgPyAnYicgOiAndyc7XG4gICAgICAgIHJlc3VsdCArPSBgJHtjb2xvcn0gJHt4fSR7eX0gYDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBtYXRUb0xpc3RPZlR1cGxlcyA9IChcbiAgbWF0OiBudW1iZXJbXVtdLFxuICB4T2Zmc2V0ID0gMCxcbiAgeU9mZnNldCA9IDBcbikgPT4ge1xuICBjb25zdCByZXN1bHRzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0Lmxlbmd0aDsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBtYXRbaV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gbWF0W2ldW2pdO1xuICAgICAgaWYgKHZhbHVlICE9PSAwKSB7XG4gICAgICAgIGNvbnN0IHggPSBBMV9MRVRURVJTW2kgKyB4T2Zmc2V0XTtcbiAgICAgICAgY29uc3QgeSA9IEExX05VTUJFUlNbaiArIHlPZmZzZXRdO1xuICAgICAgICBjb25zdCBjb2xvciA9IHZhbHVlID09PSAxID8gJ0InIDogJ1cnO1xuICAgICAgICByZXN1bHRzLnB1c2goW2NvbG9yLCB4ICsgeV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0cztcbn07XG5cbmV4cG9ydCBjb25zdCBjb252ZXJ0U3RvbmVUeXBlVG9TdHJpbmcgPSAodHlwZTogYW55KSA9PiAodHlwZSA9PT0gMSA/ICdCJyA6ICdXJyk7XG5cbmV4cG9ydCBjb25zdCBjb252ZXJ0U3RlcHNGb3JBSSA9IChzdGVwczogYW55LCBvZmZzZXQgPSAwKSA9PiB7XG4gIGxldCByZXMgPSBjbG9uZShzdGVwcyk7XG4gIHJlcyA9IHJlcy5tYXAoKHM6IGFueSkgPT4gc2dmT2Zmc2V0KHMsIG9mZnNldCkpO1xuICBjb25zdCBoZWFkZXIgPSBgKDtGRls0XUdNWzFdU1pbJHtcbiAgICAxOSAtIG9mZnNldFxuICB9XUdOWzIyNl1QQltCbGFja11IQVswXVBXW1doaXRlXUtNWzcuNV1EVFsyMDE3LTA4LTAxXVRNWzE4MDBdUlVbQ2hpbmVzZV1DUFtDb3B5cmlnaHQgZ2hvc3QtZ28uY29tXUFQW2dob3N0LWdvLmNvbV1QTFtCbGFja107YDtcbiAgbGV0IGNvdW50ID0gMDtcbiAgbGV0IHByZXYgPSAnJztcbiAgc3RlcHMuZm9yRWFjaCgoc3RlcDogYW55LCBpbmRleDogYW55KSA9PiB7XG4gICAgaWYgKHN0ZXBbMF0gPT09IHByZXZbMF0pIHtcbiAgICAgIGlmIChzdGVwWzBdID09PSAnQicpIHtcbiAgICAgICAgcmVzLnNwbGljZShpbmRleCArIGNvdW50LCAwLCAnV1t0dF0nKTtcbiAgICAgICAgY291bnQgKz0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlcy5zcGxpY2UoaW5kZXggKyBjb3VudCwgMCwgJ0JbdHRdJyk7XG4gICAgICAgIGNvdW50ICs9IDE7XG4gICAgICB9XG4gICAgfVxuICAgIHByZXYgPSBzdGVwO1xuICB9KTtcbiAgcmV0dXJuIGAke2hlYWRlcn0ke3Jlcy5qb2luKCc7Jyl9KWA7XG59O1xuXG5leHBvcnQgY29uc3Qgb2Zmc2V0QTFNb3ZlID0gKG1vdmU6IHN0cmluZywgb3ggPSAwLCBveSA9IDApID0+IHtcbiAgaWYgKG1vdmUgPT09ICdwYXNzJykgcmV0dXJuIG1vdmU7XG4gIC8vIGNvbnNvbGUubG9nKCdveHknLCBveCwgb3kpO1xuICBjb25zdCBpbnggPSBBMV9MRVRURVJTLmluZGV4T2YobW92ZVswXSkgKyBveDtcbiAgY29uc3QgaW55ID0gQTFfTlVNQkVSUy5pbmRleE9mKHBhcnNlSW50KG1vdmUuc3Vic3RyKDEpLCAwKSkgKyBveTtcbiAgLy8gY29uc29sZS5sb2coJ2lueHknLCBpbngsIGlueSwgYCR7QTFfTEVUVEVSU1tpbnhdfSR7QTFfTlVNQkVSU1tpbnldfWApO1xuICByZXR1cm4gYCR7QTFfTEVUVEVSU1tpbnhdfSR7QTFfTlVNQkVSU1tpbnldfWA7XG59O1xuXG5leHBvcnQgY29uc3QgcmV2ZXJzZU9mZnNldEExTW92ZSA9IChcbiAgbW92ZTogc3RyaW5nLFxuICBtYXQ6IG51bWJlcltdW10sXG4gIGFuYWx5c2lzOiBBbmFseXNpcyxcbiAgYm9hcmRTaXplID0gMTlcbikgPT4ge1xuICBpZiAobW92ZSA9PT0gJ3Bhc3MnKSByZXR1cm4gbW92ZTtcbiAgY29uc3QgaWRPYmogPSBKU09OLnBhcnNlKGFuYWx5c2lzLmlkKTtcbiAgY29uc3Qge3gsIHl9ID0gcmV2ZXJzZU9mZnNldChtYXQsIGlkT2JqLmJ4LCBpZE9iai5ieSwgYm9hcmRTaXplKTtcbiAgY29uc3QgaW54ID0gQTFfTEVUVEVSUy5pbmRleE9mKG1vdmVbMF0pICsgeDtcbiAgY29uc3QgaW55ID0gQTFfTlVNQkVSUy5pbmRleE9mKHBhcnNlSW50KG1vdmUuc3Vic3RyKDEpLCAwKSkgKyB5O1xuICByZXR1cm4gYCR7QTFfTEVUVEVSU1tpbnhdfSR7QTFfTlVNQkVSU1tpbnldfWA7XG59O1xuXG5leHBvcnQgY29uc3QgY2FsY1Njb3JlRGlmZlRleHQgPSAoXG4gIHJvb3RJbmZvPzogUm9vdEluZm8gfCBudWxsLFxuICBjdXJySW5mbz86IE1vdmVJbmZvIHwgUm9vdEluZm8gfCBudWxsLFxuICBmaXhlZCA9IDEsXG4gIHJldmVyc2UgPSBmYWxzZVxuKSA9PiB7XG4gIGlmICghcm9vdEluZm8gfHwgIWN1cnJJbmZvKSByZXR1cm4gJyc7XG4gIGxldCBzY29yZSA9IGNhbGNTY29yZURpZmYocm9vdEluZm8sIGN1cnJJbmZvKTtcbiAgaWYgKHJldmVyc2UpIHNjb3JlID0gLXNjb3JlO1xuICBjb25zdCBmaXhlZFNjb3JlID0gc2NvcmUudG9GaXhlZChmaXhlZCk7XG5cbiAgcmV0dXJuIHNjb3JlID4gMCA/IGArJHtmaXhlZFNjb3JlfWAgOiBgJHtmaXhlZFNjb3JlfWA7XG59O1xuXG5leHBvcnQgY29uc3QgY2FsY1dpbnJhdGVEaWZmVGV4dCA9IChcbiAgcm9vdEluZm8/OiBSb290SW5mbyB8IG51bGwsXG4gIGN1cnJJbmZvPzogTW92ZUluZm8gfCBSb290SW5mbyB8IG51bGwsXG4gIGZpeGVkID0gMSxcbiAgcmV2ZXJzZSA9IGZhbHNlXG4pID0+IHtcbiAgaWYgKCFyb290SW5mbyB8fCAhY3VyckluZm8pIHJldHVybiAnJztcbiAgbGV0IHdpbnJhdGUgPSBjYWxjV2lucmF0ZURpZmYocm9vdEluZm8sIGN1cnJJbmZvKTtcbiAgaWYgKHJldmVyc2UpIHdpbnJhdGUgPSAtd2lucmF0ZTtcbiAgY29uc3QgZml4ZWRXaW5yYXRlID0gd2lucmF0ZS50b0ZpeGVkKGZpeGVkKTtcblxuICByZXR1cm4gd2lucmF0ZSA+PSAwID8gYCske2ZpeGVkV2lucmF0ZX0lYCA6IGAke2ZpeGVkV2lucmF0ZX0lYDtcbn07XG5cbmV4cG9ydCBjb25zdCBjYWxjU2NvcmVEaWZmID0gKFxuICByb290SW5mbzogUm9vdEluZm8sXG4gIGN1cnJJbmZvOiBNb3ZlSW5mbyB8IFJvb3RJbmZvXG4pID0+IHtcbiAgY29uc3Qgc2lnbiA9IHJvb3RJbmZvLmN1cnJlbnRQbGF5ZXIgPT09ICdCJyA/IDEgOiAtMTtcbiAgY29uc3Qgc2NvcmUgPVxuICAgIE1hdGgucm91bmQoKGN1cnJJbmZvLnNjb3JlTGVhZCAtIHJvb3RJbmZvLnNjb3JlTGVhZCkgKiBzaWduICogMTAwMCkgLyAxMDAwO1xuXG4gIHJldHVybiBzY29yZTtcbn07XG5cbmV4cG9ydCBjb25zdCBjYWxjV2lucmF0ZURpZmYgPSAoXG4gIHJvb3RJbmZvOiBSb290SW5mbyxcbiAgY3VyckluZm86IE1vdmVJbmZvIHwgUm9vdEluZm9cbikgPT4ge1xuICBjb25zdCBzaWduID0gcm9vdEluZm8uY3VycmVudFBsYXllciA9PT0gJ0InID8gMSA6IC0xO1xuICBjb25zdCBzY29yZSA9XG4gICAgTWF0aC5yb3VuZCgoY3VyckluZm8ud2lucmF0ZSAtIHJvb3RJbmZvLndpbnJhdGUpICogc2lnbiAqIDEwMDAgKiAxMDApIC9cbiAgICAxMDAwO1xuXG4gIHJldHVybiBzY29yZTtcbn07XG5cbmV4cG9ydCBjb25zdCBjYWxjQW5hbHlzaXNQb2ludENvbG9yID0gKFxuICByb290SW5mbzogUm9vdEluZm8sXG4gIG1vdmVJbmZvOiBNb3ZlSW5mb1xuKSA9PiB7XG4gIGNvbnN0IHtwcmlvciwgb3JkZXJ9ID0gbW92ZUluZm87XG4gIGNvbnN0IHNjb3JlID0gY2FsY1Njb3JlRGlmZihyb290SW5mbywgbW92ZUluZm8pO1xuICBsZXQgcG9pbnRDb2xvciA9ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSknO1xuICBpZiAoXG4gICAgcHJpb3IgPj0gMC41IHx8XG4gICAgKHByaW9yID49IDAuMSAmJiBvcmRlciA8IDMgJiYgc2NvcmUgPiAtMC4zKSB8fFxuICAgIG9yZGVyID09PSAwIHx8XG4gICAgc2NvcmUgPj0gMFxuICApIHtcbiAgICBwb2ludENvbG9yID0gTElHSFRfR1JFRU5fUkdCO1xuICB9IGVsc2UgaWYgKChwcmlvciA+IDAuMDUgJiYgc2NvcmUgPiAtMC41KSB8fCAocHJpb3IgPiAwLjAxICYmIHNjb3JlID4gLTAuMSkpIHtcbiAgICBwb2ludENvbG9yID0gTElHSFRfWUVMTE9XX1JHQjtcbiAgfSBlbHNlIGlmIChwcmlvciA+IDAuMDEgJiYgc2NvcmUgPiAtMSkge1xuICAgIHBvaW50Q29sb3IgPSBZRUxMT1dfUkdCO1xuICB9IGVsc2Uge1xuICAgIHBvaW50Q29sb3IgPSBMSUdIVF9SRURfUkdCO1xuICB9XG4gIHJldHVybiBwb2ludENvbG9yO1xufTtcblxuLy8gZXhwb3J0IGNvbnN0IEdvQmFuRGV0ZWN0aW9uID0gKHBpeGVsRGF0YSwgY2FudmFzKSA9PiB7XG4vLyBjb25zdCBjb2x1bW5zID0gY2FudmFzLndpZHRoO1xuLy8gY29uc3Qgcm93cyA9IGNhbnZhcy5oZWlnaHQ7XG4vLyBjb25zdCBkYXRhVHlwZSA9IEpzRmVhdC5VOEMxX3Q7XG4vLyBjb25zdCBkaXN0TWF0cml4VCA9IG5ldyBKc0ZlYXQubWF0cml4X3QoY29sdW1ucywgcm93cywgZGF0YVR5cGUpO1xuLy8gSnNGZWF0LmltZ3Byb2MuZ3JheXNjYWxlKHBpeGVsRGF0YSwgY29sdW1ucywgcm93cywgZGlzdE1hdHJpeFQpO1xuLy8gSnNGZWF0LmltZ3Byb2MuZ2F1c3NpYW5fYmx1cihkaXN0TWF0cml4VCwgZGlzdE1hdHJpeFQsIDIsIDApO1xuLy8gSnNGZWF0LmltZ3Byb2MuY2FubnkoZGlzdE1hdHJpeFQsIGRpc3RNYXRyaXhULCA1MCwgNTApO1xuXG4vLyBjb25zdCBuZXdQaXhlbERhdGEgPSBuZXcgVWludDMyQXJyYXkocGl4ZWxEYXRhLmJ1ZmZlcik7XG4vLyBjb25zdCBhbHBoYSA9ICgweGZmIDw8IDI0KTtcbi8vIGxldCBpID0gZGlzdE1hdHJpeFQuY29scyAqIGRpc3RNYXRyaXhULnJvd3M7XG4vLyBsZXQgcGl4ID0gMDtcbi8vIHdoaWxlIChpID49IDApIHtcbi8vICAgcGl4ID0gZGlzdE1hdHJpeFQuZGF0YVtpXTtcbi8vICAgbmV3UGl4ZWxEYXRhW2ldID0gYWxwaGEgfCAocGl4IDw8IDE2KSB8IChwaXggPDwgOCkgfCBwaXg7XG4vLyAgIGkgLT0gMTtcbi8vIH1cbi8vIH07XG5cbmV4cG9ydCBjb25zdCBleHRyYWN0UEFJID0gKG46IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+KSA9PiB7XG4gIGNvbnN0IHBhaSA9IG4ubW9kZWwuY3VzdG9tUHJvcHMuZmluZCgocDogQ3VzdG9tUHJvcCkgPT4gcC50b2tlbiA9PT0gJ1BBSScpO1xuICBpZiAoIXBhaSkgcmV0dXJuO1xuICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShwYWkudmFsdWUpO1xuXG4gIHJldHVybiBkYXRhO1xufTtcblxuZXhwb3J0IGNvbnN0IGV4dHJhY3RBbnN3ZXJUeXBlID0gKFxuICBuOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPlxuKTogUEFUIHwgdW5kZWZpbmVkID0+IHtcbiAgY29uc3QgcGF0ID0gbi5tb2RlbC5jdXN0b21Qcm9wcy5maW5kKChwOiBDdXN0b21Qcm9wKSA9PiBwLnRva2VuID09PSAnUEFUJyk7XG4gIHJldHVybiBwYXQ/LnZhbHVlO1xufTtcblxuZXhwb3J0IGNvbnN0IGV4dHJhY3RQSSA9IChuOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPikgPT4ge1xuICBjb25zdCBwaSA9IG4ubW9kZWwuY3VzdG9tUHJvcHMuZmluZCgocDogQ3VzdG9tUHJvcCkgPT4gcC50b2tlbiA9PT0gJ1BJJyk7XG4gIGlmICghcGkpIHJldHVybjtcbiAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UocGkudmFsdWUpO1xuXG4gIHJldHVybiBkYXRhO1xufTtcblxuZXhwb3J0IGNvbnN0IGluaXROb2RlRGF0YSA9IChzaGE6IHN0cmluZywgbnVtYmVyPzogbnVtYmVyKTogU2dmTm9kZSA9PiB7XG4gIHJldHVybiB7XG4gICAgaWQ6IHNoYSxcbiAgICBuYW1lOiBzaGEsXG4gICAgbnVtYmVyOiBudW1iZXIgfHwgMCxcbiAgICByb290UHJvcHM6IFtdLFxuICAgIG1vdmVQcm9wczogW10sXG4gICAgc2V0dXBQcm9wczogW10sXG4gICAgbWFya3VwUHJvcHM6IFtdLFxuICAgIGdhbWVJbmZvUHJvcHM6IFtdLFxuICAgIG5vZGVBbm5vdGF0aW9uUHJvcHM6IFtdLFxuICAgIG1vdmVBbm5vdGF0aW9uUHJvcHM6IFtdLFxuICAgIGN1c3RvbVByb3BzOiBbXSxcbiAgfTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyB0aGUgaW5pdGlhbCByb290IG5vZGUgb2YgdGhlIHRyZWUuXG4gKlxuICogQHBhcmFtIHJvb3RQcm9wcyAtIFRoZSByb290IHByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyBUaGUgaW5pdGlhbCByb290IG5vZGUuXG4gKi9cbmV4cG9ydCBjb25zdCBpbml0aWFsUm9vdE5vZGUgPSAoXG4gIHJvb3RQcm9wcyA9IFtcbiAgICAnRkZbNF0nLFxuICAgICdHTVsxXScsXG4gICAgJ0NBW1VURi04XScsXG4gICAgJ0FQW2dob3N0Z286MC4xLjBdJyxcbiAgICAnU1pbMTldJyxcbiAgICAnU1RbMF0nLFxuICBdXG4pID0+IHtcbiAgY29uc3QgdHJlZTogVHJlZU1vZGVsID0gbmV3IFRyZWVNb2RlbCgpO1xuICBjb25zdCByb290ID0gdHJlZS5wYXJzZSh7XG4gICAgLy8gJzFiMTZiMScgaXMgdGhlIFNIQTI1NiBoYXNoIG9mIHRoZSAnbidcbiAgICBpZDogJzFiMTZiMScsXG4gICAgbmFtZTogMCxcbiAgICBpbmRleDogMCxcbiAgICBudW1iZXI6IDAsXG4gICAgcm9vdFByb3BzOiByb290UHJvcHMubWFwKHAgPT4gUm9vdFByb3AuZnJvbShwKSksXG4gICAgbW92ZVByb3BzOiBbXSxcbiAgICBzZXR1cFByb3BzOiBbXSxcbiAgICBtYXJrdXBQcm9wczogW10sXG4gICAgZ2FtZUluZm9Qcm9wczogW10sXG4gICAgbm9kZUFubm90YXRpb25Qcm9wczogW10sXG4gICAgbW92ZUFubm90YXRpb25Qcm9wczogW10sXG4gICAgY3VzdG9tUHJvcHM6IFtdLFxuICB9KTtcbiAgLy8gY29uc3Qgc2hhID0gY2FsY1NIQShyb290KTtcbiAgLy8gcm9vdC5tb2RlbC5pZCA9IHNoYTtcbiAgLy8gY29uc29sZS5sb2coJ3Jvb3QnLCByb290KTtcbiAgLy8gY29uc29sZS5sb2coc2hhKTtcbiAgcmV0dXJuIHJvb3Q7XG59O1xuXG4vKipcbiAqIEJ1aWxkcyBhIG5ldyB0cmVlIG5vZGUgd2l0aCB0aGUgZ2l2ZW4gbW92ZSwgcGFyZW50IG5vZGUsIGFuZCBhZGRpdGlvbmFsIHByb3BlcnRpZXMuXG4gKlxuICogQHBhcmFtIG1vdmUgLSBUaGUgbW92ZSB0byBiZSBhZGRlZCB0byB0aGUgbm9kZS5cbiAqIEBwYXJhbSBwYXJlbnROb2RlIC0gVGhlIHBhcmVudCBub2RlIG9mIHRoZSBuZXcgbm9kZS4gT3B0aW9uYWwuXG4gKiBAcGFyYW0gcHJvcHMgLSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gdGhlIG5ldyBub2RlLiBPcHRpb25hbC5cbiAqIEByZXR1cm5zIFRoZSBuZXdseSBjcmVhdGVkIHRyZWUgbm9kZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGJ1aWxkTW92ZU5vZGUgPSAoXG4gIG1vdmU6IHN0cmluZyxcbiAgcGFyZW50Tm9kZT86IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+LFxuICBwcm9wcz86IFNnZk5vZGVPcHRpb25zXG4pID0+IHtcbiAgY29uc3QgdHJlZTogVHJlZU1vZGVsID0gbmV3IFRyZWVNb2RlbCgpO1xuICBjb25zdCBtb3ZlUHJvcCA9IE1vdmVQcm9wLmZyb20obW92ZSk7XG4gIGNvbnN0IHNoYSA9IGNhbGNTSEEocGFyZW50Tm9kZSwgW21vdmVQcm9wXSk7XG4gIGxldCBudW1iZXIgPSAxO1xuICBpZiAocGFyZW50Tm9kZSkgbnVtYmVyID0gZ2V0Tm9kZU51bWJlcihwYXJlbnROb2RlKSArIDE7XG4gIGNvbnN0IG5vZGVEYXRhID0gaW5pdE5vZGVEYXRhKHNoYSwgbnVtYmVyKTtcbiAgbm9kZURhdGEubW92ZVByb3BzID0gW21vdmVQcm9wXTtcbiAgLy8gVE9ETzogU2hvdWxkIEkgYWRkIHRoaXM/XG4gIC8vIG5vZGVEYXRhLm5vZGVBbm5vdGF0aW9uUHJvcHMgPSBbTm9kZUFubm90YXRpb25Qcm9wLmZyb20oYE5bJHtzaGF9XWApXTtcblxuICBjb25zdCBub2RlID0gdHJlZS5wYXJzZSh7XG4gICAgLi4ubm9kZURhdGEsXG4gICAgLi4ucHJvcHMsXG4gIH0pO1xuICByZXR1cm4gbm9kZTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRMYXN0SW5kZXggPSAocm9vdDogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4pID0+IHtcbiAgbGV0IGxhc3ROb2RlID0gcm9vdDtcbiAgcm9vdC53YWxrKG5vZGUgPT4ge1xuICAgIC8vIEhhbHQgdGhlIHRyYXZlcnNhbCBieSByZXR1cm5pbmcgZmFsc2VcbiAgICBsYXN0Tm9kZSA9IG5vZGU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0pO1xuICByZXR1cm4gbGFzdE5vZGUubW9kZWwuaW5kZXg7XG59O1xuXG5leHBvcnQgY29uc3QgY3V0TW92ZU5vZGVzID0gKFxuICByb290OiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPixcbiAgcmV0dXJuUm9vdD86IGJvb2xlYW5cbikgPT4ge1xuICBsZXQgbm9kZSA9IGNsb25lRGVlcChyb290KTtcbiAgd2hpbGUgKG5vZGUgJiYgbm9kZS5oYXNDaGlsZHJlbigpICYmIG5vZGUubW9kZWwubW92ZVByb3BzLmxlbmd0aCA9PT0gMCkge1xuICAgIG5vZGUgPSBub2RlLmNoaWxkcmVuWzBdO1xuICAgIG5vZGUuY2hpbGRyZW4gPSBbXTtcbiAgfVxuXG4gIGlmIChyZXR1cm5Sb290KSB7XG4gICAgd2hpbGUgKG5vZGUgJiYgbm9kZS5wYXJlbnQgJiYgIW5vZGUuaXNSb290KCkpIHtcbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRSb290ID0gKG5vZGU6IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+KSA9PiB7XG4gIGxldCByb290ID0gbm9kZTtcbiAgd2hpbGUgKHJvb3QgJiYgcm9vdC5wYXJlbnQgJiYgIXJvb3QuaXNSb290KCkpIHtcbiAgICByb290ID0gcm9vdC5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIHJvb3Q7XG59O1xuXG5leHBvcnQgY29uc3QgemVyb3MgPSAoc2l6ZTogW251bWJlciwgbnVtYmVyXSk6IG51bWJlcltdW10gPT5cbiAgbmV3IEFycmF5KHNpemVbMF0pLmZpbGwoMCkubWFwKCgpID0+IG5ldyBBcnJheShzaXplWzFdKS5maWxsKDApKTtcblxuZXhwb3J0IGNvbnN0IGVtcHR5ID0gKHNpemU6IFtudW1iZXIsIG51bWJlcl0pOiBzdHJpbmdbXVtdID0+XG4gIG5ldyBBcnJheShzaXplWzBdKS5maWxsKCcnKS5tYXAoKCkgPT4gbmV3IEFycmF5KHNpemVbMV0pLmZpbGwoJycpKTtcblxuZXhwb3J0IGNvbnN0IGNhbGNNb3N0ID0gKG1hdDogbnVtYmVyW11bXSwgYm9hcmRTaXplID0gMTkpID0+IHtcbiAgbGV0IGxlZnRNb3N0OiBudW1iZXIgPSBib2FyZFNpemUgLSAxO1xuICBsZXQgcmlnaHRNb3N0ID0gMDtcbiAgbGV0IHRvcE1vc3Q6IG51bWJlciA9IGJvYXJkU2l6ZSAtIDE7XG4gIGxldCBib3R0b21Nb3N0ID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXQubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1hdFtpXS5sZW5ndGg7IGorKykge1xuICAgICAgY29uc3QgdmFsdWUgPSBtYXRbaV1bal07XG4gICAgICBpZiAodmFsdWUgIT09IDApIHtcbiAgICAgICAgaWYgKGxlZnRNb3N0ID4gaSkgbGVmdE1vc3QgPSBpO1xuICAgICAgICBpZiAocmlnaHRNb3N0IDwgaSkgcmlnaHRNb3N0ID0gaTtcbiAgICAgICAgaWYgKHRvcE1vc3QgPiBqKSB0b3BNb3N0ID0gajtcbiAgICAgICAgaWYgKGJvdHRvbU1vc3QgPCBqKSBib3R0b21Nb3N0ID0gajtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtsZWZ0TW9zdCwgcmlnaHRNb3N0LCB0b3BNb3N0LCBib3R0b21Nb3N0fTtcbn07XG5cbmV4cG9ydCBjb25zdCBjYWxjQ2VudGVyID0gKG1hdDogbnVtYmVyW11bXSwgYm9hcmRTaXplID0gMTkpID0+IHtcbiAgY29uc3Qge2xlZnRNb3N0LCByaWdodE1vc3QsIHRvcE1vc3QsIGJvdHRvbU1vc3R9ID0gY2FsY01vc3QobWF0LCBib2FyZFNpemUpO1xuICBjb25zdCB0b3AgPSB0b3BNb3N0IDwgYm9hcmRTaXplIC0gMSAtIGJvdHRvbU1vc3Q7XG4gIGNvbnN0IGxlZnQgPSBsZWZ0TW9zdCA8IGJvYXJkU2l6ZSAtIDEgLSByaWdodE1vc3Q7XG4gIGlmICh0b3AgJiYgbGVmdCkgcmV0dXJuIENlbnRlci5Ub3BMZWZ0O1xuICBpZiAoIXRvcCAmJiBsZWZ0KSByZXR1cm4gQ2VudGVyLkJvdHRvbUxlZnQ7XG4gIGlmICh0b3AgJiYgIWxlZnQpIHJldHVybiBDZW50ZXIuVG9wUmlnaHQ7XG4gIGlmICghdG9wICYmICFsZWZ0KSByZXR1cm4gQ2VudGVyLkJvdHRvbVJpZ2h0O1xuICByZXR1cm4gQ2VudGVyLkNlbnRlcjtcbn07XG5cbmV4cG9ydCBjb25zdCBjYWxjQm9hcmRTaXplID0gKFxuICBtYXQ6IG51bWJlcltdW10sXG4gIGJvYXJkU2l6ZSA9IDE5LFxuICBleHRlbnQgPSAyXG4pOiBudW1iZXJbXSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IFsxOSwgMTldO1xuICBjb25zdCBjZW50ZXIgPSBjYWxjQ2VudGVyKG1hdCk7XG4gIGNvbnN0IHtsZWZ0TW9zdCwgcmlnaHRNb3N0LCB0b3BNb3N0LCBib3R0b21Nb3N0fSA9IGNhbGNNb3N0KG1hdCwgYm9hcmRTaXplKTtcbiAgaWYgKGNlbnRlciA9PT0gQ2VudGVyLlRvcExlZnQpIHtcbiAgICByZXN1bHRbMF0gPSByaWdodE1vc3QgKyBleHRlbnQgKyAxO1xuICAgIHJlc3VsdFsxXSA9IGJvdHRvbU1vc3QgKyBleHRlbnQgKyAxO1xuICB9XG4gIGlmIChjZW50ZXIgPT09IENlbnRlci5Ub3BSaWdodCkge1xuICAgIHJlc3VsdFswXSA9IGJvYXJkU2l6ZSAtIGxlZnRNb3N0ICsgZXh0ZW50O1xuICAgIHJlc3VsdFsxXSA9IGJvdHRvbU1vc3QgKyBleHRlbnQgKyAxO1xuICB9XG4gIGlmIChjZW50ZXIgPT09IENlbnRlci5Cb3R0b21MZWZ0KSB7XG4gICAgcmVzdWx0WzBdID0gcmlnaHRNb3N0ICsgZXh0ZW50ICsgMTtcbiAgICByZXN1bHRbMV0gPSBib2FyZFNpemUgLSB0b3BNb3N0ICsgZXh0ZW50O1xuICB9XG4gIGlmIChjZW50ZXIgPT09IENlbnRlci5Cb3R0b21SaWdodCkge1xuICAgIHJlc3VsdFswXSA9IGJvYXJkU2l6ZSAtIGxlZnRNb3N0ICsgZXh0ZW50O1xuICAgIHJlc3VsdFsxXSA9IGJvYXJkU2l6ZSAtIHRvcE1vc3QgKyBleHRlbnQ7XG4gIH1cbiAgcmVzdWx0WzBdID0gTWF0aC5taW4ocmVzdWx0WzBdLCBib2FyZFNpemUpO1xuICByZXN1bHRbMV0gPSBNYXRoLm1pbihyZXN1bHRbMV0sIGJvYXJkU2l6ZSk7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBjYWxjUGFydGlhbEFyZWEgPSAoXG4gIG1hdDogbnVtYmVyW11bXSxcbiAgZXh0ZW50ID0gMixcbiAgYm9hcmRTaXplID0gMTlcbik6IFtbbnVtYmVyLCBudW1iZXJdLCBbbnVtYmVyLCBudW1iZXJdXSA9PiB7XG4gIGNvbnN0IHtsZWZ0TW9zdCwgcmlnaHRNb3N0LCB0b3BNb3N0LCBib3R0b21Nb3N0fSA9IGNhbGNNb3N0KG1hdCk7XG5cbiAgY29uc3Qgc2l6ZSA9IGJvYXJkU2l6ZSAtIDE7XG4gIGNvbnN0IHgxID0gbGVmdE1vc3QgLSBleHRlbnQgPCAwID8gMCA6IGxlZnRNb3N0IC0gZXh0ZW50O1xuICBjb25zdCB5MSA9IHRvcE1vc3QgLSBleHRlbnQgPCAwID8gMCA6IHRvcE1vc3QgLSBleHRlbnQ7XG4gIGNvbnN0IHgyID0gcmlnaHRNb3N0ICsgZXh0ZW50ID4gc2l6ZSA/IHNpemUgOiByaWdodE1vc3QgKyBleHRlbnQ7XG4gIGNvbnN0IHkyID0gYm90dG9tTW9zdCArIGV4dGVudCA+IHNpemUgPyBzaXplIDogYm90dG9tTW9zdCArIGV4dGVudDtcblxuICByZXR1cm4gW1xuICAgIFt4MSwgeTFdLFxuICAgIFt4MiwgeTJdLFxuICBdO1xufTtcblxuZXhwb3J0IGNvbnN0IGNhbGNBdm9pZE1vdmVzRm9yUGFydGlhbEFuYWx5c2lzID0gKFxuICBwYXJ0aWFsQXJlYTogW1tudW1iZXIsIG51bWJlcl0sIFtudW1iZXIsIG51bWJlcl1dLFxuICBib2FyZFNpemUgPSAxOVxuKSA9PiB7XG4gIGNvbnN0IHJlc3VsdDogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdCBbW3gxLCB5MV0sIFt4MiwgeTJdXSA9IHBhcnRpYWxBcmVhO1xuXG4gIGZvciAoY29uc3QgY29sIG9mIEExX0xFVFRFUlMuc2xpY2UoMCwgYm9hcmRTaXplKSkge1xuICAgIGZvciAoY29uc3Qgcm93IG9mIEExX05VTUJFUlMuc2xpY2UoLWJvYXJkU2l6ZSkpIHtcbiAgICAgIGNvbnN0IHggPSBBMV9MRVRURVJTLmluZGV4T2YoY29sKTtcbiAgICAgIGNvbnN0IHkgPSBBMV9OVU1CRVJTLmluZGV4T2Yocm93KTtcblxuICAgICAgaWYgKHggPCB4MSB8fCB4ID4geDIgfHwgeSA8IHkxIHx8IHkgPiB5Mikge1xuICAgICAgICByZXN1bHQucHVzaChgJHtjb2x9JHtyb3d9YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBjb25zdCBjYWxjVHN1bWVnb0ZyYW1lID0gKFxuICBtYXQ6IG51bWJlcltdW10sXG4gIGV4dGVudDogbnVtYmVyLFxuICBib2FyZFNpemUgPSAxOSxcbiAga29taSA9IDcuNSxcbiAgdHVybjogS2kgPSBLaS5CbGFjayxcbiAga28gPSBmYWxzZVxuKTogbnVtYmVyW11bXSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IGNsb25lRGVlcChtYXQpO1xuICBjb25zdCBwYXJ0aWFsQXJlYSA9IGNhbGNQYXJ0aWFsQXJlYShtYXQsIGV4dGVudCwgYm9hcmRTaXplKTtcbiAgY29uc3QgY2VudGVyID0gY2FsY0NlbnRlcihtYXQpO1xuICBjb25zdCBwdXRCb3JkZXIgPSAobWF0OiBudW1iZXJbXVtdKSA9PiB7XG4gICAgY29uc3QgW3gxLCB5MV0gPSBwYXJ0aWFsQXJlYVswXTtcbiAgICBjb25zdCBbeDIsIHkyXSA9IHBhcnRpYWxBcmVhWzFdO1xuICAgIGZvciAobGV0IGkgPSB4MTsgaSA8PSB4MjsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0geTE7IGogPD0geTI7IGorKykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgY2VudGVyID09PSBDZW50ZXIuVG9wTGVmdCAmJlxuICAgICAgICAgICgoaSA9PT0geDIgJiYgaSA8IGJvYXJkU2l6ZSAtIDEpIHx8XG4gICAgICAgICAgICAoaiA9PT0geTIgJiYgaiA8IGJvYXJkU2l6ZSAtIDEpIHx8XG4gICAgICAgICAgICAoaSA9PT0geDEgJiYgaSA+IDApIHx8XG4gICAgICAgICAgICAoaiA9PT0geTEgJiYgaiA+IDApKVxuICAgICAgICApIHtcbiAgICAgICAgICBtYXRbaV1bal0gPSB0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNlbnRlciA9PT0gQ2VudGVyLlRvcFJpZ2h0ICYmXG4gICAgICAgICAgKChpID09PSB4MSAmJiBpID4gMCkgfHxcbiAgICAgICAgICAgIChqID09PSB5MiAmJiBqIDwgYm9hcmRTaXplIC0gMSkgfHxcbiAgICAgICAgICAgIChpID09PSB4MiAmJiBpIDwgYm9hcmRTaXplIC0gMSkgfHxcbiAgICAgICAgICAgIChqID09PSB5MSAmJiBqID4gMCkpXG4gICAgICAgICkge1xuICAgICAgICAgIG1hdFtpXVtqXSA9IHR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgY2VudGVyID09PSBDZW50ZXIuQm90dG9tTGVmdCAmJlxuICAgICAgICAgICgoaSA9PT0geDIgJiYgaSA8IGJvYXJkU2l6ZSAtIDEpIHx8XG4gICAgICAgICAgICAoaiA9PT0geTEgJiYgaiA+IDApIHx8XG4gICAgICAgICAgICAoaSA9PT0geDEgJiYgaSA+IDApIHx8XG4gICAgICAgICAgICAoaiA9PT0geTIgJiYgaiA8IGJvYXJkU2l6ZSAtIDEpKVxuICAgICAgICApIHtcbiAgICAgICAgICBtYXRbaV1bal0gPSB0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNlbnRlciA9PT0gQ2VudGVyLkJvdHRvbVJpZ2h0ICYmXG4gICAgICAgICAgKChpID09PSB4MSAmJiBpID4gMCkgfHxcbiAgICAgICAgICAgIChqID09PSB5MSAmJiBqID4gMCkgfHxcbiAgICAgICAgICAgIChpID09PSB4MiAmJiBpIDwgYm9hcmRTaXplIC0gMSkgfHxcbiAgICAgICAgICAgIChqID09PSB5MiAmJiBqIDwgYm9hcmRTaXplIC0gMSkpXG4gICAgICAgICkge1xuICAgICAgICAgIG1hdFtpXVtqXSA9IHR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoY2VudGVyID09PSBDZW50ZXIuQ2VudGVyKSB7XG4gICAgICAgICAgbWF0W2ldW2pdID0gdHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3QgcHV0T3V0c2lkZSA9IChtYXQ6IG51bWJlcltdW10pID0+IHtcbiAgICBjb25zdCBvZmZlbmNlVG9XaW4gPSAxMDtcbiAgICBjb25zdCBvZmZlbnNlS29taSA9IHR1cm4gKiBrb21pO1xuICAgIGNvbnN0IFt4MSwgeTFdID0gcGFydGlhbEFyZWFbMF07XG4gICAgY29uc3QgW3gyLCB5Ml0gPSBwYXJ0aWFsQXJlYVsxXTtcbiAgICAvLyBUT0RPOiBIYXJkIGNvZGUgZm9yIG5vd1xuICAgIC8vIGNvbnN0IGJsYWNrVG9BdHRhY2sgPSB0dXJuID09PSBLaS5CbGFjaztcbiAgICBjb25zdCBibGFja1RvQXR0YWNrID0gdHVybiA9PT0gS2kuQmxhY2s7XG4gICAgY29uc3QgaXNpemUgPSB4MiAtIHgxO1xuICAgIGNvbnN0IGpzaXplID0geTIgLSB5MTtcbiAgICAvLyBUT0RPOiAzNjEgaXMgaGFyZGNvZGVkXG4gICAgLy8gY29uc3QgZGVmZW5zZUFyZWEgPSBNYXRoLmZsb29yKFxuICAgIC8vICAgKDM2MSAtIGlzaXplICoganNpemUgLSBvZmZlbnNlS29taSAtIG9mZmVuY2VUb1dpbikgLyAyXG4gICAgLy8gKTtcbiAgICBjb25zdCBkZWZlbnNlQXJlYSA9XG4gICAgICBNYXRoLmZsb29yKCgzNjEgLSBpc2l6ZSAqIGpzaXplKSAvIDIpIC0gb2ZmZW5zZUtvbWkgLSBvZmZlbmNlVG9XaW47XG5cbiAgICAvLyBjb25zdCBkZWZlbnNlQXJlYSA9IDMwO1xuXG4gICAgLy8gb3V0c2lkZSB0aGUgZnJhbWVcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9hcmRTaXplOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYm9hcmRTaXplOyBqKyspIHtcbiAgICAgICAgaWYgKGkgPCB4MSB8fCBpID4geDIgfHwgaiA8IHkxIHx8IGogPiB5Mikge1xuICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgbGV0IGtpID0gS2kuRW1wdHk7XG4gICAgICAgICAgaWYgKGNlbnRlciA9PT0gQ2VudGVyLlRvcExlZnQgfHwgY2VudGVyID09PSBDZW50ZXIuQm90dG9tTGVmdCkge1xuICAgICAgICAgICAga2kgPSBibGFja1RvQXR0YWNrICE9PSBjb3VudCA8PSBkZWZlbnNlQXJlYSA/IEtpLldoaXRlIDogS2kuQmxhY2s7XG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGNlbnRlciA9PT0gQ2VudGVyLlRvcFJpZ2h0IHx8XG4gICAgICAgICAgICBjZW50ZXIgPT09IENlbnRlci5Cb3R0b21SaWdodFxuICAgICAgICAgICkge1xuICAgICAgICAgICAga2kgPSBibGFja1RvQXR0YWNrICE9PSBjb3VudCA8PSBkZWZlbnNlQXJlYSA/IEtpLkJsYWNrIDogS2kuV2hpdGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgoaSArIGopICUgMiA9PT0gMCAmJiBNYXRoLmFicyhjb3VudCAtIGRlZmVuc2VBcmVhKSA+IGJvYXJkU2l6ZSkge1xuICAgICAgICAgICAga2kgPSBLaS5FbXB0eTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtYXRbaV1bal0gPSBraTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgLy8gVE9ETzpcbiAgY29uc3QgcHV0S29UaHJlYXQgPSAobWF0OiBudW1iZXJbXVtdLCBrbzogYm9vbGVhbikgPT4ge307XG5cbiAgcHV0Qm9yZGVyKHJlc3VsdCk7XG4gIHB1dE91dHNpZGUocmVzdWx0KTtcblxuICAvLyBjb25zdCBmbGlwU3BlYyA9XG4gIC8vICAgaW1pbiA8IGptaW5cbiAgLy8gICAgID8gW2ZhbHNlLCBmYWxzZSwgdHJ1ZV1cbiAgLy8gICAgIDogW25lZWRGbGlwKGltaW4sIGltYXgsIGlzaXplKSwgbmVlZEZsaXAoam1pbiwgam1heCwganNpemUpLCBmYWxzZV07XG5cbiAgLy8gaWYgKGZsaXBTcGVjLmluY2x1ZGVzKHRydWUpKSB7XG4gIC8vICAgY29uc3QgZmxpcHBlZCA9IGZsaXBTdG9uZXMoc3RvbmVzLCBmbGlwU3BlYyk7XG4gIC8vICAgY29uc3QgZmlsbGVkID0gdHN1bWVnb0ZyYW1lU3RvbmVzKGZsaXBwZWQsIGtvbWksIGJsYWNrVG9QbGF5LCBrbywgbWFyZ2luKTtcbiAgLy8gICByZXR1cm4gZmxpcFN0b25lcyhmaWxsZWQsIGZsaXBTcGVjKTtcbiAgLy8gfVxuXG4gIC8vIGNvbnN0IGkwID0gaW1pbiAtIG1hcmdpbjtcbiAgLy8gY29uc3QgaTEgPSBpbWF4ICsgbWFyZ2luO1xuICAvLyBjb25zdCBqMCA9IGptaW4gLSBtYXJnaW47XG4gIC8vIGNvbnN0IGoxID0gam1heCArIG1hcmdpbjtcbiAgLy8gY29uc3QgZnJhbWVSYW5nZTogUmVnaW9uID0gW2kwLCBpMSwgajAsIGoxXTtcbiAgLy8gY29uc3QgYmxhY2tUb0F0dGFjayA9IGd1ZXNzQmxhY2tUb0F0dGFjayhcbiAgLy8gICBbdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0XSxcbiAgLy8gICBbaXNpemUsIGpzaXplXVxuICAvLyApO1xuXG4gIC8vIHB1dEJvcmRlcihtYXQsIFtpc2l6ZSwganNpemVdLCBmcmFtZVJhbmdlLCBibGFja1RvQXR0YWNrKTtcbiAgLy8gcHV0T3V0c2lkZShcbiAgLy8gICBzdG9uZXMsXG4gIC8vICAgW2lzaXplLCBqc2l6ZV0sXG4gIC8vICAgZnJhbWVSYW5nZSxcbiAgLy8gICBibGFja1RvQXR0YWNrLFxuICAvLyAgIGJsYWNrVG9QbGF5LFxuICAvLyAgIGtvbWlcbiAgLy8gKTtcbiAgLy8gcHV0S29UaHJlYXQoXG4gIC8vICAgc3RvbmVzLFxuICAvLyAgIFtpc2l6ZSwganNpemVdLFxuICAvLyAgIGZyYW1lUmFuZ2UsXG4gIC8vICAgYmxhY2tUb0F0dGFjayxcbiAgLy8gICBibGFja1RvUGxheSxcbiAgLy8gICBrb1xuICAvLyApO1xuICAvLyByZXR1cm4gc3RvbmVzO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgY29uc3QgY2FsY09mZnNldCA9IChtYXQ6IG51bWJlcltdW10pID0+IHtcbiAgY29uc3QgYm9hcmRTaXplID0gY2FsY0JvYXJkU2l6ZShtYXQpO1xuICBjb25zdCBveCA9IDE5IC0gYm9hcmRTaXplWzBdO1xuICBjb25zdCBveSA9IDE5IC0gYm9hcmRTaXplWzFdO1xuICBjb25zdCBjZW50ZXIgPSBjYWxjQ2VudGVyKG1hdCk7XG5cbiAgbGV0IG9veCA9IG94O1xuICBsZXQgb295ID0gb3k7XG4gIHN3aXRjaCAoY2VudGVyKSB7XG4gICAgY2FzZSBDZW50ZXIuVG9wTGVmdDoge1xuICAgICAgb294ID0gMDtcbiAgICAgIG9veSA9IG95O1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgQ2VudGVyLlRvcFJpZ2h0OiB7XG4gICAgICBvb3ggPSAtb3g7XG4gICAgICBvb3kgPSBveTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIENlbnRlci5Cb3R0b21MZWZ0OiB7XG4gICAgICBvb3ggPSAwO1xuICAgICAgb295ID0gMDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjYXNlIENlbnRlci5Cb3R0b21SaWdodDoge1xuICAgICAgb294ID0gLW94O1xuICAgICAgb295ID0gMDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge3g6IG9veCwgeTogb295fTtcbn07XG5cbmV4cG9ydCBjb25zdCByZXZlcnNlT2Zmc2V0ID0gKFxuICBtYXQ6IG51bWJlcltdW10sXG4gIGJ4ID0gMTksXG4gIGJ5ID0gMTksXG4gIGJvYXJkU2l6ZSA9IDE5XG4pID0+IHtcbiAgY29uc3Qgb3ggPSBib2FyZFNpemUgLSBieDtcbiAgY29uc3Qgb3kgPSBib2FyZFNpemUgLSBieTtcbiAgY29uc3QgY2VudGVyID0gY2FsY0NlbnRlcihtYXQpO1xuXG4gIGxldCBvb3ggPSBveDtcbiAgbGV0IG9veSA9IG95O1xuICBzd2l0Y2ggKGNlbnRlcikge1xuICAgIGNhc2UgQ2VudGVyLlRvcExlZnQ6IHtcbiAgICAgIG9veCA9IDA7XG4gICAgICBvb3kgPSAtb3k7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBDZW50ZXIuVG9wUmlnaHQ6IHtcbiAgICAgIG9veCA9IG94O1xuICAgICAgb295ID0gLW95O1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgQ2VudGVyLkJvdHRvbUxlZnQ6IHtcbiAgICAgIG9veCA9IDA7XG4gICAgICBvb3kgPSAwO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgQ2VudGVyLkJvdHRvbVJpZ2h0OiB7XG4gICAgICBvb3ggPSBveDtcbiAgICAgIG9veSA9IDA7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHt4OiBvb3gsIHk6IG9veX07XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gY2FsY1Zpc2libGVBcmVhKFxuICBtYXQ6IG51bWJlcltdW10gPSB6ZXJvcyhbMTksIDE5XSksXG4gIGV4dGVudDogbnVtYmVyLFxuICBhbGxvd1JlY3RhbmdsZSA9IGZhbHNlXG4pOiBudW1iZXJbXVtdIHtcbiAgbGV0IG1pblJvdyA9IG1hdC5sZW5ndGg7XG4gIGxldCBtYXhSb3cgPSAwO1xuICBsZXQgbWluQ29sID0gbWF0WzBdLmxlbmd0aDtcbiAgbGV0IG1heENvbCA9IDA7XG5cbiAgbGV0IGVtcHR5ID0gdHJ1ZTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdC5sZW5ndGg7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0WzBdLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAobWF0W2ldW2pdICE9PSAwKSB7XG4gICAgICAgIGVtcHR5ID0gZmFsc2U7XG4gICAgICAgIG1pblJvdyA9IE1hdGgubWluKG1pblJvdywgaSk7XG4gICAgICAgIG1heFJvdyA9IE1hdGgubWF4KG1heFJvdywgaSk7XG4gICAgICAgIG1pbkNvbCA9IE1hdGgubWluKG1pbkNvbCwgaik7XG4gICAgICAgIG1heENvbCA9IE1hdGgubWF4KG1heENvbCwgaik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGVtcHR5KSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIFswLCBtYXQubGVuZ3RoIC0gMV0sXG4gICAgICBbMCwgbWF0WzBdLmxlbmd0aCAtIDFdLFxuICAgIF07XG4gIH1cblxuICBpZiAoIWFsbG93UmVjdGFuZ2xlKSB7XG4gICAgY29uc3QgbWluUm93V2l0aEV4dGVudCA9IE1hdGgubWF4KG1pblJvdyAtIGV4dGVudCwgMCk7XG4gICAgY29uc3QgbWF4Um93V2l0aEV4dGVudCA9IE1hdGgubWluKG1heFJvdyArIGV4dGVudCwgbWF0Lmxlbmd0aCAtIDEpO1xuICAgIGNvbnN0IG1pbkNvbFdpdGhFeHRlbnQgPSBNYXRoLm1heChtaW5Db2wgLSBleHRlbnQsIDApO1xuICAgIGNvbnN0IG1heENvbFdpdGhFeHRlbnQgPSBNYXRoLm1pbihtYXhDb2wgKyBleHRlbnQsIG1hdFswXS5sZW5ndGggLSAxKTtcblxuICAgIGNvbnN0IG1heFJhbmdlID0gTWF0aC5tYXgoXG4gICAgICBtYXhSb3dXaXRoRXh0ZW50IC0gbWluUm93V2l0aEV4dGVudCxcbiAgICAgIG1heENvbFdpdGhFeHRlbnQgLSBtaW5Db2xXaXRoRXh0ZW50XG4gICAgKTtcblxuICAgIG1pblJvdyA9IG1pblJvd1dpdGhFeHRlbnQ7XG4gICAgbWF4Um93ID0gbWluUm93ICsgbWF4UmFuZ2U7XG5cbiAgICBpZiAobWF4Um93ID49IG1hdC5sZW5ndGgpIHtcbiAgICAgIG1heFJvdyA9IG1hdC5sZW5ndGggLSAxO1xuICAgICAgbWluUm93ID0gbWF4Um93IC0gbWF4UmFuZ2U7XG4gICAgfVxuXG4gICAgbWluQ29sID0gbWluQ29sV2l0aEV4dGVudDtcbiAgICBtYXhDb2wgPSBtaW5Db2wgKyBtYXhSYW5nZTtcbiAgICBpZiAobWF4Q29sID49IG1hdFswXS5sZW5ndGgpIHtcbiAgICAgIG1heENvbCA9IG1hdFswXS5sZW5ndGggLSAxO1xuICAgICAgbWluQ29sID0gbWF4Q29sIC0gbWF4UmFuZ2U7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1pblJvdyA9IE1hdGgubWF4KDAsIG1pblJvdyAtIGV4dGVudCk7XG4gICAgbWF4Um93ID0gTWF0aC5taW4obWF0Lmxlbmd0aCAtIDEsIG1heFJvdyArIGV4dGVudCk7XG4gICAgbWluQ29sID0gTWF0aC5tYXgoMCwgbWluQ29sIC0gZXh0ZW50KTtcbiAgICBtYXhDb2wgPSBNYXRoLm1pbihtYXRbMF0ubGVuZ3RoIC0gMSwgbWF4Q29sICsgZXh0ZW50KTtcbiAgfVxuXG4gIHJldHVybiBbXG4gICAgW21pblJvdywgbWF4Um93XSxcbiAgICBbbWluQ29sLCBtYXhDb2xdLFxuICBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZShtYXQ6IG51bWJlcltdW10sIGk6IG51bWJlciwgajogbnVtYmVyLCBraTogbnVtYmVyKSB7XG4gIGlmIChpIDwgMCB8fCBqIDwgMCkgcmV0dXJuIG1hdDtcbiAgY29uc3QgbmV3TWF0ID0gY2xvbmVEZWVwKG1hdCk7XG4gIG5ld01hdFtpXVtqXSA9IGtpO1xuICByZXR1cm4gZXhlY0NhcHR1cmUobmV3TWF0LCBpLCBqLCAta2kpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvd0tpKG1hdDogbnVtYmVyW11bXSwgc3RlcHM6IHN0cmluZ1tdLCBpc0NhcHR1cmVkID0gdHJ1ZSkge1xuICBsZXQgbmV3TWF0ID0gY2xvbmVEZWVwKG1hdCk7XG4gIGxldCBoYXNNb3ZlZCA9IGZhbHNlO1xuICBzdGVwcy5mb3JFYWNoKHN0ciA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgeCxcbiAgICAgIHksXG4gICAgICBraSxcbiAgICB9OiB7XG4gICAgICB4OiBudW1iZXI7XG4gICAgICB5OiBudW1iZXI7XG4gICAgICBraTogbnVtYmVyO1xuICAgIH0gPSBzZ2ZUb1BvcyhzdHIpO1xuICAgIGlmIChpc0NhcHR1cmVkKSB7XG4gICAgICBpZiAoY2FuTW92ZShuZXdNYXQsIHgsIHksIGtpKSkge1xuICAgICAgICBuZXdNYXRbeF1beV0gPSBraTtcbiAgICAgICAgbmV3TWF0ID0gZXhlY0NhcHR1cmUobmV3TWF0LCB4LCB5LCAta2kpO1xuICAgICAgICBoYXNNb3ZlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld01hdFt4XVt5XSA9IGtpO1xuICAgICAgaGFzTW92ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBhcnJhbmdlbWVudDogbmV3TWF0LFxuICAgIGhhc01vdmVkLFxuICB9O1xufVxuXG4vLyBUT0RPOlxuZXhwb3J0IGNvbnN0IGhhbmRsZU1vdmUgPSAoXG4gIG1hdDogbnVtYmVyW11bXSxcbiAgaTogbnVtYmVyLFxuICBqOiBudW1iZXIsXG4gIHR1cm46IEtpLFxuICBjdXJyZW50Tm9kZTogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4sXG4gIG9uQWZ0ZXJNb3ZlOiAobm9kZTogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4sIGlzTW92ZWQ6IGJvb2xlYW4pID0+IHZvaWRcbikgPT4ge1xuICBpZiAodHVybiA9PT0gS2kuRW1wdHkpIHJldHVybjtcbiAgaWYgKGNhbk1vdmUobWF0LCBpLCBqLCB0dXJuKSkge1xuICAgIC8vIGRpc3BhdGNoKHVpU2xpY2UuYWN0aW9ucy5zZXRUdXJuKC10dXJuKSk7XG4gICAgY29uc3QgdmFsdWUgPSBTR0ZfTEVUVEVSU1tpXSArIFNHRl9MRVRURVJTW2pdO1xuICAgIGNvbnN0IHRva2VuID0gdHVybiA9PT0gS2kuQmxhY2sgPyAnQicgOiAnVyc7XG4gICAgY29uc3Qgc2hhID0gY2FsY1NIQShjdXJyZW50Tm9kZSwgW01vdmVQcm9wLmZyb20oYCR7dG9rZW59WyR7dmFsdWV9XWApXSk7XG4gICAgY29uc3QgZmlsdGVyZWQgPSBjdXJyZW50Tm9kZS5jaGlsZHJlbi5maWx0ZXIoXG4gICAgICAobjogYW55KSA9PiBuLm1vZGVsLmlkID09PSBzaGFcbiAgICApO1xuICAgIGxldCBub2RlO1xuICAgIGlmIChmaWx0ZXJlZC5sZW5ndGggPiAwKSB7XG4gICAgICBub2RlID0gZmlsdGVyZWRbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUgPSBidWlsZE1vdmVOb2RlKGAke3Rva2VufVske3ZhbHVlfV1gLCBjdXJyZW50Tm9kZSk7XG4gICAgICBjdXJyZW50Tm9kZS5hZGRDaGlsZChub2RlKTtcbiAgICB9XG4gICAgaWYgKG9uQWZ0ZXJNb3ZlKSBvbkFmdGVyTW92ZShub2RlLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAob25BZnRlck1vdmUpIG9uQWZ0ZXJNb3ZlKGN1cnJlbnROb2RlLCBmYWxzZSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYXIgc3RvbmUgZnJvbSB0aGUgY3VycmVudE5vZGVcbiAqIEBwYXJhbSBjdXJyZW50Tm9kZVxuICogQHBhcmFtIHZhbHVlXG4gKi9cbmV4cG9ydCBjb25zdCBjbGVhclN0b25lRnJvbUN1cnJlbnROb2RlID0gKFxuICBjdXJyZW50Tm9kZTogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4sXG4gIHZhbHVlOiBzdHJpbmdcbikgPT4ge1xuICBjb25zdCBwYXRoID0gY3VycmVudE5vZGUuZ2V0UGF0aCgpO1xuICBwYXRoLmZvckVhY2gobm9kZSA9PiB7XG4gICAgY29uc3Qge3NldHVwUHJvcHN9ID0gbm9kZS5tb2RlbDtcbiAgICBpZiAoc2V0dXBQcm9wcy5maWx0ZXIoKHM6IFNldHVwUHJvcCkgPT4gcy52YWx1ZSA9PT0gdmFsdWUpLmxlbmd0aCA+IDApIHtcbiAgICAgIG5vZGUubW9kZWwuc2V0dXBQcm9wcyA9IHNldHVwUHJvcHMuZmlsdGVyKChzOiBhbnkpID0+IHMudmFsdWUgIT09IHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0dXBQcm9wcy5mb3JFYWNoKChzOiBTZXR1cFByb3ApID0+IHtcbiAgICAgICAgcy52YWx1ZXMgPSBzLnZhbHVlcy5maWx0ZXIodiA9PiB2ICE9PSB2YWx1ZSk7XG4gICAgICAgIGlmIChzLnZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBub2RlLm1vZGVsLnNldHVwUHJvcHMgPSBub2RlLm1vZGVsLnNldHVwUHJvcHMuZmlsdGVyKFxuICAgICAgICAgICAgKHA6IFNldHVwUHJvcCkgPT4gcC50b2tlbiAhPT0gcy50b2tlblxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuXG4vKipcbiAqIEFkZHMgYSBzdG9uZSB0byB0aGUgY3VycmVudCBub2RlIGluIHRoZSB0cmVlLlxuICpcbiAqIEBwYXJhbSBjdXJyZW50Tm9kZSBUaGUgY3VycmVudCBub2RlIGluIHRoZSB0cmVlLlxuICogQHBhcmFtIG1hdCBUaGUgbWF0cml4IHJlcHJlc2VudGluZyB0aGUgYm9hcmQuXG4gKiBAcGFyYW0gaSBUaGUgcm93IGluZGV4IG9mIHRoZSBzdG9uZS5cbiAqIEBwYXJhbSBqIFRoZSBjb2x1bW4gaW5kZXggb2YgdGhlIHN0b25lLlxuICogQHBhcmFtIGtpIFRoZSBjb2xvciBvZiB0aGUgc3RvbmUgKEtpLldoaXRlIG9yIEtpLkJsYWNrKS5cbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHN0b25lIHdhcyByZW1vdmVkIGZyb20gcHJldmlvdXMgbm9kZXMsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGFkZFN0b25lVG9DdXJyZW50Tm9kZSA9IChcbiAgY3VycmVudE5vZGU6IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+LFxuICBtYXQ6IG51bWJlcltdW10sXG4gIGk6IG51bWJlcixcbiAgajogbnVtYmVyLFxuICBraTogS2lcbikgPT4ge1xuICBjb25zdCB2YWx1ZSA9IFNHRl9MRVRURVJTW2ldICsgU0dGX0xFVFRFUlNbal07XG4gIGNvbnN0IHRva2VuID0ga2kgPT09IEtpLldoaXRlID8gJ0FXJyA6ICdBQic7XG4gIGNvbnN0IHByb3AgPSBmaW5kUHJvcChjdXJyZW50Tm9kZSwgdG9rZW4pO1xuICBsZXQgcmVzdWx0ID0gZmFsc2U7XG4gIGlmIChtYXRbaV1bal0gIT09IEtpLkVtcHR5KSB7XG4gICAgY2xlYXJTdG9uZUZyb21DdXJyZW50Tm9kZShjdXJyZW50Tm9kZSwgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIGlmIChwcm9wKSB7XG4gICAgICBwcm9wLnZhbHVlcyA9IFsuLi5wcm9wLnZhbHVlcywgdmFsdWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Tm9kZS5tb2RlbC5zZXR1cFByb3BzID0gW1xuICAgICAgICAuLi5jdXJyZW50Tm9kZS5tb2RlbC5zZXR1cFByb3BzLFxuICAgICAgICBuZXcgU2V0dXBQcm9wKHRva2VuLCB2YWx1ZSksXG4gICAgICBdO1xuICAgIH1cbiAgICByZXN1bHQgPSB0cnVlO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIEFkZHMgYSBtb3ZlIHRvIHRoZSBnaXZlbiBtYXRyaXggYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgbm9kZSBpbiB0aGUgdHJlZS5cbiAqIElmIHRoZSBraSBpcyBlbXB0eSwgbm8gbW92ZSBpcyBhZGRlZCBhbmQgbnVsbCBpcyByZXR1cm5lZC5cbiAqXG4gKiBAcGFyYW0gbWF0IC0gVGhlIG1hdHJpeCByZXByZXNlbnRpbmcgdGhlIGdhbWUgYm9hcmQuXG4gKiBAcGFyYW0gY3VycmVudE5vZGUgLSBUaGUgY3VycmVudCBub2RlIGluIHRoZSB0cmVlLlxuICogQHBhcmFtIGkgLSBUaGUgcm93IGluZGV4IG9mIHRoZSBtb3ZlLlxuICogQHBhcmFtIGogLSBUaGUgY29sdW1uIGluZGV4IG9mIHRoZSBtb3ZlLlxuICogQHBhcmFtIGtpIC0gVGhlIHR5cGUgb2YgbW92ZSAoS2kpLlxuICogQHJldHVybnMgVGhlIGNvcnJlc3BvbmRpbmcgbm9kZSBpbiB0aGUgdHJlZSwgb3IgbnVsbCBpZiBubyBtb3ZlIGlzIGFkZGVkLlxuICovXG4vLyBUT0RPOiBUaGUgcGFyYW1zIGhlcmUgaXMgd2VpcmRcbmV4cG9ydCBjb25zdCBhZGRNb3ZlVG9DdXJyZW50Tm9kZSA9IChcbiAgY3VycmVudE5vZGU6IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+LFxuICBtYXQ6IG51bWJlcltdW10sXG4gIGk6IG51bWJlcixcbiAgajogbnVtYmVyLFxuICBraTogS2lcbikgPT4ge1xuICBpZiAoa2kgPT09IEtpLkVtcHR5KSByZXR1cm47XG4gIGxldCBub2RlO1xuICBpZiAoY2FuTW92ZShtYXQsIGksIGosIGtpKSkge1xuICAgIGNvbnN0IHZhbHVlID0gU0dGX0xFVFRFUlNbaV0gKyBTR0ZfTEVUVEVSU1tqXTtcbiAgICBjb25zdCB0b2tlbiA9IGtpID09PSBLaS5CbGFjayA/ICdCJyA6ICdXJztcbiAgICBjb25zdCBzaGEgPSBjYWxjU0hBKGN1cnJlbnROb2RlLCBbTW92ZVByb3AuZnJvbShgJHt0b2tlbn1bJHt2YWx1ZX1dYCldKTtcbiAgICBjb25zdCBmaWx0ZXJlZCA9IGN1cnJlbnROb2RlLmNoaWxkcmVuLmZpbHRlcihcbiAgICAgIChuOiBhbnkpID0+IG4ubW9kZWwuaWQgPT09IHNoYVxuICAgICk7XG4gICAgaWYgKGZpbHRlcmVkLmxlbmd0aCA+IDApIHtcbiAgICAgIG5vZGUgPSBmaWx0ZXJlZFswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZSA9IGJ1aWxkTW92ZU5vZGUoYCR7dG9rZW59WyR7dmFsdWV9XWAsIGN1cnJlbnROb2RlKTtcbiAgICAgIGN1cnJlbnROb2RlLmFkZENoaWxkKG5vZGUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbm9kZTtcbn07XG5cbmV4cG9ydCBjb25zdCBjYWxjUHJldmVudE1vdmVNYXRGb3JEaXNwbGF5T25seSA9IChcbiAgbm9kZTogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4sXG4gIGRlZmF1bHRCb2FyZFNpemUgPSAxOVxuKSA9PiB7XG4gIGlmICghbm9kZSkgcmV0dXJuIHplcm9zKFtkZWZhdWx0Qm9hcmRTaXplLCBkZWZhdWx0Qm9hcmRTaXplXSk7XG4gIGNvbnN0IHNpemUgPSBleHRyYWN0Qm9hcmRTaXplKG5vZGUsIGRlZmF1bHRCb2FyZFNpemUpO1xuICBjb25zdCBwcmV2ZW50TW92ZU1hdCA9IHplcm9zKFtzaXplLCBzaXplXSk7XG5cbiAgcHJldmVudE1vdmVNYXQuZm9yRWFjaChyb3cgPT4gcm93LmZpbGwoMSkpO1xuICBpZiAobm9kZS5oYXNDaGlsZHJlbigpKSB7XG4gICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKChuOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPikgPT4ge1xuICAgICAgbi5tb2RlbC5tb3ZlUHJvcHMuZm9yRWFjaCgobTogTW92ZVByb3ApID0+IHtcbiAgICAgICAgY29uc3QgaSA9IFNHRl9MRVRURVJTLmluZGV4T2YobS52YWx1ZVswXSk7XG4gICAgICAgIGNvbnN0IGogPSBTR0ZfTEVUVEVSUy5pbmRleE9mKG0udmFsdWVbMV0pO1xuICAgICAgICBpZiAoaSA+PSAwICYmIGogPj0gMCAmJiBpIDwgc2l6ZSAmJiBqIDwgc2l6ZSkge1xuICAgICAgICAgIHByZXZlbnRNb3ZlTWF0W2ldW2pdID0gMDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHByZXZlbnRNb3ZlTWF0O1xufTtcblxuZXhwb3J0IGNvbnN0IGNhbGNQcmV2ZW50TW92ZU1hdCA9IChcbiAgbm9kZTogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4sXG4gIGRlZmF1bHRCb2FyZFNpemUgPSAxOVxuKSA9PiB7XG4gIGlmICghbm9kZSkgcmV0dXJuIHplcm9zKFtkZWZhdWx0Qm9hcmRTaXplLCBkZWZhdWx0Qm9hcmRTaXplXSk7XG4gIGNvbnN0IHNpemUgPSBleHRyYWN0Qm9hcmRTaXplKG5vZGUsIGRlZmF1bHRCb2FyZFNpemUpO1xuICBjb25zdCBwcmV2ZW50TW92ZU1hdCA9IHplcm9zKFtzaXplLCBzaXplXSk7XG4gIGNvbnN0IGZvcmNlTm9kZXMgPSBbXTtcbiAgbGV0IHByZXZlbnRNb3ZlTm9kZXMgPSBbXTtcbiAgaWYgKG5vZGUuaGFzQ2hpbGRyZW4oKSkge1xuICAgIHByZXZlbnRNb3ZlTm9kZXMgPSBub2RlLmNoaWxkcmVuLmZpbHRlcigobjogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4pID0+XG4gICAgICBpc1ByZXZlbnRNb3ZlTm9kZShuKVxuICAgICk7XG4gIH1cblxuICBpZiAoaXNGb3JjZU5vZGUobm9kZSkpIHtcbiAgICBwcmV2ZW50TW92ZU1hdC5mb3JFYWNoKHJvdyA9PiByb3cuZmlsbCgxKSk7XG4gICAgaWYgKG5vZGUuaGFzQ2hpbGRyZW4oKSkge1xuICAgICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKChuOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPikgPT4ge1xuICAgICAgICBuLm1vZGVsLm1vdmVQcm9wcy5mb3JFYWNoKChtOiBNb3ZlUHJvcCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGkgPSBTR0ZfTEVUVEVSUy5pbmRleE9mKG0udmFsdWVbMF0pO1xuICAgICAgICAgIGNvbnN0IGogPSBTR0ZfTEVUVEVSUy5pbmRleE9mKG0udmFsdWVbMV0pO1xuICAgICAgICAgIGlmIChpID49IDAgJiYgaiA+PSAwICYmIGkgPCBzaXplICYmIGogPCBzaXplKSB7XG4gICAgICAgICAgICBwcmV2ZW50TW92ZU1hdFtpXVtqXSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHByZXZlbnRNb3ZlTm9kZXMuZm9yRWFjaCgobjogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4pID0+IHtcbiAgICAgIG4ubW9kZWwubW92ZVByb3BzLmZvckVhY2goKG06IE1vdmVQcm9wKSA9PiB7XG4gICAgICAgIGNvbnN0IGkgPSBTR0ZfTEVUVEVSUy5pbmRleE9mKG0udmFsdWVbMF0pO1xuICAgICAgICBjb25zdCBqID0gU0dGX0xFVFRFUlMuaW5kZXhPZihtLnZhbHVlWzFdKTtcbiAgICAgICAgaWYgKGkgPj0gMCAmJiBqID49IDAgJiYgaSA8IHNpemUgJiYgaiA8IHNpemUpIHtcbiAgICAgICAgICBwcmV2ZW50TW92ZU1hdFtpXVtqXSA9IDE7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHByZXZlbnRNb3ZlTWF0O1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBtYXJrdXAgbWF0cml4IGZvciB2YXJpYXRpb25zIGluIGEgZ2l2ZW4gU0dGIG5vZGUuXG4gKlxuICogQHBhcmFtIG5vZGUgLSBUaGUgU0dGIG5vZGUgdG8gY2FsY3VsYXRlIHRoZSBtYXJrdXAgZm9yLlxuICogQHBhcmFtIHBvbGljeSAtIFRoZSBwb2xpY3kgZm9yIGhhbmRsaW5nIHRoZSBtYXJrdXAuIERlZmF1bHRzIHRvICdhcHBlbmQnLlxuICogQHJldHVybnMgVGhlIGNhbGN1bGF0ZWQgbWFya3VwIGZvciB0aGUgdmFyaWF0aW9ucy5cbiAqL1xuZXhwb3J0IGNvbnN0IGNhbGNWYXJpYXRpb25zTWFya3VwID0gKFxuICBub2RlOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPixcbiAgcG9saWN5OiAnYXBwZW5kJyB8ICdwcmVwZW5kJyB8ICdyZXBsYWNlJyA9ICdhcHBlbmQnLFxuICBkZWZhdWx0Qm9hcmRTaXplID0gMTlcbikgPT4ge1xuICBjb25zdCByZXMgPSBjYWxjTWF0QW5kTWFya3VwKG5vZGUpO1xuICBjb25zdCB7bWF0LCBtYXJrdXB9ID0gcmVzO1xuICBjb25zdCBzaXplID0gZXh0cmFjdEJvYXJkU2l6ZShub2RlLCBkZWZhdWx0Qm9hcmRTaXplKTtcblxuICBpZiAobm9kZS5oYXNDaGlsZHJlbigpKSB7XG4gICAgbm9kZS5jaGlsZHJlbi5mb3JFYWNoKChuOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPikgPT4ge1xuICAgICAgbi5tb2RlbC5tb3ZlUHJvcHMuZm9yRWFjaCgobTogTW92ZVByb3ApID0+IHtcbiAgICAgICAgY29uc3QgaSA9IFNHRl9MRVRURVJTLmluZGV4T2YobS52YWx1ZVswXSk7XG4gICAgICAgIGNvbnN0IGogPSBTR0ZfTEVUVEVSUy5pbmRleE9mKG0udmFsdWVbMV0pO1xuICAgICAgICBpZiAoaSA8IDAgfHwgaiA8IDApIHJldHVybjtcbiAgICAgICAgaWYgKGkgPCBzaXplICYmIGogPCBzaXplKSB7XG4gICAgICAgICAgbGV0IG1hcmsgPSBNYXJrdXAuTmV1dHJhbE5vZGU7XG4gICAgICAgICAgaWYgKGluV3JvbmdQYXRoKG4pKSBtYXJrID0gTWFya3VwLk5lZ2F0aXZlTm9kZTtcbiAgICAgICAgICBpZiAoaW5SaWdodFBhdGgobikpIG1hcmsgPSBNYXJrdXAuUG9zaXRpdmVOb2RlO1xuICAgICAgICAgIGlmIChtYXRbaV1bal0gPT09IEtpLkVtcHR5KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBvbGljeSkge1xuICAgICAgICAgICAgICBjYXNlICdwcmVwZW5kJzpcbiAgICAgICAgICAgICAgICBtYXJrdXBbaV1bal0gPSBtYXJrICsgJ3wnICsgbWFya3VwW2ldW2pdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdyZXBsYWNlJzpcbiAgICAgICAgICAgICAgICBtYXJrdXBbaV1bal0gPSBtYXJrO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdhcHBlbmQnOlxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIG1hcmt1cFtpXVtqXSArPSAnfCcgKyBtYXJrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbWFya3VwO1xufTtcblxuZXhwb3J0IGNvbnN0IGRldGVjdFNUID0gKG5vZGU6IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+KSA9PiB7XG4gIC8vIFJlZmVyZW5jZTogaHR0cHM6Ly93d3cucmVkLWJlYW4uY29tL3NnZi9wcm9wZXJ0aWVzLmh0bWwjU1RcbiAgY29uc3Qgcm9vdCA9IG5vZGUuZ2V0UGF0aCgpWzBdO1xuICBjb25zdCBzdFByb3AgPSByb290Lm1vZGVsLnJvb3RQcm9wcy5maW5kKChwOiBSb290UHJvcCkgPT4gcC50b2tlbiA9PT0gJ1NUJyk7XG4gIGxldCBzaG93VmFyaWF0aW9uc01hcmt1cCA9IGZhbHNlO1xuICBsZXQgc2hvd0NoaWxkcmVuTWFya3VwID0gZmFsc2U7XG4gIGxldCBzaG93U2libGluZ3NNYXJrdXAgPSBmYWxzZTtcblxuICBjb25zdCBzdCA9IHN0UHJvcD8udmFsdWUgfHwgJzAnO1xuICBpZiAoc3QpIHtcbiAgICBpZiAoc3QgPT09ICcwJykge1xuICAgICAgc2hvd1NpYmxpbmdzTWFya3VwID0gZmFsc2U7XG4gICAgICBzaG93Q2hpbGRyZW5NYXJrdXAgPSB0cnVlO1xuICAgICAgc2hvd1ZhcmlhdGlvbnNNYXJrdXAgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoc3QgPT09ICcxJykge1xuICAgICAgc2hvd1NpYmxpbmdzTWFya3VwID0gdHJ1ZTtcbiAgICAgIHNob3dDaGlsZHJlbk1hcmt1cCA9IGZhbHNlO1xuICAgICAgc2hvd1ZhcmlhdGlvbnNNYXJrdXAgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoc3QgPT09ICcyJykge1xuICAgICAgc2hvd1NpYmxpbmdzTWFya3VwID0gZmFsc2U7XG4gICAgICBzaG93Q2hpbGRyZW5NYXJrdXAgPSB0cnVlO1xuICAgICAgc2hvd1ZhcmlhdGlvbnNNYXJrdXAgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHN0ID09PSAnMycpIHtcbiAgICAgIHNob3dTaWJsaW5nc01hcmt1cCA9IHRydWU7XG4gICAgICBzaG93Q2hpbGRyZW5NYXJrdXAgPSBmYWxzZTtcbiAgICAgIHNob3dWYXJpYXRpb25zTWFya3VwID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB7c2hvd1ZhcmlhdGlvbnNNYXJrdXAsIHNob3dDaGlsZHJlbk1hcmt1cCwgc2hvd1NpYmxpbmdzTWFya3VwfTtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbWF0IGFuZCBtYXJrdXAgYXJyYXlzIGJhc2VkIG9uIHRoZSBjdXJyZW50Tm9kZSBhbmQgZGVmYXVsdEJvYXJkU2l6ZS5cbiAqIEBwYXJhbSBjdXJyZW50Tm9kZSBUaGUgY3VycmVudCBub2RlIGluIHRoZSB0cmVlLlxuICogQHBhcmFtIGRlZmF1bHRCb2FyZFNpemUgVGhlIGRlZmF1bHQgc2l6ZSBvZiB0aGUgYm9hcmQgKG9wdGlvbmFsLCBkZWZhdWx0IGlzIDE5KS5cbiAqIEByZXR1cm5zIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBtYXQvdmlzaWJsZUFyZWFNYXQvbWFya3VwL251bU1hcmt1cCBhcnJheXMuXG4gKi9cbmV4cG9ydCBjb25zdCBjYWxjTWF0QW5kTWFya3VwID0gKFxuICBjdXJyZW50Tm9kZTogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4sXG4gIGRlZmF1bHRCb2FyZFNpemUgPSAxOVxuKSA9PiB7XG4gIGNvbnN0IHBhdGggPSBjdXJyZW50Tm9kZS5nZXRQYXRoKCk7XG4gIGNvbnN0IHJvb3QgPSBwYXRoWzBdO1xuXG4gIGxldCBsaSwgbGo7XG4gIGxldCBzZXR1cENvdW50ID0gMDtcbiAgY29uc3Qgc2l6ZSA9IGV4dHJhY3RCb2FyZFNpemUoY3VycmVudE5vZGUsIGRlZmF1bHRCb2FyZFNpemUpO1xuICBsZXQgbWF0ID0gemVyb3MoW3NpemUsIHNpemVdKTtcbiAgY29uc3QgdmlzaWJsZUFyZWFNYXQgPSB6ZXJvcyhbc2l6ZSwgc2l6ZV0pO1xuICBjb25zdCBtYXJrdXAgPSBlbXB0eShbc2l6ZSwgc2l6ZV0pO1xuICBjb25zdCBudW1NYXJrdXAgPSBlbXB0eShbc2l6ZSwgc2l6ZV0pO1xuXG4gIHBhdGguZm9yRWFjaCgobm9kZSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCB7bW92ZVByb3BzLCBzZXR1cFByb3BzLCByb290UHJvcHN9ID0gbm9kZS5tb2RlbDtcbiAgICBpZiAoc2V0dXBQcm9wcy5sZW5ndGggPiAwKSBzZXR1cENvdW50ICs9IDE7XG5cbiAgICBzZXR1cFByb3BzLmZvckVhY2goKHNldHVwOiBhbnkpID0+IHtcbiAgICAgIHNldHVwLnZhbHVlcy5mb3JFYWNoKCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IGkgPSBTR0ZfTEVUVEVSUy5pbmRleE9mKHZhbHVlWzBdKTtcbiAgICAgICAgY29uc3QgaiA9IFNHRl9MRVRURVJTLmluZGV4T2YodmFsdWVbMV0pO1xuICAgICAgICBpZiAoaSA8IDAgfHwgaiA8IDApIHJldHVybjtcbiAgICAgICAgaWYgKGkgPCBzaXplICYmIGogPCBzaXplKSB7XG4gICAgICAgICAgbGkgPSBpO1xuICAgICAgICAgIGxqID0gajtcbiAgICAgICAgICBtYXRbaV1bal0gPSBzZXR1cC50b2tlbiA9PT0gJ0FCJyA/IDEgOiAtMTtcbiAgICAgICAgICBpZiAoc2V0dXAudG9rZW4gPT09ICdBRScpIG1hdFtpXVtqXSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgbW92ZVByb3BzLmZvckVhY2goKG06IE1vdmVQcm9wKSA9PiB7XG4gICAgICBjb25zdCBpID0gU0dGX0xFVFRFUlMuaW5kZXhPZihtLnZhbHVlWzBdKTtcbiAgICAgIGNvbnN0IGogPSBTR0ZfTEVUVEVSUy5pbmRleE9mKG0udmFsdWVbMV0pO1xuICAgICAgaWYgKGkgPCAwIHx8IGogPCAwKSByZXR1cm47XG4gICAgICBpZiAoaSA8IHNpemUgJiYgaiA8IHNpemUpIHtcbiAgICAgICAgbGkgPSBpO1xuICAgICAgICBsaiA9IGo7XG4gICAgICAgIG1hdCA9IG1vdmUobWF0LCBpLCBqLCBtLnRva2VuID09PSAnQicgPyBLaS5CbGFjayA6IEtpLldoaXRlKTtcblxuICAgICAgICBpZiAobGkgIT09IHVuZGVmaW5lZCAmJiBsaiAhPT0gdW5kZWZpbmVkICYmIGxpID49IDAgJiYgbGogPj0gMCkge1xuICAgICAgICAgIG51bU1hcmt1cFtsaV1bbGpdID0gKFxuICAgICAgICAgICAgbm9kZS5tb2RlbC5udW1iZXIgfHwgaW5kZXggLSBzZXR1cENvdW50XG4gICAgICAgICAgKS50b1N0cmluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGV4ID09PSBwYXRoLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBtYXJrdXBbbGldW2xqXSA9IE1hcmt1cC5DdXJyZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBDbGVhciBudW1iZXIgd2hlbiBzdG9uZXMgYXJlIGNhcHR1cmVkXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2l6ZTsgaisrKSB7XG4gICAgICAgIGlmIChtYXRbaV1bal0gPT09IDApIG51bU1hcmt1cFtpXVtqXSA9ICcnO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLy8gQ2FsY3VsYXRpbmcgdGhlIHZpc2libGUgYXJlYVxuICBpZiAocm9vdCkge1xuICAgIHJvb3QuYWxsKChub2RlOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPikgPT4ge1xuICAgICAgY29uc3Qge21vdmVQcm9wcywgc2V0dXBQcm9wcywgcm9vdFByb3BzfSA9IG5vZGUubW9kZWw7XG4gICAgICBpZiAoc2V0dXBQcm9wcy5sZW5ndGggPiAwKSBzZXR1cENvdW50ICs9IDE7XG4gICAgICBzZXR1cFByb3BzLmZvckVhY2goKHNldHVwOiBhbnkpID0+IHtcbiAgICAgICAgc2V0dXAudmFsdWVzLmZvckVhY2goKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICBjb25zdCBpID0gU0dGX0xFVFRFUlMuaW5kZXhPZih2YWx1ZVswXSk7XG4gICAgICAgICAgY29uc3QgaiA9IFNHRl9MRVRURVJTLmluZGV4T2YodmFsdWVbMV0pO1xuICAgICAgICAgIGlmIChpID49IDAgJiYgaiA+PSAwICYmIGkgPCBzaXplICYmIGogPCBzaXplKSB7XG4gICAgICAgICAgICB2aXNpYmxlQXJlYU1hdFtpXVtqXSA9IEtpLkJsYWNrO1xuICAgICAgICAgICAgaWYgKHNldHVwLnRva2VuID09PSAnQUUnKSB2aXNpYmxlQXJlYU1hdFtpXVtqXSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBtb3ZlUHJvcHMuZm9yRWFjaCgobTogTW92ZVByb3ApID0+IHtcbiAgICAgICAgY29uc3QgaSA9IFNHRl9MRVRURVJTLmluZGV4T2YobS52YWx1ZVswXSk7XG4gICAgICAgIGNvbnN0IGogPSBTR0ZfTEVUVEVSUy5pbmRleE9mKG0udmFsdWVbMV0pO1xuICAgICAgICBpZiAoaSA+PSAwICYmIGogPj0gMCAmJiBpIDwgc2l6ZSAmJiBqIDwgc2l6ZSkge1xuICAgICAgICAgIHZpc2libGVBcmVhTWF0W2ldW2pdID0gS2kuQmxhY2s7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IG1hcmt1cFByb3BzID0gY3VycmVudE5vZGUubW9kZWwubWFya3VwUHJvcHM7XG4gIG1hcmt1cFByb3BzLmZvckVhY2goKG06IE1hcmt1cFByb3ApID0+IHtcbiAgICBjb25zdCB0b2tlbiA9IG0udG9rZW47XG4gICAgY29uc3QgdmFsdWVzID0gbS52YWx1ZXM7XG4gICAgdmFsdWVzLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgY29uc3QgaSA9IFNHRl9MRVRURVJTLmluZGV4T2YodmFsdWVbMF0pO1xuICAgICAgY29uc3QgaiA9IFNHRl9MRVRURVJTLmluZGV4T2YodmFsdWVbMV0pO1xuICAgICAgaWYgKGkgPCAwIHx8IGogPCAwKSByZXR1cm47XG4gICAgICBpZiAoaSA8IHNpemUgJiYgaiA8IHNpemUpIHtcbiAgICAgICAgbGV0IG1hcms7XG4gICAgICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgICAgICBjYXNlICdDUic6XG4gICAgICAgICAgICBtYXJrID0gTWFya3VwLkNpcmNsZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ1NRJzpcbiAgICAgICAgICAgIG1hcmsgPSBNYXJrdXAuU3F1YXJlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnVFInOlxuICAgICAgICAgICAgbWFyayA9IE1hcmt1cC5UcmlhbmdsZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ01BJzpcbiAgICAgICAgICAgIG1hcmsgPSBNYXJrdXAuQ3Jvc3M7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBtYXJrID0gdmFsdWUuc3BsaXQoJzonKVsxXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWFya3VwW2ldW2pdID0gbWFyaztcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gaWYgKFxuICAvLyAgIGxpICE9PSB1bmRlZmluZWQgJiZcbiAgLy8gICBsaiAhPT0gdW5kZWZpbmVkICYmXG4gIC8vICAgbGkgPj0gMCAmJlxuICAvLyAgIGxqID49IDAgJiZcbiAgLy8gICAhbWFya3VwW2xpXVtsal1cbiAgLy8gKSB7XG4gIC8vICAgbWFya3VwW2xpXVtsal0gPSBNYXJrdXAuQ3VycmVudDtcbiAgLy8gfVxuXG4gIHJldHVybiB7bWF0LCB2aXNpYmxlQXJlYU1hdCwgbWFya3VwLCBudW1NYXJrdXB9O1xufTtcblxuLyoqXG4gKiBGaW5kcyBhIHByb3BlcnR5IGluIHRoZSBnaXZlbiBub2RlIGJhc2VkIG9uIHRoZSBwcm92aWRlZCB0b2tlbi5cbiAqIEBwYXJhbSBub2RlIFRoZSBub2RlIHRvIHNlYXJjaCBmb3IgdGhlIHByb3BlcnR5LlxuICogQHBhcmFtIHRva2VuIFRoZSB0b2tlbiBvZiB0aGUgcHJvcGVydHkgdG8gZmluZC5cbiAqIEByZXR1cm5zIFRoZSBmb3VuZCBwcm9wZXJ0eSBvciBudWxsIGlmIG5vdCBmb3VuZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGZpbmRQcm9wID0gKG5vZGU6IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+LCB0b2tlbjogc3RyaW5nKSA9PiB7XG4gIGlmICghbm9kZSkgcmV0dXJuO1xuICBpZiAoTU9WRV9QUk9QX0xJU1QuaW5jbHVkZXModG9rZW4pKSB7XG4gICAgcmV0dXJuIG5vZGUubW9kZWwubW92ZVByb3BzLmZpbmQoKHA6IE1vdmVQcm9wKSA9PiBwLnRva2VuID09PSB0b2tlbik7XG4gIH1cbiAgaWYgKE5PREVfQU5OT1RBVElPTl9QUk9QX0xJU1QuaW5jbHVkZXModG9rZW4pKSB7XG4gICAgcmV0dXJuIG5vZGUubW9kZWwubm9kZUFubm90YXRpb25Qcm9wcy5maW5kKFxuICAgICAgKHA6IE5vZGVBbm5vdGF0aW9uUHJvcCkgPT4gcC50b2tlbiA9PT0gdG9rZW5cbiAgICApO1xuICB9XG4gIGlmIChNT1ZFX0FOTk9UQVRJT05fUFJPUF9MSVNULmluY2x1ZGVzKHRva2VuKSkge1xuICAgIHJldHVybiBub2RlLm1vZGVsLm1vdmVBbm5vdGF0aW9uUHJvcHMuZmluZChcbiAgICAgIChwOiBNb3ZlQW5ub3RhdGlvblByb3ApID0+IHAudG9rZW4gPT09IHRva2VuXG4gICAgKTtcbiAgfVxuICBpZiAoUk9PVF9QUk9QX0xJU1QuaW5jbHVkZXModG9rZW4pKSB7XG4gICAgcmV0dXJuIG5vZGUubW9kZWwucm9vdFByb3BzLmZpbmQoKHA6IFJvb3RQcm9wKSA9PiBwLnRva2VuID09PSB0b2tlbik7XG4gIH1cbiAgaWYgKFNFVFVQX1BST1BfTElTVC5pbmNsdWRlcyh0b2tlbikpIHtcbiAgICByZXR1cm4gbm9kZS5tb2RlbC5zZXR1cFByb3BzLmZpbmQoKHA6IFNldHVwUHJvcCkgPT4gcC50b2tlbiA9PT0gdG9rZW4pO1xuICB9XG4gIGlmIChNQVJLVVBfUFJPUF9MSVNULmluY2x1ZGVzKHRva2VuKSkge1xuICAgIHJldHVybiBub2RlLm1vZGVsLm1hcmt1cFByb3BzLmZpbmQoKHA6IE1hcmt1cFByb3ApID0+IHAudG9rZW4gPT09IHRva2VuKTtcbiAgfVxuICBpZiAoR0FNRV9JTkZPX1BST1BfTElTVC5pbmNsdWRlcyh0b2tlbikpIHtcbiAgICByZXR1cm4gbm9kZS5tb2RlbC5nYW1lSW5mb1Byb3BzLmZpbmQoXG4gICAgICAocDogR2FtZUluZm9Qcm9wKSA9PiBwLnRva2VuID09PSB0b2tlblxuICAgICk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIEZpbmRzIHByb3BlcnRpZXMgaW4gYSBnaXZlbiBub2RlIGJhc2VkIG9uIHRoZSBwcm92aWRlZCB0b2tlbi5cbiAqIEBwYXJhbSBub2RlIC0gVGhlIG5vZGUgdG8gc2VhcmNoIGZvciBwcm9wZXJ0aWVzLlxuICogQHBhcmFtIHRva2VuIC0gVGhlIHRva2VuIHRvIG1hdGNoIGFnYWluc3QgdGhlIHByb3BlcnRpZXMuXG4gKiBAcmV0dXJucyBBbiBhcnJheSBvZiBwcm9wZXJ0aWVzIHRoYXQgbWF0Y2ggdGhlIHByb3ZpZGVkIHRva2VuLlxuICovXG5leHBvcnQgY29uc3QgZmluZFByb3BzID0gKG5vZGU6IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+LCB0b2tlbjogc3RyaW5nKSA9PiB7XG4gIGlmIChNT1ZFX1BST1BfTElTVC5pbmNsdWRlcyh0b2tlbikpIHtcbiAgICByZXR1cm4gbm9kZS5tb2RlbC5tb3ZlUHJvcHMuZmlsdGVyKChwOiBNb3ZlUHJvcCkgPT4gcC50b2tlbiA9PT0gdG9rZW4pO1xuICB9XG4gIGlmIChOT0RFX0FOTk9UQVRJT05fUFJPUF9MSVNULmluY2x1ZGVzKHRva2VuKSkge1xuICAgIHJldHVybiBub2RlLm1vZGVsLm5vZGVBbm5vdGF0aW9uUHJvcHMuZmlsdGVyKFxuICAgICAgKHA6IE5vZGVBbm5vdGF0aW9uUHJvcCkgPT4gcC50b2tlbiA9PT0gdG9rZW5cbiAgICApO1xuICB9XG4gIGlmIChNT1ZFX0FOTk9UQVRJT05fUFJPUF9MSVNULmluY2x1ZGVzKHRva2VuKSkge1xuICAgIHJldHVybiBub2RlLm1vZGVsLm1vdmVBbm5vdGF0aW9uUHJvcHMuZmlsdGVyKFxuICAgICAgKHA6IE1vdmVBbm5vdGF0aW9uUHJvcCkgPT4gcC50b2tlbiA9PT0gdG9rZW5cbiAgICApO1xuICB9XG4gIGlmIChST09UX1BST1BfTElTVC5pbmNsdWRlcyh0b2tlbikpIHtcbiAgICByZXR1cm4gbm9kZS5tb2RlbC5yb290UHJvcHMuZmlsdGVyKChwOiBSb290UHJvcCkgPT4gcC50b2tlbiA9PT0gdG9rZW4pO1xuICB9XG4gIGlmIChTRVRVUF9QUk9QX0xJU1QuaW5jbHVkZXModG9rZW4pKSB7XG4gICAgcmV0dXJuIG5vZGUubW9kZWwuc2V0dXBQcm9wcy5maWx0ZXIoKHA6IFNldHVwUHJvcCkgPT4gcC50b2tlbiA9PT0gdG9rZW4pO1xuICB9XG4gIGlmIChNQVJLVVBfUFJPUF9MSVNULmluY2x1ZGVzKHRva2VuKSkge1xuICAgIHJldHVybiBub2RlLm1vZGVsLm1hcmt1cFByb3BzLmZpbHRlcigocDogTWFya3VwUHJvcCkgPT4gcC50b2tlbiA9PT0gdG9rZW4pO1xuICB9XG4gIGlmIChHQU1FX0lORk9fUFJPUF9MSVNULmluY2x1ZGVzKHRva2VuKSkge1xuICAgIHJldHVybiBub2RlLm1vZGVsLmdhbWVJbmZvUHJvcHMuZmlsdGVyKFxuICAgICAgKHA6IEdhbWVJbmZvUHJvcCkgPT4gcC50b2tlbiA9PT0gdG9rZW5cbiAgICApO1xuICB9XG4gIHJldHVybiBbXTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZW5Nb3ZlID0gKFxuICBub2RlOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPixcbiAgb25SaWdodDogKHBhdGg6IHN0cmluZykgPT4gdm9pZCxcbiAgb25Xcm9uZzogKHBhdGg6IHN0cmluZykgPT4gdm9pZCxcbiAgb25WYXJpYW50OiAocGF0aDogc3RyaW5nKSA9PiB2b2lkLFxuICBvbk9mZlBhdGg6IChwYXRoOiBzdHJpbmcpID0+IHZvaWRcbik6IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+ID0+IHtcbiAgbGV0IG5leHROb2RlO1xuICBjb25zdCBnZXRQYXRoID0gKG5vZGU6IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+KSA9PiB7XG4gICAgY29uc3QgbmV3UGF0aCA9IGNvbXBhY3QoXG4gICAgICBub2RlLmdldFBhdGgoKS5tYXAobiA9PiBuLm1vZGVsLm1vdmVQcm9wc1swXT8udG9TdHJpbmcoKSlcbiAgICApLmpvaW4oJzsnKTtcbiAgICByZXR1cm4gbmV3UGF0aDtcbiAgfTtcblxuICBjb25zdCBjaGVja1Jlc3VsdCA9IChub2RlOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPikgPT4ge1xuICAgIGlmIChub2RlLmhhc0NoaWxkcmVuKCkpIHJldHVybjtcblxuICAgIGNvbnN0IHBhdGggPSBnZXRQYXRoKG5vZGUpO1xuICAgIGlmIChpc1JpZ2h0Tm9kZShub2RlKSkge1xuICAgICAgaWYgKG9uUmlnaHQpIG9uUmlnaHQocGF0aCk7XG4gICAgfSBlbHNlIGlmIChpc1ZhcmlhbnROb2RlKG5vZGUpKSB7XG4gICAgICBpZiAob25WYXJpYW50KSBvblZhcmlhbnQocGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChvbldyb25nKSBvbldyb25nKHBhdGgpO1xuICAgIH1cbiAgfTtcblxuICBpZiAobm9kZS5oYXNDaGlsZHJlbigpKSB7XG4gICAgY29uc3QgcmlnaHROb2RlcyA9IG5vZGUuY2hpbGRyZW4uZmlsdGVyKChuOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPikgPT5cbiAgICAgIGluUmlnaHRQYXRoKG4pXG4gICAgKTtcbiAgICBjb25zdCB3cm9uZ05vZGVzID0gbm9kZS5jaGlsZHJlbi5maWx0ZXIoKG46IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+KSA9PlxuICAgICAgaW5Xcm9uZ1BhdGgobilcbiAgICApO1xuICAgIGNvbnN0IHZhcmlhbnROb2RlcyA9IG5vZGUuY2hpbGRyZW4uZmlsdGVyKChuOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPikgPT5cbiAgICAgIGluVmFyaWFudFBhdGgobilcbiAgICApO1xuXG4gICAgbmV4dE5vZGUgPSBub2RlO1xuXG4gICAgaWYgKGluUmlnaHRQYXRoKG5vZGUpICYmIHJpZ2h0Tm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgbmV4dE5vZGUgPSBzYW1wbGUocmlnaHROb2Rlcyk7XG4gICAgfSBlbHNlIGlmIChpbldyb25nUGF0aChub2RlKSAmJiB3cm9uZ05vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIG5leHROb2RlID0gc2FtcGxlKHdyb25nTm9kZXMpO1xuICAgIH0gZWxzZSBpZiAoaW5WYXJpYW50UGF0aCh2YXJpYW50Tm9kZXMpICYmIHZhcmlhbnROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICBuZXh0Tm9kZSA9IHNhbXBsZSh2YXJpYW50Tm9kZXMpO1xuICAgIH0gZWxzZSBpZiAoaXNSaWdodE5vZGUobm9kZSkpIHtcbiAgICAgIG9uUmlnaHQoZ2V0UGF0aChuZXh0Tm9kZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvbldyb25nKGdldFBhdGgobmV4dE5vZGUpKTtcbiAgICB9XG4gICAgY2hlY2tSZXN1bHQobmV4dE5vZGUpO1xuICB9IGVsc2Uge1xuICAgIGNoZWNrUmVzdWx0KG5vZGUpO1xuICB9XG4gIHJldHVybiBuZXh0Tm9kZTtcbn07XG5cbmV4cG9ydCBjb25zdCBleHRyYWN0Qm9hcmRTaXplID0gKFxuICBub2RlOiBUcmVlTW9kZWwuTm9kZTxTZ2ZOb2RlPixcbiAgZGVmYXVsdEJvYXJkU2l6ZSA9IDE5XG4pID0+IHtcbiAgY29uc3Qgcm9vdCA9IG5vZGUuZ2V0UGF0aCgpWzBdO1xuICBjb25zdCBzaXplID0gTWF0aC5taW4oXG4gICAgcGFyc2VJbnQoZmluZFByb3Aocm9vdCwgJ1NaJyk/LnZhbHVlIHx8IGRlZmF1bHRCb2FyZFNpemUpLFxuICAgIE1BWF9CT0FSRF9TSVpFXG4gICk7XG4gIHJldHVybiBzaXplO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEZpcnN0VG9Nb3ZlQ29sb3JGcm9tUm9vdCA9IChcbiAgcm9vdDogVHJlZU1vZGVsLk5vZGU8U2dmTm9kZT4gfCB1bmRlZmluZWQgfCBudWxsLFxuICBkZWZhdWx0TW92ZUNvbG9yOiBLaSA9IEtpLkJsYWNrXG4pID0+IHtcbiAgaWYgKHJvb3QpIHtcbiAgICBjb25zdCBzZXR1cE5vZGUgPSByb290LmZpcnN0KG4gPT4gaXNTZXR1cE5vZGUobikpO1xuICAgIGlmIChzZXR1cE5vZGUpIHtcbiAgICAgIGNvbnN0IGZpcnN0TW92ZU5vZGUgPSBzZXR1cE5vZGUuZmlyc3QobiA9PiBpc01vdmVOb2RlKG4pKTtcbiAgICAgIGlmICghZmlyc3RNb3ZlTm9kZSkgcmV0dXJuIGRlZmF1bHRNb3ZlQ29sb3I7XG4gICAgICByZXR1cm4gZ2V0TW92ZUNvbG9yKGZpcnN0TW92ZU5vZGUpO1xuICAgIH1cbiAgfVxuICBjb25zb2xlLndhcm4oJ0RlZmF1bHQgZmlyc3QgdG8gbW92ZSBjb2xvcicsIGRlZmF1bHRNb3ZlQ29sb3IpO1xuICByZXR1cm4gZGVmYXVsdE1vdmVDb2xvcjtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRGaXJzdFRvTW92ZUNvbG9yRnJvbVNnZiA9IChcbiAgc2dmOiBzdHJpbmcsXG4gIGRlZmF1bHRNb3ZlQ29sb3I6IEtpID0gS2kuQmxhY2tcbikgPT4ge1xuICBjb25zdCBzZ2ZQYXJzZXIgPSBuZXcgU2dmKHNnZik7XG4gIGlmIChzZ2ZQYXJzZXIucm9vdClcbiAgICBnZXRGaXJzdFRvTW92ZUNvbG9yRnJvbVJvb3Qoc2dmUGFyc2VyLnJvb3QsIGRlZmF1bHRNb3ZlQ29sb3IpO1xuICBjb25zb2xlLndhcm4oJ0RlZmF1bHQgZmlyc3QgdG8gbW92ZSBjb2xvcicsIGRlZmF1bHRNb3ZlQ29sb3IpO1xuICByZXR1cm4gZGVmYXVsdE1vdmVDb2xvcjtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRNb3ZlQ29sb3IgPSAoXG4gIG5vZGU6IFRyZWVNb2RlbC5Ob2RlPFNnZk5vZGU+LFxuICBkZWZhdWx0TW92ZUNvbG9yOiBLaSA9IEtpLkJsYWNrXG4pID0+IHtcbiAgY29uc3QgbW92ZVByb3AgPSBub2RlLm1vZGVsPy5tb3ZlUHJvcHM/LlswXTtcbiAgc3dpdGNoIChtb3ZlUHJvcD8udG9rZW4pIHtcbiAgICBjYXNlICdXJzpcbiAgICAgIHJldHVybiBLaS5XaGl0ZTtcbiAgICBjYXNlICdCJzpcbiAgICAgIHJldHVybiBLaS5CbGFjaztcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gY29uc29sZS53YXJuKCdEZWZhdWx0IG1vdmUgY29sb3IgaXMnLCBkZWZhdWx0TW92ZUNvbG9yKTtcbiAgICAgIHJldHVybiBkZWZhdWx0TW92ZUNvbG9yO1xuICB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RvbmUge1xuICBwcm90ZWN0ZWQgZ2xvYmFsQWxwaGEgPSAxO1xuICBwcm90ZWN0ZWQgc2l6ZSA9IDA7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxuICAgIHByb3RlY3RlZCB4OiBudW1iZXIsXG4gICAgcHJvdGVjdGVkIHk6IG51bWJlcixcbiAgICBwcm90ZWN0ZWQga2k6IG51bWJlclxuICApIHt9XG4gIGRyYXcoKSB7XG4gICAgY29uc29sZS5sb2coJ1RCRCcpO1xuICB9XG5cbiAgc2V0R2xvYmFsQWxwaGEoYWxwaGE6IG51bWJlcikge1xuICAgIHRoaXMuZ2xvYmFsQWxwaGEgPSBhbHBoYTtcbiAgfVxuXG4gIHNldFNpemUoc2l6ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgfVxufVxuIiwiaW1wb3J0IFN0b25lIGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBjbGFzcyBDb2xvclN0b25lIGV4dGVuZHMgU3RvbmUge1xuICBjb25zdHJ1Y3RvcihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgeDogbnVtYmVyLCB5OiBudW1iZXIsIGtpOiBudW1iZXIpIHtcbiAgICBzdXBlcihjdHgsIHgsIHksIGtpKTtcbiAgfVxuXG4gIGRyYXcoKSB7XG4gICAgY29uc3Qge2N0eCwgeCwgeSwgc2l6ZSwga2ksIGdsb2JhbEFscGhhfSA9IHRoaXM7XG4gICAgaWYgKHNpemUgPD0gMCkgcmV0dXJuO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5nbG9iYWxBbHBoYSA9IGdsb2JhbEFscGhhO1xuICAgIGN0eC5hcmMoeCwgeSwgc2l6ZSAvIDIsIDAsIDIgKiBNYXRoLlBJLCB0cnVlKTtcbiAgICBjdHgubGluZVdpZHRoID0gMTtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSAnIzAwMCc7XG4gICAgaWYgKGtpID09PSAxKSB7XG4gICAgICBjdHguZmlsbFN0eWxlID0gJyMwMDAnO1xuICAgIH0gZWxzZSBpZiAoa2kgPT09IC0xKSB7XG4gICAgICBjdHguZmlsbFN0eWxlID0gJyNmZmYnO1xuICAgIH1cbiAgICBjdHguZmlsbCgpO1xuICAgIGN0eC5zdHJva2UoKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgU3RvbmUgZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGNsYXNzIEltYWdlU3RvbmUgZXh0ZW5kcyBTdG9uZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXIsXG4gICAga2k6IG51bWJlcixcbiAgICBwcml2YXRlIG1vZDogbnVtYmVyLFxuICAgIHByaXZhdGUgYmxhY2tzOiBhbnksXG4gICAgcHJpdmF0ZSB3aGl0ZXM6IGFueVxuICApIHtcbiAgICBzdXBlcihjdHgsIHgsIHksIGtpKTtcbiAgfVxuXG4gIGRyYXcoKSB7XG4gICAgY29uc3Qge2N0eCwgeCwgeSwgc2l6ZSwga2ksIGJsYWNrcywgd2hpdGVzLCBtb2R9ID0gdGhpcztcbiAgICBpZiAoc2l6ZSA8PSAwKSByZXR1cm47XG4gICAgbGV0IGltZztcbiAgICBpZiAoa2kgPT09IDEpIHtcbiAgICAgIGltZyA9IGJsYWNrc1ttb2QgJSBibGFja3MubGVuZ3RoXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW1nID0gd2hpdGVzW21vZCAlIHdoaXRlcy5sZW5ndGhdO1xuICAgIH1cbiAgICBpZiAoaW1nKSB7XG4gICAgICBjdHguZHJhd0ltYWdlKGltZywgeCAtIHNpemUgLyAyLCB5IC0gc2l6ZSAvIDIsIHNpemUsIHNpemUpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHtBbmFseXNpc1BvaW50VGhlbWUsIE1vdmVJbmZvLCBSb290SW5mb30gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgY2FsY0FuYWx5c2lzUG9pbnRDb2xvcixcbiAgY2FsY1Njb3JlRGlmZixcbiAgY2FsY1Njb3JlRGlmZlRleHQsXG4gIG5Gb3JtYXR0ZXIsXG4gIHJvdW5kMyxcbn0gZnJvbSAnLi4vaGVscGVyJztcbmltcG9ydCB7XG4gIExJR0hUX0dSRUVOX1JHQixcbiAgTElHSFRfUkVEX1JHQixcbiAgTElHSFRfWUVMTE9XX1JHQixcbiAgWUVMTE9XX1JHQixcbn0gZnJvbSAnLi4vY29uc3QnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBbmFseXNpc1BvaW50IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgICBwcml2YXRlIHg6IG51bWJlcixcbiAgICBwcml2YXRlIHk6IG51bWJlcixcbiAgICBwcml2YXRlIHI6IG51bWJlcixcbiAgICBwcml2YXRlIHJvb3RJbmZvOiBSb290SW5mbyxcbiAgICBwcml2YXRlIG1vdmVJbmZvOiBNb3ZlSW5mbyxcbiAgICBwcml2YXRlIHRoZW1lOiBBbmFseXNpc1BvaW50VGhlbWUgPSBBbmFseXNpc1BvaW50VGhlbWUuRGVmYXVsdCxcbiAgICBwcml2YXRlIG91dGxpbmVDb2xvcj86IHN0cmluZ1xuICApIHt9XG5cbiAgZHJhdygpIHtcbiAgICBjb25zdCB7Y3R4LCB4LCB5LCByLCByb290SW5mbywgbW92ZUluZm8sIHRoZW1lfSA9IHRoaXM7XG4gICAgaWYgKHIgPCAwKSByZXR1cm47XG5cbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5zaGFkb3dPZmZzZXRYID0gMDtcbiAgICBjdHguc2hhZG93T2Zmc2V0WSA9IDA7XG4gICAgY3R4LnNoYWRvd0NvbG9yID0gJyNmZmYnO1xuICAgIGN0eC5zaGFkb3dCbHVyID0gMDtcblxuICAgIC8vIHRoaXMuZHJhd0RlZmF1bHRBbmFseXNpc1BvaW50KCk7XG4gICAgaWYgKHRoZW1lID09PSBBbmFseXNpc1BvaW50VGhlbWUuRGVmYXVsdCkge1xuICAgICAgdGhpcy5kcmF3RGVmYXVsdEFuYWx5c2lzUG9pbnQoKTtcbiAgICB9IGVsc2UgaWYgKHRoZW1lID09PSBBbmFseXNpc1BvaW50VGhlbWUuUHJvYmxlbSkge1xuICAgICAgdGhpcy5kcmF3UHJvYmxlbUFuYWx5c2lzUG9pbnQoKTtcbiAgICB9XG5cbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBkcmF3UHJvYmxlbUFuYWx5c2lzUG9pbnQgPSAoKSA9PiB7XG4gICAgY29uc3Qge2N0eCwgeCwgeSwgciwgcm9vdEluZm8sIG1vdmVJbmZvLCBvdXRsaW5lQ29sb3J9ID0gdGhpcztcbiAgICBjb25zdCB7b3JkZXJ9ID0gbW92ZUluZm87XG5cbiAgICBsZXQgcENvbG9yID0gY2FsY0FuYWx5c2lzUG9pbnRDb2xvcihyb290SW5mbywgbW92ZUluZm8pO1xuXG4gICAgaWYgKG9yZGVyIDwgNSkge1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LmFyYyh4LCB5LCByLCAwLCAyICogTWF0aC5QSSwgdHJ1ZSk7XG4gICAgICBjdHgubGluZVdpZHRoID0gMDtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMjU1LDApJztcbiAgICAgIGNvbnN0IGdyYWRpZW50ID0gY3R4LmNyZWF0ZVJhZGlhbEdyYWRpZW50KHgsIHksIHIgKiAwLjksIHgsIHksIHIpO1xuICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKDAsIHBDb2xvcik7XG4gICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoMC45LCAncmdiYSgyNTUsIDI1NSwgMjU1LCAwJyk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gZ3JhZGllbnQ7XG4gICAgICBjdHguZmlsbCgpO1xuICAgICAgaWYgKG91dGxpbmVDb2xvcikge1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgciwgMCwgMiAqIE1hdGguUEksIHRydWUpO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gNDtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gb3V0bGluZUNvbG9yO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGZvbnRTaXplID0gciAvIDEuNTtcblxuICAgICAgY3R4LmZvbnQgPSBgJHtmb250U2l6ZSAqIDAuOH1weCBUYWhvbWFgO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9ICdibGFjayc7XG4gICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cbiAgICAgIGN0eC5mb250ID0gYCR7Zm9udFNpemV9cHggVGFob21hYDtcbiAgICAgIGNvbnN0IHNjb3JlVGV4dCA9IGNhbGNTY29yZURpZmZUZXh0KHJvb3RJbmZvLCBtb3ZlSW5mbyk7XG4gICAgICBjdHguZmlsbFRleHQoc2NvcmVUZXh0LCB4LCB5KTtcblxuICAgICAgY3R4LmZvbnQgPSBgJHtmb250U2l6ZSAqIDAuOH1weCBUYWhvbWFgO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9ICdibGFjayc7XG4gICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICBjdHguZmlsbFRleHQobkZvcm1hdHRlcihtb3ZlSW5mby52aXNpdHMpLCB4LCB5ICsgciAvIDIgKyBmb250U2l6ZSAvIDgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRyYXdDYW5kaWRhdGVQb2ludCgpO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIGRyYXdEZWZhdWx0QW5hbHlzaXNQb2ludCA9ICgpID0+IHtcbiAgICBjb25zdCB7Y3R4LCB4LCB5LCByLCByb290SW5mbywgbW92ZUluZm99ID0gdGhpcztcbiAgICBjb25zdCB7b3JkZXJ9ID0gbW92ZUluZm87XG5cbiAgICBsZXQgcENvbG9yID0gY2FsY0FuYWx5c2lzUG9pbnRDb2xvcihyb290SW5mbywgbW92ZUluZm8pO1xuXG4gICAgaWYgKG9yZGVyIDwgNSkge1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LmFyYyh4LCB5LCByLCAwLCAyICogTWF0aC5QSSwgdHJ1ZSk7XG4gICAgICBjdHgubGluZVdpZHRoID0gMDtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMjU1LDApJztcbiAgICAgIGNvbnN0IGdyYWRpZW50ID0gY3R4LmNyZWF0ZVJhZGlhbEdyYWRpZW50KHgsIHksIHIgKiAwLjksIHgsIHksIHIpO1xuICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKDAsIHBDb2xvcik7XG4gICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoMC45LCAncmdiYSgyNTUsIDI1NSwgMjU1LCAwJyk7XG4gICAgICBjdHguZmlsbFN0eWxlID0gZ3JhZGllbnQ7XG4gICAgICBjdHguZmlsbCgpO1xuXG4gICAgICBjb25zdCBmb250U2l6ZSA9IHIgLyAxLjU7XG5cbiAgICAgIGN0eC5mb250ID0gYCR7Zm9udFNpemUgKiAwLjh9cHggVGFob21hYDtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAnYmxhY2snO1xuICAgICAgY3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXG4gICAgICBjb25zdCB3aW5yYXRlID1cbiAgICAgICAgcm9vdEluZm8uY3VycmVudFBsYXllciA9PT0gJ0InXG4gICAgICAgICAgPyBtb3ZlSW5mby53aW5yYXRlXG4gICAgICAgICAgOiAxIC0gbW92ZUluZm8ud2lucmF0ZTtcblxuICAgICAgY3R4LmZpbGxUZXh0KHJvdW5kMyh3aW5yYXRlLCAxMDAsIDEpLCB4LCB5IC0gciAvIDIgKyBmb250U2l6ZSAvIDUpO1xuXG4gICAgICBjdHguZm9udCA9IGAke2ZvbnRTaXplfXB4IFRhaG9tYWA7XG4gICAgICBjb25zdCBzY29yZVRleHQgPSBjYWxjU2NvcmVEaWZmVGV4dChyb290SW5mbywgbW92ZUluZm8pO1xuICAgICAgY3R4LmZpbGxUZXh0KHNjb3JlVGV4dCwgeCwgeSArIGZvbnRTaXplIC8gMyk7XG5cbiAgICAgIGN0eC5mb250ID0gYCR7Zm9udFNpemUgKiAwLjh9cHggVGFob21hYDtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAnYmxhY2snO1xuICAgICAgY3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgY3R4LmZpbGxUZXh0KG5Gb3JtYXR0ZXIobW92ZUluZm8udmlzaXRzKSwgeCwgeSArIHIgLyAyICsgZm9udFNpemUgLyAzKTtcblxuICAgICAgY29uc3Qgb3JkZXIgPSBtb3ZlSW5mby5vcmRlcjtcbiAgICAgIGN0eC5maWxsVGV4dCgob3JkZXIgKyAxKS50b1N0cmluZygpLCB4ICsgciwgeSAtIHIgLyAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kcmF3Q2FuZGlkYXRlUG9pbnQoKTtcbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSBkcmF3Q2FuZGlkYXRlUG9pbnQgPSAoKSA9PiB7XG4gICAgY29uc3Qge2N0eCwgeCwgeSwgciwgcm9vdEluZm8sIG1vdmVJbmZvfSA9IHRoaXM7XG4gICAgY29uc3QgcENvbG9yID0gY2FsY0FuYWx5c2lzUG9pbnRDb2xvcihyb290SW5mbywgbW92ZUluZm8pO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguYXJjKHgsIHksIHIgKiAwLjYsIDAsIDIgKiBNYXRoLlBJLCB0cnVlKTtcbiAgICBjdHgubGluZVdpZHRoID0gMDtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsMjU1LDI1NSwwKSc7XG4gICAgY29uc3QgZ3JhZGllbnQgPSBjdHguY3JlYXRlUmFkaWFsR3JhZGllbnQoeCwgeSwgciAqIDAuNCwgeCwgeSwgcik7XG4gICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKDAsIHBDb2xvcik7XG4gICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKDAuOTUsICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAnKTtcbiAgICBjdHguZmlsbFN0eWxlID0gZ3JhZGllbnQ7XG4gICAgY3R4LmZpbGwoKTtcbiAgICBjdHguc3Ryb2tlKCk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBNYXJrdXAge1xuICBwcm90ZWN0ZWQgZ2xvYmFsQWxwaGEgPSAxO1xuICBwcm90ZWN0ZWQgY29sb3IgPSAnJztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsXG4gICAgcHJvdGVjdGVkIHg6IG51bWJlcixcbiAgICBwcm90ZWN0ZWQgeTogbnVtYmVyLFxuICAgIHByb3RlY3RlZCBzOiBudW1iZXIsXG4gICAgcHJvdGVjdGVkIGtpOiBudW1iZXIsXG4gICAgcHJvdGVjdGVkIHZhbDogc3RyaW5nIHwgbnVtYmVyID0gJydcbiAgKSB7fVxuXG4gIGRyYXcoKSB7XG4gICAgY29uc29sZS5sb2coJ1RCRCcpO1xuICB9XG5cbiAgc2V0R2xvYmFsQWxwaGEoYWxwaGE6IG51bWJlcikge1xuICAgIHRoaXMuZ2xvYmFsQWxwaGEgPSBhbHBoYTtcbiAgfVxuXG4gIHNldENvbG9yKGNvbG9yOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNvbG9yID0gY29sb3I7XG4gIH1cbn1cbiIsImltcG9ydCBNYXJrdXAgZnJvbSAnLi9NYXJrdXBCYXNlJztcblxuZXhwb3J0IGNsYXNzIENpcmNsZU1hcmt1cCBleHRlbmRzIE1hcmt1cCB7XG4gIGRyYXcoKSB7XG4gICAgY29uc3Qge2N0eCwgeCwgeSwgcywga2ksIGdsb2JhbEFscGhhLCBjb2xvcn0gPSB0aGlzO1xuICAgIGNvbnN0IHJhZGl1cyA9IHMgKiAwLjU7XG4gICAgbGV0IHNpemUgPSByYWRpdXMgKiAwLjY1O1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5nbG9iYWxBbHBoYSA9IGdsb2JhbEFscGhhO1xuICAgIGN0eC5saW5lV2lkdGggPSAyO1xuICAgIGlmIChraSA9PT0gMSkge1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyNmZmYnO1xuICAgIH0gZWxzZSBpZiAoa2kgPT09IC0xKSB7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnIzAwMCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN0eC5saW5lV2lkdGggPSAzO1xuICAgIH1cbiAgICBpZiAoY29sb3IpIGN0eC5zdHJva2VTdHlsZSA9IGNvbG9yO1xuICAgIGlmIChzaXplID4gMCkge1xuICAgICAgY3R4LmFyYyh4LCB5LCBzaXplLCAwLCAyICogTWF0aC5QSSwgdHJ1ZSk7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cbn1cbiIsImltcG9ydCBNYXJrdXAgZnJvbSAnLi9NYXJrdXBCYXNlJztcblxuZXhwb3J0IGNsYXNzIENyb3NzTWFya3VwIGV4dGVuZHMgTWFya3VwIHtcbiAgZHJhdygpIHtcbiAgICBjb25zdCB7Y3R4LCB4LCB5LCBzLCBraSwgZ2xvYmFsQWxwaGF9ID0gdGhpcztcbiAgICBjb25zdCByYWRpdXMgPSBzICogMC41O1xuICAgIGxldCBzaXplID0gcmFkaXVzICogMC41O1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5saW5lV2lkdGggPSAzO1xuICAgIGN0eC5nbG9iYWxBbHBoYSA9IGdsb2JhbEFscGhhO1xuICAgIGlmIChraSA9PT0gMSkge1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyNmZmYnO1xuICAgIH0gZWxzZSBpZiAoa2kgPT09IC0xKSB7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnIzAwMCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNpemUgPSByYWRpdXMgKiAwLjU4O1xuICAgIH1cbiAgICBjdHgubW92ZVRvKHggLSBzaXplLCB5IC0gc2l6ZSk7XG4gICAgY3R4LmxpbmVUbyh4ICsgc2l6ZSwgeSArIHNpemUpO1xuICAgIGN0eC5tb3ZlVG8oeCArIHNpemUsIHkgLSBzaXplKTtcbiAgICBjdHgubGluZVRvKHggLSBzaXplLCB5ICsgc2l6ZSk7XG5cbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LnN0cm9rZSgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cbn1cbiIsImltcG9ydCBNYXJrdXAgZnJvbSAnLi9NYXJrdXBCYXNlJztcblxuZXhwb3J0IGNsYXNzIFRleHRNYXJrdXAgZXh0ZW5kcyBNYXJrdXAge1xuICBkcmF3KCkge1xuICAgIGNvbnN0IHtjdHgsIHgsIHksIHMsIGtpLCB2YWwsIGdsb2JhbEFscGhhfSA9IHRoaXM7XG4gICAgY29uc3Qgc2l6ZSA9IHMgKiAwLjg7XG4gICAgbGV0IGZvbnRTaXplID0gc2l6ZSAvIDEuNTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5nbG9iYWxBbHBoYSA9IGdsb2JhbEFscGhhO1xuXG4gICAgaWYgKGtpID09PSAxKSB7XG4gICAgICBjdHguZmlsbFN0eWxlID0gJyNmZmYnO1xuICAgIH0gZWxzZSBpZiAoa2kgPT09IC0xKSB7XG4gICAgICBjdHguZmlsbFN0eWxlID0gJyMwMDAnO1xuICAgIH1cbiAgICAvLyBlbHNlIHtcbiAgICAvLyAgIGN0eC5jbGVhclJlY3QoeCAtIHNpemUgLyAyLCB5IC0gc2l6ZSAvIDIsIHNpemUsIHNpemUpO1xuICAgIC8vIH1cbiAgICBpZiAodmFsLnRvU3RyaW5nKCkubGVuZ3RoID09PSAxKSB7XG4gICAgICBmb250U2l6ZSA9IHNpemUgLyAxLjU7XG4gICAgfSBlbHNlIGlmICh2YWwudG9TdHJpbmcoKS5sZW5ndGggPT09IDIpIHtcbiAgICAgIGZvbnRTaXplID0gc2l6ZSAvIDEuODtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9udFNpemUgPSBzaXplIC8gMi4wO1xuICAgIH1cbiAgICBjdHguZm9udCA9IGBib2xkICR7Zm9udFNpemV9cHggVGFob21hYDtcbiAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgIGN0eC5maWxsVGV4dCh2YWwudG9TdHJpbmcoKSwgeCwgeSArIDIpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cbn1cbiIsImltcG9ydCBNYXJrdXAgZnJvbSAnLi9NYXJrdXBCYXNlJztcblxuZXhwb3J0IGNsYXNzIFNxdWFyZU1hcmt1cCBleHRlbmRzIE1hcmt1cCB7XG4gIGRyYXcoKSB7XG4gICAgY29uc3Qge2N0eCwgeCwgeSwgcywga2ksIGdsb2JhbEFscGhhfSA9IHRoaXM7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmxpbmVXaWR0aCA9IDI7XG4gICAgY3R4Lmdsb2JhbEFscGhhID0gZ2xvYmFsQWxwaGE7XG4gICAgbGV0IHNpemUgPSBzICogMC41NTtcbiAgICBpZiAoa2kgPT09IDEpIHtcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9ICcjZmZmJztcbiAgICB9IGVsc2UgaWYgKGtpID09PSAtMSkge1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyMwMDAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnIzAwMCc7XG4gICAgICBjdHgubGluZVdpZHRoID0gMztcbiAgICB9XG4gICAgY3R4LnJlY3QoeCAtIHNpemUgLyAyLCB5IC0gc2l6ZSAvIDIsIHNpemUsIHNpemUpO1xuICAgIGN0eC5zdHJva2UoKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgTWFya3VwIGZyb20gJy4vTWFya3VwQmFzZSc7XG5cbmV4cG9ydCBjbGFzcyBUcmlhbmdsZU1hcmt1cCBleHRlbmRzIE1hcmt1cCB7XG4gIGRyYXcoKSB7XG4gICAgY29uc3Qge2N0eCwgeCwgeSwgcywga2ksIGdsb2JhbEFscGhhfSA9IHRoaXM7XG4gICAgY29uc3QgcmFkaXVzID0gcyAqIDAuNTtcbiAgICBsZXQgc2l6ZSA9IHJhZGl1cyAqIDAuNzU7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4Lmdsb2JhbEFscGhhID0gZ2xvYmFsQWxwaGE7XG4gICAgY3R4Lm1vdmVUbyh4LCB5IC0gc2l6ZSk7XG4gICAgY3R4LmxpbmVUbyh4IC0gc2l6ZSAqIE1hdGguY29zKDAuNTIzKSwgeSArIHNpemUgKiBNYXRoLnNpbigwLjUyMykpO1xuICAgIGN0eC5saW5lVG8oeCArIHNpemUgKiBNYXRoLmNvcygwLjUyMyksIHkgKyBzaXplICogTWF0aC5zaW4oMC41MjMpKTtcblxuICAgIGN0eC5saW5lV2lkdGggPSAyO1xuICAgIGlmIChraSA9PT0gMSkge1xuICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJyNmZmYnO1xuICAgIH0gZWxzZSBpZiAoa2kgPT09IC0xKSB7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSAnIzAwMCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN0eC5saW5lV2lkdGggPSAzO1xuICAgICAgc2l6ZSA9IHJhZGl1cyAqIDAuNztcbiAgICB9XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5zdHJva2UoKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgTWFya3VwIGZyb20gJy4vTWFya3VwQmFzZSc7XG5cbmV4cG9ydCBjbGFzcyBOb2RlTWFya3VwIGV4dGVuZHMgTWFya3VwIHtcbiAgZHJhdygpIHtcbiAgICBjb25zdCB7Y3R4LCB4LCB5LCBzLCBraSwgY29sb3IsIGdsb2JhbEFscGhhfSA9IHRoaXM7XG4gICAgY29uc3QgcmFkaXVzID0gcyAqIDAuNTtcbiAgICBsZXQgc2l6ZSA9IHJhZGl1cyAqIDAuNDtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguZ2xvYmFsQWxwaGEgPSBnbG9iYWxBbHBoYTtcbiAgICBjdHgubGluZVdpZHRoID0gNDtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBjb2xvcjtcbiAgICBpZiAoc2l6ZSA+IDApIHtcbiAgICAgIGN0eC5hcmMoeCwgeSwgc2l6ZSwgMCwgMiAqIE1hdGguUEksIHRydWUpO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgTWFya3VwIGZyb20gJy4vTWFya3VwQmFzZSc7XG5cbmV4cG9ydCBjbGFzcyBQb3NpdGl2ZU5vZGVNYXJrdXAgZXh0ZW5kcyBNYXJrdXAge1xuICBkcmF3KCkge1xuICAgIGNvbnN0IHtjdHgsIHgsIHksIHMsIGtpLCBjb2xvciwgZ2xvYmFsQWxwaGF9ID0gdGhpcztcbiAgICBjb25zdCByYWRpdXMgPSBzICogMC41O1xuICAgIGxldCBzaXplID0gcmFkaXVzICogMC41O1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5nbG9iYWxBbHBoYSA9IGdsb2JhbEFscGhhO1xuICAgIGN0eC5saW5lV2lkdGggPSA0O1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IGNvbG9yO1xuICAgIGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICBpZiAoc2l6ZSA+IDApIHtcbiAgICAgIGN0eC5hcmMoeCwgeSwgc2l6ZSwgMCwgMiAqIE1hdGguUEksIHRydWUpO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuXG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IGNvbG9yO1xuICAgIGlmIChzaXplID4gMCkge1xuICAgICAgY3R4LmFyYyh4LCB5LCBzaXplICogMC40LCAwLCAyICogTWF0aC5QSSwgdHJ1ZSk7XG4gICAgICBjdHguZmlsbCgpO1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgTWFya3VwIGZyb20gJy4vTWFya3VwQmFzZSc7XG5cbmV4cG9ydCBjbGFzcyBDaXJjbGVTb2xpZE1hcmt1cCBleHRlbmRzIE1hcmt1cCB7XG4gIGRyYXcoKSB7XG4gICAgY29uc3Qge2N0eCwgeCwgeSwgcywga2ksIGdsb2JhbEFscGhhLCBjb2xvcn0gPSB0aGlzO1xuICAgIGNvbnN0IHJhZGl1cyA9IHMgKiAwLjI1O1xuICAgIGxldCBzaXplID0gcmFkaXVzICogMC42NTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguZ2xvYmFsQWxwaGEgPSBnbG9iYWxBbHBoYTtcbiAgICBjdHgubGluZVdpZHRoID0gMjtcbiAgICBpZiAoa2kgPT09IDEpIHtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAnI2ZmZic7XG4gICAgfSBlbHNlIGlmIChraSA9PT0gLTEpIHtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAnIzAwMCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN0eC5saW5lV2lkdGggPSAzO1xuICAgIH1cbiAgICBpZiAoY29sb3IpIGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICBpZiAoc2l6ZSA+IDApIHtcbiAgICAgIGN0eC5hcmMoeCwgeSwgc2l6ZSwgMCwgMiAqIE1hdGguUEksIHRydWUpO1xuICAgICAgY3R4LmZpbGwoKTtcbiAgICB9XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgRWZmZWN0QmFzZSB7XG4gIHByb3RlY3RlZCBnbG9iYWxBbHBoYSA9IDE7XG4gIHByb3RlY3RlZCBjb2xvciA9ICcnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCxcbiAgICBwcm90ZWN0ZWQgeDogbnVtYmVyLFxuICAgIHByb3RlY3RlZCB5OiBudW1iZXIsXG4gICAgcHJvdGVjdGVkIHNpemU6IG51bWJlcixcbiAgICBwcm90ZWN0ZWQga2k6IG51bWJlclxuICApIHt9XG5cbiAgcGxheSgpIHtcbiAgICBjb25zb2xlLmxvZygnVEJEJyk7XG4gIH1cbn1cbiIsIi8qKlxuICogIGJhc2U2NC50c1xuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQlNEIDMtQ2xhdXNlIExpY2Vuc2UuXG4gKiAgICBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKlxuICogIFJlZmVyZW5jZXM6XG4gKiAgICBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NFxuICpcbiAqIEBhdXRob3IgRGFuIEtvZ2FpIChodHRwczovL2dpdGh1Yi5jb20vZGFua29nYWkpXG4gKi9cbmNvbnN0IHZlcnNpb24gPSAnMy43LjcnO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCB1c2UgbG93ZXJjYXNlIGB2ZXJzaW9uYC5cbiAqL1xuY29uc3QgVkVSU0lPTiA9IHZlcnNpb247XG5jb25zdCBfaGFzQnVmZmVyID0gdHlwZW9mIEJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJztcbmNvbnN0IF9URCA9IHR5cGVvZiBUZXh0RGVjb2RlciA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBUZXh0RGVjb2RlcigpIDogdW5kZWZpbmVkO1xuY29uc3QgX1RFID0gdHlwZW9mIFRleHRFbmNvZGVyID09PSAnZnVuY3Rpb24nID8gbmV3IFRleHRFbmNvZGVyKCkgOiB1bmRlZmluZWQ7XG5jb25zdCBiNjRjaCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5jb25zdCBiNjRjaHMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChiNjRjaCk7XG5jb25zdCBiNjR0YWIgPSAoKGEpID0+IHtcbiAgICBsZXQgdGFiID0ge307XG4gICAgYS5mb3JFYWNoKChjLCBpKSA9PiB0YWJbY10gPSBpKTtcbiAgICByZXR1cm4gdGFiO1xufSkoYjY0Y2hzKTtcbmNvbnN0IGI2NHJlID0gL14oPzpbQS1aYS16XFxkK1xcL117NH0pKj8oPzpbQS1aYS16XFxkK1xcL117Mn0oPzo9PSk/fFtBLVphLXpcXGQrXFwvXXszfT0/KT8kLztcbmNvbnN0IF9mcm9tQ0MgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmJpbmQoU3RyaW5nKTtcbmNvbnN0IF9VOEFmcm9tID0gdHlwZW9mIFVpbnQ4QXJyYXkuZnJvbSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gVWludDhBcnJheS5mcm9tLmJpbmQoVWludDhBcnJheSlcbiAgICA6IChpdCkgPT4gbmV3IFVpbnQ4QXJyYXkoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoaXQsIDApKTtcbmNvbnN0IF9ta1VyaVNhZmUgPSAoc3JjKSA9PiBzcmNcbiAgICAucmVwbGFjZSgvPS9nLCAnJykucmVwbGFjZSgvWytcXC9dL2csIChtMCkgPT4gbTAgPT0gJysnID8gJy0nIDogJ18nKTtcbmNvbnN0IF90aWR5QjY0ID0gKHMpID0+IHMucmVwbGFjZSgvW15BLVphLXowLTlcXCtcXC9dL2csICcnKTtcbi8qKlxuICogcG9seWZpbGwgdmVyc2lvbiBvZiBgYnRvYWBcbiAqL1xuY29uc3QgYnRvYVBvbHlmaWxsID0gKGJpbikgPT4ge1xuICAgIC8vIGNvbnNvbGUubG9nKCdwb2x5ZmlsbGVkJyk7XG4gICAgbGV0IHUzMiwgYzAsIGMxLCBjMiwgYXNjID0gJyc7XG4gICAgY29uc3QgcGFkID0gYmluLmxlbmd0aCAlIDM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW4ubGVuZ3RoOykge1xuICAgICAgICBpZiAoKGMwID0gYmluLmNoYXJDb2RlQXQoaSsrKSkgPiAyNTUgfHxcbiAgICAgICAgICAgIChjMSA9IGJpbi5jaGFyQ29kZUF0KGkrKykpID4gMjU1IHx8XG4gICAgICAgICAgICAoYzIgPSBiaW4uY2hhckNvZGVBdChpKyspKSA+IDI1NSlcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ludmFsaWQgY2hhcmFjdGVyIGZvdW5kJyk7XG4gICAgICAgIHUzMiA9IChjMCA8PCAxNikgfCAoYzEgPDwgOCkgfCBjMjtcbiAgICAgICAgYXNjICs9IGI2NGNoc1t1MzIgPj4gMTggJiA2M11cbiAgICAgICAgICAgICsgYjY0Y2hzW3UzMiA+PiAxMiAmIDYzXVxuICAgICAgICAgICAgKyBiNjRjaHNbdTMyID4+IDYgJiA2M11cbiAgICAgICAgICAgICsgYjY0Y2hzW3UzMiAmIDYzXTtcbiAgICB9XG4gICAgcmV0dXJuIHBhZCA/IGFzYy5zbGljZSgwLCBwYWQgLSAzKSArIFwiPT09XCIuc3Vic3RyaW5nKHBhZCkgOiBhc2M7XG59O1xuLyoqXG4gKiBkb2VzIHdoYXQgYHdpbmRvdy5idG9hYCBvZiB3ZWIgYnJvd3NlcnMgZG8uXG4gKiBAcGFyYW0ge1N0cmluZ30gYmluIGJpbmFyeSBzdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEJhc2U2NC1lbmNvZGVkIHN0cmluZ1xuICovXG5jb25zdCBfYnRvYSA9IHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nID8gKGJpbikgPT4gYnRvYShiaW4pXG4gICAgOiBfaGFzQnVmZmVyID8gKGJpbikgPT4gQnVmZmVyLmZyb20oYmluLCAnYmluYXJ5JykudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgICAgIDogYnRvYVBvbHlmaWxsO1xuY29uc3QgX2Zyb21VaW50OEFycmF5ID0gX2hhc0J1ZmZlclxuICAgID8gKHU4YSkgPT4gQnVmZmVyLmZyb20odThhKS50b1N0cmluZygnYmFzZTY0JylcbiAgICA6ICh1OGEpID0+IHtcbiAgICAgICAgLy8gY2YuIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEyNzEwMDAxL2hvdy10by1jb252ZXJ0LXVpbnQ4LWFycmF5LXRvLWJhc2U2NC1lbmNvZGVkLXN0cmluZy8xMjcxMzMyNiMxMjcxMzMyNlxuICAgICAgICBjb25zdCBtYXhhcmdzID0gMHgxMDAwO1xuICAgICAgICBsZXQgc3RycyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHU4YS5sZW5ndGg7IGkgPCBsOyBpICs9IG1heGFyZ3MpIHtcbiAgICAgICAgICAgIHN0cnMucHVzaChfZnJvbUNDLmFwcGx5KG51bGwsIHU4YS5zdWJhcnJheShpLCBpICsgbWF4YXJncykpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX2J0b2Eoc3Rycy5qb2luKCcnKSk7XG4gICAgfTtcbi8qKlxuICogY29udmVydHMgYSBVaW50OEFycmF5IHRvIGEgQmFzZTY0IHN0cmluZy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VybHNhZmVdIFVSTC1hbmQtZmlsZW5hbWUtc2FmZSBhIGxhIFJGQzQ2NDggwqc1XG4gKiBAcmV0dXJucyB7c3RyaW5nfSBCYXNlNjQgc3RyaW5nXG4gKi9cbmNvbnN0IGZyb21VaW50OEFycmF5ID0gKHU4YSwgdXJsc2FmZSA9IGZhbHNlKSA9PiB1cmxzYWZlID8gX21rVXJpU2FmZShfZnJvbVVpbnQ4QXJyYXkodThhKSkgOiBfZnJvbVVpbnQ4QXJyYXkodThhKTtcbi8vIFRoaXMgdHJpY2sgaXMgZm91bmQgYnJva2VuIGh0dHBzOi8vZ2l0aHViLmNvbS9kYW5rb2dhaS9qcy1iYXNlNjQvaXNzdWVzLzEzMFxuLy8gY29uc3QgdXRvYiA9IChzcmM6IHN0cmluZykgPT4gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHNyYykpO1xuLy8gcmV2ZXJ0aW5nIGdvb2Qgb2xkIGZhdGlvbmVkIHJlZ2V4cFxuY29uc3QgY2JfdXRvYiA9IChjKSA9PiB7XG4gICAgaWYgKGMubGVuZ3RoIDwgMikge1xuICAgICAgICB2YXIgY2MgPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIHJldHVybiBjYyA8IDB4ODAgPyBjXG4gICAgICAgICAgICA6IGNjIDwgMHg4MDAgPyAoX2Zyb21DQygweGMwIHwgKGNjID4+PiA2KSlcbiAgICAgICAgICAgICAgICArIF9mcm9tQ0MoMHg4MCB8IChjYyAmIDB4M2YpKSlcbiAgICAgICAgICAgICAgICA6IChfZnJvbUNDKDB4ZTAgfCAoKGNjID4+PiAxMikgJiAweDBmKSlcbiAgICAgICAgICAgICAgICAgICAgKyBfZnJvbUNDKDB4ODAgfCAoKGNjID4+PiA2KSAmIDB4M2YpKVxuICAgICAgICAgICAgICAgICAgICArIF9mcm9tQ0MoMHg4MCB8IChjYyAmIDB4M2YpKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgY2MgPSAweDEwMDAwXG4gICAgICAgICAgICArIChjLmNoYXJDb2RlQXQoMCkgLSAweEQ4MDApICogMHg0MDBcbiAgICAgICAgICAgICsgKGMuY2hhckNvZGVBdCgxKSAtIDB4REMwMCk7XG4gICAgICAgIHJldHVybiAoX2Zyb21DQygweGYwIHwgKChjYyA+Pj4gMTgpICYgMHgwNykpXG4gICAgICAgICAgICArIF9mcm9tQ0MoMHg4MCB8ICgoY2MgPj4+IDEyKSAmIDB4M2YpKVxuICAgICAgICAgICAgKyBfZnJvbUNDKDB4ODAgfCAoKGNjID4+PiA2KSAmIDB4M2YpKVxuICAgICAgICAgICAgKyBfZnJvbUNDKDB4ODAgfCAoY2MgJiAweDNmKSkpO1xuICAgIH1cbn07XG5jb25zdCByZV91dG9iID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRkZdfFteXFx4MDAtXFx4N0ZdL2c7XG4vKipcbiAqIEBkZXByZWNhdGVkIHNob3VsZCBoYXZlIGJlZW4gaW50ZXJuYWwgdXNlIG9ubHkuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3JjIFVURi04IHN0cmluZ1xuICogQHJldHVybnMge3N0cmluZ30gVVRGLTE2IHN0cmluZ1xuICovXG5jb25zdCB1dG9iID0gKHUpID0+IHUucmVwbGFjZShyZV91dG9iLCBjYl91dG9iKTtcbi8vXG5jb25zdCBfZW5jb2RlID0gX2hhc0J1ZmZlclxuICAgID8gKHMpID0+IEJ1ZmZlci5mcm9tKHMsICd1dGY4JykudG9TdHJpbmcoJ2Jhc2U2NCcpXG4gICAgOiBfVEVcbiAgICAgICAgPyAocykgPT4gX2Zyb21VaW50OEFycmF5KF9URS5lbmNvZGUocykpXG4gICAgICAgIDogKHMpID0+IF9idG9hKHV0b2IocykpO1xuLyoqXG4gKiBjb252ZXJ0cyBhIFVURi04LWVuY29kZWQgc3RyaW5nIHRvIGEgQmFzZTY0IHN0cmluZy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VybHNhZmVdIGlmIGB0cnVlYCBtYWtlIHRoZSByZXN1bHQgVVJMLXNhZmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEJhc2U2NCBzdHJpbmdcbiAqL1xuY29uc3QgZW5jb2RlID0gKHNyYywgdXJsc2FmZSA9IGZhbHNlKSA9PiB1cmxzYWZlXG4gICAgPyBfbWtVcmlTYWZlKF9lbmNvZGUoc3JjKSlcbiAgICA6IF9lbmNvZGUoc3JjKTtcbi8qKlxuICogY29udmVydHMgYSBVVEYtOC1lbmNvZGVkIHN0cmluZyB0byBVUkwtc2FmZSBCYXNlNjQgUkZDNDY0OCDCpzUuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBCYXNlNjQgc3RyaW5nXG4gKi9cbmNvbnN0IGVuY29kZVVSSSA9IChzcmMpID0+IGVuY29kZShzcmMsIHRydWUpO1xuLy8gVGhpcyB0cmljayBpcyBmb3VuZCBicm9rZW4gaHR0cHM6Ly9naXRodWIuY29tL2RhbmtvZ2FpL2pzLWJhc2U2NC9pc3N1ZXMvMTMwXG4vLyBjb25zdCBidG91ID0gKHNyYzogc3RyaW5nKSA9PiBkZWNvZGVVUklDb21wb25lbnQoZXNjYXBlKHNyYykpO1xuLy8gcmV2ZXJ0aW5nIGdvb2Qgb2xkIGZhdGlvbmVkIHJlZ2V4cFxuY29uc3QgcmVfYnRvdSA9IC9bXFx4QzAtXFx4REZdW1xceDgwLVxceEJGXXxbXFx4RTAtXFx4RUZdW1xceDgwLVxceEJGXXsyfXxbXFx4RjAtXFx4RjddW1xceDgwLVxceEJGXXszfS9nO1xuY29uc3QgY2JfYnRvdSA9IChjY2NjKSA9PiB7XG4gICAgc3dpdGNoIChjY2NjLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICB2YXIgY3AgPSAoKDB4MDcgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDE4KVxuICAgICAgICAgICAgICAgIHwgKCgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDEpKSA8PCAxMilcbiAgICAgICAgICAgICAgICB8ICgoMHgzZiAmIGNjY2MuY2hhckNvZGVBdCgyKSkgPDwgNilcbiAgICAgICAgICAgICAgICB8ICgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDMpKSwgb2Zmc2V0ID0gY3AgLSAweDEwMDAwO1xuICAgICAgICAgICAgcmV0dXJuIChfZnJvbUNDKChvZmZzZXQgPj4+IDEwKSArIDB4RDgwMClcbiAgICAgICAgICAgICAgICArIF9mcm9tQ0MoKG9mZnNldCAmIDB4M0ZGKSArIDB4REMwMCkpO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gX2Zyb21DQygoKDB4MGYgJiBjY2NjLmNoYXJDb2RlQXQoMCkpIDw8IDEyKVxuICAgICAgICAgICAgICAgIHwgKCgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDEpKSA8PCA2KVxuICAgICAgICAgICAgICAgIHwgKDB4M2YgJiBjY2NjLmNoYXJDb2RlQXQoMikpKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBfZnJvbUNDKCgoMHgxZiAmIGNjY2MuY2hhckNvZGVBdCgwKSkgPDwgNilcbiAgICAgICAgICAgICAgICB8ICgweDNmICYgY2NjYy5jaGFyQ29kZUF0KDEpKSk7XG4gICAgfVxufTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgc2hvdWxkIGhhdmUgYmVlbiBpbnRlcm5hbCB1c2Ugb25seS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgVVRGLTE2IHN0cmluZ1xuICogQHJldHVybnMge3N0cmluZ30gVVRGLTggc3RyaW5nXG4gKi9cbmNvbnN0IGJ0b3UgPSAoYikgPT4gYi5yZXBsYWNlKHJlX2J0b3UsIGNiX2J0b3UpO1xuLyoqXG4gKiBwb2x5ZmlsbCB2ZXJzaW9uIG9mIGBhdG9iYFxuICovXG5jb25zdCBhdG9iUG9seWZpbGwgPSAoYXNjKSA9PiB7XG4gICAgLy8gY29uc29sZS5sb2coJ3BvbHlmaWxsZWQnKTtcbiAgICBhc2MgPSBhc2MucmVwbGFjZSgvXFxzKy9nLCAnJyk7XG4gICAgaWYgKCFiNjRyZS50ZXN0KGFzYykpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21hbGZvcm1lZCBiYXNlNjQuJyk7XG4gICAgYXNjICs9ICc9PScuc2xpY2UoMiAtIChhc2MubGVuZ3RoICYgMykpO1xuICAgIGxldCB1MjQsIGJpbiA9ICcnLCByMSwgcjI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhc2MubGVuZ3RoOykge1xuICAgICAgICB1MjQgPSBiNjR0YWJbYXNjLmNoYXJBdChpKyspXSA8PCAxOFxuICAgICAgICAgICAgfCBiNjR0YWJbYXNjLmNoYXJBdChpKyspXSA8PCAxMlxuICAgICAgICAgICAgfCAocjEgPSBiNjR0YWJbYXNjLmNoYXJBdChpKyspXSkgPDwgNlxuICAgICAgICAgICAgfCAocjIgPSBiNjR0YWJbYXNjLmNoYXJBdChpKyspXSk7XG4gICAgICAgIGJpbiArPSByMSA9PT0gNjQgPyBfZnJvbUNDKHUyNCA+PiAxNiAmIDI1NSlcbiAgICAgICAgICAgIDogcjIgPT09IDY0ID8gX2Zyb21DQyh1MjQgPj4gMTYgJiAyNTUsIHUyNCA+PiA4ICYgMjU1KVxuICAgICAgICAgICAgICAgIDogX2Zyb21DQyh1MjQgPj4gMTYgJiAyNTUsIHUyNCA+PiA4ICYgMjU1LCB1MjQgJiAyNTUpO1xuICAgIH1cbiAgICByZXR1cm4gYmluO1xufTtcbi8qKlxuICogZG9lcyB3aGF0IGB3aW5kb3cuYXRvYmAgb2Ygd2ViIGJyb3dzZXJzIGRvLlxuICogQHBhcmFtIHtTdHJpbmd9IGFzYyBCYXNlNjQtZW5jb2RlZCBzdHJpbmdcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGJpbmFyeSBzdHJpbmdcbiAqL1xuY29uc3QgX2F0b2IgPSB0eXBlb2YgYXRvYiA9PT0gJ2Z1bmN0aW9uJyA/IChhc2MpID0+IGF0b2IoX3RpZHlCNjQoYXNjKSlcbiAgICA6IF9oYXNCdWZmZXIgPyAoYXNjKSA9PiBCdWZmZXIuZnJvbShhc2MsICdiYXNlNjQnKS50b1N0cmluZygnYmluYXJ5JylcbiAgICAgICAgOiBhdG9iUG9seWZpbGw7XG4vL1xuY29uc3QgX3RvVWludDhBcnJheSA9IF9oYXNCdWZmZXJcbiAgICA/IChhKSA9PiBfVThBZnJvbShCdWZmZXIuZnJvbShhLCAnYmFzZTY0JykpXG4gICAgOiAoYSkgPT4gX1U4QWZyb20oX2F0b2IoYSkuc3BsaXQoJycpLm1hcChjID0+IGMuY2hhckNvZGVBdCgwKSkpO1xuLyoqXG4gKiBjb252ZXJ0cyBhIEJhc2U2NCBzdHJpbmcgdG8gYSBVaW50OEFycmF5LlxuICovXG5jb25zdCB0b1VpbnQ4QXJyYXkgPSAoYSkgPT4gX3RvVWludDhBcnJheShfdW5VUkkoYSkpO1xuLy9cbmNvbnN0IF9kZWNvZGUgPSBfaGFzQnVmZmVyXG4gICAgPyAoYSkgPT4gQnVmZmVyLmZyb20oYSwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCd1dGY4JylcbiAgICA6IF9URFxuICAgICAgICA/IChhKSA9PiBfVEQuZGVjb2RlKF90b1VpbnQ4QXJyYXkoYSkpXG4gICAgICAgIDogKGEpID0+IGJ0b3UoX2F0b2IoYSkpO1xuY29uc3QgX3VuVVJJID0gKGEpID0+IF90aWR5QjY0KGEucmVwbGFjZSgvWy1fXS9nLCAobTApID0+IG0wID09ICctJyA/ICcrJyA6ICcvJykpO1xuLyoqXG4gKiBjb252ZXJ0cyBhIEJhc2U2NCBzdHJpbmcgdG8gYSBVVEYtOCBzdHJpbmcuXG4gKiBAcGFyYW0ge1N0cmluZ30gc3JjIEJhc2U2NCBzdHJpbmcuICBCb3RoIG5vcm1hbCBhbmQgVVJMLXNhZmUgYXJlIHN1cHBvcnRlZFxuICogQHJldHVybnMge3N0cmluZ30gVVRGLTggc3RyaW5nXG4gKi9cbmNvbnN0IGRlY29kZSA9IChzcmMpID0+IF9kZWNvZGUoX3VuVVJJKHNyYykpO1xuLyoqXG4gKiBjaGVjayBpZiBhIHZhbHVlIGlzIGEgdmFsaWQgQmFzZTY0IHN0cmluZ1xuICogQHBhcmFtIHtTdHJpbmd9IHNyYyBhIHZhbHVlIHRvIGNoZWNrXG4gICovXG5jb25zdCBpc1ZhbGlkID0gKHNyYykgPT4ge1xuICAgIGlmICh0eXBlb2Ygc3JjICE9PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IHMgPSBzcmMucmVwbGFjZSgvXFxzKy9nLCAnJykucmVwbGFjZSgvPXswLDJ9JC8sICcnKTtcbiAgICByZXR1cm4gIS9bXlxcczAtOWEtekEtWlxcKy9dLy50ZXN0KHMpIHx8ICEvW15cXHMwLTlhLXpBLVpcXC1fXS8udGVzdChzKTtcbn07XG4vL1xuY29uc3QgX25vRW51bSA9ICh2KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHYsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfTtcbn07XG4vKipcbiAqIGV4dGVuZCBTdHJpbmcucHJvdG90eXBlIHdpdGggcmVsZXZhbnQgbWV0aG9kc1xuICovXG5jb25zdCBleHRlbmRTdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgX2FkZCA9IChuYW1lLCBib2R5KSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaW5nLnByb3RvdHlwZSwgbmFtZSwgX25vRW51bShib2R5KSk7XG4gICAgX2FkZCgnZnJvbUJhc2U2NCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZSh0aGlzKTsgfSk7XG4gICAgX2FkZCgndG9CYXNlNjQnLCBmdW5jdGlvbiAodXJsc2FmZSkgeyByZXR1cm4gZW5jb2RlKHRoaXMsIHVybHNhZmUpOyB9KTtcbiAgICBfYWRkKCd0b0Jhc2U2NFVSSScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZSh0aGlzLCB0cnVlKTsgfSk7XG4gICAgX2FkZCgndG9CYXNlNjRVUkwnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBlbmNvZGUodGhpcywgdHJ1ZSk7IH0pO1xuICAgIF9hZGQoJ3RvVWludDhBcnJheScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRvVWludDhBcnJheSh0aGlzKTsgfSk7XG59O1xuLyoqXG4gKiBleHRlbmQgVWludDhBcnJheS5wcm90b3R5cGUgd2l0aCByZWxldmFudCBtZXRob2RzXG4gKi9cbmNvbnN0IGV4dGVuZFVpbnQ4QXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgX2FkZCA9IChuYW1lLCBib2R5KSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkoVWludDhBcnJheS5wcm90b3R5cGUsIG5hbWUsIF9ub0VudW0oYm9keSkpO1xuICAgIF9hZGQoJ3RvQmFzZTY0JywgZnVuY3Rpb24gKHVybHNhZmUpIHsgcmV0dXJuIGZyb21VaW50OEFycmF5KHRoaXMsIHVybHNhZmUpOyB9KTtcbiAgICBfYWRkKCd0b0Jhc2U2NFVSSScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZyb21VaW50OEFycmF5KHRoaXMsIHRydWUpOyB9KTtcbiAgICBfYWRkKCd0b0Jhc2U2NFVSTCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZyb21VaW50OEFycmF5KHRoaXMsIHRydWUpOyB9KTtcbn07XG4vKipcbiAqIGV4dGVuZCBCdWlsdGluIHByb3RvdHlwZXMgd2l0aCByZWxldmFudCBtZXRob2RzXG4gKi9cbmNvbnN0IGV4dGVuZEJ1aWx0aW5zID0gKCkgPT4ge1xuICAgIGV4dGVuZFN0cmluZygpO1xuICAgIGV4dGVuZFVpbnQ4QXJyYXkoKTtcbn07XG5jb25zdCBnQmFzZTY0ID0ge1xuICAgIHZlcnNpb246IHZlcnNpb24sXG4gICAgVkVSU0lPTjogVkVSU0lPTixcbiAgICBhdG9iOiBfYXRvYixcbiAgICBhdG9iUG9seWZpbGw6IGF0b2JQb2x5ZmlsbCxcbiAgICBidG9hOiBfYnRvYSxcbiAgICBidG9hUG9seWZpbGw6IGJ0b2FQb2x5ZmlsbCxcbiAgICBmcm9tQmFzZTY0OiBkZWNvZGUsXG4gICAgdG9CYXNlNjQ6IGVuY29kZSxcbiAgICBlbmNvZGU6IGVuY29kZSxcbiAgICBlbmNvZGVVUkk6IGVuY29kZVVSSSxcbiAgICBlbmNvZGVVUkw6IGVuY29kZVVSSSxcbiAgICB1dG9iOiB1dG9iLFxuICAgIGJ0b3U6IGJ0b3UsXG4gICAgZGVjb2RlOiBkZWNvZGUsXG4gICAgaXNWYWxpZDogaXNWYWxpZCxcbiAgICBmcm9tVWludDhBcnJheTogZnJvbVVpbnQ4QXJyYXksXG4gICAgdG9VaW50OEFycmF5OiB0b1VpbnQ4QXJyYXksXG4gICAgZXh0ZW5kU3RyaW5nOiBleHRlbmRTdHJpbmcsXG4gICAgZXh0ZW5kVWludDhBcnJheTogZXh0ZW5kVWludDhBcnJheSxcbiAgICBleHRlbmRCdWlsdGluczogZXh0ZW5kQnVpbHRpbnNcbn07XG4vLyBtYWtlY2pzOkNVVCAvL1xuZXhwb3J0IHsgdmVyc2lvbiB9O1xuZXhwb3J0IHsgVkVSU0lPTiB9O1xuZXhwb3J0IHsgX2F0b2IgYXMgYXRvYiB9O1xuZXhwb3J0IHsgYXRvYlBvbHlmaWxsIH07XG5leHBvcnQgeyBfYnRvYSBhcyBidG9hIH07XG5leHBvcnQgeyBidG9hUG9seWZpbGwgfTtcbmV4cG9ydCB7IGRlY29kZSBhcyBmcm9tQmFzZTY0IH07XG5leHBvcnQgeyBlbmNvZGUgYXMgdG9CYXNlNjQgfTtcbmV4cG9ydCB7IHV0b2IgfTtcbmV4cG9ydCB7IGVuY29kZSB9O1xuZXhwb3J0IHsgZW5jb2RlVVJJIH07XG5leHBvcnQgeyBlbmNvZGVVUkkgYXMgZW5jb2RlVVJMIH07XG5leHBvcnQgeyBidG91IH07XG5leHBvcnQgeyBkZWNvZGUgfTtcbmV4cG9ydCB7IGlzVmFsaWQgfTtcbmV4cG9ydCB7IGZyb21VaW50OEFycmF5IH07XG5leHBvcnQgeyB0b1VpbnQ4QXJyYXkgfTtcbmV4cG9ydCB7IGV4dGVuZFN0cmluZyB9O1xuZXhwb3J0IHsgZXh0ZW5kVWludDhBcnJheSB9O1xuZXhwb3J0IHsgZXh0ZW5kQnVpbHRpbnMgfTtcbi8vIGFuZCBmaW5hbGx5LFxuZXhwb3J0IHsgZ0Jhc2U2NCBhcyBCYXNlNjQgfTtcbiIsImltcG9ydCBFZmZlY3RCYXNlIGZyb20gJy4vRWZmZWN0QmFzZSc7XG5pbXBvcnQge2VuY29kZX0gZnJvbSAnanMtYmFzZTY0JztcblxuY29uc3QgYmFuU3ZnID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBjbGFzcz1cImJpIGJpLWJhblwiIHZpZXdCb3g9XCIwIDAgMTYgMTZcIj5cbiAgPHBhdGggZD1cIk0xNSA4YTYuOTcgNi45NyAwIDAgMC0xLjcxLTQuNTg0bC05Ljg3NCA5Ljg3NUE3IDcgMCAwIDAgMTUgOE0yLjcxIDEyLjU4NGw5Ljg3NC05Ljg3NWE3IDcgMCAwIDAtOS44NzQgOS44NzRaTTE2IDhBOCA4IDAgMSAxIDAgOGE4IDggMCAwIDEgMTYgMFwiLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCBjbGFzcyBCYW5FZmZlY3QgZXh0ZW5kcyBFZmZlY3RCYXNlIHtcbiAgcHJpdmF0ZSBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgcHJpdmF0ZSBhbHBoYSA9IDA7XG4gIHByaXZhdGUgZmFkZUluRHVyYXRpb24gPSAyMDA7XG4gIHByaXZhdGUgZmFkZU91dER1cmF0aW9uID0gMTUwO1xuICBwcml2YXRlIHN0YXlEdXJhdGlvbiA9IDQwMDtcbiAgcHJpdmF0ZSBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICBwcml2YXRlIGlzRmFkaW5nT3V0ID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELFxuICAgIHByb3RlY3RlZCB4OiBudW1iZXIsXG4gICAgcHJvdGVjdGVkIHk6IG51bWJlcixcbiAgICBwcm90ZWN0ZWQgc2l6ZTogbnVtYmVyLFxuICAgIHByb3RlY3RlZCBraTogbnVtYmVyXG4gICkge1xuICAgIHN1cGVyKGN0eCwgeCwgeSwgc2l6ZSwga2kpO1xuXG4gICAgLy8gQ29udmVydCBTVkcgc3RyaW5nIHRvIGEgZGF0YSBVUkxcbiAgICBjb25zdCBzdmdCbG9iID0gbmV3IEJsb2IoW2JhblN2Z10sIHt0eXBlOiAnaW1hZ2Uvc3ZnK3htbCd9KTtcblxuICAgIGNvbnN0IHN2Z0RhdGFVcmwgPSBgZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCwke2VuY29kZShiYW5TdmcpfWA7XG5cbiAgICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpO1xuICAgIHRoaXMuaW1nLnNyYyA9IHN2Z0RhdGFVcmw7XG4gIH1cblxuICBwbGF5ID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5pbWcuY29tcGxldGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7Y3R4LCB4LCB5LCBzaXplLCBpbWcsIGZhZGVJbkR1cmF0aW9uLCBmYWRlT3V0RHVyYXRpb259ID0gdGhpcztcblxuICAgIGNvbnN0IG5vdyA9IHBlcmZvcm1hbmNlLm5vdygpO1xuXG4gICAgaWYgKCF0aGlzLnN0YXJ0VGltZSkge1xuICAgICAgdGhpcy5zdGFydFRpbWUgPSBub3c7XG4gICAgfVxuXG4gICAgY3R4LmNsZWFyUmVjdCh4IC0gc2l6ZSAvIDIsIHkgLSBzaXplIC8gMiwgc2l6ZSwgc2l6ZSk7XG4gICAgY3R4Lmdsb2JhbEFscGhhID0gdGhpcy5hbHBoYTtcbiAgICBjdHguZHJhd0ltYWdlKGltZywgeCAtIHNpemUgLyAyLCB5IC0gc2l6ZSAvIDIsIHNpemUsIHNpemUpO1xuICAgIGN0eC5nbG9iYWxBbHBoYSA9IDE7XG5cbiAgICBjb25zdCBlbGFwc2VkID0gbm93IC0gdGhpcy5zdGFydFRpbWU7XG5cbiAgICBpZiAoIXRoaXMuaXNGYWRpbmdPdXQpIHtcbiAgICAgIHRoaXMuYWxwaGEgPSBNYXRoLm1pbihlbGFwc2VkIC8gZmFkZUluRHVyYXRpb24sIDEpO1xuICAgICAgaWYgKGVsYXBzZWQgPj0gZmFkZUluRHVyYXRpb24pIHtcbiAgICAgICAgdGhpcy5hbHBoYSA9IDE7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMuaXNGYWRpbmdPdXQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuc3RhcnRUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIH0sIHRoaXMuc3RheUR1cmF0aW9uKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZmFkZUVsYXBzZWQgPSBub3cgLSB0aGlzLnN0YXJ0VGltZTtcbiAgICAgIHRoaXMuYWxwaGEgPSBNYXRoLm1heCgxIC0gZmFkZUVsYXBzZWQgLyBmYWRlT3V0RHVyYXRpb24sIDApO1xuICAgICAgaWYgKGZhZGVFbGFwc2VkID49IGZhZGVPdXREdXJhdGlvbikge1xuICAgICAgICB0aGlzLmFscGhhID0gMDtcbiAgICAgICAgY3R4LmNsZWFyUmVjdCh4IC0gc2l6ZSAvIDIsIHkgLSBzaXplIC8gMiwgc2l6ZSwgc2l6ZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5wbGF5KTtcbiAgfTtcbn1cbiIsImltcG9ydCB7Y29tcGFjdH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7XG4gIGNhbGNWaXNpYmxlQXJlYSxcbiAgcmV2ZXJzZU9mZnNldCxcbiAgemVyb3MsXG4gIGVtcHR5LFxuICBhMVRvUG9zLFxuICBvZmZzZXRBMU1vdmUsXG59IGZyb20gJy4vaGVscGVyJztcbmltcG9ydCB7XG4gIEExX0xFVFRFUlMsXG4gIEExX05VTUJFUlMsXG4gIERFRkFVTFRfT1BUSU9OUyxcbiAgTUFYX0JPQVJEX1NJWkUsXG4gIFRIRU1FX1JFU09VUkNFUyxcbn0gZnJvbSAnLi9jb25zdCc7XG5pbXBvcnQge1xuICBDdXJzb3IsXG4gIE1hcmt1cCxcbiAgVGhlbWUsXG4gIEtpLFxuICBBbmFseXNpcyxcbiAgR2hvc3RCYW5PcHRpb25zLFxuICBHaG9zdEJhbk9wdGlvbnNQYXJhbXMsXG4gIENlbnRlcixcbiAgQW5hbHlzaXNQb2ludFRoZW1lLFxuICBFZmZlY3QsXG59IGZyb20gJy4vdHlwZXMnO1xuXG5pbXBvcnQge0ltYWdlU3RvbmUsIENvbG9yU3RvbmV9IGZyb20gJy4vc3RvbmVzJztcbmltcG9ydCBBbmFseXNpc1BvaW50IGZyb20gJy4vc3RvbmVzL0FuYWx5c2lzUG9pbnQnO1xuLy8gaW1wb3J0IHtjcmVhdGUsIG1lYW5EZXBlbmRlbmNpZXMsIHN0ZERlcGVuZGVuY2llc30gZnJvbSAnbWF0aGpzJztcblxuLy8gY29uc3QgY29uZmlnID0ge307XG4vLyBjb25zdCB7c3RkLCBtZWFufSA9IGNyZWF0ZSh7bWVhbkRlcGVuZGVuY2llcywgc3RkRGVwZW5kZW5jaWVzfSwgY29uZmlnKTtcblxuaW1wb3J0IHtcbiAgQ2lyY2xlTWFya3VwLFxuICBDcm9zc01hcmt1cCxcbiAgVGV4dE1hcmt1cCxcbiAgU3F1YXJlTWFya3VwLFxuICBUcmlhbmdsZU1hcmt1cCxcbiAgTm9kZU1hcmt1cCxcbiAgUG9zaXRpdmVOb2RlTWFya3VwLFxuICBDaXJjbGVTb2xpZE1hcmt1cCxcbn0gZnJvbSAnLi9tYXJrdXBzJztcbmltcG9ydCB7QmFuRWZmZWN0fSBmcm9tICcuL2VmZmVjdHMnO1xuXG5jb25zdCBpbWFnZXM6IHtcbiAgW2tleTogc3RyaW5nXTogSFRNTEltYWdlRWxlbWVudDtcbn0gPSB7fTtcblxuZnVuY3Rpb24gaXNNb2JpbGVEZXZpY2UoKSB7XG4gIHJldHVybiAvTW9iaXxBbmRyb2lkfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChcbiAgICBuYXZpZ2F0b3IudXNlckFnZW50XG4gICk7XG59XG5cbmZ1bmN0aW9uIHByZWxvYWQodXJsczogc3RyaW5nW10sIGRvbmU6ICgpID0+IHZvaWQpIHtcbiAgbGV0IGxvYWRlZCA9IDA7XG4gIGNvbnN0IGltYWdlTG9hZGVkID0gKCkgPT4ge1xuICAgIGxvYWRlZCsrO1xuICAgIGlmIChsb2FkZWQgPT09IHVybHMubGVuZ3RoKSB7XG4gICAgICBkb25lKCk7XG4gICAgfVxuICB9O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHVybHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWltYWdlc1t1cmxzW2ldXSkge1xuICAgICAgaW1hZ2VzW3VybHNbaV1dID0gbmV3IEltYWdlKCk7XG4gICAgICBpbWFnZXNbdXJsc1tpXV0uc3JjID0gdXJsc1tpXTtcbiAgICAgIGltYWdlc1t1cmxzW2ldXS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGltYWdlTG9hZGVkKCk7XG4gICAgICB9O1xuICAgICAgaW1hZ2VzW3VybHNbaV1dLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGltYWdlTG9hZGVkKCk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxufVxuXG5sZXQgZHByID0gMS4wO1xuLy8gYnJvd3NlciBjb2RlXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgZHByID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMS4wO1xufVxuXG5leHBvcnQgY2xhc3MgR2hvc3RCYW4ge1xuICBkZWZhdWx0T3B0aW9uczogR2hvc3RCYW5PcHRpb25zID0ge1xuICAgIGJvYXJkU2l6ZTogMTksXG4gICAgZHluYW1pY1BhZGRpbmc6IGZhbHNlLFxuICAgIHBhZGRpbmc6IDEwLFxuICAgIGV4dGVudDogMyxcbiAgICBpbnRlcmFjdGl2ZTogZmFsc2UsXG4gICAgY29vcmRpbmF0ZTogdHJ1ZSxcbiAgICB0aGVtZTogVGhlbWUuQmxhY2tBbmRXaGl0ZSxcbiAgICBhbmFseXNpc1BvaW50VGhlbWU6IEFuYWx5c2lzUG9pbnRUaGVtZS5EZWZhdWx0LFxuICAgIGJhY2tncm91bmQ6IGZhbHNlLFxuICAgIHNob3dBbmFseXNpczogZmFsc2UsXG4gICAgYWRhcHRpdmVCb2FyZExpbmU6IHRydWUsXG4gICAgYm9hcmRFZGdlTGluZVdpZHRoOiA1LFxuICAgIGJvYXJkTGluZVdpZHRoOiAxLFxuICAgIGJvYXJkTGluZUV4dGVudDogMC41LFxuICAgIHRoZW1lRmxhdEJvYXJkQ29sb3I6ICcjRUNCNTVBJyxcbiAgICBwb3NpdGl2ZU5vZGVDb2xvcjogJyM0ZDdjMGYnLFxuICAgIG5lZ2F0aXZlTm9kZUNvbG9yOiAnI2I5MWMxYycsXG4gICAgbmV1dHJhbE5vZGVDb2xvcjogJyNhMTYyMDcnLFxuICAgIGRlZmF1bHROb2RlQ29sb3I6ICcjNDA0MDQwJyxcbiAgICB0aGVtZVJlc291cmNlczogVEhFTUVfUkVTT1VSQ0VTLFxuICAgIG1vdmVTb3VuZDogZmFsc2UsXG4gICAgYWRhcHRpdmVTdGFyU2l6ZTogdHJ1ZSxcbiAgICBzdGFyU2l6ZTogMyxcbiAgfTtcbiAgb3B0aW9uczogR2hvc3RCYW5PcHRpb25zO1xuICBkb206IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkO1xuICBjYW52YXM/OiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgYm9hcmQ/OiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgYW5hbHlzaXNDYW52YXM/OiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgY3Vyc29yQ2FudmFzPzogSFRNTENhbnZhc0VsZW1lbnQ7XG4gIG1hcmt1cENhbnZhcz86IEhUTUxDYW52YXNFbGVtZW50O1xuICBlZmZlY3RDYW52YXM/OiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgbW92ZVNvdW5kQXVkaW8/OiBIVE1MQXVkaW9FbGVtZW50O1xuICB0dXJuOiBLaTtcbiAgcHJpdmF0ZSBjdXJzb3I6IEN1cnNvciA9IEN1cnNvci5Ob25lO1xuICBwcml2YXRlIGN1cnNvclZhbHVlOiBzdHJpbmcgPSAnJztcbiAgcHJpdmF0ZSB0b3VjaE1vdmluZyA9IGZhbHNlO1xuICBwcml2YXRlIHRvdWNoU3RhcnRQb2ludDogRE9NUG9pbnQgPSBuZXcgRE9NUG9pbnQoKTtcbiAgcHVibGljIGN1cnNvclBvc2l0aW9uOiBbbnVtYmVyLCBudW1iZXJdO1xuICBwdWJsaWMgYWN0dWFsQ3Vyc29yUG9zaXRpb246IFtudW1iZXIsIG51bWJlcl07XG4gIHB1YmxpYyBjdXJzb3JQb2ludDogRE9NUG9pbnQgPSBuZXcgRE9NUG9pbnQoKTtcbiAgcHVibGljIGFjdHVhbEN1cnNvclBvaW50OiBET01Qb2ludCA9IG5ldyBET01Qb2ludCgpO1xuICBwdWJsaWMgbWF0OiBudW1iZXJbXVtdO1xuICBwdWJsaWMgbWFya3VwOiBzdHJpbmdbXVtdO1xuICBwdWJsaWMgdmlzaWJsZUFyZWFNYXQ6IG51bWJlcltdW10gfCB1bmRlZmluZWQ7XG4gIHB1YmxpYyBwcmV2ZW50TW92ZU1hdDogbnVtYmVyW11bXTtcbiAgcHVibGljIGVmZmVjdE1hdDogc3RyaW5nW11bXTtcbiAgbWF4aHY6IG51bWJlcjtcbiAgdHJhbnNNYXQ6IERPTU1hdHJpeDtcbiAgYW5hbHlzaXM6IEFuYWx5c2lzIHwgbnVsbDtcbiAgdmlzaWJsZUFyZWE6IG51bWJlcltdW107XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogR2hvc3RCYW5PcHRpb25zUGFyYW1zID0ge30pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAuLi50aGlzLmRlZmF1bHRPcHRpb25zLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9O1xuICAgIGNvbnN0IHNpemUgPSB0aGlzLm9wdGlvbnMuYm9hcmRTaXplO1xuICAgIHRoaXMubWF0ID0gemVyb3MoW3NpemUsIHNpemVdKTtcbiAgICB0aGlzLnByZXZlbnRNb3ZlTWF0ID0gemVyb3MoW3NpemUsIHNpemVdKTtcbiAgICB0aGlzLm1hcmt1cCA9IGVtcHR5KFtzaXplLCBzaXplXSk7XG4gICAgdGhpcy5lZmZlY3RNYXQgPSBlbXB0eShbc2l6ZSwgc2l6ZV0pO1xuICAgIHRoaXMudHVybiA9IEtpLkJsYWNrO1xuICAgIHRoaXMuY3Vyc29yUG9zaXRpb24gPSBbLTEsIC0xXTtcbiAgICB0aGlzLmFjdHVhbEN1cnNvclBvc2l0aW9uID0gWy0xLCAtMV07XG4gICAgdGhpcy5tYXhodiA9IHNpemU7XG4gICAgdGhpcy50cmFuc01hdCA9IG5ldyBET01NYXRyaXgoKTtcbiAgICB0aGlzLmFuYWx5c2lzID0gbnVsbDtcbiAgICB0aGlzLnZpc2libGVBcmVhID0gW1xuICAgICAgWzAsIHNpemUgLSAxXSxcbiAgICAgIFswLCBzaXplIC0gMV0sXG4gICAgXTtcbiAgfVxuXG4gIHNldFR1cm4odHVybjogS2kpIHtcbiAgICB0aGlzLnR1cm4gPSB0dXJuO1xuICB9XG5cbiAgc2V0Qm9hcmRTaXplKHNpemU6IG51bWJlcikge1xuICAgIHRoaXMub3B0aW9ucy5ib2FyZFNpemUgPSBNYXRoLm1pbihzaXplLCBNQVhfQk9BUkRfU0laRSk7XG4gIH1cblxuICByZXNpemUoKSB7XG4gICAgaWYgKFxuICAgICAgIXRoaXMuY2FudmFzIHx8XG4gICAgICAhdGhpcy5jdXJzb3JDYW52YXMgfHxcbiAgICAgICF0aGlzLmRvbSB8fFxuICAgICAgIXRoaXMuYm9hcmQgfHxcbiAgICAgICF0aGlzLm1hcmt1cENhbnZhcyB8fFxuICAgICAgIXRoaXMuYW5hbHlzaXNDYW52YXMgfHxcbiAgICAgICF0aGlzLmVmZmVjdENhbnZhc1xuICAgIClcbiAgICAgIHJldHVybjtcblxuICAgIGNvbnN0IGNhbnZhc2VzID0gW1xuICAgICAgdGhpcy5ib2FyZCxcbiAgICAgIHRoaXMuY2FudmFzLFxuICAgICAgdGhpcy5tYXJrdXBDYW52YXMsXG4gICAgICB0aGlzLmN1cnNvckNhbnZhcyxcbiAgICAgIHRoaXMuYW5hbHlzaXNDYW52YXMsXG4gICAgICB0aGlzLmVmZmVjdENhbnZhcyxcbiAgICBdO1xuXG4gICAgY29uc3Qge3NpemV9ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHtjbGllbnRXaWR0aH0gPSB0aGlzLmRvbTtcblxuICAgIGNhbnZhc2VzLmZvckVhY2goY2FudmFzID0+IHtcbiAgICAgIGlmIChzaXplKSB7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IHNpemUgKiBkcHI7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBzaXplICogZHByO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gY2xpZW50V2lkdGggKyAncHgnO1xuICAgICAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gY2xpZW50V2lkdGggKyAncHgnO1xuICAgICAgICBjYW52YXMud2lkdGggPSBNYXRoLmZsb29yKGNsaWVudFdpZHRoICogZHByKTtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IE1hdGguZmxvb3IoY2xpZW50V2lkdGggKiBkcHIpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuICBwcml2YXRlIGNyZWF0ZUNhbnZhcyhpZDogc3RyaW5nLCBwb2ludGVyRXZlbnRzID0gdHJ1ZSk6IEhUTUxDYW52YXNFbGVtZW50IHtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBjYW52YXMuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIGNhbnZhcy5pZCA9IGlkO1xuICAgIGlmICghcG9pbnRlckV2ZW50cykge1xuICAgICAgY2FudmFzLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG4gICAgfVxuICAgIHJldHVybiBjYW52YXM7XG4gIH1cblxuICBpbml0KGRvbTogSFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCBzaXplID0gdGhpcy5vcHRpb25zLmJvYXJkU2l6ZTtcbiAgICB0aGlzLm1hdCA9IHplcm9zKFtzaXplLCBzaXplXSk7XG4gICAgdGhpcy5tYXJrdXAgPSBlbXB0eShbc2l6ZSwgc2l6ZV0pO1xuICAgIHRoaXMudHJhbnNNYXQgPSBuZXcgRE9NTWF0cml4KCk7XG5cbiAgICB0aGlzLmJvYXJkID0gdGhpcy5jcmVhdGVDYW52YXMoJ2dob3N0YmFuLWJvYXJkJyk7XG4gICAgdGhpcy5jYW52YXMgPSB0aGlzLmNyZWF0ZUNhbnZhcygnZ2hvc3RiYW4tY2FudmFzJyk7XG4gICAgdGhpcy5tYXJrdXBDYW52YXMgPSB0aGlzLmNyZWF0ZUNhbnZhcygnZ2hvc3RiYW4tbWFya3VwJywgZmFsc2UpO1xuICAgIHRoaXMuY3Vyc29yQ2FudmFzID0gdGhpcy5jcmVhdGVDYW52YXMoJ2dob3N0YmFuLWN1cnNvcicpO1xuICAgIHRoaXMuYW5hbHlzaXNDYW52YXMgPSB0aGlzLmNyZWF0ZUNhbnZhcygnZ2hvc3RiYW4tYW5hbHlzaXMnLCBmYWxzZSk7XG4gICAgdGhpcy5lZmZlY3RDYW52YXMgPSB0aGlzLmNyZWF0ZUNhbnZhcygnZ2hvc3RiYW4tZWZmZWN0JywgZmFsc2UpO1xuXG4gICAgdGhpcy5kb20gPSBkb207XG4gICAgZG9tLmlubmVySFRNTCA9ICcnOyAvLyBDbGVhciBleGlzdGluZyBjaGlsZHJlblxuICAgIGRvbS5hcHBlbmRDaGlsZCh0aGlzLmJvYXJkKTtcbiAgICBkb20uYXBwZW5kQ2hpbGQodGhpcy5jYW52YXMpO1xuICAgIGRvbS5hcHBlbmRDaGlsZCh0aGlzLm1hcmt1cENhbnZhcyk7XG4gICAgZG9tLmFwcGVuZENoaWxkKHRoaXMuYW5hbHlzaXNDYW52YXMpO1xuICAgIGRvbS5hcHBlbmRDaGlsZCh0aGlzLmN1cnNvckNhbnZhcyk7XG4gICAgZG9tLmFwcGVuZENoaWxkKHRoaXMuZWZmZWN0Q2FudmFzKTtcblxuICAgIHRoaXMucmVzaXplKCk7XG4gICAgdGhpcy5yZW5kZXJJbnRlcmFjdGl2ZSgpO1xuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4ge1xuICAgICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgc2V0T3B0aW9ucyhvcHRpb25zOiBHaG9zdEJhbk9wdGlvbnNQYXJhbXMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSB7Li4udGhpcy5vcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgICAvLyBUaGUgb25Nb3VzZU1vdmUgZXZlbnQgbmVlZHMgdG8gYmUgcmUtYWRkZWQgYWZ0ZXIgdGhlIG9wdGlvbnMgYXJlIHVwZGF0ZWRcbiAgICB0aGlzLnJlbmRlckludGVyYWN0aXZlKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIHNldE1hdChtYXQ6IG51bWJlcltdW10pIHtcbiAgICB0aGlzLm1hdCA9IG1hdDtcbiAgICBpZiAoIXRoaXMudmlzaWJsZUFyZWFNYXQpIHtcbiAgICAgIHRoaXMudmlzaWJsZUFyZWFNYXQgPSBtYXQ7XG4gICAgfVxuICB9XG5cbiAgc2V0VmlzaWJsZUFyZWFNYXQobWF0OiBudW1iZXJbXVtdKSB7XG4gICAgdGhpcy52aXNpYmxlQXJlYU1hdCA9IG1hdDtcbiAgfVxuXG4gIHNldFByZXZlbnRNb3ZlTWF0KG1hdDogbnVtYmVyW11bXSkge1xuICAgIHRoaXMucHJldmVudE1vdmVNYXQgPSBtYXQ7XG4gIH1cblxuICBzZXRFZmZlY3RNYXQobWF0OiBzdHJpbmdbXVtdKSB7XG4gICAgdGhpcy5lZmZlY3RNYXQgPSBtYXQ7XG4gIH1cblxuICBzZXRNYXJrdXAobWFya3VwOiBzdHJpbmdbXVtdKSB7XG4gICAgdGhpcy5tYXJrdXAgPSBtYXJrdXA7XG4gIH1cblxuICBzZXRDdXJzb3IoY3Vyc29yOiBDdXJzb3IsIHZhbHVlID0gJycpIHtcbiAgICB0aGlzLmN1cnNvciA9IGN1cnNvcjtcbiAgICB0aGlzLmN1cnNvclZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBzZXRDdXJzb3JXaXRoUmVuZGVyID0gKGRvbVBvaW50OiBET01Qb2ludCwgb2Zmc2V0WSA9IDApID0+IHtcbiAgICAvLyBzcGFjZSBuZWVkIHJlY2FsY3VsYXRlIGV2ZXJ5IHRpbWVcbiAgICBjb25zdCB7cGFkZGluZ30gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3Qge3NwYWNlfSA9IHRoaXMuY2FsY1NwYWNlQW5kUGFkZGluZygpO1xuICAgIGNvbnN0IHBvaW50ID0gdGhpcy50cmFuc01hdC5pbnZlcnNlKCkudHJhbnNmb3JtUG9pbnQoZG9tUG9pbnQpO1xuICAgIGNvbnN0IGlkeCA9IE1hdGgucm91bmQoKHBvaW50LnggLSBwYWRkaW5nICsgc3BhY2UgLyAyKSAvIHNwYWNlKTtcbiAgICBjb25zdCBpZHkgPSBNYXRoLnJvdW5kKChwb2ludC55IC0gcGFkZGluZyArIHNwYWNlIC8gMikgLyBzcGFjZSkgKyBvZmZzZXRZO1xuICAgIGNvbnN0IHh4ID0gaWR4ICogc3BhY2U7XG4gICAgY29uc3QgeXkgPSBpZHkgKiBzcGFjZTtcbiAgICBjb25zdCBwb2ludE9uQ2FudmFzID0gbmV3IERPTVBvaW50KHh4LCB5eSk7XG4gICAgY29uc3QgcCA9IHRoaXMudHJhbnNNYXQudHJhbnNmb3JtUG9pbnQocG9pbnRPbkNhbnZhcyk7XG4gICAgdGhpcy5hY3R1YWxDdXJzb3JQb2ludCA9IHA7XG4gICAgdGhpcy5hY3R1YWxDdXJzb3JQb3NpdGlvbiA9IFtpZHggLSAxLCBpZHkgLSAxXTtcblxuICAgIGlmICh0aGlzLnByZXZlbnRNb3ZlTWF0Py5baWR4IC0gMV0/LltpZHkgLSAxXSA9PT0gMSkge1xuICAgICAgdGhpcy5jdXJzb3JQb3NpdGlvbiA9IFstMSwgLTFdO1xuICAgICAgdGhpcy5jdXJzb3JQb2ludCA9IG5ldyBET01Qb2ludCgpO1xuICAgICAgdGhpcy5kcmF3Q3Vyc29yKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gaWYgKFxuICAgIC8vICAgIWlzTW9iaWxlRGV2aWNlKCkgfHxcbiAgICAvLyAgIChpc01vYmlsZURldmljZSgpICYmIHRoaXMubWF0Py5baWR4IC0gMV0/LltpZHkgLSAxXSA9PT0gMClcbiAgICAvLyApIHtcbiAgICAvLyB9XG4gICAgdGhpcy5jdXJzb3JQb2ludCA9IHA7XG4gICAgdGhpcy5jdXJzb3JQb3NpdGlvbiA9IFtpZHggLSAxLCBpZHkgLSAxXTtcbiAgICB0aGlzLmRyYXdDdXJzb3IoKTtcblxuICAgIGlmIChpc01vYmlsZURldmljZSgpKSB0aGlzLmRyYXdCb2FyZCgpO1xuICB9O1xuXG4gIHByaXZhdGUgb25Nb3VzZU1vdmUgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuY3Vyc29yQ2FudmFzO1xuICAgIGlmICghY2FudmFzKSByZXR1cm47XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgcG9pbnQgPSBuZXcgRE9NUG9pbnQoZS5vZmZzZXRYICogZHByLCBlLm9mZnNldFkgKiBkcHIpO1xuICAgIHRoaXMuc2V0Q3Vyc29yV2l0aFJlbmRlcihwb2ludCk7XG4gIH07XG5cbiAgcHJpdmF0ZSBjYWxjVG91Y2hQb2ludCA9IChlOiBUb3VjaEV2ZW50KSA9PiB7XG4gICAgbGV0IHBvaW50ID0gbmV3IERPTVBvaW50KCk7XG4gICAgY29uc3QgY2FudmFzID0gdGhpcy5jdXJzb3JDYW52YXM7XG4gICAgaWYgKCFjYW52YXMpIHJldHVybiBwb2ludDtcbiAgICBjb25zdCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHRvdWNoZXMgPSBlLmNoYW5nZWRUb3VjaGVzO1xuICAgIHBvaW50ID0gbmV3IERPTVBvaW50KFxuICAgICAgKHRvdWNoZXNbMF0uY2xpZW50WCAtIHJlY3QubGVmdCkgKiBkcHIsXG4gICAgICAodG91Y2hlc1swXS5jbGllbnRZIC0gcmVjdC50b3ApICogZHByXG4gICAgKTtcbiAgICByZXR1cm4gcG9pbnQ7XG4gIH07XG5cbiAgcHJpdmF0ZSBvblRvdWNoU3RhcnQgPSAoZTogVG91Y2hFdmVudCkgPT4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuY3Vyc29yQ2FudmFzO1xuICAgIGlmICghY2FudmFzKSByZXR1cm47XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy50b3VjaE1vdmluZyA9IHRydWU7XG4gICAgY29uc3QgcG9pbnQgPSB0aGlzLmNhbGNUb3VjaFBvaW50KGUpO1xuICAgIHRoaXMudG91Y2hTdGFydFBvaW50ID0gcG9pbnQ7XG4gICAgdGhpcy5zZXRDdXJzb3JXaXRoUmVuZGVyKHBvaW50KTtcbiAgfTtcblxuICBwcml2YXRlIG9uVG91Y2hNb3ZlID0gKGU6IFRvdWNoRXZlbnQpID0+IHtcbiAgICBjb25zdCBjYW52YXMgPSB0aGlzLmN1cnNvckNhbnZhcztcbiAgICBpZiAoIWNhbnZhcykgcmV0dXJuO1xuXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMudG91Y2hNb3ZpbmcgPSB0cnVlO1xuICAgIGNvbnN0IHBvaW50ID0gdGhpcy5jYWxjVG91Y2hQb2ludChlKTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBsZXQgZGlzdGFuY2UgPSAxMDtcbiAgICBpZiAoXG4gICAgICBNYXRoLmFicyhwb2ludC54IC0gdGhpcy50b3VjaFN0YXJ0UG9pbnQueCkgPiBkaXN0YW5jZSB8fFxuICAgICAgTWF0aC5hYnMocG9pbnQueSAtIHRoaXMudG91Y2hTdGFydFBvaW50LnkpID4gZGlzdGFuY2VcbiAgICApIHtcbiAgICAgIG9mZnNldCA9IC0zO1xuICAgIH1cbiAgICB0aGlzLnNldEN1cnNvcldpdGhSZW5kZXIocG9pbnQsIG9mZnNldCk7XG4gIH07XG5cbiAgcHJpdmF0ZSBvblRvdWNoRW5kID0gKCkgPT4ge1xuICAgIHRoaXMudG91Y2hNb3ZpbmcgPSBmYWxzZTtcbiAgfTtcblxuICByZW5kZXJJbnRlcmFjdGl2ZSgpIHtcbiAgICBjb25zdCBjYW52YXMgPSB0aGlzLmN1cnNvckNhbnZhcztcbiAgICBpZiAoIWNhbnZhcykgcmV0dXJuO1xuXG4gICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xuICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIHRoaXMub25Nb3VzZU1vdmUpO1xuICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vblRvdWNoU3RhcnQpO1xuICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uVG91Y2hNb3ZlKTtcbiAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uVG91Y2hFbmQpO1xuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5pbnRlcmFjdGl2ZSkge1xuICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xuICAgICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgdGhpcy5vbk1vdXNlTW92ZSk7XG4gICAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25Ub3VjaFN0YXJ0KTtcbiAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uVG91Y2hNb3ZlKTtcbiAgICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIHRoaXMub25Ub3VjaEVuZCk7XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhckN1cnNvckNhbnZhcygpO1xuICB9XG5cbiAgc2V0QW5hbHlzaXMoYW5hbHlzaXM6IEFuYWx5c2lzIHwgbnVsbCkge1xuICAgIHRoaXMuYW5hbHlzaXMgPSBhbmFseXNpcztcbiAgICBpZiAoIWFuYWx5c2lzKSB7XG4gICAgICB0aGlzLmNsZWFyQW5hbHlzaXNDYW52YXMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5zaG93QW5hbHlzaXMpIHRoaXMuZHJhd0FuYWx5c2lzKGFuYWx5c2lzKTtcbiAgfVxuXG4gIHNldFRoZW1lKHRoZW1lOiBUaGVtZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qge3RoZW1lUmVzb3VyY2VzfSA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAoIXRoZW1lUmVzb3VyY2VzW3RoZW1lXSkgcmV0dXJuO1xuICAgIGNvbnN0IHtib2FyZCwgYmxhY2tzLCB3aGl0ZXN9ID0gdGhlbWVSZXNvdXJjZXNbdGhlbWVdO1xuICAgIHRoaXMub3B0aW9ucy50aGVtZSA9IHRoZW1lO1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgIHRoZW1lLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9O1xuICAgIHByZWxvYWQoY29tcGFjdChbYm9hcmQsIC4uLmJsYWNrcywgLi4ud2hpdGVzXSksICgpID0+IHtcbiAgICAgIHRoaXMuZHJhd0JvYXJkKCk7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH0pO1xuICAgIHRoaXMuZHJhd0JvYXJkKCk7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgfVxuXG4gIGNhbGNDZW50ZXIgPSAoKTogQ2VudGVyID0+IHtcbiAgICBjb25zdCB7dmlzaWJsZUFyZWF9ID0gdGhpcztcbiAgICBjb25zdCB7Ym9hcmRTaXplfSA9IHRoaXMub3B0aW9ucztcblxuICAgIGlmIChcbiAgICAgICh2aXNpYmxlQXJlYVswXVswXSA9PT0gMCAmJiB2aXNpYmxlQXJlYVswXVsxXSA9PT0gYm9hcmRTaXplIC0gMSkgfHxcbiAgICAgICh2aXNpYmxlQXJlYVsxXVswXSA9PT0gMCAmJiB2aXNpYmxlQXJlYVsxXVsxXSA9PT0gYm9hcmRTaXplIC0gMSlcbiAgICApIHtcbiAgICAgIHJldHVybiBDZW50ZXIuQ2VudGVyO1xuICAgIH1cblxuICAgIGlmICh2aXNpYmxlQXJlYVswXVswXSA9PT0gMCkge1xuICAgICAgaWYgKHZpc2libGVBcmVhWzFdWzBdID09PSAwKSByZXR1cm4gQ2VudGVyLlRvcExlZnQ7XG4gICAgICBlbHNlIGlmICh2aXNpYmxlQXJlYVsxXVsxXSA9PT0gYm9hcmRTaXplIC0gMSkgcmV0dXJuIENlbnRlci5Cb3R0b21MZWZ0O1xuICAgICAgZWxzZSByZXR1cm4gQ2VudGVyLkxlZnQ7XG4gICAgfSBlbHNlIGlmICh2aXNpYmxlQXJlYVswXVsxXSA9PT0gYm9hcmRTaXplIC0gMSkge1xuICAgICAgaWYgKHZpc2libGVBcmVhWzFdWzBdID09PSAwKSByZXR1cm4gQ2VudGVyLlRvcFJpZ2h0O1xuICAgICAgZWxzZSBpZiAodmlzaWJsZUFyZWFbMV1bMV0gPT09IGJvYXJkU2l6ZSAtIDEpIHJldHVybiBDZW50ZXIuQm90dG9tUmlnaHQ7XG4gICAgICBlbHNlIHJldHVybiBDZW50ZXIuUmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh2aXNpYmxlQXJlYVsxXVswXSA9PT0gMCkgcmV0dXJuIENlbnRlci5Ub3A7XG4gICAgICBlbHNlIGlmICh2aXNpYmxlQXJlYVsxXVsxXSA9PT0gYm9hcmRTaXplIC0gMSkgcmV0dXJuIENlbnRlci5Cb3R0b207XG4gICAgICBlbHNlIHJldHVybiBDZW50ZXIuQ2VudGVyO1xuICAgIH1cbiAgfTtcblxuICBjYWxjRHluYW1pY1BhZGRpbmcodmlzaWJsZUFyZWFTaXplOiBudW1iZXIpIHtcbiAgICBjb25zdCB7Y29vcmRpbmF0ZX0gPSB0aGlzLm9wdGlvbnM7XG4gICAgLy8gbGV0IHBhZGRpbmcgPSAzMDtcbiAgICAvLyBpZiAodmlzaWJsZUFyZWFTaXplIDw9IDMpIHtcbiAgICAvLyAgIHBhZGRpbmcgPSBjb29yZGluYXRlID8gMTIwIDogMTAwO1xuICAgIC8vIH0gZWxzZSBpZiAodmlzaWJsZUFyZWFTaXplIDw9IDYpIHtcbiAgICAvLyAgIHBhZGRpbmcgPSBjb29yZGluYXRlID8gODAgOiA2MDtcbiAgICAvLyB9IGVsc2UgaWYgKHZpc2libGVBcmVhU2l6ZSA8PSA5KSB7XG4gICAgLy8gICBwYWRkaW5nID0gY29vcmRpbmF0ZSA/IDYwIDogNTA7XG4gICAgLy8gfSBlbHNlIGlmICh2aXNpYmxlQXJlYVNpemUgPD0gMTIpIHtcbiAgICAvLyAgIHBhZGRpbmcgPSBjb29yZGluYXRlID8gNTAgOiA0MDtcbiAgICAvLyB9IGVsc2UgaWYgKHZpc2libGVBcmVhU2l6ZSA8PSAxNSkge1xuICAgIC8vICAgcGFkZGluZyA9IGNvb3JkaW5hdGUgPyA0MCA6IDMwO1xuICAgIC8vIH0gZWxzZSBpZiAodmlzaWJsZUFyZWFTaXplIDw9IDE3KSB7XG4gICAgLy8gICBwYWRkaW5nID0gY29vcmRpbmF0ZSA/IDM1IDogMjU7XG4gICAgLy8gfSBlbHNlIGlmICh2aXNpYmxlQXJlYVNpemUgPD0gMTkpIHtcbiAgICAvLyAgIHBhZGRpbmcgPSBjb29yZGluYXRlID8gMzAgOiAyMDtcbiAgICAvLyB9XG5cbiAgICBjb25zdCB7Y2FudmFzfSA9IHRoaXM7XG4gICAgaWYgKCFjYW52YXMpIHJldHVybjtcbiAgICBjb25zdCBwYWRkaW5nID0gY2FudmFzLndpZHRoIC8gKHZpc2libGVBcmVhU2l6ZSArIDIpIC8gMjtcbiAgICBjb25zdCBwYWRkaW5nV2l0aG91dENvb3JkaW5hdGUgPSBjYW52YXMud2lkdGggLyAodmlzaWJsZUFyZWFTaXplICsgMikgLyA0O1xuXG4gICAgdGhpcy5vcHRpb25zLnBhZGRpbmcgPSBjb29yZGluYXRlID8gcGFkZGluZyA6IHBhZGRpbmdXaXRob3V0Q29vcmRpbmF0ZTtcbiAgICAvLyB0aGlzLnJlbmRlckludGVyYWN0aXZlKCk7XG4gIH1cblxuICB6b29tQm9hcmQoem9vbSA9IGZhbHNlKSB7XG4gICAgY29uc3Qge1xuICAgICAgY2FudmFzLFxuICAgICAgYW5hbHlzaXNDYW52YXMsXG4gICAgICBib2FyZCxcbiAgICAgIGN1cnNvckNhbnZhcyxcbiAgICAgIG1hcmt1cENhbnZhcyxcbiAgICAgIGVmZmVjdENhbnZhcyxcbiAgICB9ID0gdGhpcztcbiAgICBpZiAoIWNhbnZhcykgcmV0dXJuO1xuICAgIGNvbnN0IHtib2FyZFNpemUsIGV4dGVudCwgYm9hcmRMaW5lRXh0ZW50LCBwYWRkaW5nLCBkeW5hbWljUGFkZGluZ30gPVxuICAgICAgdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHpvb21lZFZpc2libGVBcmVhID0gY2FsY1Zpc2libGVBcmVhKFxuICAgICAgdGhpcy52aXNpYmxlQXJlYU1hdCxcbiAgICAgIGV4dGVudCxcbiAgICAgIGZhbHNlXG4gICAgKTtcbiAgICBjb25zdCBjdHggPSBjYW52YXM/LmdldENvbnRleHQoJzJkJyk7XG4gICAgY29uc3QgYm9hcmRDdHggPSBib2FyZD8uZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjb25zdCBjdXJzb3JDdHggPSBjdXJzb3JDYW52YXM/LmdldENvbnRleHQoJzJkJyk7XG4gICAgY29uc3QgbWFya3VwQ3R4ID0gbWFya3VwQ2FudmFzPy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGNvbnN0IGFuYWx5c2lzQ3R4ID0gYW5hbHlzaXNDYW52YXM/LmdldENvbnRleHQoJzJkJyk7XG4gICAgY29uc3QgZWZmZWN0Q3R4ID0gZWZmZWN0Q2FudmFzPy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGNvbnN0IHZpc2libGVBcmVhID0gem9vbVxuICAgICAgPyB6b29tZWRWaXNpYmxlQXJlYVxuICAgICAgOiBbXG4gICAgICAgICAgWzAsIGJvYXJkU2l6ZSAtIDFdLFxuICAgICAgICAgIFswLCBib2FyZFNpemUgLSAxXSxcbiAgICAgICAgXTtcblxuICAgIHRoaXMudmlzaWJsZUFyZWEgPSB2aXNpYmxlQXJlYTtcbiAgICBjb25zdCB2aXNpYmxlQXJlYVNpemUgPSBNYXRoLm1heChcbiAgICAgIHZpc2libGVBcmVhWzBdWzFdIC0gdmlzaWJsZUFyZWFbMF1bMF0sXG4gICAgICB2aXNpYmxlQXJlYVsxXVsxXSAtIHZpc2libGVBcmVhWzFdWzBdXG4gICAgKTtcblxuICAgIGlmIChkeW5hbWljUGFkZGluZykge1xuICAgICAgdGhpcy5jYWxjRHluYW1pY1BhZGRpbmcodmlzaWJsZUFyZWFTaXplKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcHRpb25zLnBhZGRpbmcgPSBERUZBVUxUX09QVElPTlMucGFkZGluZztcbiAgICB9XG5cbiAgICBpZiAoem9vbSkge1xuICAgICAgY29uc3Qge3NwYWNlfSA9IHRoaXMuY2FsY1NwYWNlQW5kUGFkZGluZygpO1xuICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5jYWxjQ2VudGVyKCk7XG5cbiAgICAgIGlmIChkeW5hbWljUGFkZGluZykge1xuICAgICAgICB0aGlzLmNhbGNEeW5hbWljUGFkZGluZyh2aXNpYmxlQXJlYVNpemUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnBhZGRpbmcgPSBERUZBVUxUX09QVElPTlMucGFkZGluZztcbiAgICAgIH1cblxuICAgICAgbGV0IGV4dHJhVmlzaWJsZVNpemUgPSBib2FyZExpbmVFeHRlbnQgKiAyICsgMTtcblxuICAgICAgaWYgKFxuICAgICAgICBjZW50ZXIgPT09IENlbnRlci5Ub3BSaWdodCB8fFxuICAgICAgICBjZW50ZXIgPT09IENlbnRlci5Ub3BMZWZ0IHx8XG4gICAgICAgIGNlbnRlciA9PT0gQ2VudGVyLkJvdHRvbVJpZ2h0IHx8XG4gICAgICAgIGNlbnRlciA9PT0gQ2VudGVyLkJvdHRvbUxlZnRcbiAgICAgICkge1xuICAgICAgICBleHRyYVZpc2libGVTaXplID0gYm9hcmRMaW5lRXh0ZW50ICsgMC41O1xuICAgICAgfVxuICAgICAgbGV0IHpvb21lZEJvYXJkU2l6ZSA9IHZpc2libGVBcmVhU2l6ZSArIGV4dHJhVmlzaWJsZVNpemU7XG5cbiAgICAgIGlmICh6b29tZWRCb2FyZFNpemUgPCBib2FyZFNpemUpIHtcbiAgICAgICAgbGV0IHNjYWxlID0gKGNhbnZhcy53aWR0aCAtIHBhZGRpbmcgKiAyKSAvICh6b29tZWRCb2FyZFNpemUgKiBzcGFjZSk7XG5cbiAgICAgICAgbGV0IG9mZnNldFggPVxuICAgICAgICAgIHZpc2libGVBcmVhWzBdWzBdICogc3BhY2UgKiBzY2FsZSArXG4gICAgICAgICAgLy8gZm9yIHBhZGRpbmdcbiAgICAgICAgICBwYWRkaW5nICogc2NhbGUgLVxuICAgICAgICAgIHBhZGRpbmcgLVxuICAgICAgICAgIC8vIGZvciBib2FyZCBsaW5lIGV4dGVudFxuICAgICAgICAgIChzcGFjZSAqIGV4dHJhVmlzaWJsZVNpemUgKiBzY2FsZSkgLyAyICtcbiAgICAgICAgICAoc3BhY2UgKiBzY2FsZSkgLyAyO1xuXG4gICAgICAgIGxldCBvZmZzZXRZID1cbiAgICAgICAgICB2aXNpYmxlQXJlYVsxXVswXSAqIHNwYWNlICogc2NhbGUgK1xuICAgICAgICAgIC8vIGZvciBwYWRkaW5nXG4gICAgICAgICAgcGFkZGluZyAqIHNjYWxlIC1cbiAgICAgICAgICBwYWRkaW5nIC1cbiAgICAgICAgICAvLyBmb3IgYm9hcmQgbGluZSBleHRlbnRcbiAgICAgICAgICAoc3BhY2UgKiBleHRyYVZpc2libGVTaXplICogc2NhbGUpIC8gMiArXG4gICAgICAgICAgKHNwYWNlICogc2NhbGUpIC8gMjtcblxuICAgICAgICB0aGlzLnRyYW5zTWF0ID0gbmV3IERPTU1hdHJpeCgpO1xuICAgICAgICB0aGlzLnRyYW5zTWF0LnRyYW5zbGF0ZVNlbGYoLW9mZnNldFgsIC1vZmZzZXRZKTtcbiAgICAgICAgdGhpcy50cmFuc01hdC5zY2FsZVNlbGYoc2NhbGUsIHNjYWxlKTtcbiAgICAgICAgY3R4Py5zZXRUcmFuc2Zvcm0odGhpcy50cmFuc01hdCk7XG4gICAgICAgIGJvYXJkQ3R4Py5zZXRUcmFuc2Zvcm0odGhpcy50cmFuc01hdCk7XG4gICAgICAgIGFuYWx5c2lzQ3R4Py5zZXRUcmFuc2Zvcm0odGhpcy50cmFuc01hdCk7XG4gICAgICAgIGN1cnNvckN0eD8uc2V0VHJhbnNmb3JtKHRoaXMudHJhbnNNYXQpO1xuICAgICAgICBtYXJrdXBDdHg/LnNldFRyYW5zZm9ybSh0aGlzLnRyYW5zTWF0KTtcbiAgICAgICAgZWZmZWN0Q3R4Py5zZXRUcmFuc2Zvcm0odGhpcy50cmFuc01hdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlc2V0VHJhbnNmb3JtKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVzZXRUcmFuc2Zvcm0oKTtcbiAgICB9XG4gIH1cblxuICBjYWxjQm9hcmRWaXNpYmxlQXJlYSh6b29tID0gZmFsc2UpIHtcbiAgICB0aGlzLnpvb21Cb2FyZCh0aGlzLm9wdGlvbnMuem9vbSk7XG4gIH1cblxuICByZXNldFRyYW5zZm9ybSgpIHtcbiAgICBjb25zdCB7XG4gICAgICBjYW52YXMsXG4gICAgICBhbmFseXNpc0NhbnZhcyxcbiAgICAgIGJvYXJkLFxuICAgICAgY3Vyc29yQ2FudmFzLFxuICAgICAgbWFya3VwQ2FudmFzLFxuICAgICAgZWZmZWN0Q2FudmFzLFxuICAgIH0gPSB0aGlzO1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcz8uZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjb25zdCBib2FyZEN0eCA9IGJvYXJkPy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGNvbnN0IGN1cnNvckN0eCA9IGN1cnNvckNhbnZhcz8uZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjb25zdCBtYXJrdXBDdHggPSBtYXJrdXBDYW52YXM/LmdldENvbnRleHQoJzJkJyk7XG4gICAgY29uc3QgYW5hbHlzaXNDdHggPSBhbmFseXNpc0NhbnZhcz8uZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjb25zdCBlZmZlY3RDdHggPSBlZmZlY3RDYW52YXM/LmdldENvbnRleHQoJzJkJyk7XG4gICAgdGhpcy50cmFuc01hdCA9IG5ldyBET01NYXRyaXgoKTtcbiAgICBjdHg/LnJlc2V0VHJhbnNmb3JtKCk7XG4gICAgYm9hcmRDdHg/LnJlc2V0VHJhbnNmb3JtKCk7XG4gICAgYW5hbHlzaXNDdHg/LnJlc2V0VHJhbnNmb3JtKCk7XG4gICAgY3Vyc29yQ3R4Py5yZXNldFRyYW5zZm9ybSgpO1xuICAgIG1hcmt1cEN0eD8ucmVzZXRUcmFuc2Zvcm0oKTtcbiAgICBlZmZlY3RDdHg/LnJlc2V0VHJhbnNmb3JtKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge21hdH0gPSB0aGlzO1xuICAgIGlmICh0aGlzLm1hdCAmJiBtYXRbMF0pIHRoaXMub3B0aW9ucy5ib2FyZFNpemUgPSBtYXRbMF0ubGVuZ3RoO1xuXG4gICAgLy8gVE9ETzogY2FsYyB2aXNpYmxlIGFyZWEgdHdpY2UgaXMgbm90IGdvb2QsIG5lZWQgdG8gcmVmYWN0b3JcbiAgICB0aGlzLnpvb21Cb2FyZCh0aGlzLm9wdGlvbnMuem9vbSk7XG4gICAgdGhpcy56b29tQm9hcmQodGhpcy5vcHRpb25zLnpvb20pO1xuICAgIHRoaXMuY2xlYXJBbGxDYW52YXMoKTtcbiAgICB0aGlzLmRyYXdCb2FyZCgpO1xuICAgIHRoaXMuZHJhd1N0b25lcygpO1xuICAgIHRoaXMuZHJhd01hcmt1cCgpO1xuICAgIHRoaXMuZHJhd0N1cnNvcigpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd0FuYWx5c2lzKSB0aGlzLmRyYXdBbmFseXNpcygpO1xuICB9XG5cbiAgcmVuZGVySW5PbmVDYW52YXMoY2FudmFzID0gdGhpcy5jYW52YXMpIHtcbiAgICB0aGlzLmNsZWFyQWxsQ2FudmFzKCk7XG4gICAgdGhpcy5kcmF3Qm9hcmQoY2FudmFzLCBmYWxzZSk7XG4gICAgdGhpcy5kcmF3U3RvbmVzKHRoaXMubWF0LCBjYW52YXMsIGZhbHNlKTtcbiAgICB0aGlzLmRyYXdNYXJrdXAodGhpcy5tYXQsIHRoaXMubWFya3VwLCBjYW52YXMsIGZhbHNlKTtcbiAgfVxuXG4gIGNsZWFyQWxsQ2FudmFzID0gKCkgPT4ge1xuICAgIHRoaXMuY2xlYXJDYW52YXModGhpcy5ib2FyZCk7XG4gICAgdGhpcy5jbGVhckNhbnZhcygpO1xuICAgIHRoaXMuY2xlYXJDYW52YXModGhpcy5tYXJrdXBDYW52YXMpO1xuICAgIHRoaXMuY2xlYXJDYW52YXModGhpcy5lZmZlY3RDYW52YXMpO1xuICAgIHRoaXMuY2xlYXJDdXJzb3JDYW52YXMoKTtcbiAgICB0aGlzLmNsZWFyQW5hbHlzaXNDYW52YXMoKTtcbiAgfTtcblxuICBjbGVhckJvYXJkID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5ib2FyZCkgcmV0dXJuO1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuYm9hcmQuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBpZiAoY3R4KSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTtcbiAgICAgIC8vIFdpbGwgYWx3YXlzIGNsZWFyIHRoZSByaWdodCBzcGFjZVxuICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBjdHguY2FudmFzLndpZHRoLCBjdHguY2FudmFzLmhlaWdodCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgfTtcblxuICBjbGVhckNhbnZhcyA9IChjYW52YXMgPSB0aGlzLmNhbnZhcykgPT4ge1xuICAgIGlmICghY2FudmFzKSByZXR1cm47XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgaWYgKGN0eCkge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7XG4gICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgfTtcblxuICBjbGVhck1hcmt1cENhbnZhcyA9ICgpID0+IHtcbiAgICBpZiAoIXRoaXMubWFya3VwQ2FudmFzKSByZXR1cm47XG4gICAgY29uc3QgY3R4ID0gdGhpcy5tYXJrdXBDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBpZiAoY3R4KSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTtcbiAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5tYXJrdXBDYW52YXMud2lkdGgsIHRoaXMubWFya3VwQ2FudmFzLmhlaWdodCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgfTtcblxuICBjbGVhckN1cnNvckNhbnZhcyA9ICgpID0+IHtcbiAgICBpZiAoIXRoaXMuY3Vyc29yQ2FudmFzKSByZXR1cm47XG4gICAgY29uc3Qgc2l6ZSA9IHRoaXMub3B0aW9ucy5ib2FyZFNpemU7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdXJzb3JDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBpZiAoY3R4KSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTtcbiAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jdXJzb3JDYW52YXMud2lkdGgsIHRoaXMuY3Vyc29yQ2FudmFzLmhlaWdodCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgfTtcblxuICBjbGVhckFuYWx5c2lzQ2FudmFzID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy5hbmFseXNpc0NhbnZhcykgcmV0dXJuO1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuYW5hbHlzaXNDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBpZiAoY3R4KSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTtcbiAgICAgIGN0eC5jbGVhclJlY3QoXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIHRoaXMuYW5hbHlzaXNDYW52YXMud2lkdGgsXG4gICAgICAgIHRoaXMuYW5hbHlzaXNDYW52YXMuaGVpZ2h0XG4gICAgICApO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gIH07XG5cbiAgZHJhd0FuYWx5c2lzID0gKGFuYWx5c2lzID0gdGhpcy5hbmFseXNpcykgPT4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuYW5hbHlzaXNDYW52YXM7XG4gICAgY29uc3Qge1xuICAgICAgdGhlbWUgPSBUaGVtZS5CbGFja0FuZFdoaXRlLFxuICAgICAgYW5hbHlzaXNQb2ludFRoZW1lLFxuICAgICAgYm9hcmRTaXplLFxuICAgICAgZm9yY2VBbmFseXNpc0JvYXJkU2l6ZSxcbiAgICB9ID0gdGhpcy5vcHRpb25zO1xuICAgIGNvbnN0IHttYXQsIG1hcmt1cH0gPSB0aGlzO1xuICAgIGlmICghY2FudmFzIHx8ICFhbmFseXNpcykgcmV0dXJuO1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGlmICghY3R4KSByZXR1cm47XG4gICAgdGhpcy5jbGVhckFuYWx5c2lzQ2FudmFzKCk7XG4gICAgY29uc3Qge3Jvb3RJbmZvfSA9IGFuYWx5c2lzO1xuXG4gICAgYW5hbHlzaXMubW92ZUluZm9zLmZvckVhY2gobSA9PiB7XG4gICAgICBpZiAobS5tb3ZlID09PSAncGFzcycpIHJldHVybjtcbiAgICAgIGNvbnN0IGlkT2JqID0gSlNPTi5wYXJzZShhbmFseXNpcy5pZCk7XG4gICAgICAvLyBjb25zdCB7eDogb3gsIHk6IG95fSA9IHJldmVyc2VPZmZzZXQobWF0LCBpZE9iai5ieCwgaWRPYmouYnkpO1xuICAgICAgLy8gbGV0IHt4OiBpLCB5OiBqfSA9IGExVG9Qb3MobS5tb3ZlKTtcbiAgICAgIC8vIGkgKz0gb3g7XG4gICAgICAvLyBqICs9IG95O1xuICAgICAgLy8gbGV0IGFuYWx5c2lzQm9hcmRTaXplID0gZm9yY2VBbmFseXNpc0JvYXJkU2l6ZSB8fCBib2FyZFNpemU7XG4gICAgICBsZXQgYW5hbHlzaXNCb2FyZFNpemUgPSBib2FyZFNpemU7XG4gICAgICBjb25zdCBvZmZzZXRlZE1vdmUgPSBvZmZzZXRBMU1vdmUoXG4gICAgICAgIG0ubW92ZSxcbiAgICAgICAgMCxcbiAgICAgICAgYW5hbHlzaXNCb2FyZFNpemUgLSBpZE9iai5ieVxuICAgICAgKTtcbiAgICAgIGxldCB7eDogaSwgeTogan0gPSBhMVRvUG9zKG9mZnNldGVkTW92ZSk7XG4gICAgICBpZiAobWF0W2ldW2pdICE9PSAwKSByZXR1cm47XG4gICAgICBjb25zdCB7c3BhY2UsIHNjYWxlZFBhZGRpbmd9ID0gdGhpcy5jYWxjU3BhY2VBbmRQYWRkaW5nKCk7XG4gICAgICBjb25zdCB4ID0gc2NhbGVkUGFkZGluZyArIGkgKiBzcGFjZTtcbiAgICAgIGNvbnN0IHkgPSBzY2FsZWRQYWRkaW5nICsgaiAqIHNwYWNlO1xuICAgICAgY29uc3QgcmF0aW8gPSAwLjQ2O1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGlmIChcbiAgICAgICAgdGhlbWUgIT09IFRoZW1lLlN1YmR1ZWQgJiZcbiAgICAgICAgdGhlbWUgIT09IFRoZW1lLkJsYWNrQW5kV2hpdGUgJiZcbiAgICAgICAgdGhlbWUgIT09IFRoZW1lLkZsYXRcbiAgICAgICkge1xuICAgICAgICBjdHguc2hhZG93T2Zmc2V0WCA9IDM7XG4gICAgICAgIGN0eC5zaGFkb3dPZmZzZXRZID0gMztcbiAgICAgICAgY3R4LnNoYWRvd0NvbG9yID0gJyM1NTUnO1xuICAgICAgICBjdHguc2hhZG93Qmx1ciA9IDg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdHguc2hhZG93T2Zmc2V0WCA9IDA7XG4gICAgICAgIGN0eC5zaGFkb3dPZmZzZXRZID0gMDtcbiAgICAgICAgY3R4LnNoYWRvd0NvbG9yID0gJyNmZmYnO1xuICAgICAgICBjdHguc2hhZG93Qmx1ciA9IDA7XG4gICAgICB9XG5cbiAgICAgIGxldCBvdXRsaW5lQ29sb3I7XG4gICAgICBpZiAobWFya3VwW2ldW2pdLmluY2x1ZGVzKE1hcmt1cC5Qb3NpdGl2ZU5vZGUpKSB7XG4gICAgICAgIG91dGxpbmVDb2xvciA9IHRoaXMub3B0aW9ucy5wb3NpdGl2ZU5vZGVDb2xvcjtcbiAgICAgIH1cblxuICAgICAgaWYgKG1hcmt1cFtpXVtqXS5pbmNsdWRlcyhNYXJrdXAuTmVnYXRpdmVOb2RlKSkge1xuICAgICAgICBvdXRsaW5lQ29sb3IgPSB0aGlzLm9wdGlvbnMubmVnYXRpdmVOb2RlQ29sb3I7XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXJrdXBbaV1bal0uaW5jbHVkZXMoTWFya3VwLk5ldXRyYWxOb2RlKSkge1xuICAgICAgICBvdXRsaW5lQ29sb3IgPSB0aGlzLm9wdGlvbnMubmV1dHJhbE5vZGVDb2xvcjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcG9pbnQgPSBuZXcgQW5hbHlzaXNQb2ludChcbiAgICAgICAgY3R4LFxuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBzcGFjZSAqIHJhdGlvLFxuICAgICAgICByb290SW5mbyxcbiAgICAgICAgbSxcbiAgICAgICAgYW5hbHlzaXNQb2ludFRoZW1lLFxuICAgICAgICBvdXRsaW5lQ29sb3JcbiAgICAgICk7XG4gICAgICBwb2ludC5kcmF3KCk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIGRyYXdNYXJrdXAgPSAoXG4gICAgbWF0ID0gdGhpcy5tYXQsXG4gICAgbWFya3VwID0gdGhpcy5tYXJrdXAsXG4gICAgbWFya3VwQ2FudmFzID0gdGhpcy5tYXJrdXBDYW52YXMsXG4gICAgY2xlYXIgPSB0cnVlXG4gICkgPT4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IG1hcmt1cENhbnZhcztcbiAgICBpZiAoY2FudmFzKSB7XG4gICAgICBpZiAoY2xlYXIpIHRoaXMuY2xlYXJDYW52YXMoY2FudmFzKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFya3VwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWFya3VwW2ldLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgY29uc3QgdmFsdWVzID0gbWFya3VwW2ldW2pdO1xuICAgICAgICAgIHZhbHVlcz8uc3BsaXQoJ3wnKS5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgY29uc3Qge3NwYWNlLCBzY2FsZWRQYWRkaW5nfSA9IHRoaXMuY2FsY1NwYWNlQW5kUGFkZGluZygpO1xuICAgICAgICAgICAgICBjb25zdCB4ID0gc2NhbGVkUGFkZGluZyArIGkgKiBzcGFjZTtcbiAgICAgICAgICAgICAgY29uc3QgeSA9IHNjYWxlZFBhZGRpbmcgKyBqICogc3BhY2U7XG4gICAgICAgICAgICAgIGNvbnN0IGtpID0gbWF0W2ldW2pdO1xuICAgICAgICAgICAgICBsZXQgbWFya3VwO1xuICAgICAgICAgICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgICAgICAgICAgICBpZiAoY3R4KSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgY2FzZSBNYXJrdXAuQ2lyY2xlOiB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmt1cCA9IG5ldyBDaXJjbGVNYXJrdXAoY3R4LCB4LCB5LCBzcGFjZSwga2kpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNhc2UgTWFya3VwLkN1cnJlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgbWFya3VwID0gbmV3IENpcmNsZVNvbGlkTWFya3VwKGN0eCwgeCwgeSwgc3BhY2UsIGtpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjYXNlIE1hcmt1cC5Qb3NpdGl2ZU5vZGU6IHtcbiAgICAgICAgICAgICAgICAgICAgbWFya3VwID0gbmV3IFBvc2l0aXZlTm9kZU1hcmt1cChcbiAgICAgICAgICAgICAgICAgICAgICBjdHgsXG4gICAgICAgICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICAgICAgICB5LFxuICAgICAgICAgICAgICAgICAgICAgIHNwYWNlLFxuICAgICAgICAgICAgICAgICAgICAgIGtpLFxuICAgICAgICAgICAgICAgICAgICAgIE1hcmt1cC5DaXJjbGVcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgbWFya3VwLnNldENvbG9yKHRoaXMub3B0aW9ucy5wb3NpdGl2ZU5vZGVDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY2FzZSBNYXJrdXAuTmVnYXRpdmVOb2RlOlxuICAgICAgICAgICAgICAgICAgY2FzZSBNYXJrdXAuTmV1dHJhbE5vZGU6XG4gICAgICAgICAgICAgICAgICBjYXNlIE1hcmt1cC5Ob2RlOiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2xvciA9IHRoaXMub3B0aW9ucy5kZWZhdWx0Tm9kZUNvbG9yO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IE1hcmt1cC5OZWdhdGl2ZU5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9IHRoaXMub3B0aW9ucy5uZWdhdGl2ZU5vZGVDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gTWFya3VwLk5ldXRyYWxOb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29sb3IgPSB0aGlzLm9wdGlvbnMubmV1dHJhbE5vZGVDb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG1hcmt1cCA9IG5ldyBOb2RlTWFya3VwKFxuICAgICAgICAgICAgICAgICAgICAgIGN0eCxcbiAgICAgICAgICAgICAgICAgICAgICB4LFxuICAgICAgICAgICAgICAgICAgICAgIHksXG4gICAgICAgICAgICAgICAgICAgICAgc3BhY2UsXG4gICAgICAgICAgICAgICAgICAgICAga2ksXG4gICAgICAgICAgICAgICAgICAgICAgTWFya3VwLkNpcmNsZVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBtYXJrdXAuc2V0Q29sb3IoY29sb3IpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNhc2UgTWFya3VwLlNxdWFyZToge1xuICAgICAgICAgICAgICAgICAgICBtYXJrdXAgPSBuZXcgU3F1YXJlTWFya3VwKGN0eCwgeCwgeSwgc3BhY2UsIGtpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjYXNlIE1hcmt1cC5UcmlhbmdsZToge1xuICAgICAgICAgICAgICAgICAgICBtYXJrdXAgPSBuZXcgVHJpYW5nbGVNYXJrdXAoY3R4LCB4LCB5LCBzcGFjZSwga2kpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGNhc2UgTWFya3VwLkNyb3NzOiB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmt1cCA9IG5ldyBDcm9zc01hcmt1cChjdHgsIHgsIHksIHNwYWNlLCBraSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgbWFya3VwID0gbmV3IFRleHRNYXJrdXAoY3R4LCB4LCB5LCBzcGFjZSwga2ksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWFya3VwPy5kcmF3KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBkcmF3Qm9hcmQgPSAoYm9hcmQgPSB0aGlzLmJvYXJkLCBjbGVhciA9IHRydWUpID0+IHtcbiAgICBpZiAoY2xlYXIpIHRoaXMuY2xlYXJDYW52YXMoYm9hcmQpO1xuICAgIHRoaXMuZHJhd0Jhbihib2FyZCk7XG4gICAgdGhpcy5kcmF3Qm9hcmRMaW5lKGJvYXJkKTtcbiAgICB0aGlzLmRyYXdTdGFycyhib2FyZCk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5jb29yZGluYXRlKSB7XG4gICAgICB0aGlzLmRyYXdDb29yZGluYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIGRyYXdCYW4gPSAoYm9hcmQgPSB0aGlzLmJvYXJkKSA9PiB7XG4gICAgY29uc3Qge3RoZW1lLCB0aGVtZVJlc291cmNlcywgcGFkZGluZ30gPSB0aGlzLm9wdGlvbnM7XG4gICAgaWYgKGJvYXJkKSB7XG4gICAgICBib2FyZC5zdHlsZS5ib3JkZXJSYWRpdXMgPSAnMnB4JztcbiAgICAgIGNvbnN0IGN0eCA9IGJvYXJkLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBpZiAoY3R4KSB7XG4gICAgICAgIGlmICh0aGVtZSA9PT0gVGhlbWUuQmxhY2tBbmRXaGl0ZSkge1xuICAgICAgICAgIGJvYXJkLnN0eWxlLmJveFNoYWRvdyA9ICcwcHggMHB4IDBweCAjMDAwMDAwJztcbiAgICAgICAgICBjdHguZmlsbFN0eWxlID0gJyNGRkZGRkYnO1xuICAgICAgICAgIGN0eC5maWxsUmVjdChcbiAgICAgICAgICAgIC1wYWRkaW5nLFxuICAgICAgICAgICAgLXBhZGRpbmcsXG4gICAgICAgICAgICBib2FyZC53aWR0aCArIHBhZGRpbmcsXG4gICAgICAgICAgICBib2FyZC5oZWlnaHQgKyBwYWRkaW5nXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGVtZSA9PT0gVGhlbWUuRmxhdCkge1xuICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLm9wdGlvbnMudGhlbWVGbGF0Qm9hcmRDb2xvcjtcbiAgICAgICAgICBjdHguZmlsbFJlY3QoXG4gICAgICAgICAgICAtcGFkZGluZyxcbiAgICAgICAgICAgIC1wYWRkaW5nLFxuICAgICAgICAgICAgYm9hcmQud2lkdGggKyBwYWRkaW5nLFxuICAgICAgICAgICAgYm9hcmQuaGVpZ2h0ICsgcGFkZGluZ1xuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgdGhlbWUgPT09IFRoZW1lLldhbG51dCAmJlxuICAgICAgICAgIHRoZW1lUmVzb3VyY2VzW3RoZW1lXS5ib2FyZCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IGJvYXJkVXJsID0gdGhlbWVSZXNvdXJjZXNbdGhlbWVdLmJvYXJkIHx8ICcnO1xuICAgICAgICAgIGNvbnN0IGJvYXJkUmVzID0gaW1hZ2VzW2JvYXJkVXJsXTtcbiAgICAgICAgICBpZiAoYm9hcmRSZXMpIHtcbiAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoXG4gICAgICAgICAgICAgIGJvYXJkUmVzLFxuICAgICAgICAgICAgICAtcGFkZGluZyxcbiAgICAgICAgICAgICAgLXBhZGRpbmcsXG4gICAgICAgICAgICAgIGJvYXJkLndpZHRoICsgcGFkZGluZyxcbiAgICAgICAgICAgICAgYm9hcmQuaGVpZ2h0ICsgcGFkZGluZ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgYm9hcmRVcmwgPSB0aGVtZVJlc291cmNlc1t0aGVtZV0uYm9hcmQgfHwgJyc7XG4gICAgICAgICAgY29uc3QgaW1hZ2UgPSBpbWFnZXNbYm9hcmRVcmxdO1xuICAgICAgICAgIGlmIChpbWFnZSkge1xuICAgICAgICAgICAgY29uc3QgcGF0dGVybiA9IGN0eC5jcmVhdGVQYXR0ZXJuKGltYWdlLCAncmVwZWF0Jyk7XG4gICAgICAgICAgICBpZiAocGF0dGVybikge1xuICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gcGF0dGVybjtcbiAgICAgICAgICAgICAgY3R4LmZpbGxSZWN0KDAsIDAsIGJvYXJkLndpZHRoLCBib2FyZC5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBkcmF3Qm9hcmRMaW5lID0gKGJvYXJkID0gdGhpcy5ib2FyZCkgPT4ge1xuICAgIGlmICghYm9hcmQpIHJldHVybjtcbiAgICBjb25zdCB7dmlzaWJsZUFyZWEsIG9wdGlvbnN9ID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICB6b29tLFxuICAgICAgYm9hcmRTaXplLFxuICAgICAgYm9hcmRMaW5lV2lkdGgsXG4gICAgICBib2FyZEVkZ2VMaW5lV2lkdGgsXG4gICAgICBib2FyZExpbmVFeHRlbnQsXG4gICAgICBhZGFwdGl2ZUJvYXJkTGluZSxcbiAgICB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBjdHggPSBib2FyZC5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGlmIChjdHgpIHtcbiAgICAgIGNvbnN0IHtzcGFjZSwgc2NhbGVkUGFkZGluZ30gPSB0aGlzLmNhbGNTcGFjZUFuZFBhZGRpbmcoKTtcblxuICAgICAgY29uc3QgZXh0ZW5kU3BhY2UgPSB6b29tID8gYm9hcmRMaW5lRXh0ZW50ICogc3BhY2UgOiAwO1xuXG4gICAgICBjdHguZmlsbFN0eWxlID0gJyMwMDAwMDAnO1xuXG4gICAgICBsZXQgZWRnZUxpbmVXaWR0aCA9IGFkYXB0aXZlQm9hcmRMaW5lXG4gICAgICAgID8gYm9hcmQud2lkdGggKiAwLjAwMlxuICAgICAgICA6IGJvYXJkRWRnZUxpbmVXaWR0aDtcblxuICAgICAgLy8gaWYgKGFkYXB0aXZlQm9hcmRMaW5lIHx8ICghYWRhcHRpdmVCb2FyZExpbmUgJiYgIWlzTW9iaWxlRGV2aWNlKCkpKSB7XG4gICAgICAvLyAgZWRnZUxpbmVXaWR0aCAqPSBkcHI7XG4gICAgICAvLyB9XG5cbiAgICAgIGxldCBsaW5lV2lkdGggPSBhZGFwdGl2ZUJvYXJkTGluZSA/IGJvYXJkLndpZHRoICogMC4wMDEgOiBib2FyZExpbmVXaWR0aDtcblxuICAgICAgLy8gaWYgKGFkYXB0aXZlQm9hcmRMaW5lIHx8ICAoIWFkYXB0aXZlQm9hcmRMaW5lICYmICFpc01vYmlsZURldmljZSgpKSkge1xuICAgICAgLy8gICBsaW5lV2lkdGggKj0gZHByO1xuICAgICAgLy8gfVxuXG4gICAgICAvLyB2ZXJ0aWNhbFxuICAgICAgZm9yIChsZXQgaSA9IHZpc2libGVBcmVhWzBdWzBdOyBpIDw9IHZpc2libGVBcmVhWzBdWzFdOyBpKyspIHtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKHZpc2libGVBcmVhWzBdWzBdID09PSAwICYmIGkgPT09IDApIHx8XG4gICAgICAgICAgKHZpc2libGVBcmVhWzBdWzFdID09PSBib2FyZFNpemUgLSAxICYmIGkgPT09IGJvYXJkU2l6ZSAtIDEpXG4gICAgICAgICkge1xuICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBlZGdlTGluZVdpZHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGlzTW9iaWxlRGV2aWNlKCkgJiZcbiAgICAgICAgICBpID09PSB0aGlzLmN1cnNvclBvc2l0aW9uWzBdICYmXG4gICAgICAgICAgdGhpcy50b3VjaE1vdmluZ1xuICAgICAgICApIHtcbiAgICAgICAgICBjdHgubGluZVdpZHRoID0gY3R4LmxpbmVXaWR0aCAqIDI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN0YXJ0UG9pbnRZID1cbiAgICAgICAgICBpID09PSAwIHx8IGkgPT09IGJvYXJkU2l6ZSAtIDFcbiAgICAgICAgICAgID8gc2NhbGVkUGFkZGluZyArIHZpc2libGVBcmVhWzFdWzBdICogc3BhY2UgLSBlZGdlTGluZVdpZHRoIC8gMlxuICAgICAgICAgICAgOiBzY2FsZWRQYWRkaW5nICsgdmlzaWJsZUFyZWFbMV1bMF0gKiBzcGFjZTtcbiAgICAgICAgaWYgKGlzTW9iaWxlRGV2aWNlKCkpIHtcbiAgICAgICAgICBzdGFydFBvaW50WSArPSBkcHIgLyAyO1xuICAgICAgICB9XG4gICAgICAgIGxldCBlbmRQb2ludFkgPVxuICAgICAgICAgIGkgPT09IDAgfHwgaSA9PT0gYm9hcmRTaXplIC0gMVxuICAgICAgICAgICAgPyBzcGFjZSAqIHZpc2libGVBcmVhWzFdWzFdICsgc2NhbGVkUGFkZGluZyArIGVkZ2VMaW5lV2lkdGggLyAyXG4gICAgICAgICAgICA6IHNwYWNlICogdmlzaWJsZUFyZWFbMV1bMV0gKyBzY2FsZWRQYWRkaW5nO1xuICAgICAgICBpZiAoaXNNb2JpbGVEZXZpY2UoKSkge1xuICAgICAgICAgIGVuZFBvaW50WSAtPSBkcHIgLyAyO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2aXNpYmxlQXJlYVsxXVswXSA+IDApIHN0YXJ0UG9pbnRZIC09IGV4dGVuZFNwYWNlO1xuICAgICAgICBpZiAodmlzaWJsZUFyZWFbMV1bMV0gPCBib2FyZFNpemUgLSAxKSBlbmRQb2ludFkgKz0gZXh0ZW5kU3BhY2U7XG4gICAgICAgIGN0eC5tb3ZlVG8oaSAqIHNwYWNlICsgc2NhbGVkUGFkZGluZywgc3RhcnRQb2ludFkpO1xuICAgICAgICBjdHgubGluZVRvKGkgKiBzcGFjZSArIHNjYWxlZFBhZGRpbmcsIGVuZFBvaW50WSk7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgIH1cblxuICAgICAgLy8gaG9yaXpvbnRhbFxuICAgICAgZm9yIChsZXQgaSA9IHZpc2libGVBcmVhWzFdWzBdOyBpIDw9IHZpc2libGVBcmVhWzFdWzFdOyBpKyspIHtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKHZpc2libGVBcmVhWzFdWzBdID09PSAwICYmIGkgPT09IDApIHx8XG4gICAgICAgICAgKHZpc2libGVBcmVhWzFdWzFdID09PSBib2FyZFNpemUgLSAxICYmIGkgPT09IGJvYXJkU2l6ZSAtIDEpXG4gICAgICAgICkge1xuICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBlZGdlTGluZVdpZHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGlzTW9iaWxlRGV2aWNlKCkgJiZcbiAgICAgICAgICBpID09PSB0aGlzLmN1cnNvclBvc2l0aW9uWzFdICYmXG4gICAgICAgICAgdGhpcy50b3VjaE1vdmluZ1xuICAgICAgICApIHtcbiAgICAgICAgICBjdHgubGluZVdpZHRoID0gY3R4LmxpbmVXaWR0aCAqIDI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHN0YXJ0UG9pbnRYID1cbiAgICAgICAgICBpID09PSAwIHx8IGkgPT09IGJvYXJkU2l6ZSAtIDFcbiAgICAgICAgICAgID8gc2NhbGVkUGFkZGluZyArIHZpc2libGVBcmVhWzBdWzBdICogc3BhY2UgLSBlZGdlTGluZVdpZHRoIC8gMlxuICAgICAgICAgICAgOiBzY2FsZWRQYWRkaW5nICsgdmlzaWJsZUFyZWFbMF1bMF0gKiBzcGFjZTtcbiAgICAgICAgbGV0IGVuZFBvaW50WCA9XG4gICAgICAgICAgaSA9PT0gMCB8fCBpID09PSBib2FyZFNpemUgLSAxXG4gICAgICAgICAgICA/IHNwYWNlICogdmlzaWJsZUFyZWFbMF1bMV0gKyBzY2FsZWRQYWRkaW5nICsgZWRnZUxpbmVXaWR0aCAvIDJcbiAgICAgICAgICAgIDogc3BhY2UgKiB2aXNpYmxlQXJlYVswXVsxXSArIHNjYWxlZFBhZGRpbmc7XG4gICAgICAgIGlmIChpc01vYmlsZURldmljZSgpKSB7XG4gICAgICAgICAgc3RhcnRQb2ludFggKz0gZHByIC8gMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNNb2JpbGVEZXZpY2UoKSkge1xuICAgICAgICAgIGVuZFBvaW50WCAtPSBkcHIgLyAyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZpc2libGVBcmVhWzBdWzBdID4gMCkgc3RhcnRQb2ludFggLT0gZXh0ZW5kU3BhY2U7XG4gICAgICAgIGlmICh2aXNpYmxlQXJlYVswXVsxXSA8IGJvYXJkU2l6ZSAtIDEpIGVuZFBvaW50WCArPSBleHRlbmRTcGFjZTtcbiAgICAgICAgY3R4Lm1vdmVUbyhzdGFydFBvaW50WCwgaSAqIHNwYWNlICsgc2NhbGVkUGFkZGluZyk7XG4gICAgICAgIGN0eC5saW5lVG8oZW5kUG9pbnRYLCBpICogc3BhY2UgKyBzY2FsZWRQYWRkaW5nKTtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBkcmF3U3RhcnMgPSAoYm9hcmQgPSB0aGlzLmJvYXJkKSA9PiB7XG4gICAgaWYgKCFib2FyZCkgcmV0dXJuO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuYm9hcmRTaXplICE9PSAxOSkgcmV0dXJuO1xuXG4gICAgbGV0IHtzdGFyU2l6ZTogc3RhclNpemVPcHRpb25zLCBhZGFwdGl2ZVN0YXJTaXplfSA9IHRoaXMub3B0aW9ucztcblxuICAgIGNvbnN0IHZpc2libGVBcmVhID0gdGhpcy52aXNpYmxlQXJlYTtcbiAgICBjb25zdCBjdHggPSBib2FyZC5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGxldCBzdGFyU2l6ZSA9IGFkYXB0aXZlU3RhclNpemUgPyBib2FyZC53aWR0aCAqIDAuMDAzNSA6IHN0YXJTaXplT3B0aW9ucztcbiAgICAvLyBpZiAoIWlzTW9iaWxlRGV2aWNlKCkgfHwgIWFkYXB0aXZlU3RhclNpemUpIHtcbiAgICAvLyAgIHN0YXJTaXplID0gc3RhclNpemUgKiBkcHI7XG4gICAgLy8gfVxuICAgIGlmIChjdHgpIHtcbiAgICAgIGNvbnN0IHtzcGFjZSwgc2NhbGVkUGFkZGluZ30gPSB0aGlzLmNhbGNTcGFjZUFuZFBhZGRpbmcoKTtcbiAgICAgIC8vIERyYXdpbmcgc3RhclxuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgWzMsIDksIDE1XS5mb3JFYWNoKGkgPT4ge1xuICAgICAgICBbMywgOSwgMTVdLmZvckVhY2goaiA9PiB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgaSA+PSB2aXNpYmxlQXJlYVswXVswXSAmJlxuICAgICAgICAgICAgaSA8PSB2aXNpYmxlQXJlYVswXVsxXSAmJlxuICAgICAgICAgICAgaiA+PSB2aXNpYmxlQXJlYVsxXVswXSAmJlxuICAgICAgICAgICAgaiA8PSB2aXNpYmxlQXJlYVsxXVsxXVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY3R4LmFyYyhcbiAgICAgICAgICAgICAgaSAqIHNwYWNlICsgc2NhbGVkUGFkZGluZyxcbiAgICAgICAgICAgICAgaiAqIHNwYWNlICsgc2NhbGVkUGFkZGluZyxcbiAgICAgICAgICAgICAgc3RhclNpemUsXG4gICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgIDIgKiBNYXRoLlBJLFxuICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdibGFjayc7XG4gICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgZHJhd0Nvb3JkaW5hdGUgPSAoKSA9PiB7XG4gICAgY29uc3Qge2JvYXJkLCBvcHRpb25zLCB2aXNpYmxlQXJlYX0gPSB0aGlzO1xuICAgIGlmICghYm9hcmQpIHJldHVybjtcbiAgICBjb25zdCB7Ym9hcmRTaXplLCB6b29tLCBwYWRkaW5nLCBib2FyZExpbmVFeHRlbnR9ID0gb3B0aW9ucztcbiAgICBsZXQgem9vbWVkQm9hcmRTaXplID0gdmlzaWJsZUFyZWFbMF1bMV0gLSB2aXNpYmxlQXJlYVswXVswXSArIDE7XG4gICAgY29uc3QgY3R4ID0gYm9hcmQuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjb25zdCB7c3BhY2UsIHNjYWxlZFBhZGRpbmd9ID0gdGhpcy5jYWxjU3BhY2VBbmRQYWRkaW5nKCk7XG4gICAgaWYgKGN0eCkge1xuICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgY3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9ICcjMDAwMDAwJztcbiAgICAgIGN0eC5mb250ID0gYGJvbGQgJHtzcGFjZSAvIDN9cHggSGVsdmV0aWNhYDtcblxuICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5jYWxjQ2VudGVyKCk7XG4gICAgICBsZXQgb2Zmc2V0ID0gc3BhY2UgLyAxLjU7XG5cbiAgICAgIGlmIChcbiAgICAgICAgY2VudGVyID09PSBDZW50ZXIuQ2VudGVyICYmXG4gICAgICAgIHZpc2libGVBcmVhWzBdWzBdID09PSAwICYmXG4gICAgICAgIHZpc2libGVBcmVhWzBdWzFdID09PSBib2FyZFNpemUgLSAxXG4gICAgICApIHtcbiAgICAgICAgb2Zmc2V0IC09IHNjYWxlZFBhZGRpbmcgLyAyO1xuICAgICAgfVxuXG4gICAgICBBMV9MRVRURVJTLmZvckVhY2goKGwsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHggPSBzcGFjZSAqIGluZGV4ICsgc2NhbGVkUGFkZGluZztcbiAgICAgICAgbGV0IG9mZnNldFRvcCA9IG9mZnNldDtcbiAgICAgICAgbGV0IG9mZnNldEJvdHRvbSA9IG9mZnNldDtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNlbnRlciA9PT0gQ2VudGVyLlRvcExlZnQgfHxcbiAgICAgICAgICBjZW50ZXIgPT09IENlbnRlci5Ub3BSaWdodCB8fFxuICAgICAgICAgIGNlbnRlciA9PT0gQ2VudGVyLlRvcFxuICAgICAgICApIHtcbiAgICAgICAgICBvZmZzZXRUb3AgLT0gc3BhY2UgKiBib2FyZExpbmVFeHRlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNlbnRlciA9PT0gQ2VudGVyLkJvdHRvbUxlZnQgfHxcbiAgICAgICAgICBjZW50ZXIgPT09IENlbnRlci5Cb3R0b21SaWdodCB8fFxuICAgICAgICAgIGNlbnRlciA9PT0gQ2VudGVyLkJvdHRvbVxuICAgICAgICApIHtcbiAgICAgICAgICBvZmZzZXRCb3R0b20gLT0gKHNwYWNlICogYm9hcmRMaW5lRXh0ZW50KSAvIDI7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHkxID0gdmlzaWJsZUFyZWFbMV1bMF0gKiBzcGFjZSArIHBhZGRpbmcgLSBvZmZzZXRUb3A7XG4gICAgICAgIGxldCB5MiA9IHkxICsgem9vbWVkQm9hcmRTaXplICogc3BhY2UgKyBvZmZzZXRCb3R0b20gKiAyO1xuICAgICAgICBpZiAoaW5kZXggPj0gdmlzaWJsZUFyZWFbMF1bMF0gJiYgaW5kZXggPD0gdmlzaWJsZUFyZWFbMF1bMV0pIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjZW50ZXIgIT09IENlbnRlci5Cb3R0b21MZWZ0ICYmXG4gICAgICAgICAgICBjZW50ZXIgIT09IENlbnRlci5Cb3R0b21SaWdodCAmJlxuICAgICAgICAgICAgY2VudGVyICE9PSBDZW50ZXIuQm90dG9tXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjdHguZmlsbFRleHQobCwgeCwgeTEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGNlbnRlciAhPT0gQ2VudGVyLlRvcExlZnQgJiZcbiAgICAgICAgICAgIGNlbnRlciAhPT0gQ2VudGVyLlRvcFJpZ2h0ICYmXG4gICAgICAgICAgICBjZW50ZXIgIT09IENlbnRlci5Ub3BcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dChsLCB4LCB5Mik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgQTFfTlVNQkVSUy5zbGljZSgtdGhpcy5vcHRpb25zLmJvYXJkU2l6ZSkuZm9yRWFjaCgobDogbnVtYmVyLCBpbmRleCkgPT4ge1xuICAgICAgICBjb25zdCB5ID0gc3BhY2UgKiBpbmRleCArIHNjYWxlZFBhZGRpbmc7XG4gICAgICAgIGxldCBvZmZzZXRMZWZ0ID0gb2Zmc2V0O1xuICAgICAgICBsZXQgb2Zmc2V0UmlnaHQgPSBvZmZzZXQ7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjZW50ZXIgPT09IENlbnRlci5Ub3BMZWZ0IHx8XG4gICAgICAgICAgY2VudGVyID09PSBDZW50ZXIuQm90dG9tTGVmdCB8fFxuICAgICAgICAgIGNlbnRlciA9PT0gQ2VudGVyLkxlZnRcbiAgICAgICAgKSB7XG4gICAgICAgICAgb2Zmc2V0TGVmdCAtPSBzcGFjZSAqIGJvYXJkTGluZUV4dGVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgY2VudGVyID09PSBDZW50ZXIuVG9wUmlnaHQgfHxcbiAgICAgICAgICBjZW50ZXIgPT09IENlbnRlci5Cb3R0b21SaWdodCB8fFxuICAgICAgICAgIGNlbnRlciA9PT0gQ2VudGVyLlJpZ2h0XG4gICAgICAgICkge1xuICAgICAgICAgIG9mZnNldFJpZ2h0IC09IChzcGFjZSAqIGJvYXJkTGluZUV4dGVudCkgLyAyO1xuICAgICAgICB9XG4gICAgICAgIGxldCB4MSA9IHZpc2libGVBcmVhWzBdWzBdICogc3BhY2UgKyBwYWRkaW5nIC0gb2Zmc2V0TGVmdDtcbiAgICAgICAgbGV0IHgyID0geDEgKyB6b29tZWRCb2FyZFNpemUgKiBzcGFjZSArIDIgKiBvZmZzZXRSaWdodDtcbiAgICAgICAgaWYgKGluZGV4ID49IHZpc2libGVBcmVhWzFdWzBdICYmIGluZGV4IDw9IHZpc2libGVBcmVhWzFdWzFdKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY2VudGVyICE9PSBDZW50ZXIuVG9wUmlnaHQgJiZcbiAgICAgICAgICAgIGNlbnRlciAhPT0gQ2VudGVyLkJvdHRvbVJpZ2h0ICYmXG4gICAgICAgICAgICBjZW50ZXIgIT09IENlbnRlci5SaWdodFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY3R4LmZpbGxUZXh0KGwudG9TdHJpbmcoKSwgeDEsIHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjZW50ZXIgIT09IENlbnRlci5Ub3BMZWZ0ICYmXG4gICAgICAgICAgICBjZW50ZXIgIT09IENlbnRlci5Cb3R0b21MZWZ0ICYmXG4gICAgICAgICAgICBjZW50ZXIgIT09IENlbnRlci5MZWZ0XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjdHguZmlsbFRleHQobC50b1N0cmluZygpLCB4MiwgeSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgY2FsY1NwYWNlQW5kUGFkZGluZyA9IChjYW52YXMgPSB0aGlzLmNhbnZhcykgPT4ge1xuICAgIGxldCBzcGFjZSA9IDA7XG4gICAgbGV0IHNjYWxlZFBhZGRpbmcgPSAwO1xuICAgIGxldCBzY2FsZWRCb2FyZEV4dGVudCA9IDA7XG4gICAgaWYgKGNhbnZhcykge1xuICAgICAgY29uc3Qge3BhZGRpbmcsIGJvYXJkU2l6ZSwgYm9hcmRMaW5lRXh0ZW50LCB6b29tfSA9IHRoaXMub3B0aW9ucztcbiAgICAgIGNvbnN0IHt2aXNpYmxlQXJlYX0gPSB0aGlzO1xuXG4gICAgICBpZiAoXG4gICAgICAgICh2aXNpYmxlQXJlYVswXVswXSAhPT0gMCAmJiB2aXNpYmxlQXJlYVswXVsxXSA9PT0gYm9hcmRTaXplIC0gMSkgfHxcbiAgICAgICAgKHZpc2libGVBcmVhWzFdWzBdICE9PSAwICYmIHZpc2libGVBcmVhWzFdWzFdID09PSBib2FyZFNpemUgLSAxKVxuICAgICAgKSB7XG4gICAgICAgIHNjYWxlZEJvYXJkRXh0ZW50ID0gYm9hcmRMaW5lRXh0ZW50O1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAodmlzaWJsZUFyZWFbMF1bMF0gIT09IDAgJiYgdmlzaWJsZUFyZWFbMF1bMV0gIT09IGJvYXJkU2l6ZSAtIDEpIHx8XG4gICAgICAgICh2aXNpYmxlQXJlYVsxXVswXSAhPT0gMCAmJiB2aXNpYmxlQXJlYVsxXVsxXSAhPT0gYm9hcmRTaXplIC0gMSlcbiAgICAgICkge1xuICAgICAgICBzY2FsZWRCb2FyZEV4dGVudCA9IGJvYXJkTGluZUV4dGVudCAqIDI7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRpdmlzb3IgPSB6b29tID8gYm9hcmRTaXplICsgc2NhbGVkQm9hcmRFeHRlbnQgOiBib2FyZFNpemU7XG4gICAgICAvLyBjb25zdCBkaXZpc29yID0gYm9hcmRTaXplO1xuICAgICAgc3BhY2UgPSAoY2FudmFzLndpZHRoIC0gcGFkZGluZyAqIDIpIC8gTWF0aC5jZWlsKGRpdmlzb3IpO1xuICAgICAgc2NhbGVkUGFkZGluZyA9IHBhZGRpbmcgKyBzcGFjZSAvIDI7XG4gICAgfVxuICAgIHJldHVybiB7c3BhY2UsIHNjYWxlZFBhZGRpbmcsIHNjYWxlZEJvYXJkRXh0ZW50fTtcbiAgfTtcblxuICBwbGF5RWZmZWN0ID0gKG1hdCA9IHRoaXMubWF0LCBlZmZlY3RNYXQgPSB0aGlzLmVmZmVjdE1hdCwgY2xlYXIgPSB0cnVlKSA9PiB7XG4gICAgY29uc3QgY2FudmFzID0gdGhpcy5lZmZlY3RDYW52YXM7XG5cbiAgICBpZiAoY2FudmFzKSB7XG4gICAgICBpZiAoY2xlYXIpIHRoaXMuY2xlYXJDYW52YXMoY2FudmFzKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWZmZWN0TWF0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZWZmZWN0TWF0W2ldLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBlZmZlY3RNYXRbaV1bal07XG4gICAgICAgICAgY29uc3Qge3NwYWNlLCBzY2FsZWRQYWRkaW5nfSA9IHRoaXMuY2FsY1NwYWNlQW5kUGFkZGluZygpO1xuICAgICAgICAgIGNvbnN0IHggPSBzY2FsZWRQYWRkaW5nICsgaSAqIHNwYWNlO1xuICAgICAgICAgIGNvbnN0IHkgPSBzY2FsZWRQYWRkaW5nICsgaiAqIHNwYWNlO1xuICAgICAgICAgIGNvbnN0IGtpID0gbWF0W2ldW2pdO1xuICAgICAgICAgIGxldCBlZmZlY3Q7XG4gICAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICAgICAgICBpZiAoY3R4KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGNhc2UgRWZmZWN0LkJhbjoge1xuICAgICAgICAgICAgICAgIGVmZmVjdCA9IG5ldyBCYW5FZmZlY3QoY3R4LCB4LCB5LCBzcGFjZSwga2kpO1xuICAgICAgICAgICAgICAgIGVmZmVjdC5wbGF5KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVmZmVjdE1hdFtpXVtqXSA9IEVmZmVjdC5Ob25lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3Qge2JvYXJkU2l6ZX0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICB0aGlzLnNldEVmZmVjdE1hdChlbXB0eShbYm9hcmRTaXplLCBib2FyZFNpemVdKSk7XG4gICAgfVxuICB9O1xuXG4gIGRyYXdDdXJzb3IgPSAoKSA9PiB7XG4gICAgY29uc3QgY2FudmFzID0gdGhpcy5jdXJzb3JDYW52YXM7XG4gICAgaWYgKGNhbnZhcykge1xuICAgICAgdGhpcy5jbGVhckN1cnNvckNhbnZhcygpO1xuICAgICAgaWYgKHRoaXMuY3Vyc29yID09PSBDdXJzb3IuTm9uZSkgcmV0dXJuO1xuICAgICAgaWYgKGlzTW9iaWxlRGV2aWNlKCkgJiYgIXRoaXMudG91Y2hNb3ZpbmcpIHJldHVybjtcblxuICAgICAgY29uc3Qge3BhZGRpbmd9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBjb25zdCB7c3BhY2V9ID0gdGhpcy5jYWxjU3BhY2VBbmRQYWRkaW5nKCk7XG4gICAgICBjb25zdCB7dmlzaWJsZUFyZWEsIGN1cnNvciwgY3Vyc29yVmFsdWV9ID0gdGhpcztcblxuICAgICAgY29uc3QgW2lkeCwgaWR5XSA9IHRoaXMuY3Vyc29yUG9zaXRpb247XG4gICAgICBpZiAoaWR4IDwgdmlzaWJsZUFyZWFbMF1bMF0gfHwgaWR4ID4gdmlzaWJsZUFyZWFbMF1bMV0pIHJldHVybjtcbiAgICAgIGlmIChpZHkgPCB2aXNpYmxlQXJlYVsxXVswXSB8fCBpZHkgPiB2aXNpYmxlQXJlYVsxXVsxXSkgcmV0dXJuO1xuICAgICAgY29uc3QgeCA9IGlkeCAqIHNwYWNlICsgc3BhY2UgLyAyICsgcGFkZGluZztcbiAgICAgIGNvbnN0IHkgPSBpZHkgKiBzcGFjZSArIHNwYWNlIC8gMiArIHBhZGRpbmc7XG4gICAgICBjb25zdCBraSA9IHRoaXMubWF0Py5baWR4XT8uW2lkeV0gfHwgS2kuRW1wdHk7XG5cbiAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgbGV0IGN1cjtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHNwYWNlICogMC44O1xuICAgICAgICBpZiAoY3Vyc29yID09PSBDdXJzb3IuQ2lyY2xlKSB7XG4gICAgICAgICAgY3VyID0gbmV3IENpcmNsZU1hcmt1cChjdHgsIHgsIHksIHNwYWNlLCBraSk7XG4gICAgICAgICAgY3VyLnNldEdsb2JhbEFscGhhKDAuOCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY3Vyc29yID09PSBDdXJzb3IuU3F1YXJlKSB7XG4gICAgICAgICAgY3VyID0gbmV3IFNxdWFyZU1hcmt1cChjdHgsIHgsIHksIHNwYWNlLCBraSk7XG4gICAgICAgICAgY3VyLnNldEdsb2JhbEFscGhhKDAuOCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY3Vyc29yID09PSBDdXJzb3IuVHJpYW5nbGUpIHtcbiAgICAgICAgICBjdXIgPSBuZXcgVHJpYW5nbGVNYXJrdXAoY3R4LCB4LCB5LCBzcGFjZSwga2kpO1xuICAgICAgICAgIGN1ci5zZXRHbG9iYWxBbHBoYSgwLjgpO1xuICAgICAgICB9IGVsc2UgaWYgKGN1cnNvciA9PT0gQ3Vyc29yLkNyb3NzKSB7XG4gICAgICAgICAgY3VyID0gbmV3IENyb3NzTWFya3VwKGN0eCwgeCwgeSwgc3BhY2UsIGtpKTtcbiAgICAgICAgICBjdXIuc2V0R2xvYmFsQWxwaGEoMC44KTtcbiAgICAgICAgfSBlbHNlIGlmIChjdXJzb3IgPT09IEN1cnNvci5UZXh0KSB7XG4gICAgICAgICAgY3VyID0gbmV3IFRleHRNYXJrdXAoY3R4LCB4LCB5LCBzcGFjZSwga2ksIGN1cnNvclZhbHVlKTtcbiAgICAgICAgICBjdXIuc2V0R2xvYmFsQWxwaGEoMC44KTtcbiAgICAgICAgfSBlbHNlIGlmIChraSA9PT0gS2kuRW1wdHkgJiYgY3Vyc29yID09PSBDdXJzb3IuQmxhY2tTdG9uZSkge1xuICAgICAgICAgIGN1ciA9IG5ldyBDb2xvclN0b25lKGN0eCwgeCwgeSwgS2kuQmxhY2spO1xuICAgICAgICAgIGN1ci5zZXRTaXplKHNpemUpO1xuICAgICAgICAgIGN1ci5zZXRHbG9iYWxBbHBoYSgwLjUpO1xuICAgICAgICB9IGVsc2UgaWYgKGtpID09PSBLaS5FbXB0eSAmJiBjdXJzb3IgPT09IEN1cnNvci5XaGl0ZVN0b25lKSB7XG4gICAgICAgICAgY3VyID0gbmV3IENvbG9yU3RvbmUoY3R4LCB4LCB5LCBLaS5XaGl0ZSk7XG4gICAgICAgICAgY3VyLnNldFNpemUoc2l6ZSk7XG4gICAgICAgICAgY3VyLnNldEdsb2JhbEFscGhhKDAuNSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY3Vyc29yID09PSBDdXJzb3IuQ2xlYXIpIHtcbiAgICAgICAgICBjdXIgPSBuZXcgQ29sb3JTdG9uZShjdHgsIHgsIHksIEtpLkVtcHR5KTtcbiAgICAgICAgICBjdXIuc2V0U2l6ZShzaXplKTtcbiAgICAgICAgfVxuICAgICAgICBjdXI/LmRyYXcoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZHJhd1N0b25lcyA9IChcbiAgICBtYXQ6IG51bWJlcltdW10gPSB0aGlzLm1hdCxcbiAgICBjYW52YXMgPSB0aGlzLmNhbnZhcyxcbiAgICBjbGVhciA9IHRydWVcbiAgKSA9PiB7XG4gICAgY29uc3Qge3RoZW1lID0gVGhlbWUuQmxhY2tBbmRXaGl0ZSwgdGhlbWVSZXNvdXJjZXN9ID0gdGhpcy5vcHRpb25zO1xuICAgIGlmIChjbGVhcikgdGhpcy5jbGVhckNhbnZhcygpO1xuICAgIGlmIChjYW52YXMpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0W2ldLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBtYXRbaV1bal07XG4gICAgICAgICAgaWYgKHZhbHVlICE9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgIGlmIChjdHgpIHtcbiAgICAgICAgICAgICAgY29uc3Qge3NwYWNlLCBzY2FsZWRQYWRkaW5nfSA9IHRoaXMuY2FsY1NwYWNlQW5kUGFkZGluZygpO1xuICAgICAgICAgICAgICBjb25zdCB4ID0gc2NhbGVkUGFkZGluZyArIGkgKiBzcGFjZTtcbiAgICAgICAgICAgICAgY29uc3QgeSA9IHNjYWxlZFBhZGRpbmcgKyBqICogc3BhY2U7XG5cbiAgICAgICAgICAgICAgY29uc3QgcmF0aW8gPSAwLjQ1O1xuICAgICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgdGhlbWUgIT09IFRoZW1lLlN1YmR1ZWQgJiZcbiAgICAgICAgICAgICAgICB0aGVtZSAhPT0gVGhlbWUuQmxhY2tBbmRXaGl0ZSAmJlxuICAgICAgICAgICAgICAgIHRoZW1lICE9PSBUaGVtZS5GbGF0XG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGN0eC5zaGFkb3dPZmZzZXRYID0gMztcbiAgICAgICAgICAgICAgICBjdHguc2hhZG93T2Zmc2V0WSA9IDM7XG4gICAgICAgICAgICAgICAgY3R4LnNoYWRvd0NvbG9yID0gJyM1NTUnO1xuICAgICAgICAgICAgICAgIGN0eC5zaGFkb3dCbHVyID0gODtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdHguc2hhZG93T2Zmc2V0WCA9IDA7XG4gICAgICAgICAgICAgICAgY3R4LnNoYWRvd09mZnNldFkgPSAwO1xuICAgICAgICAgICAgICAgIGN0eC5zaGFkb3dCbHVyID0gMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsZXQgc3RvbmU7XG4gICAgICAgICAgICAgIHN3aXRjaCAodGhlbWUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFRoZW1lLkJsYWNrQW5kV2hpdGU6XG4gICAgICAgICAgICAgICAgY2FzZSBUaGVtZS5GbGF0OiB7XG4gICAgICAgICAgICAgICAgICBzdG9uZSA9IG5ldyBDb2xvclN0b25lKGN0eCwgeCwgeSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgc3RvbmUuc2V0U2l6ZShzcGFjZSAqIHJhdGlvICogMik7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgY29uc3QgYmxhY2tzID0gdGhlbWVSZXNvdXJjZXNbdGhlbWVdLmJsYWNrcy5tYXAoXG4gICAgICAgICAgICAgICAgICAgIGkgPT4gaW1hZ2VzW2ldXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgY29uc3Qgd2hpdGVzID0gdGhlbWVSZXNvdXJjZXNbdGhlbWVdLndoaXRlcy5tYXAoXG4gICAgICAgICAgICAgICAgICAgIGkgPT4gaW1hZ2VzW2ldXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgY29uc3QgbW9kID0gaSArIDEwICsgajtcbiAgICAgICAgICAgICAgICAgIHN0b25lID0gbmV3IEltYWdlU3RvbmUoY3R4LCB4LCB5LCB2YWx1ZSwgbW9kLCBibGFja3MsIHdoaXRlcyk7XG4gICAgICAgICAgICAgICAgICBzdG9uZS5zZXRTaXplKHNwYWNlICogcmF0aW8gKiAyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3RvbmUuZHJhdygpO1xuICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9fZXh0ZW5kcyIsIlR5cGVFcnJvciIsIlN0cmluZyIsIl9fIiwidGhpcyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiX19hc3NpZ24iLCJhc3NpZ24iLCJ0IiwicyIsImkiLCJuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXBwbHkiLCJfX3ZhbHVlcyIsIm8iLCJTeW1ib2wiLCJpdGVyYXRvciIsIm0iLCJuZXh0IiwidmFsdWUiLCJkb25lIiwiX19yZWFkIiwiciIsImUiLCJhciIsInB1c2giLCJlcnJvciIsIl9fc3ByZWFkQXJyYXkiLCJ0byIsImZyb20iLCJwYWNrIiwibCIsInNsaWNlIiwiY29uY2F0IiwiU3VwcHJlc3NlZEVycm9yIiwibWVyZ2VTb3J0IiwiZmluZEluc2VydEluZGV4IiwibWVyZ2Vzb3J0IiwiY29tcGFyYXRvckZuIiwiYXJyIiwiZmlyc3RIYWxmIiwic2Vjb25kSGFsZiIsImxlbiIsImFycjEiLCJhcnIyIiwicmVzdWx0IiwibGVmdDEiLCJsZWZ0MiIsInNoaWZ0IiwibWVyZ2UiLCJyZXF1aXJlJCQwIiwiZWwiLCJ0cmVlTW9kZWwiLCJ3YWxrU3RyYXRlZ2llcyIsImsiLCJUcmVlTW9kZWwiLCJjb25maWciLCJjaGlsZHJlblByb3BlcnR5TmFtZSIsIm1vZGVsQ29tcGFyYXRvckZuIiwiYWRkQ2hpbGRUb05vZGUiLCJub2RlIiwiY2hpbGQiLCJwYXJlbnQiLCJjaGlsZHJlbiIsIk5vZGUiLCJtb2RlbCIsImhhc0NvbXBhcmF0b3JGdW5jdGlvbiIsImFkZENoaWxkIiwic2VsZiIsImluc2VydEluZGV4IiwiaW5kZXgiLCJzcGxpY2UiLCJ1bmRlZmluZWQiLCJFcnJvciIsInBhcnNlQXJncyIsImFyZ3MiLCJmbiIsIm9wdGlvbnMiLCJjdHgiLCJzdHJhdGVneSIsInBhcnNlIiwiY2hpbGRDb3VudCIsImlzUm9vdCIsImhhc0NoaWxkcmVuIiwiYWRkQ2hpbGRBdEluZGV4Iiwic2V0SW5kZXgiLCJvbGRJbmRleCIsImluZGV4T2YiLCJnZXRQYXRoIiwicGF0aCIsImFkZFRvUGF0aCIsInVuc2hpZnQiLCJnZXRJbmRleCIsIndhbGsiLCJwcmUiLCJkZXB0aEZpcnN0UHJlT3JkZXIiLCJjYWxsYmFjayIsImNvbnRleHQiLCJrZWVwR29pbmciLCJwb3N0IiwiZGVwdGhGaXJzdFBvc3RPcmRlciIsImJyZWFkdGgiLCJxdWV1ZSIsInByb2Nlc3NRdWV1ZSIsImFsbCIsImZpcnN0IiwiZHJvcCIsImluZGV4T2ZDaGlsZCIsIkZVTkNfRVJST1JfVEVYVCIsIkhBU0hfVU5ERUZJTkVEIiwiUExBQ0VIT0xERVIiLCJXUkFQX0NVUlJZX1JJR0hUX0ZMQUciLCJXUkFQX1BBUlRJQUxfRkxBRyIsIldSQVBfUEFSVElBTF9SSUdIVF9GTEFHIiwiV1JBUF9BUllfRkxBRyIsIldSQVBfUkVBUkdfRkxBRyIsIklORklOSVRZIiwiTUFYX1NBRkVfSU5URUdFUiIsIk5BTiIsIk1BWF9BUlJBWV9MRU5HVEgiLCJ3cmFwRmxhZ3MiLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImVycm9yVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm9iamVjdFRhZyIsInByb21pc2VUYWciLCJyZWdleHBUYWciLCJzZXRUYWciLCJzdHJpbmdUYWciLCJzeW1ib2xUYWciLCJ3ZWFrTWFwVGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsImZsb2F0MzJUYWciLCJmbG9hdDY0VGFnIiwiaW50OFRhZyIsImludDE2VGFnIiwiaW50MzJUYWciLCJ1aW50OFRhZyIsInVpbnQ4Q2xhbXBlZFRhZyIsInVpbnQxNlRhZyIsInVpbnQzMlRhZyIsInJlRW1wdHlTdHJpbmdMZWFkaW5nIiwicmVFbXB0eVN0cmluZ01pZGRsZSIsInJlRW1wdHlTdHJpbmdUcmFpbGluZyIsInJlRXNjYXBlZEh0bWwiLCJyZVVuZXNjYXBlZEh0bWwiLCJyZUhhc0VzY2FwZWRIdG1sIiwiUmVnRXhwIiwic291cmNlIiwicmVIYXNVbmVzY2FwZWRIdG1sIiwicmVFc2NhcGUiLCJyZUV2YWx1YXRlIiwicmVJbnRlcnBvbGF0ZSIsInJlSXNEZWVwUHJvcCIsInJlSXNQbGFpblByb3AiLCJyZVByb3BOYW1lIiwicmVSZWdFeHBDaGFyIiwicmVIYXNSZWdFeHBDaGFyIiwicmVUcmltU3RhcnQiLCJyZVdoaXRlc3BhY2UiLCJyZVdyYXBDb21tZW50IiwicmVXcmFwRGV0YWlscyIsInJlU3BsaXREZXRhaWxzIiwicmVBc2NpaVdvcmQiLCJyZUZvcmJpZGRlbklkZW50aWZpZXJDaGFycyIsInJlRXNjYXBlQ2hhciIsInJlRXNUZW1wbGF0ZSIsInJlRmxhZ3MiLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNIb3N0Q3RvciIsInJlSXNPY3RhbCIsInJlSXNVaW50IiwicmVMYXRpbiIsInJlTm9NYXRjaCIsInJlVW5lc2NhcGVkU3RyaW5nIiwicnNBc3RyYWxSYW5nZSIsInJzQ29tYm9SYW5nZSIsInJzQ29tYm9NYXJrc1JhbmdlIiwicnNEaW5nYmF0UmFuZ2UiLCJyc0xvd2VyUmFuZ2UiLCJyc1VwcGVyUmFuZ2UiLCJyc1ZhclJhbmdlIiwicnNCcmVha1JhbmdlIiwicnNNYXRoT3BSYW5nZSIsInJzQXBvcyIsInJzQXN0cmFsIiwicnNCcmVhayIsInJzQ29tYm8iLCJyc0RpZ2l0cyIsInJzRGluZ2JhdCIsInJzTG93ZXIiLCJyc01pc2MiLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicnNVcHBlciIsInJzWldKIiwicnNNaXNjTG93ZXIiLCJyc01pc2NVcHBlciIsInJzT3B0Q29udHJMb3dlciIsInJzT3B0Q29udHJVcHBlciIsInJlT3B0TW9kIiwicnNPcHRWYXIiLCJyc1NlcSIsImpvaW4iLCJyc0Vtb2ppIiwicnNTeW1ib2wiLCJyZUFwb3MiLCJyZUNvbWJvTWFyayIsInJlVW5pY29kZSIsInJlVW5pY29kZVdvcmQiLCJyZUhhc1VuaWNvZGUiLCJyZUhhc1VuaWNvZGVXb3JkIiwiY29udGV4dFByb3BzIiwidGVtcGxhdGVDb3VudGVyIiwidHlwZWRBcnJheVRhZ3MiLCJjbG9uZWFibGVUYWdzIiwic3RyaW5nRXNjYXBlcyIsImZyZWVQYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsImZyZWVQYXJzZUludCIsInBhcnNlSW50IiwiZnJlZUdsb2JhbCIsIl90eXBlb2YiLCJnbG9iYWwiLCJmcmVlU2VsZiIsInJvb3QiLCJGdW5jdGlvbiIsImZyZWVFeHBvcnRzIiwiZXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIm1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJub2RlSXNBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXIiLCJub2RlSXNEYXRlIiwiaXNEYXRlIiwibm9kZUlzTWFwIiwiaXNNYXAiLCJub2RlSXNSZWdFeHAiLCJpc1JlZ0V4cCIsIm5vZGVJc1NldCIsImlzU2V0Iiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImZ1bmMiLCJ0aGlzQXJnIiwiYXJyYXlBZ2dyZWdhdG9yIiwiYXJyYXkiLCJzZXR0ZXIiLCJpdGVyYXRlZSIsImFjY3VtdWxhdG9yIiwiYXJyYXlFYWNoIiwiYXJyYXlFYWNoUmlnaHQiLCJhcnJheUV2ZXJ5IiwicHJlZGljYXRlIiwiYXJyYXlGaWx0ZXIiLCJyZXNJbmRleCIsImFycmF5SW5jbHVkZXMiLCJiYXNlSW5kZXhPZiIsImFycmF5SW5jbHVkZXNXaXRoIiwiY29tcGFyYXRvciIsImFycmF5TWFwIiwiYXJyYXlQdXNoIiwidmFsdWVzIiwib2Zmc2V0IiwiYXJyYXlSZWR1Y2UiLCJpbml0QWNjdW0iLCJhcnJheVJlZHVjZVJpZ2h0IiwiYXJyYXlTb21lIiwiYXNjaWlTaXplIiwiYmFzZVByb3BlcnR5IiwiYmFzZUZpbmRLZXkiLCJjb2xsZWN0aW9uIiwiZWFjaEZ1bmMiLCJrZXkiLCJiYXNlRmluZEluZGV4IiwiZnJvbUluZGV4IiwiZnJvbVJpZ2h0Iiwic3RyaWN0SW5kZXhPZiIsImJhc2VJc05hTiIsImJhc2VJbmRleE9mV2l0aCIsImJhc2VNZWFuIiwiYmFzZVN1bSIsIm9iamVjdCIsImJhc2VQcm9wZXJ0eU9mIiwiYmFzZVJlZHVjZSIsImN1cnJlbnQiLCJiYXNlVGltZXMiLCJiYXNlVHJpbSIsInN0cmluZyIsInRyaW1tZWRFbmRJbmRleCIsInJlcGxhY2UiLCJiYXNlVW5hcnkiLCJiYXNlVmFsdWVzIiwicHJvcHMiLCJjYWNoZUhhcyIsImNhY2hlIiwiaGFzIiwiY2hhcnNTdGFydEluZGV4Iiwic3RyU3ltYm9scyIsImNoclN5bWJvbHMiLCJjaGFyc0VuZEluZGV4IiwiZGVidXJyTGV0dGVyIiwiZXNjYXBlSHRtbENoYXIiLCJlc2NhcGVTdHJpbmdDaGFyIiwiY2hyIiwiaGFzVW5pY29kZSIsInRlc3QiLCJtYXBUb0FycmF5IiwibWFwIiwic2l6ZSIsImZvckVhY2giLCJvdmVyQXJnIiwidHJhbnNmb3JtIiwiYXJnIiwicmVwbGFjZUhvbGRlcnMiLCJwbGFjZWhvbGRlciIsInNldFRvQXJyYXkiLCJzZXQiLCJzZXRUb1BhaXJzIiwic3RyaW5nU2l6ZSIsImxhc3RJbmRleCIsInVuaWNvZGVTaXplIiwic3RyaW5nVG9BcnJheSIsIm1hdGNoIiwidW5pY29kZVRvQXJyYXkiLCJzcGxpdCIsImFzY2lpVG9BcnJheSIsImNoYXJBdCIsInVuZXNjYXBlSHRtbENoYXIiLCJfIiwicnVuSW5Db250ZXh0IiwidWlkIiwiZGVmYXVsdHMiLCJwaWNrIiwiRGF0ZSIsIk1hdGgiLCJhcnJheVByb3RvIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJjb3JlSnNEYXRhIiwiZnVuY1RvU3RyaW5nIiwidG9TdHJpbmciLCJpZENvdW50ZXIiLCJtYXNrU3JjS2V5IiwiZXhlYyIsImtleXMiLCJJRV9QUk9UTyIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsIm9sZERhc2giLCJyZUlzTmF0aXZlIiwiQnVmZmVyIiwiVWludDhBcnJheSIsImFsbG9jVW5zYWZlIiwiZ2V0UHJvdG90eXBlIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RDcmVhdGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNwcmVhZGFibGVTeW1ib2wiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzeW1JdGVyYXRvciIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJkZWZpbmVQcm9wZXJ0eSIsImdldE5hdGl2ZSIsImN0eENsZWFyVGltZW91dCIsImNsZWFyVGltZW91dCIsImN0eE5vdyIsIm5vdyIsImN0eFNldFRpbWVvdXQiLCJzZXRUaW1lb3V0IiwibmF0aXZlQ2VpbCIsImNlaWwiLCJuYXRpdmVGbG9vciIsImZsb29yIiwibmF0aXZlR2V0U3ltYm9scyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJuYXRpdmVJc0Zpbml0ZSIsImlzRmluaXRlIiwibmF0aXZlSm9pbiIsIm5hdGl2ZUtleXMiLCJuYXRpdmVNYXgiLCJtYXgiLCJuYXRpdmVNaW4iLCJtaW4iLCJuYXRpdmVOb3ciLCJuYXRpdmVQYXJzZUludCIsIm5hdGl2ZVJhbmRvbSIsInJhbmRvbSIsIm5hdGl2ZVJldmVyc2UiLCJyZXZlcnNlIiwiRGF0YVZpZXciLCJNYXAiLCJQcm9taXNlIiwiU2V0IiwiV2Vha01hcCIsIm5hdGl2ZUNyZWF0ZSIsIm1ldGFNYXAiLCJyZWFsTmFtZXMiLCJkYXRhVmlld0N0b3JTdHJpbmciLCJ0b1NvdXJjZSIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsInN5bWJvbFByb3RvIiwic3ltYm9sVmFsdWVPZiIsInZhbHVlT2YiLCJzeW1ib2xUb1N0cmluZyIsImxvZGFzaCIsImlzT2JqZWN0TGlrZSIsImlzQXJyYXkiLCJMYXp5V3JhcHBlciIsIkxvZGFzaFdyYXBwZXIiLCJ3cmFwcGVyQ2xvbmUiLCJiYXNlQ3JlYXRlIiwicHJvdG8iLCJpc09iamVjdCIsImJhc2VMb2Rhc2giLCJjaGFpbkFsbCIsIl9fd3JhcHBlZF9fIiwiX19hY3Rpb25zX18iLCJfX2NoYWluX18iLCJfX2luZGV4X18iLCJfX3ZhbHVlc19fIiwiX19kaXJfXyIsIl9fZmlsdGVyZWRfXyIsIl9faXRlcmF0ZWVzX18iLCJfX3Rha2VDb3VudF9fIiwiX192aWV3c19fIiwiSGFzaCIsImVudHJpZXMiLCJjbGVhciIsImVudHJ5IiwiTGlzdENhY2hlIiwiTWFwQ2FjaGUiLCJTZXRDYWNoZSIsIl9fZGF0YV9fIiwiYWRkIiwiU3RhY2siLCJkYXRhIiwiYXJyYXlMaWtlS2V5cyIsImluaGVyaXRlZCIsImlzQXJyIiwiaXNBcmciLCJpc0FyZ3VtZW50cyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiaXNJbmRleCIsImFycmF5U2FtcGxlIiwiYmFzZVJhbmRvbSIsImFycmF5U2FtcGxlU2l6ZSIsInNodWZmbGVTZWxmIiwiY29weUFycmF5IiwiYmFzZUNsYW1wIiwiYXJyYXlTaHVmZmxlIiwiYXNzaWduTWVyZ2VWYWx1ZSIsImVxIiwiYmFzZUFzc2lnblZhbHVlIiwiYXNzaWduVmFsdWUiLCJvYmpWYWx1ZSIsImFzc29jSW5kZXhPZiIsImJhc2VBZ2dyZWdhdG9yIiwiYmFzZUVhY2giLCJiYXNlQXNzaWduIiwiY29weU9iamVjdCIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImJhc2VBdCIsInBhdGhzIiwic2tpcCIsImdldCIsIm51bWJlciIsImxvd2VyIiwidXBwZXIiLCJiYXNlQ2xvbmUiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsInN0YWNrIiwiaXNEZWVwIiwiaXNGbGF0IiwiaXNGdWxsIiwiaW5wdXQiLCJpbml0Q2xvbmVBcnJheSIsInRhZyIsImdldFRhZyIsImlzRnVuYyIsImNsb25lQnVmZmVyIiwiaW5pdENsb25lT2JqZWN0IiwiZ2V0U3ltYm9sc0luIiwiY29weVN5bWJvbHNJbiIsImtleXNJbiIsImJhc2VBc3NpZ25JbiIsImdldFN5bWJvbHMiLCJjb3B5U3ltYm9scyIsIkN0b3IiLCJjbG9uZUFycmF5QnVmZmVyIiwiZGF0YVZpZXciLCJidWZmZXIiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImNsb25lRGF0YVZpZXciLCJjbG9uZVR5cGVkQXJyYXkiLCJyZWdleHAiLCJjbG9uZVJlZ0V4cCIsInN5bWJvbCIsImluaXRDbG9uZUJ5VGFnIiwic3RhY2tlZCIsInN1YlZhbHVlIiwiZ2V0QWxsS2V5c0luIiwiZ2V0QWxsS2V5cyIsImJhc2VDb25mb3Jtc1RvIiwiYmFzZURlbGF5Iiwid2FpdCIsImJhc2VEaWZmZXJlbmNlIiwiaW5jbHVkZXMiLCJpc0NvbW1vbiIsInZhbHVlc0xlbmd0aCIsIm91dGVyIiwiY29tcHV0ZWQiLCJ2YWx1ZXNJbmRleCIsInRlbXBsYXRlU2V0dGluZ3MiLCJlc2NhcGUiLCJldmFsdWF0ZSIsImludGVycG9sYXRlIiwidmFyaWFibGUiLCJpbXBvcnRzIiwicG9wIiwiaGFzaCIsImdldE1hcERhdGEiLCJwYWlycyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJjcmVhdGVCYXNlRWFjaCIsImJhc2VGb3JPd24iLCJiYXNlRWFjaFJpZ2h0IiwiYmFzZUZvck93blJpZ2h0IiwiYmFzZUV2ZXJ5IiwiYmFzZUV4dHJlbXVtIiwiaXNTeW1ib2wiLCJiYXNlRmlsdGVyIiwiYmFzZUZsYXR0ZW4iLCJkZXB0aCIsImlzU3RyaWN0IiwiaXNGbGF0dGVuYWJsZSIsImJhc2VGb3IiLCJjcmVhdGVCYXNlRm9yIiwiYmFzZUZvclJpZ2h0IiwiYmFzZUZ1bmN0aW9ucyIsImlzRnVuY3Rpb24iLCJiYXNlR2V0IiwiY2FzdFBhdGgiLCJ0b0tleSIsImJhc2VHZXRBbGxLZXlzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImJhc2VHZXRUYWciLCJpc093biIsInVubWFza2VkIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJiYXNlR3QiLCJvdGhlciIsImJhc2VIYXMiLCJiYXNlSGFzSW4iLCJiYXNlSW50ZXJzZWN0aW9uIiwiYXJyYXlzIiwib3RoTGVuZ3RoIiwib3RoSW5kZXgiLCJjYWNoZXMiLCJtYXhMZW5ndGgiLCJJbmZpbml0eSIsInNlZW4iLCJiYXNlSW52b2tlIiwibGFzdCIsImJhc2VJc0FyZ3VtZW50cyIsImJhc2VJc0VxdWFsIiwiZXF1YWxGdW5jIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJlcXVhbEFycmF5cyIsIm5hbWUiLCJtZXNzYWdlIiwiY29udmVydCIsImlzUGFydGlhbCIsImVxdWFsQnlUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsIm90aFByb3BzIiwib2JqU3RhY2tlZCIsIm90aFN0YWNrZWQiLCJza2lwQ3RvciIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJvYmpDdG9yIiwib3RoQ3RvciIsImVxdWFsT2JqZWN0cyIsImJhc2VJc0VxdWFsRGVlcCIsImJhc2VJc01hdGNoIiwibWF0Y2hEYXRhIiwibm9DdXN0b21pemVyIiwic3JjVmFsdWUiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsImJhc2VJc05hdGl2ZSIsImJhc2VJdGVyYXRlZSIsImlkZW50aXR5IiwiYmFzZU1hdGNoZXNQcm9wZXJ0eSIsImJhc2VNYXRjaGVzIiwicHJvcGVydHkiLCJiYXNlS2V5cyIsImlzUHJvdG90eXBlIiwiYmFzZUtleXNJbiIsIm5hdGl2ZUtleXNJbiIsImlzUHJvdG8iLCJiYXNlTHQiLCJiYXNlTWFwIiwiaXNBcnJheUxpa2UiLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsImlzS2V5IiwiaXNTdHJpY3RDb21wYXJhYmxlIiwiaGFzSW4iLCJiYXNlTWVyZ2UiLCJzcmNJbmRleCIsIm1lcmdlRnVuYyIsInNhZmVHZXQiLCJuZXdWYWx1ZSIsImlzVHlwZWQiLCJpc0FycmF5TGlrZU9iamVjdCIsImlzUGxhaW5PYmplY3QiLCJ0b1BsYWluT2JqZWN0IiwiYmFzZU1lcmdlRGVlcCIsImJhc2VOdGgiLCJiYXNlT3JkZXJCeSIsIml0ZXJhdGVlcyIsIm9yZGVycyIsImdldEl0ZXJhdGVlIiwiY3JpdGVyaWEiLCJjb21wYXJlciIsInNvcnQiLCJiYXNlU29ydEJ5Iiwib2JqQ3JpdGVyaWEiLCJvdGhDcml0ZXJpYSIsIm9yZGVyc0xlbmd0aCIsImNvbXBhcmVBc2NlbmRpbmciLCJjb21wYXJlTXVsdGlwbGUiLCJiYXNlUGlja0J5IiwiYmFzZVNldCIsImJhc2VQdWxsQWxsIiwiYmFzZVB1bGxBdCIsImluZGV4ZXMiLCJwcmV2aW91cyIsImJhc2VVbnNldCIsImJhc2VSZXBlYXQiLCJiYXNlUmVzdCIsInN0YXJ0Iiwic2V0VG9TdHJpbmciLCJvdmVyUmVzdCIsImJhc2VTYW1wbGUiLCJiYXNlU2FtcGxlU2l6ZSIsIm5lc3RlZCIsImJhc2VTZXREYXRhIiwiYmFzZVNldFRvU3RyaW5nIiwiY29uc3RhbnQiLCJiYXNlU2h1ZmZsZSIsImJhc2VTbGljZSIsImVuZCIsImJhc2VTb21lIiwiYmFzZVNvcnRlZEluZGV4IiwicmV0SGlnaGVzdCIsImxvdyIsImhpZ2giLCJtaWQiLCJiYXNlU29ydGVkSW5kZXhCeSIsInZhbElzTmFOIiwidmFsSXNOdWxsIiwidmFsSXNTeW1ib2wiLCJ2YWxJc1VuZGVmaW5lZCIsIm90aElzRGVmaW5lZCIsIm90aElzTnVsbCIsIm90aElzUmVmbGV4aXZlIiwib3RoSXNTeW1ib2wiLCJzZXRMb3ciLCJiYXNlU29ydGVkVW5pcSIsImJhc2VUb051bWJlciIsImJhc2VUb1N0cmluZyIsImJhc2VVbmlxIiwiY3JlYXRlU2V0Iiwic2VlbkluZGV4IiwiYmFzZVVwZGF0ZSIsInVwZGF0ZXIiLCJiYXNlV2hpbGUiLCJpc0Ryb3AiLCJiYXNlV3JhcHBlclZhbHVlIiwiYWN0aW9ucyIsImFjdGlvbiIsImJhc2VYb3IiLCJiYXNlWmlwT2JqZWN0IiwiYXNzaWduRnVuYyIsInZhbHNMZW5ndGgiLCJjYXN0QXJyYXlMaWtlT2JqZWN0IiwiY2FzdEZ1bmN0aW9uIiwic3RyaW5nVG9QYXRoIiwiY2FzdFJlc3QiLCJjYXN0U2xpY2UiLCJpZCIsImNvcHkiLCJhcnJheUJ1ZmZlciIsInR5cGVkQXJyYXkiLCJ2YWxJc0RlZmluZWQiLCJ2YWxJc1JlZmxleGl2ZSIsImNvbXBvc2VBcmdzIiwicGFydGlhbHMiLCJob2xkZXJzIiwiaXNDdXJyaWVkIiwiYXJnc0luZGV4IiwiYXJnc0xlbmd0aCIsImhvbGRlcnNMZW5ndGgiLCJsZWZ0SW5kZXgiLCJsZWZ0TGVuZ3RoIiwicmFuZ2VMZW5ndGgiLCJpc1VuY3VycmllZCIsImNvbXBvc2VBcmdzUmlnaHQiLCJob2xkZXJzSW5kZXgiLCJyaWdodEluZGV4IiwicmlnaHRMZW5ndGgiLCJpc05ldyIsImNyZWF0ZUFnZ3JlZ2F0b3IiLCJpbml0aWFsaXplciIsImNyZWF0ZUFzc2lnbmVyIiwiYXNzaWduZXIiLCJzb3VyY2VzIiwiZ3VhcmQiLCJpc0l0ZXJhdGVlQ2FsbCIsIml0ZXJhYmxlIiwiY3JlYXRlQ2FzZUZpcnN0IiwibWV0aG9kTmFtZSIsInRyYWlsaW5nIiwiY3JlYXRlQ29tcG91bmRlciIsIndvcmRzIiwiZGVidXJyIiwiY3JlYXRlQ3RvciIsInRoaXNCaW5kaW5nIiwiY3JlYXRlRmluZCIsImZpbmRJbmRleEZ1bmMiLCJjcmVhdGVGbG93IiwiZmxhdFJlc3QiLCJmdW5jcyIsInByZXJlcSIsInRocnUiLCJ3cmFwcGVyIiwiZ2V0RnVuY05hbWUiLCJmdW5jTmFtZSIsImdldERhdGEiLCJpc0xhemlhYmxlIiwicGxhbnQiLCJjcmVhdGVIeWJyaWQiLCJwYXJ0aWFsc1JpZ2h0IiwiaG9sZGVyc1JpZ2h0IiwiYXJnUG9zIiwiYXJ5IiwiYXJpdHkiLCJpc0FyeSIsImlzQmluZCIsImlzQmluZEtleSIsIldSQVBfQ1VSUllfRkxBRyIsImlzRmxpcCIsImdldEhvbGRlciIsImhvbGRlcnNDb3VudCIsImNvdW50SG9sZGVycyIsIm5ld0hvbGRlcnMiLCJjcmVhdGVSZWN1cnJ5IiwiYXJyTGVuZ3RoIiwib2xkQXJyYXkiLCJyZW9yZGVyIiwiY3JlYXRlSW52ZXJ0ZXIiLCJ0b0l0ZXJhdGVlIiwiYmFzZUludmVydGVyIiwiY3JlYXRlTWF0aE9wZXJhdGlvbiIsIm9wZXJhdG9yIiwiZGVmYXVsdFZhbHVlIiwiY3JlYXRlT3ZlciIsImFycmF5RnVuYyIsImNyZWF0ZVBhZGRpbmciLCJjaGFycyIsImNoYXJzTGVuZ3RoIiwiY3JlYXRlUmFuZ2UiLCJzdGVwIiwidG9GaW5pdGUiLCJiYXNlUmFuZ2UiLCJjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uIiwidG9OdW1iZXIiLCJ3cmFwRnVuYyIsImlzQ3VycnkiLCJuZXdEYXRhIiwic2V0RGF0YSIsInNldFdyYXBUb1N0cmluZyIsImNyZWF0ZVJvdW5kIiwicHJlY2lzaW9uIiwidG9JbnRlZ2VyIiwicGFpciIsIm5vb3AiLCJjcmVhdGVUb1BhaXJzIiwiYmFzZVRvUGFpcnMiLCJjcmVhdGVXcmFwIiwic3JjQml0bWFzayIsIm5ld0JpdG1hc2siLCJXUkFQX0JJTkRfRkxBRyIsImlzQ29tYm8iLCJtZXJnZURhdGEiLCJjcmVhdGVDdXJyeSIsImNyZWF0ZVBhcnRpYWwiLCJjcmVhdGVCaW5kIiwiY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiIsImN1c3RvbURlZmF1bHRzTWVyZ2UiLCJjdXN0b21PbWl0Q2xvbmUiLCJhcnJTdGFja2VkIiwiYXJyVmFsdWUiLCJmbGF0dGVuIiwib3RoZXJGdW5jIiwidHlwZSIsImdldFZhbHVlIiwic3R1YkFycmF5IiwiaGFzUGF0aCIsImhhc0Z1bmMiLCJpc0xlbmd0aCIsIkFycmF5QnVmZmVyIiwicmVzb2x2ZSIsImN0b3JTdHJpbmciLCJpc01hc2thYmxlIiwic3R1YkZhbHNlIiwib3RoZXJBcmdzIiwic2hvcnRPdXQiLCJyZWZlcmVuY2UiLCJkZXRhaWxzIiwiaW5zZXJ0V3JhcERldGFpbHMiLCJ1cGRhdGVXcmFwRGV0YWlscyIsImdldFdyYXBEZXRhaWxzIiwiY291bnQiLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyZW1haW5pbmciLCJyYW5kIiwibWVtb2l6ZSIsIm1lbW9pemVDYXBwZWQiLCJjaGFyQ29kZUF0IiwicXVvdGUiLCJzdWJTdHJpbmciLCJjbG9uZSIsImRpZmZlcmVuY2UiLCJkaWZmZXJlbmNlQnkiLCJkaWZmZXJlbmNlV2l0aCIsImZpbmRJbmRleCIsImZpbmRMYXN0SW5kZXgiLCJoZWFkIiwiaW50ZXJzZWN0aW9uIiwibWFwcGVkIiwiaW50ZXJzZWN0aW9uQnkiLCJpbnRlcnNlY3Rpb25XaXRoIiwicHVsbCIsInB1bGxBbGwiLCJwdWxsQXQiLCJ1bmlvbiIsInVuaW9uQnkiLCJ1bmlvbldpdGgiLCJ1bnppcCIsImdyb3VwIiwidW56aXBXaXRoIiwid2l0aG91dCIsInhvciIsInhvckJ5IiwieG9yV2l0aCIsInppcCIsInppcFdpdGgiLCJjaGFpbiIsImludGVyY2VwdG9yIiwid3JhcHBlckF0IiwiY291bnRCeSIsImZpbmQiLCJmaW5kTGFzdCIsImZvckVhY2hSaWdodCIsImdyb3VwQnkiLCJpbnZva2VNYXAiLCJrZXlCeSIsInBhcnRpdGlvbiIsInNvcnRCeSIsImJlZm9yZSIsImJpbmQiLCJiaW5kS2V5IiwiZGVib3VuY2UiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibWF4V2FpdCIsInRpbWVySWQiLCJsYXN0Q2FsbFRpbWUiLCJsYXN0SW52b2tlVGltZSIsImxlYWRpbmciLCJtYXhpbmciLCJpbnZva2VGdW5jIiwidGltZSIsInNob3VsZEludm9rZSIsInRpbWVTaW5jZUxhc3RDYWxsIiwidGltZXJFeHBpcmVkIiwidHJhaWxpbmdFZGdlIiwidGltZVdhaXRpbmciLCJyZW1haW5pbmdXYWl0IiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsImxlYWRpbmdFZGdlIiwiY2FuY2VsIiwiZmx1c2giLCJkZWZlciIsImRlbGF5IiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsIkNhY2hlIiwibmVnYXRlIiwib3ZlckFyZ3MiLCJ0cmFuc2Zvcm1zIiwiZnVuY3NMZW5ndGgiLCJwYXJ0aWFsIiwicGFydGlhbFJpZ2h0IiwicmVhcmciLCJndCIsImd0ZSIsImlzRXJyb3IiLCJpc0ludGVnZXIiLCJpc051bWJlciIsImlzU3RyaW5nIiwibHQiLCJsdGUiLCJ0b0FycmF5IiwiaXRlcmF0b3JUb0FycmF5IiwicmVtYWluZGVyIiwidG9MZW5ndGgiLCJpc0JpbmFyeSIsImFzc2lnbkluIiwiYXNzaWduSW5XaXRoIiwiYXNzaWduV2l0aCIsImF0IiwicHJvcHNJbmRleCIsInByb3BzTGVuZ3RoIiwiZGVmYXVsdHNEZWVwIiwibWVyZ2VXaXRoIiwiaW52ZXJ0IiwiaW52ZXJ0QnkiLCJpbnZva2UiLCJvbWl0IiwiQ0xPTkVfREVFUF9GTEFHIiwiYmFzZVBpY2siLCJwaWNrQnkiLCJwcm9wIiwidG9QYWlycyIsInRvUGFpcnNJbiIsImNhbWVsQ2FzZSIsIndvcmQiLCJ0b0xvd2VyQ2FzZSIsImNhcGl0YWxpemUiLCJ1cHBlckZpcnN0Iiwia2ViYWJDYXNlIiwibG93ZXJDYXNlIiwibG93ZXJGaXJzdCIsInNuYWtlQ2FzZSIsInN0YXJ0Q2FzZSIsInVwcGVyQ2FzZSIsInRvVXBwZXJDYXNlIiwicGF0dGVybiIsImhhc1VuaWNvZGVXb3JkIiwidW5pY29kZVdvcmRzIiwiYXNjaWlXb3JkcyIsImF0dGVtcHQiLCJiaW5kQWxsIiwibWV0aG9kTmFtZXMiLCJmbG93IiwiZmxvd1JpZ2h0IiwibWV0aG9kIiwibWV0aG9kT2YiLCJtaXhpbiIsIm92ZXIiLCJvdmVyRXZlcnkiLCJvdmVyU29tZSIsImJhc2VQcm9wZXJ0eURlZXAiLCJyYW5nZSIsInJhbmdlUmlnaHQiLCJhdWdlbmQiLCJhZGRlbmQiLCJkaXZpZGUiLCJkaXZpZGVuZCIsImRpdmlzb3IiLCJtdWx0aXBseSIsIm11bHRpcGxpZXIiLCJtdWx0aXBsaWNhbmQiLCJyb3VuZCIsInN1YnRyYWN0IiwibWludWVuZCIsInN1YnRyYWhlbmQiLCJhZnRlciIsImNhc3RBcnJheSIsImNodW5rIiwiY29tcGFjdCIsImNvbmQiLCJjb25mb3JtcyIsImJhc2VDb25mb3JtcyIsInByb3BlcnRpZXMiLCJjdXJyeSIsImN1cnJ5UmlnaHQiLCJkcm9wUmlnaHQiLCJkcm9wUmlnaHRXaGlsZSIsImRyb3BXaGlsZSIsImZpbGwiLCJiYXNlRmlsbCIsImZpbHRlciIsImZsYXRNYXAiLCJmbGF0TWFwRGVlcCIsImZsYXRNYXBEZXB0aCIsImZsYXR0ZW5EZWVwIiwiZmxhdHRlbkRlcHRoIiwiZmxpcCIsImZyb21QYWlycyIsImZ1bmN0aW9ucyIsImZ1bmN0aW9uc0luIiwiaW5pdGlhbCIsIm1hcEtleXMiLCJtYXBWYWx1ZXMiLCJtYXRjaGVzIiwibWF0Y2hlc1Byb3BlcnR5IiwibnRoQXJnIiwib21pdEJ5Iiwib25jZSIsIm9yZGVyQnkiLCJwcm9wZXJ0eU9mIiwicHVsbEFsbEJ5IiwicHVsbEFsbFdpdGgiLCJyZWplY3QiLCJyZW1vdmUiLCJyZXN0Iiwic2FtcGxlU2l6ZSIsInNldFdpdGgiLCJzaHVmZmxlIiwic29ydGVkVW5pcSIsInNvcnRlZFVuaXFCeSIsInNlcGFyYXRvciIsImxpbWl0Iiwic3ByZWFkIiwidGFpbCIsInRha2UiLCJ0YWtlUmlnaHQiLCJ0YWtlUmlnaHRXaGlsZSIsInRha2VXaGlsZSIsInRhcCIsInRocm90dGxlIiwidG9QYXRoIiwiaXNBcnJMaWtlIiwidW5hcnkiLCJ1bmlxIiwidW5pcUJ5IiwidW5pcVdpdGgiLCJ1bnNldCIsInVwZGF0ZSIsInVwZGF0ZVdpdGgiLCJ2YWx1ZXNJbiIsIndyYXAiLCJ6aXBPYmplY3QiLCJ6aXBPYmplY3REZWVwIiwiZW50cmllc0luIiwiZXh0ZW5kIiwiZXh0ZW5kV2l0aCIsImNsYW1wIiwiY2xvbmVEZWVwIiwiY2xvbmVEZWVwV2l0aCIsImNsb25lV2l0aCIsImNvbmZvcm1zVG8iLCJkZWZhdWx0VG8iLCJlbmRzV2l0aCIsInRhcmdldCIsInBvc2l0aW9uIiwiZXNjYXBlUmVnRXhwIiwiZXZlcnkiLCJmaW5kS2V5IiwiZmluZExhc3RLZXkiLCJmb3JJbiIsImZvckluUmlnaHQiLCJmb3JPd24iLCJmb3JPd25SaWdodCIsImluUmFuZ2UiLCJiYXNlSW5SYW5nZSIsImlzQm9vbGVhbiIsImlzRWxlbWVudCIsImlzRW1wdHkiLCJpc0VxdWFsIiwiaXNFcXVhbFdpdGgiLCJpc01hdGNoIiwiaXNNYXRjaFdpdGgiLCJpc05hTiIsImlzTmF0aXZlIiwiaXNOaWwiLCJpc051bGwiLCJpc1NhZmVJbnRlZ2VyIiwiaXNVbmRlZmluZWQiLCJpc1dlYWtNYXAiLCJpc1dlYWtTZXQiLCJsYXN0SW5kZXhPZiIsInN0cmljdExhc3RJbmRleE9mIiwibWF4QnkiLCJtZWFuIiwibWVhbkJ5IiwibWluQnkiLCJzdHViT2JqZWN0Iiwic3R1YlN0cmluZyIsInN0dWJUcnVlIiwibnRoIiwibm9Db25mbGljdCIsInBhZCIsInN0ckxlbmd0aCIsInBhZEVuZCIsInBhZFN0YXJ0IiwicmFkaXgiLCJmbG9hdGluZyIsInRlbXAiLCJyZWR1Y2UiLCJyZWR1Y2VSaWdodCIsInJlcGVhdCIsInNhbXBsZSIsInNvbWUiLCJzb3J0ZWRJbmRleCIsInNvcnRlZEluZGV4QnkiLCJzb3J0ZWRJbmRleE9mIiwic29ydGVkTGFzdEluZGV4Iiwic29ydGVkTGFzdEluZGV4QnkiLCJzb3J0ZWRMYXN0SW5kZXhPZiIsInN0YXJ0c1dpdGgiLCJzdW0iLCJzdW1CeSIsInRlbXBsYXRlIiwic2V0dGluZ3MiLCJpc0VzY2FwaW5nIiwiaXNFdmFsdWF0aW5nIiwiaW1wb3J0c0tleXMiLCJpbXBvcnRzVmFsdWVzIiwicmVEZWxpbWl0ZXJzIiwic291cmNlVVJMIiwiZXNjYXBlVmFsdWUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiZXNUZW1wbGF0ZVZhbHVlIiwiZXZhbHVhdGVWYWx1ZSIsInRpbWVzIiwidG9Mb3dlciIsInRvU2FmZUludGVnZXIiLCJ0b1VwcGVyIiwidHJpbSIsInRyaW1FbmQiLCJ0cmltU3RhcnQiLCJ0cnVuY2F0ZSIsIm9taXNzaW9uIiwic2VhcmNoIiwic3Vic3RyaW5nIiwibmV3RW5kIiwidW5lc2NhcGUiLCJ1bmlxdWVJZCIsInByZWZpeCIsImVhY2giLCJlYWNoUmlnaHQiLCJWRVJTSU9OIiwiaXNGaWx0ZXIiLCJ0YWtlTmFtZSIsImRyb3BOYW1lIiwiY2hlY2tJdGVyYXRlZSIsImlzVGFrZXIiLCJsb2Rhc2hGdW5jIiwicmV0VW53cmFwcGVkIiwiaXNMYXp5IiwidXNlTGF6eSIsImlzSHlicmlkIiwiaXNVbndyYXBwZWQiLCJvbmx5TGF6eSIsImNoYWluTmFtZSIsImRpciIsImlzUmlnaHQiLCJ2aWV3IiwiZ2V0VmlldyIsIml0ZXJMZW5ndGgiLCJ0YWtlQ291bnQiLCJpdGVySW5kZXgiLCJjb21taXQiLCJ3cmFwcGVkIiwidG9KU09OIiwiS2kiLCJUaGVtZSIsIkFuYWx5c2lzUG9pbnRUaGVtZSIsIkNlbnRlciIsIkVmZmVjdCIsIkN1cnNvciIsIlByb2JsZW1BbnN3ZXJUeXBlIiwiUGF0aERldGVjdGlvblN0cmF0ZWd5IiwiTWFya3VwIiwiQTFfTEVUVEVSUyIsIkExX05VTUJFUlMiLCJTR0ZfTEVUVEVSUyIsIkRFRkFVTFRfT1BUSU9OUyIsImJvYXJkU2l6ZSIsInBhZGRpbmciLCJleHRlbnQiLCJpbnRlcmFjdGl2ZSIsImNvb3JkaW5hdGUiLCJ0aGVtZSIsIkZsYXQiLCJiYWNrZ3JvdW5kIiwiem9vbSIsInNob3dBbmFseXNpcyIsIlRIRU1FX1JFU09VUkNFUyIsIl9hIiwiQmxhY2tBbmRXaGl0ZSIsImJsYWNrcyIsIndoaXRlcyIsIlN1YmR1ZWQiLCJib2FyZCIsIlNoZWxsU3RvbmUiLCJTbGF0ZUFuZFNoZWxsIiwiV2FsbnV0IiwiUGhvdG9yZWFsaXN0aWMiLCJMSUdIVF9HUkVFTl9SR0IiLCJMSUdIVF9ZRUxMT1dfUkdCIiwiWUVMTE9XX1JHQiIsIkxJR0hUX1JFRF9SR0IiLCJNT1ZFX1BST1BfTElTVCIsIlNFVFVQX1BST1BfTElTVCIsIk5PREVfQU5OT1RBVElPTl9QUk9QX0xJU1QiLCJNT1ZFX0FOTk9UQVRJT05fUFJPUF9MSVNUIiwiTUFSS1VQX1BST1BfTElTVCIsIlJPT1RfUFJPUF9MSVNUIiwiR0FNRV9JTkZPX1BST1BfTElTVCIsIkNVU1RPTV9QUk9QX0xJU1QiLCJMSVNUX09GX1BPSU5UU19QUk9QIiwiVE9LRU5fUkVHRVgiLCJTZ2ZQcm9wQmFzZSIsInRva2VuIiwiX3ZhbHVlIiwiX3ZhbHVlcyIsIm5ld1ZhbHVlcyIsInYiLCJNb3ZlUHJvcCIsIl9zdXBlciIsIl90aGlzIiwic3RyIiwiU2V0dXBQcm9wIiwidG9rZW5NYXRjaCIsInZhbHMiLCJtYXRjaEFsbCIsIk5vZGVBbm5vdGF0aW9uUHJvcCIsIk1vdmVBbm5vdGF0aW9uUHJvcCIsIkFubm90YXRpb25Qcm9wIiwiTWFya3VwUHJvcCIsIlJvb3RQcm9wIiwiR2FtZUluZm9Qcm9wIiwiQ3VzdG9tUHJvcCIsIlRpbWluZ1Byb3AiLCJNaXNjZWxsYW5lb3VzUHJvcCIsImxpYmVydGllcyIsInJlY3Vyc2lvblBhdGgiLCJjYWxjU2l6ZSIsIm1hdCIsImNhbGNMaWJlcnR5Q29yZSIsIngiLCJ5Iiwia2kiLCJjYWxjTGliZXJ0eSIsImxpYmVydHkiLCJleGVjQ2FwdHVyZSIsImoiLCJuZXdBcnJheSIsImxpYmVydHlVcCIsInJlY3Vyc2lvblBhdGhVcCIsIl9iIiwibGliZXJ0eURvd24iLCJyZWN1cnNpb25QYXRoRG93biIsIl9jIiwibGliZXJ0eUxlZnQiLCJyZWN1cnNpb25QYXRoTGVmdCIsIl9kIiwibGliZXJ0eVJpZ2h0IiwicmVjdXJzaW9uUGF0aFJpZ2h0IiwiaXRlbSIsImNvb3JkIiwiY2FuQ2FwdHVyZSIsImNhbk1vdmUiLCJpc0NoYXJhY3RlckluTm9kZSIsInNnZiIsIm5vZGVzIiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwiU2dmIiwiY29udGVudCIsInBhcnNlT3B0aW9ucyIsImlnbm9yZVByb3BMaXN0IiwiTkVXX05PREUiLCJCUkFOQ0hJTkciLCJQUk9QRVJUWSIsIkxJU1RfSURFTlRJVElFUyIsIk5PREVfREVMSU1JVEVSUyIsInRyZWUiLCJjdXJyZW50Tm9kZSIsInBhcmVudE5vZGUiLCJub2RlUHJvcHMiLCJzZXRSb290IiwidG9TZ2YiLCJub2RlVG9TdHJpbmciLCJ0b1NnZldpdGhvdXRBbmFseXNpcyIsIm5vZGVTdGFydCIsImNvdW50ZXIiLCJjIiwidGhpc18xIiwibW92ZVByb3BzXzEiLCJzZXR1cFByb3BzXzEiLCJyb290UHJvcHNfMSIsIm1hcmt1cFByb3BzXzEiLCJnYW1lSW5mb1Byb3BzXzEiLCJub2RlQW5ub3RhdGlvblByb3BzXzEiLCJtb3ZlQW5ub3RhdGlvblByb3BzXzEiLCJjdXN0b21Qcm9wc18xIiwic2hhIiwiY2FsY1NIQSIsIm1vdmVQcm9wcyIsInNldHVwUHJvcHMiLCJyb290UHJvcHMiLCJtYXJrdXBQcm9wcyIsImdhbWVJbmZvUHJvcHMiLCJub2RlQW5ub3RhdGlvblByb3BzIiwibW92ZUFubm90YXRpb25Qcm9wcyIsImN1c3RvbVByb3BzIiwiZ2V0Tm9kZU51bWJlciIsImdldERlZHVwbGljYXRlZFByb3BzIiwic2hhMjU2Iiwicm91bmQzIiwic2NhbGUiLCJmaXhlZCIsInRvRml4ZWQiLCJ0YXJnZXRQcm9wcyIsImxhc3RQcm8iLCJpc01vdmVOb2RlIiwiaXNTZXR1cE5vZGUiLCJpc0Nob2ljZU5vZGUiLCJpc1RhcmdldE5vZGUiLCJpc0ZvcmNlTm9kZSIsImlzUHJldmVudE1vdmVOb2RlIiwiaXNSaWdodE5vZGUiLCJpc0ZpcnN0UmlnaHROb2RlIiwiZmlyc3RSaWdodE5vZGUiLCJpc1ZhcmlhbnROb2RlIiwiaXNXcm9uZ05vZGUiLCJpblBhdGgiLCJkZXRlY3Rpb25NZXRob2QiLCJwcmVOb2RlcyIsInBvc3ROb2RlcyIsIlBvc3QiLCJwb3N0UmlnaHROb2RlcyIsInByZVJpZ2h0Tm9kZXMiLCJQcmUiLCJCb3RoIiwiaW5SaWdodFBhdGgiLCJpbkNob2ljZVBhdGgiLCJpblRhcmdldFBhdGgiLCJpblZhcmlhbnRQYXRoIiwiaW5Xcm9uZ1BhdGgiLCJtb3Zlc0NvdW50IiwiZnVsbG5hbWUiLCJuRm9ybWF0dGVyIiwibnVtIiwic2dmVG9Qb3MiLCJ0ZW1wU3RyIiwicG9zIiwiYTFUb1BvcyIsIm1vdmUiLCJzdWJzdHIiLCJzZ2ZPZmZzZXQiLCJyZXMiLCJjaGFySW5kZXgiLCJvZmZzZXRBMU1vdmUiLCJveCIsIm95IiwiaW54IiwiaW55IiwiY2FsY1Njb3JlRGlmZlRleHQiLCJyb290SW5mbyIsImN1cnJJbmZvIiwic2NvcmUiLCJjYWxjU2NvcmVEaWZmIiwiZml4ZWRTY29yZSIsInNpZ24iLCJjdXJyZW50UGxheWVyIiwic2NvcmVMZWFkIiwiY2FsY1dpbnJhdGVEaWZmIiwid2lucmF0ZSIsImNhbGNBbmFseXNpc1BvaW50Q29sb3IiLCJtb3ZlSW5mbyIsInByaW9yIiwib3JkZXIiLCJpbml0Tm9kZURhdGEiLCJidWlsZE1vdmVOb2RlIiwibW92ZVByb3AiLCJub2RlRGF0YSIsInplcm9zIiwiZW1wdHkiLCJjYWxjTW9zdCIsImxlZnRNb3N0IiwicmlnaHRNb3N0IiwidG9wTW9zdCIsImJvdHRvbU1vc3QiLCJjYWxjQ2VudGVyIiwidG9wIiwibGVmdCIsIlRvcExlZnQiLCJCb3R0b21MZWZ0IiwiVG9wUmlnaHQiLCJCb3R0b21SaWdodCIsImNhbGNCb2FyZFNpemUiLCJjZW50ZXIiLCJjYWxjUGFydGlhbEFyZWEiLCJyZXZlcnNlT2Zmc2V0IiwiYngiLCJieSIsIm9veCIsIm9veSIsImNhbGNWaXNpYmxlQXJlYSIsImFsbG93UmVjdGFuZ2xlIiwibWluUm93IiwibWF4Um93IiwibWluQ29sIiwibWF4Q29sIiwibWluUm93V2l0aEV4dGVudCIsIm1heFJvd1dpdGhFeHRlbnQiLCJtaW5Db2xXaXRoRXh0ZW50IiwibWF4Q29sV2l0aEV4dGVudCIsIm1heFJhbmdlIiwibmV3TWF0IiwiY2xlYXJTdG9uZUZyb21DdXJyZW50Tm9kZSIsImNhbGNNYXRBbmRNYXJrdXAiLCJkZWZhdWx0Qm9hcmRTaXplIiwibGkiLCJsaiIsInNldHVwQ291bnQiLCJleHRyYWN0Qm9hcmRTaXplIiwidmlzaWJsZUFyZWFNYXQiLCJtYXJrdXAiLCJudW1NYXJrdXAiLCJzZXR1cCIsIkJsYWNrIiwiV2hpdGUiLCJDdXJyZW50IiwibWFyayIsIkNpcmNsZSIsIlNxdWFyZSIsIlRyaWFuZ2xlIiwiQ3Jvc3MiLCJmaW5kUHJvcCIsImdldEZpcnN0VG9Nb3ZlQ29sb3JGcm9tUm9vdCIsImRlZmF1bHRNb3ZlQ29sb3IiLCJzZXR1cE5vZGUiLCJmaXJzdE1vdmVOb2RlIiwiZ2V0TW92ZUNvbG9yIiwiY29uc29sZSIsIndhcm4iLCJTdG9uZSIsImdsb2JhbEFscGhhIiwiZHJhdyIsImxvZyIsInNldEdsb2JhbEFscGhhIiwiYWxwaGEiLCJzZXRTaXplIiwiQ29sb3JTdG9uZSIsInNhdmUiLCJiZWdpblBhdGgiLCJhcmMiLCJQSSIsImxpbmVXaWR0aCIsInN0cm9rZVN0eWxlIiwiZmlsbFN0eWxlIiwic3Ryb2tlIiwicmVzdG9yZSIsIkltYWdlU3RvbmUiLCJtb2QiLCJpbWciLCJkcmF3SW1hZ2UiLCJBbmFseXNpc1BvaW50Iiwib3V0bGluZUNvbG9yIiwiRGVmYXVsdCIsImRyYXdQcm9ibGVtQW5hbHlzaXNQb2ludCIsInBDb2xvciIsImdyYWRpZW50IiwiY3JlYXRlUmFkaWFsR3JhZGllbnQiLCJhZGRDb2xvclN0b3AiLCJmb250U2l6ZSIsImZvbnQiLCJ0ZXh0QWxpZ24iLCJzY29yZVRleHQiLCJmaWxsVGV4dCIsInZpc2l0cyIsImRyYXdDYW5kaWRhdGVQb2ludCIsImRyYXdEZWZhdWx0QW5hbHlzaXNQb2ludCIsIm9yZGVyXzEiLCJzaGFkb3dPZmZzZXRYIiwic2hhZG93T2Zmc2V0WSIsInNoYWRvd0NvbG9yIiwic2hhZG93Qmx1ciIsIlByb2JsZW0iLCJ2YWwiLCJjb2xvciIsInNldENvbG9yIiwiQ2lyY2xlTWFya3VwIiwiQ3Jvc3NNYXJrdXAiLCJyYWRpdXMiLCJtb3ZlVG8iLCJsaW5lVG8iLCJjbG9zZVBhdGgiLCJUZXh0TWFya3VwIiwidGV4dEJhc2VsaW5lIiwiU3F1YXJlTWFya3VwIiwicmVjdCIsIlRyaWFuZ2xlTWFya3VwIiwiY29zIiwic2luIiwiTm9kZU1hcmt1cCIsIlBvc2l0aXZlTm9kZU1hcmt1cCIsIkNpcmNsZVNvbGlkTWFya3VwIiwiRWZmZWN0QmFzZSIsInBsYXkiLCJfaGFzQnVmZmVyIiwiVGV4dERlY29kZXIiLCJ0YWIiLCJfVEUiLCJUZXh0RW5jb2RlciIsImI2NGNocyIsIl9mcm9tQ0MiLCJmcm9tQ2hhckNvZGUiLCJfYnRvYSIsImJ0b2EiLCJiaW4iLCJ1MzIiLCJjMCIsImMxIiwiYzIiLCJhc2MiLCJfZnJvbVVpbnQ4QXJyYXkiLCJ1OGEiLCJzdHJzIiwic3ViYXJyYXkiLCJjYl91dG9iIiwiY2MiLCJyZV91dG9iIiwiX2VuY29kZSIsImVuY29kZSIsImJhblN2ZyIsIkJhbkVmZmVjdCIsIkltYWdlIiwiZmFkZUluRHVyYXRpb24iLCJmYWRlT3V0RHVyYXRpb24iLCJzdGF5RHVyYXRpb24iLCJzdGFydFRpbWUiLCJwZXJmb3JtYW5jZSIsImlzRmFkaW5nT3V0IiwiY29tcGxldGUiLCJjbGVhclJlY3QiLCJlbGFwc2VkIiwiZmFkZUVsYXBzZWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJCbG9iIiwic3ZnRGF0YVVybCIsInNyYyIsIm0wIiwiX21rVXJpU2FmZSIsImltYWdlcyIsImlzTW9iaWxlRGV2aWNlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiZHByIiwid2luZG93IiwiZGV2aWNlUGl4ZWxSYXRpbyIsIkdob3N0QmFuIiwiZGVmYXVsdE9wdGlvbnMiLCJkeW5hbWljUGFkZGluZyIsImFuYWx5c2lzUG9pbnRUaGVtZSIsImFkYXB0aXZlQm9hcmRMaW5lIiwiYm9hcmRFZGdlTGluZVdpZHRoIiwiYm9hcmRMaW5lV2lkdGgiLCJib2FyZExpbmVFeHRlbnQiLCJ0aGVtZUZsYXRCb2FyZENvbG9yIiwicG9zaXRpdmVOb2RlQ29sb3IiLCJuZWdhdGl2ZU5vZGVDb2xvciIsIm5ldXRyYWxOb2RlQ29sb3IiLCJkZWZhdWx0Tm9kZUNvbG9yIiwidGhlbWVSZXNvdXJjZXMiLCJtb3ZlU291bmQiLCJhZGFwdGl2ZVN0YXJTaXplIiwic3RhclNpemUiLCJjdXJzb3IiLCJOb25lIiwiY3Vyc29yVmFsdWUiLCJ0b3VjaE1vdmluZyIsInRvdWNoU3RhcnRQb2ludCIsIkRPTVBvaW50IiwiY3Vyc29yUG9pbnQiLCJhY3R1YWxDdXJzb3JQb2ludCIsInNldEN1cnNvcldpdGhSZW5kZXIiLCJkb21Qb2ludCIsIm9mZnNldFkiLCJzcGFjZSIsImNhbGNTcGFjZUFuZFBhZGRpbmciLCJwb2ludCIsInRyYW5zTWF0IiwiaW52ZXJzZSIsInRyYW5zZm9ybVBvaW50IiwiaWR4IiwiaWR5IiwicG9pbnRPbkNhbnZhcyIsImFjdHVhbEN1cnNvclBvc2l0aW9uIiwicHJldmVudE1vdmVNYXQiLCJjdXJzb3JQb3NpdGlvbiIsImRyYXdDdXJzb3IiLCJkcmF3Qm9hcmQiLCJvbk1vdXNlTW92ZSIsImN1cnNvckNhbnZhcyIsInByZXZlbnREZWZhdWx0Iiwib2Zmc2V0WCIsImNhbGNUb3VjaFBvaW50IiwiY2FudmFzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiY2xpZW50WCIsImNsaWVudFkiLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoTW92ZSIsImFicyIsIm9uVG91Y2hFbmQiLCJ2aXNpYmxlQXJlYSIsIkxlZnQiLCJSaWdodCIsIlRvcCIsIkJvdHRvbSIsImNsZWFyQWxsQ2FudmFzIiwiY2xlYXJDYW52YXMiLCJtYXJrdXBDYW52YXMiLCJlZmZlY3RDYW52YXMiLCJjbGVhckN1cnNvckNhbnZhcyIsImNsZWFyQW5hbHlzaXNDYW52YXMiLCJjbGVhckJvYXJkIiwiZ2V0Q29udGV4dCIsInNldFRyYW5zZm9ybSIsIndpZHRoIiwiaGVpZ2h0IiwiY2xlYXJNYXJrdXBDYW52YXMiLCJhbmFseXNpc0NhbnZhcyIsImRyYXdBbmFseXNpcyIsImFuYWx5c2lzIiwiZm9yY2VBbmFseXNpc0JvYXJkU2l6ZSIsIm1vdmVJbmZvcyIsImlkT2JqIiwiSlNPTiIsImFuYWx5c2lzQm9hcmRTaXplIiwib2Zmc2V0ZWRNb3ZlIiwic2NhbGVkUGFkZGluZyIsIlBvc2l0aXZlTm9kZSIsIk5lZ2F0aXZlTm9kZSIsIk5ldXRyYWxOb2RlIiwiZHJhd01hcmt1cCIsIm1hcmt1cF8xIiwiZHJhd0JhbiIsImRyYXdCb2FyZExpbmUiLCJkcmF3U3RhcnMiLCJkcmF3Q29vcmRpbmF0ZSIsInN0eWxlIiwiYm9yZGVyUmFkaXVzIiwiYm94U2hhZG93IiwiZmlsbFJlY3QiLCJib2FyZFVybCIsImJvYXJkUmVzIiwiaW1hZ2UiLCJjcmVhdGVQYXR0ZXJuIiwiZXh0ZW5kU3BhY2UiLCJlZGdlTGluZVdpZHRoIiwic3RhcnRQb2ludFkiLCJlbmRQb2ludFkiLCJzdGFydFBvaW50WCIsImVuZFBvaW50WCIsInN0YXJTaXplT3B0aW9ucyIsInNwYWNlXzEiLCJzY2FsZWRQYWRkaW5nXzEiLCJ6b29tZWRCb2FyZFNpemUiLCJjZW50ZXJfMSIsIm9mZnNldF8xIiwib2Zmc2V0VG9wIiwib2Zmc2V0Qm90dG9tIiwieTEiLCJ5MiIsIm9mZnNldExlZnQiLCJvZmZzZXRSaWdodCIsIngxIiwieDIiLCJzY2FsZWRCb2FyZEV4dGVudCIsInBsYXlFZmZlY3QiLCJlZmZlY3RNYXQiLCJCYW4iLCJzZXRFZmZlY3RNYXQiLCJFbXB0eSIsImN1ciIsIlRleHQiLCJCbGFja1N0b25lIiwiV2hpdGVTdG9uZSIsIkNsZWFyIiwiZHJhd1N0b25lcyIsInN0b25lIiwidHVybiIsIm1heGh2IiwiRE9NTWF0cml4Iiwic2V0VHVybiIsInNldEJvYXJkU2l6ZSIsInJlc2l6ZSIsImRvbSIsImNhbnZhc2VzIiwiY2xpZW50V2lkdGgiLCJyZW5kZXIiLCJjcmVhdGVDYW52YXMiLCJwb2ludGVyRXZlbnRzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5pdCIsImlubmVySFRNTCIsImFwcGVuZENoaWxkIiwicmVuZGVySW50ZXJhY3RpdmUiLCJhZGRFdmVudExpc3RlbmVyIiwic2V0T3B0aW9ucyIsInNldE1hdCIsInNldFZpc2libGVBcmVhTWF0Iiwic2V0UHJldmVudE1vdmVNYXQiLCJzZXRNYXJrdXAiLCJzZXRDdXJzb3IiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2V0QW5hbHlzaXMiLCJzZXRUaGVtZSIsInVybHMiLCJsb2FkZWQiLCJpbWFnZUxvYWRlZCIsIm9ubG9hZCIsIm9uZXJyb3IiLCJwcmVsb2FkIiwiY2FsY0R5bmFtaWNQYWRkaW5nIiwidmlzaWJsZUFyZWFTaXplIiwicGFkZGluZ1dpdGhvdXRDb29yZGluYXRlIiwiem9vbUJvYXJkIiwiem9vbWVkVmlzaWJsZUFyZWEiLCJib2FyZEN0eCIsImN1cnNvckN0eCIsIm1hcmt1cEN0eCIsImFuYWx5c2lzQ3R4IiwiZWZmZWN0Q3R4IiwiZXh0cmFWaXNpYmxlU2l6ZSIsInRyYW5zbGF0ZVNlbGYiLCJzY2FsZVNlbGYiLCJyZXNldFRyYW5zZm9ybSIsImNhbGNCb2FyZFZpc2libGVBcmVhIiwicmVuZGVySW5PbmVDYW52YXMiLCJzaGFfMiIsImZpbHRlcmVkIiwicGFydGlhbEFyZWEiLCJfZSIsIl9mIiwiX2ciLCJjb2wiLCJfaCIsImVfMiIsIl9qIiwicm93IiwidGhyZXNob2xkIiwiZXZpbCIsIndpbnJhdGVSYW5nZSIsInNjb3JlUmFuZ2UiLCJiYWQiLCJwb29yIiwib2siLCJnb29kIiwiZ3JlYXQiLCJwcmV2ZW50TW92ZU5vZGVzIiwia29taSIsImtvIiwicHV0Qm9yZGVyIiwib2ZmZW5zZUtvbWkiLCJibGFja1RvQXR0YWNrIiwiaXNpemUiLCJqc2l6ZSIsImRlZmVuc2VBcmVhIiwicHV0T3V0c2lkZSIsInBvbGljeSIsImZpeGVkV2lucmF0ZSIsInN0ZXBzIiwiaGVhZGVyIiwicHJldiIsInJldHVyblJvb3QiLCJzdFByb3AiLCJzaG93VmFyaWF0aW9uc01hcmt1cCIsInNob3dDaGlsZHJlbk1hcmt1cCIsInNob3dTaWJsaW5nc01hcmt1cCIsInN0IiwicGF0IiwicGFpIiwicGkiLCJvblJpZ2h0Iiwib25Xcm9uZyIsIm9uVmFyaWFudCIsIm9uT2ZmUGF0aCIsIm5leHROb2RlIiwibmV3UGF0aCIsImNoZWNrUmVzdWx0IiwicmlnaHROb2RlcyIsIndyb25nTm9kZXMiLCJ2YXJpYW50Tm9kZXMiLCJzZ2ZQYXJzZXIiLCJhIiwibGFzdE5vZGUiLCJvbkFmdGVyTW92ZSIsInNoYV8xIiwia2luZCIsInhPZmZzZXQiLCJ5T2Zmc2V0IiwicmVzdWx0cyIsImluaXRzIiwiYXgiLCJheSIsImlzQ2FwdHVyZWQiLCJoYXNNb3ZlZCIsImFycmFuZ2VtZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7NFFBZ0JBLElBQUlBLEVBQWdCLFNBQVNDLEVBQUdDLEdBSTVCLE9BSEFGLEVBQWdCRyxPQUFPQyxnQkFDbEIsQ0FBRUMsVUFBVyxjQUFnQkMsT0FBUyxTQUFVTCxFQUFHQyxHQUFLRCxFQUFFSSxVQUFZSCxDQUFHLEdBQzFFLFNBQVVELEVBQUdDLEdBQUssSUFBSyxJQUFJSyxLQUFLTCxFQUFPQyxPQUFPSyxVQUFVQyxlQUFlQyxLQUFLUixFQUFHSyxLQUFJTixFQUFFTSxHQUFLTCxFQUFFSyxLQUN6RlAsRUFBY0MsRUFBR0MsRUFDNUIsRUFFTyxTQUFTUyxFQUFVVixFQUFHQyxHQUN6QixHQUFpQixtQkFBTkEsR0FBMEIsT0FBTkEsRUFDM0Is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SUFBUSxLQUFNLElBQVEsS0FDdEIsSUFBUSxLQUVSLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFDMUIsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3RGLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN0RixJQUFVLElBQU0sSUFBVSxJQUMxQixJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLEtBQU0sSUFBVSxLQUMxQixJQUFVLEtBQU0sSUFBVSxLQUMxQixJQUFVLEtBQU0sSUFBVSxNQW91QnhCbUIsR0FBaUJuQixHQWh1QkgsQ0FDaEIsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLE9BQ0wsSUFBSyxTQUNMLElBQUssVUFvdUJQLFNBQVNvQixHQUFpQkMsR0FDeEIsTUFBTyxLQUFPaEcsR0FBY2dHLEVBQzdCLENBcUJELFNBQVNDLEdBQVdqQixHQUNsQixPQUFPdEYsR0FBYXdHLEtBQUtsQixFQUMxQixDQXFDRCxTQUFTbUIsR0FBV0MsR0FDbEIsSUFBSWhRLEdBQVMsRUFDVHpCLEVBQVNyRCxNQUFNOFUsRUFBSUMsTUFLdkIsT0FIQUQsRUFBSUUsU0FBUSxTQUFTclQsRUFBT2dSLEdBQzFCdFAsSUFBU3lCLEdBQVMsQ0FBQzZOLEVBQUtoUixFQUM5QixJQUNXMEIsQ0FDUixDQVVELFNBQVM0UixHQUFRcEUsRUFBTXFFLEdBQ3JCLE9BQU8sU0FBU0MsR0FDZCxPQUFPdEUsRUFBS3FFLEVBQVVDLEdBQzVCLENBQ0csQ0FXRCxTQUFTQyxHQUFlcEUsRUFBT3FFLEdBTTdCLElBTEEsSUFBSXZRLEdBQVMsRUFDVDNELEVBQVM2UCxFQUFNN1AsT0FDZnNRLEVBQVcsRUFDWHBPLEVBQVMsS0FFSnlCLEVBQVEzRCxHQUFRLENBQ3ZCLElBQUlRLEVBQVFxUCxFQUFNbE0sR0FDZG5ELElBQVUwVCxHQUFlMVQsSUFBVTJGLElBQ3JDMEosRUFBTWxNLEdBQVN3QyxFQUNmakUsRUFBT29PLEtBQWMzTSxFQUV4QixDQUNELE9BQU96QixDQUNSLENBU0QsU0FBU2lTLEdBQVdDLEdBQ2xCLElBQUl6USxHQUFTLEVBQ1R6QixFQUFTckQsTUFBTXVWLEVBQUlSLE1BS3ZCLE9BSEFRLEVBQUlQLFNBQVEsU0FBU3JULEdBQ25CMEIsSUFBU3lCLEdBQVNuRCxDQUN4QixJQUNXMEIsQ0FDUixDQVNELFNBQVNtUyxHQUFXRCxHQUNsQixJQUFJelEsR0FBUyxFQUNUekIsRUFBU3JELE1BQU11VixFQUFJUixNQUt2QixPQUhBUSxFQUFJUCxTQUFRLFNBQVNyVCxHQUNuQjBCLElBQVN5QixHQUFTLENBQUNuRCxFQUFPQSxFQUNoQyxJQUNXMEIsQ0FDUixDQW1ERCxTQUFTb1MsR0FBVy9CLEdBQ2xCLE9BQU9pQixHQUFXakIsR0FpRHBCLFNBQXFCQSxHQUNuQixJQUFJclEsRUFBUzZLLEdBQVV3SCxVQUFZLEVBQ25DLEtBQU94SCxHQUFVMEcsS0FBS2xCLE1BQ2xCclEsRUFFSixPQUFPQSxDQUNSLENBdERLc1MsQ0FBWWpDLEdBQ1pwQixHQUFVb0IsRUFDZixDQVNELFNBQVNrQyxHQUFjbEMsR0FDckIsT0FBT2lCLEdBQVdqQixHQW1EcEIsU0FBd0JBLEdBQ3RCLE9BQU9BLEVBQU9tQyxNQUFNM0gsS0FBYyxFQUNuQyxDQXBESzRILENBQWVwQyxHQTdrQnJCLFNBQXNCQSxHQUNwQixPQUFPQSxFQUFPcUMsTUFBTSxHQUNyQixDQTRrQktDLENBQWF0QyxFQUNsQixDQVVELFNBQVNDLEdBQWdCRCxHQUd2QixJQUZBLElBQUk1TyxFQUFRNE8sRUFBT3ZTLE9BRVoyRCxLQUFXZ0csR0FBYThKLEtBQUtsQixFQUFPdUMsT0FBT25SLE1BQ2xELE9BQU9BLENBQ1IsQ0FTRCxJQUFJb1IsR0FBbUI3QyxHQTM4QkgsQ0FDbEIsUUFBUyxJQUNULE9BQVEsSUFDUixPQUFRLElBQ1IsU0FBVSxJQUNWLFFBQVMsTUE0Z0NYLElBczNlSThDLEdBdDNlZ0IsU0FBU0MsRUFBYTNQLEdBSXhDLElBNkJNNFAsRUE3QkZyVyxJQUhKeUcsRUFBcUIsTUFBWEEsRUFBa0IwSSxHQUFPZ0gsR0FBRUcsU0FBU25ILEdBQUt0UCxTQUFVNEcsRUFBUzBQLEdBQUVJLEtBQUtwSCxHQUFNYixNQUcvRHRPLE1BQ2hCd1csR0FBTy9QLEVBQVErUCxLQUNmdlIsR0FBUXdCLEVBQVF4QixNQUNoQm1LLEdBQVczSSxFQUFRMkksU0FDbkJxSCxHQUFPaFEsRUFBUWdRLEtBQ2Y1VyxHQUFTNEcsRUFBUTVHLE9BQ2pCcUssR0FBU3pELEVBQVF5RCxPQUNqQjNKLEdBQVNrRyxFQUFRbEcsT0FDakJELEdBQVltRyxFQUFRbkcsVUFHcEJvVyxHQUFhMVcsR0FBTUUsVUFDbkJ5VyxHQUFZdkgsR0FBU2xQLFVBQ3JCMFcsR0FBYy9XLEdBQU9LLFVBR3JCMlcsR0FBYXBRLEVBQVEsc0JBR3JCcVEsR0FBZUgsR0FBVUksU0FHekI1VyxHQUFpQnlXLEdBQVl6VyxlQUc3QjZXLEdBQVksRUFHWkMsSUFDRVosRUFBTSxTQUFTYSxLQUFLTCxJQUFjQSxHQUFXTSxNQUFRTixHQUFXTSxLQUFLQyxVQUFZLEtBQ3ZFLGlCQUFtQmYsRUFBTyxHQVF0Q2dCLEdBQXVCVCxHQUFZRyxTQUduQ08sR0FBbUJSLEdBQWExVyxLQUFLUCxJQUdyQzBYLEdBQVVwSSxHQUFLZ0gsRUFHZnFCLEdBQWF0TixHQUFPLElBQ3RCNE0sR0FBYTFXLEtBQUtELElBQWdCeVQsUUFBUWpKLEdBQWMsUUFDdkRpSixRQUFRLHlEQUEwRCxTQUFXLEtBSTVFNkQsR0FBUy9ILEdBQWdCakosRUFBUWdSLE9BQVN6UyxFQUMxQ3pELEdBQVNrRixFQUFRbEYsT0FDakJtVyxHQUFhalIsRUFBUWlSLFdBQ3JCQyxHQUFjRixHQUFTQSxHQUFPRSxZQUFjM1MsRUFDNUM0UyxHQUFlM0MsR0FBUXBWLEdBQU9nWSxlQUFnQmhZLElBQzlDaVksR0FBZWpZLEdBQU9jLE9BQ3RCb1gsR0FBdUJuQixHQUFZbUIscUJBQ25DaFQsR0FBUzJSLEdBQVczUixPQUNwQmlULEdBQW1CelcsR0FBU0EsR0FBTzBXLG1CQUFxQmpULEVBQ3hEa1QsR0FBYzNXLEdBQVNBLEdBQU9DLFNBQVd3RCxFQUN6Q21ULEdBQWlCNVcsR0FBU0EsR0FBTzZXLFlBQWNwVCxFQUUvQ3FULEdBQWtCLFdBQ3BCLElBQ0UsSUFBSXhILEVBQU95SCxHQUFVelksR0FBUSxrQkFFN0IsT0FEQWdSLEVBQUssQ0FBQSxFQUFJLEdBQUksQ0FBRSxHQUNSQSxDQUNmLENBQVEsTUFBTzlPLEdBQUcsQ0FDYixDQU5xQixHQVNsQndXLEdBQWtCOVIsRUFBUStSLGVBQWlCckosR0FBS3FKLGNBQWdCL1IsRUFBUStSLGFBQ3hFQyxHQUFTakMsSUFBUUEsR0FBS2tDLE1BQVF2SixHQUFLcUgsS0FBS2tDLEtBQU9sQyxHQUFLa0MsSUFDcERDLEdBQWdCbFMsRUFBUW1TLGFBQWV6SixHQUFLeUosWUFBY25TLEVBQVFtUyxXQUdsRUMsR0FBYXBDLEdBQUtxQyxLQUNsQkMsR0FBY3RDLEdBQUt1QyxNQUNuQkMsR0FBbUJwWixHQUFPcVosc0JBQzFCQyxHQUFpQjFCLEdBQVNBLEdBQU8yQixTQUFXcFUsRUFDNUNxVSxHQUFpQjVTLEVBQVE2UyxTQUN6QkMsR0FBYTdDLEdBQVc3SSxLQUN4QjJMLEdBQWF2RSxHQUFRcFYsR0FBT3NYLEtBQU10WCxJQUNsQzRaLEdBQVloRCxHQUFLaUQsSUFDakJDLEdBQVlsRCxHQUFLbUQsSUFDakJDLEdBQVlyRCxHQUFLa0MsSUFDakJvQixHQUFpQnJULEVBQVFxSSxTQUN6QmlMLEdBQWV0RCxHQUFLdUQsT0FDcEJDLEdBQWdCdkQsR0FBV3dELFFBRzNCQyxHQUFXN0IsR0FBVTdSLEVBQVMsWUFDOUIyVCxHQUFNOUIsR0FBVTdSLEVBQVMsT0FDekI0VCxHQUFVL0IsR0FBVTdSLEVBQVMsV0FDN0I2VCxHQUFNaEMsR0FBVTdSLEVBQVMsT0FDekI4VCxHQUFVakMsR0FBVTdSLEVBQVMsV0FDN0IrVCxHQUFlbEMsR0FBVXpZLEdBQVEsVUFHakM0YSxHQUFVRixJQUFXLElBQUlBLEdBR3pCRyxHQUFZLENBQUEsRUFHWkMsR0FBcUJDLEdBQVNULElBQzlCVSxHQUFnQkQsR0FBU1IsSUFDekJVLEdBQW9CRixHQUFTUCxJQUM3QlUsR0FBZ0JILEdBQVNOLElBQ3pCVSxHQUFvQkosR0FBU0wsSUFHN0JVLEdBQWMxWixHQUFTQSxHQUFPckIsVUFBWThFLEVBQzFDa1csR0FBZ0JELEdBQWNBLEdBQVlFLFFBQVVuVyxFQUNwRG9XLEdBQWlCSCxHQUFjQSxHQUFZbEUsU0FBVy9SLEVBeUgxRCxTQUFTcVcsR0FBTzFaLEdBQ2QsR0FBSTJaLEdBQWEzWixLQUFXNFosR0FBUTVaLE1BQVlBLGFBQWlCNlosSUFBYyxDQUM3RSxHQUFJN1osYUFBaUI4WixHQUNuQixPQUFPOVosRUFFVCxHQUFJeEIsR0FBZUMsS0FBS3VCLEVBQU8sZUFDN0IsT0FBTytaLEdBQWEvWixFQUV2QixDQUNELE9BQVcsSUFBQThaLEdBQWM5WixFQUMxQixDQVVELElBQUlnYSxHQUFjLFdBQ2hCLFNBQVN2SSxJQUNULENBQUEsZ0JBQWdCd0ksR0FDZCxJQUFLQyxHQUFTRCxHQUNaLE1BQU8sQ0FBQSxFQUVULEdBQUk5RCxHQUNGLE9BQU9BLEdBQWE4RCxHQUV0QnhJLEVBQU9sVCxVQUFZMGIsRUFDbkIsSUFBSXZZLEVBQVMsSUFBSStQLEVBRWpCLE9BREFBLEVBQU9sVCxVQUFZOEUsRUFDWjNCLENBQ2YsQ0FDSyxDQWRpQixHQXFCbEIsU0FBU3lZLEtBQ2IsQ0FVSSxTQUFTTCxHQUFjOVosRUFBT29hLEdBQzVCdGIsS0FBS3ViLFlBQWNyYSxFQUNuQmxCLEtBQUt3YixZQUFjLEdBQ25CeGIsS0FBS3liLFlBQWNILEVBQ25CdGIsS0FBSzBiLFVBQVksRUFDakIxYixLQUFLMmIsV0FBYXBYLENBQ25CLENBK0VELFNBQVN3VyxHQUFZN1osR0FDbkJsQixLQUFLdWIsWUFBY3JhLEVBQ25CbEIsS0FBS3diLFlBQWMsR0FDbkJ4YixLQUFLNGIsUUFBVSxFQUNmNWIsS0FBSzZiLGNBQWUsRUFDcEI3YixLQUFLOGIsY0FBZ0IsR0FDckI5YixLQUFLK2IsY0FBZ0J6VSxFQUNyQnRILEtBQUtnYyxVQUFZLEVBQ2xCLENBK0dELFNBQVNDLEdBQUtDLEdBQ1osSUFBSTdYLEdBQVMsRUFDVDNELEVBQW9CLE1BQVh3YixFQUFrQixFQUFJQSxFQUFReGIsT0FHM0MsSUFEQVYsS0FBS21jLFVBQ0k5WCxFQUFRM0QsR0FBUSxDQUN2QixJQUFJMGIsRUFBUUYsRUFBUTdYLEdBQ3BCckUsS0FBSzhVLElBQUlzSCxFQUFNLEdBQUlBLEVBQU0sR0FDMUIsQ0FDRixDQStGRCxTQUFTQyxHQUFVSCxHQUNqQixJQUFJN1gsR0FBUyxFQUNUM0QsRUFBb0IsTUFBWHdiLEVBQWtCLEVBQUlBLEVBQVF4YixPQUczQyxJQURBVixLQUFLbWMsVUFDSTlYLEVBQVEzRCxHQUFRLENBQ3ZCLElBQUkwYixFQUFRRixFQUFRN1gsR0FDcEJyRSxLQUFLOFUsSUFBSXNILEVBQU0sR0FBSUEsRUFBTSxHQUMxQixDQUNGLENBNEdELFNBQVNFLEdBQVNKLEdBQ2hCLElBQUk3WCxHQUFTLEVBQ1QzRCxFQUFvQixNQUFYd2IsRUFBa0IsRUFBSUEsRUFBUXhiLE9BRzNDLElBREFWLEtBQUttYyxVQUNJOVgsRUFBUTNELEdBQVEsQ0FDdkIsSUFBSTBiLEVBQVFGLEVBQVE3WCxHQUNwQnJFLEtBQUs4VSxJQUFJc0gsRUFBTSxHQUFJQSxFQUFNLEdBQzFCLENBQ0YsQ0ErRkQsU0FBU0csR0FBU2hMLEdBQ2hCLElBQUlsTixHQUFTLEVBQ1QzRCxFQUFtQixNQUFWNlEsRUFBaUIsRUFBSUEsRUFBTzdRLE9BR3pDLElBREFWLEtBQUt3YyxTQUFXLElBQUlGLEtBQ1hqWSxFQUFRM0QsR0FDZlYsS0FBS3ljLElBQUlsTCxFQUFPbE4sR0FFbkIsQ0EyQ0QsU0FBU3FZLEdBQU1SLEdBQ2IsSUFBSVMsRUFBTzNjLEtBQUt3YyxTQUFXLElBQUlILEdBQVVILEdBQ3pDbGMsS0FBS3NVLEtBQU9xSSxFQUFLckksSUFDbEIsQ0FvR0QsU0FBU3NJLEdBQWMxYixFQUFPMmIsR0FDNUIsSUFBSUMsRUFBUWhDLEdBQVE1WixHQUNoQjZiLEdBQVNELEdBQVNFLEdBQVk5YixHQUM5QitiLEdBQVVILElBQVVDLEdBQVNwRSxHQUFTelgsR0FDdENnYyxHQUFVSixJQUFVQyxJQUFVRSxHQUFVOU0sR0FBYWpQLEdBQ3JEaWMsRUFBY0wsR0FBU0MsR0FBU0UsR0FBVUMsRUFDMUN0YSxFQUFTdWEsRUFBY3BLLEdBQVU3UixFQUFNUixPQUFRWixJQUFVLEdBQ3pEWSxFQUFTa0MsRUFBT2xDLE9BRXBCLElBQUssSUFBSXdSLEtBQU9oUixHQUNUMmIsSUFBYW5kLEdBQWVDLEtBQUt1QixFQUFPZ1IsSUFDdkNpTCxJQUVRLFVBQVBqTCxHQUVDK0ssSUFBa0IsVUFBUC9LLEdBQTBCLFVBQVBBLElBRTlCZ0wsSUFBa0IsVUFBUGhMLEdBQTBCLGNBQVBBLEdBQThCLGNBQVBBLElBRXREa0wsR0FBUWxMLEVBQUt4UixLQUVsQmtDLEVBQU9wQixLQUFLMFEsR0FHaEIsT0FBT3RQLENBQ1IsQ0FTRCxTQUFTeWEsR0FBWTlNLEdBQ25CLElBQUk3UCxFQUFTNlAsRUFBTTdQLE9BQ25CLE9BQU9BLEVBQVM2UCxFQUFNK00sR0FBVyxFQUFHNWMsRUFBUyxJQUFNNkQsQ0FDcEQsQ0FVRCxTQUFTZ1osR0FBZ0JoTixFQUFPL1AsR0FDOUIsT0FBT2dkLEdBQVlDLEdBQVVsTixHQUFRbU4sR0FBVWxkLEVBQUcsRUFBRytQLEVBQU03UCxRQUM1RCxDQVNELFNBQVNpZCxHQUFhcE4sR0FDcEIsT0FBT2lOLEdBQVlDLEdBQVVsTixHQUM5QixDQVdELFNBQVNxTixHQUFpQmpMLEVBQVFULEVBQUtoUixJQUNoQ0EsSUFBVXFELElBQWNzWixHQUFHbEwsRUFBT1QsR0FBTWhSLElBQ3hDQSxJQUFVcUQsS0FBZTJOLEtBQU9TLEtBQ25DbUwsR0FBZ0JuTCxFQUFRVCxFQUFLaFIsRUFFaEMsQ0FZRCxTQUFTNmMsR0FBWXBMLEVBQVFULEVBQUtoUixHQUNoQyxJQUFJOGMsRUFBV3JMLEVBQU9ULEdBQ2hCeFMsR0FBZUMsS0FBS2dULEVBQVFULElBQVEyTCxHQUFHRyxFQUFVOWMsS0FDbERBLElBQVVxRCxHQUFlMk4sS0FBT1MsSUFDbkNtTCxHQUFnQm5MLEVBQVFULEVBQUtoUixFQUVoQyxDQVVELFNBQVMrYyxHQUFhMU4sRUFBTzJCLEdBRTNCLElBREEsSUFBSXhSLEVBQVM2UCxFQUFNN1AsT0FDWkEsS0FDTCxHQUFJbWQsR0FBR3ROLEVBQU03UCxHQUFRLEdBQUl3UixHQUN2QixPQUFPeFIsRUFHWCxPQUFRLENBQ1QsQ0FhRCxTQUFTd2QsR0FBZWxNLEVBQVl4QixFQUFRQyxFQUFVQyxHQUlwRCxPQUhBeU4sR0FBU25NLEdBQVksU0FBUzlRLEVBQU9nUixFQUFLRixHQUN4Q3hCLEVBQU9FLEVBQWF4UCxFQUFPdVAsRUFBU3ZQLEdBQVE4USxFQUNwRCxJQUNhdEIsQ0FDUixDQVdELFNBQVMwTixHQUFXekwsRUFBUWpKLEdBQzFCLE9BQU9pSixHQUFVMEwsR0FBVzNVLEVBQVFnTixHQUFLaE4sR0FBU2lKLEVBQ25ELENBd0JELFNBQVNtTCxHQUFnQm5MLEVBQVFULEVBQUtoUixHQUN6QixhQUFQZ1IsR0FBc0IwRixHQUN4QkEsR0FBZWpGLEVBQVFULEVBQUssQ0FDMUJvTSxjQUFnQixFQUNoQkMsWUFBYyxFQUNkcmQsTUFBU0EsRUFDVHNkLFVBQVksSUFHZDdMLEVBQU9ULEdBQU9oUixDQUVqQixDQVVELFNBQVN1ZCxHQUFPOUwsRUFBUStMLEdBTXRCLElBTEEsSUFBSXJhLEdBQVMsRUFDVDNELEVBQVNnZSxFQUFNaGUsT0FDZmtDLEVBQVNyRCxHQUFNbUIsR0FDZmllLEVBQWlCLE1BQVZoTSxJQUVGdE8sRUFBUTNELEdBQ2ZrQyxFQUFPeUIsR0FBU3NhLEVBQU9wYSxFQUFZcWEsR0FBSWpNLEVBQVErTCxFQUFNcmEsSUFFdkQsT0FBT3pCLENBQ1IsQ0FXRCxTQUFTOGEsR0FBVW1CLEVBQVFDLEVBQU9DLEdBU2hDLE9BUklGLEdBQVdBLElBQ1RFLElBQVV4YSxJQUNac2EsRUFBU0EsR0FBVUUsRUFBUUYsRUFBU0UsR0FFbENELElBQVV2YSxJQUNac2EsRUFBU0EsR0FBVUMsRUFBUUQsRUFBU0MsSUFHakNELENBQ1IsQ0FrQkQsU0FBU0csR0FBVTlkLEVBQU8rZCxFQUFTQyxFQUFZaE4sRUFBS1MsRUFBUXdNLEdBQzFELElBQUl2YyxFQUNBd2MsRUFya0ZjLEVBcWtGTEgsRUFDVEksRUFya0ZjLEVBcWtGTEosRUFDVEssRUFya0ZpQixFQXFrRlJMLEVBS2IsR0FISUMsSUFDRnRjLEVBQVMrUCxFQUFTdU0sRUFBV2hlLEVBQU9nUixFQUFLUyxFQUFRd00sR0FBU0QsRUFBV2hlLElBRW5FMEIsSUFBVzJCLEVBQ2IsT0FBTzNCLEVBRVQsSUFBS3dZLEdBQVNsYSxHQUNaLE9BQU9BLEVBRVQsSUFBSTRiLEVBQVFoQyxHQUFRNVosR0FDcEIsR0FBSTRiLEdBRUYsR0FEQWxhLEVBNjhHSixTQUF3QjJOLEdBQ3RCLElBQUk3UCxFQUFTNlAsRUFBTTdQLE9BQ2ZrQyxFQUFTLElBQUkyTixFQUFNdFEsWUFBWVMsR0FHL0JBLEdBQTZCLGlCQUFaNlAsRUFBTSxJQUFrQjdRLEdBQWVDLEtBQUs0USxFQUFPLFdBQ3RFM04sRUFBT3lCLE1BQVFrTSxFQUFNbE0sTUFDckJ6QixFQUFPMmMsTUFBUWhQLEVBQU1nUCxPQUV2QixPQUFPM2MsQ0FDUixDQXY5R1k0YyxDQUFldGUsSUFDbkJrZSxFQUNILE9BQU8zQixHQUFVdmMsRUFBTzBCLE9BRXJCLENBQ0wsSUFBSTZjLEVBQU1DLEdBQU94ZSxHQUNieWUsRUFBU0YsR0FBTzVYLEdBQVc0WCxHQUFPM1gsRUFFdEMsR0FBSTZRLEdBQVN6WCxHQUNYLE9BQU8wZSxHQUFZMWUsRUFBT2tlLEdBRTVCLEdBQUlLLEdBQU94WCxHQUFhd1gsR0FBT2pZLEdBQVltWSxJQUFXaE4sR0FFcEQsR0FEQS9QLEVBQVV5YyxHQUFVTSxFQUFVLENBQUUsRUFBR0UsR0FBZ0IzZSxJQUM5Q2tlLEVBQ0gsT0FBT0MsRUErbkVmLFNBQXVCM1YsRUFBUWlKLEdBQzdCLE9BQU8wTCxHQUFXM1UsRUFBUW9XLEdBQWFwVyxHQUFTaUosRUFDakQsQ0Fob0VXb04sQ0FBYzdlLEVBbkgxQixTQUFzQnlSLEVBQVFqSixHQUM1QixPQUFPaUosR0FBVTBMLEdBQVczVSxFQUFRc1csR0FBT3RXLEdBQVNpSixFQUNyRCxDQWlIZ0NzTixDQUFhcmQsRUFBUTFCLElBa25FdEQsU0FBcUJ3SSxFQUFRaUosR0FDM0IsT0FBTzBMLEdBQVczVSxFQUFRd1csR0FBV3hXLEdBQVNpSixFQUMvQyxDQW5uRVd3TixDQUFZamYsRUFBT2tkLEdBQVd4YixFQUFRMUIsUUFFdkMsQ0FDTCxJQUFLOE0sR0FBY3lSLEdBQ2pCLE9BQU85TSxFQUFTelIsRUFBUSxDQUFBLEVBRTFCMEIsRUE0OUdOLFNBQXdCK1AsRUFBUThNLEVBQUtMLEdBQ25DLElBQUlnQixFQUFPek4sRUFBTzFTLFlBQ2xCLE9BQVF3ZixHQUNOLEtBQUtqWCxFQUNILE9BQU82WCxHQUFpQjFOLEdBRTFCLEtBQUtqTCxFQUNMLEtBQUtDLEVBQ0gsT0FBTyxJQUFJeVksR0FBTXpOLEdBRW5CLEtBQUtsSyxFQUNILE9BNW5ETixTQUF1QjZYLEVBQVVsQixHQUMvQixJQUFJbUIsRUFBU25CLEVBQVNpQixHQUFpQkMsRUFBU0MsUUFBVUQsRUFBU0MsT0FDbkUsT0FBTyxJQUFJRCxFQUFTcmdCLFlBQVlzZ0IsRUFBUUQsRUFBU0UsV0FBWUYsRUFBU0csV0FDdkUsQ0F5bkRZQyxDQUFjL04sRUFBUXlNLEdBRS9CLEtBQUsxVyxFQUFZLEtBQUtDLEVBQ3RCLEtBQUtDLEVBQVMsS0FBS0MsRUFBVSxLQUFLQyxFQUNsQyxLQUFLQyxFQUFVLEtBQUtDLEVBQWlCLEtBQUtDLEVBQVcsS0FBS0MsRUFDeEQsT0FBT3lYLEdBQWdCaE8sRUFBUXlNLEdBRWpDLEtBQUtyWCxFQUNILFdBQVdxWSxFQUViLEtBQUtwWSxFQUNMLEtBQUtLLEVBQ0gsT0FBTyxJQUFJK1gsRUFBS3pOLEdBRWxCLEtBQUt4SyxFQUNILE9BL25ETixTQUFxQnlZLEdBQ25CLElBQUloZSxFQUFTLElBQUlnZSxFQUFPM2dCLFlBQVkyZ0IsRUFBT2xYLE9BQVFtQixHQUFRNEwsS0FBS21LLElBRWhFLE9BREFoZSxFQUFPcVMsVUFBWTJMLEVBQU8zTCxVQUNuQnJTLENBQ1IsQ0EybkRZaWUsQ0FBWWxPLEdBRXJCLEtBQUt2SyxFQUNILFdBQVdnWSxFQUViLEtBQUs5WCxFQUNILE9BeG5EZXdZLEVBd25ESW5PLEVBdm5EaEI4SCxHQUFnQnJiLEdBQU9xYixHQUFjOWEsS0FBS21oQixJQUFXLENBQUUsRUFEaEUsSUFBcUJBLENBMG5EcEIsQ0E5L0djQyxDQUFlN2YsRUFBT3VlLEVBQUtMLEVBQ3JDLENBQ0YsQ0FFREQsSUFBVUEsRUFBUSxJQUFJekMsSUFDdEIsSUFBSXNFLEVBQVU3QixFQUFNUCxJQUFJMWQsR0FDeEIsR0FBSThmLEVBQ0YsT0FBT0EsRUFFVDdCLEVBQU1ySyxJQUFJNVQsRUFBTzBCLEdBRWJxTixHQUFNL08sR0FDUkEsRUFBTXFULFNBQVEsU0FBUzBNLEdBQ3JCcmUsRUFBTzZaLElBQUl1QyxHQUFVaUMsRUFBVWhDLEVBQVNDLEVBQVkrQixFQUFVL2YsRUFBT2llLEdBQy9FLElBQ2lCdFAsR0FBTTNPLElBQ2ZBLEVBQU1xVCxTQUFRLFNBQVMwTSxFQUFVL08sR0FDL0J0UCxFQUFPa1MsSUFBSTVDLEVBQUs4TSxHQUFVaUMsRUFBVWhDLEVBQVNDLEVBQVloTixFQUFLaFIsRUFBT2llLEdBQy9FLElBR00sSUFJSTdMLEVBQVF3SixFQUFRdlksR0FKTCthLEVBQ1ZELEVBQVM2QixHQUFlQyxHQUN4QjlCLEVBQVNXLEdBQVN0SixJQUVrQnhWLEdBU3pDLE9BUkF5UCxHQUFVMkMsR0FBU3BTLEdBQU8sU0FBUytmLEVBQVUvTyxHQUN2Q29CLElBRUYyTixFQUFXL2YsRUFEWGdSLEVBQU0rTyxJQUlSbEQsR0FBWW5iLEVBQVFzUCxFQUFLOE0sR0FBVWlDLEVBQVVoQyxFQUFTQyxFQUFZaE4sRUFBS2hSLEVBQU9pZSxHQUN0RixJQUNhdmMsQ0FDUixDQXdCRCxTQUFTd2UsR0FBZXpPLEVBQVFqSixFQUFRNEosR0FDdEMsSUFBSTVTLEVBQVM0UyxFQUFNNVMsT0FDbkIsR0FBYyxNQUFWaVMsRUFDRixPQUFRalMsRUFHVixJQURBaVMsRUFBU3ZULEdBQU91VCxHQUNUalMsS0FBVSxDQUNmLElBQUl3UixFQUFNb0IsRUFBTTVTLEdBQ1pvUSxFQUFZcEgsRUFBT3dJLEdBQ25CaFIsRUFBUXlSLEVBQU9ULEdBRW5CLEdBQUtoUixJQUFVcUQsS0FBZTJOLEtBQU9TLEtBQWE3QixFQUFVNVAsR0FDMUQsUUFFSCxDQUNELE9BQU8sQ0FDUixDQVlELFNBQVNtZ0IsR0FBVWpSLEVBQU1rUixFQUFNNWMsR0FDN0IsR0FBbUIsbUJBQVIwTCxFQUNULE1BQVUsSUFBQXZRLEdBQVU4RyxHQUV0QixPQUFPd1IsSUFBVyxXQUFhL0gsRUFBS3pQLE1BQU00RCxFQUFXRyxLQUFVNGMsRUFDaEUsQ0FhRCxTQUFTQyxHQUFlaFIsRUFBT2dCLEVBQVFkLEVBQVVXLEdBQy9DLElBQUkvTSxHQUFTLEVBQ1RtZCxFQUFXdlEsR0FDWHdRLEdBQVcsRUFDWC9nQixFQUFTNlAsRUFBTTdQLE9BQ2ZrQyxFQUFTLEdBQ1Q4ZSxFQUFlblEsRUFBTzdRLE9BRTFCLElBQUtBLEVBQ0gsT0FBT2tDLEVBRUw2TixJQUNGYyxFQUFTRixHQUFTRSxFQUFRNkIsR0FBVTNDLEtBRWxDVyxHQUNGb1EsRUFBV3JRLEdBQ1hzUSxHQUFXLEdBRUpsUSxFQUFPN1EsUUF0dkZHLE1BdXZGakI4Z0IsRUFBV2pPLEdBQ1hrTyxHQUFXLEVBQ1hsUSxFQUFTLElBQUlnTCxHQUFTaEwsSUFFeEJvUSxFQUNBLE9BQVN0ZCxFQUFRM0QsR0FBUSxDQUN2QixJQUFJUSxFQUFRcVAsRUFBTWxNLEdBQ2R1ZCxFQUF1QixNQUFablIsRUFBbUJ2UCxFQUFRdVAsRUFBU3ZQLEdBR25ELEdBREFBLEVBQVNrUSxHQUF3QixJQUFWbFEsRUFBZUEsRUFBUSxFQUMxQ3VnQixHQUFZRyxHQUFhQSxFQUFVLENBRXJDLElBREEsSUFBSUMsRUFBY0gsRUFDWEcsS0FDTCxHQUFJdFEsRUFBT3NRLEtBQWlCRCxFQUMxQixTQUFTRCxFQUdiL2UsRUFBT3BCLEtBQUtOLEVBQ2IsTUFDU3NnQixFQUFTalEsRUFBUXFRLEVBQVV4USxJQUNuQ3hPLEVBQU9wQixLQUFLTixFQUVmLENBQ0QsT0FBTzBCLENBQ1IsQ0Fsa0NEZ1ksR0FBT2tILGlCQUFtQixDQVF4QkMsT0FBVW5ZLEVBUVZvWSxTQUFZblksRUFRWm9ZLFlBQWVuWSxHQVFmb1ksU0FBWSxHQVFaQyxRQUFXLENBUVR6TSxFQUFLa0YsS0FLVEEsR0FBT25iLFVBQVk0YixHQUFXNWIsVUFDOUJtYixHQUFPbmIsVUFBVVEsWUFBYzJhLEdBRS9CSSxHQUFjdmIsVUFBWXliLEdBQVdHLEdBQVc1YixXQUNoRHViLEdBQWN2YixVQUFVUSxZQUFjK2EsR0FzSHRDRCxHQUFZdGIsVUFBWXliLEdBQVdHLEdBQVc1YixXQUM5Q3NiLEdBQVl0YixVQUFVUSxZQUFjOGEsR0FvR3BDa0IsR0FBS3hjLFVBQVUwYyxNQXZFZixXQUNFbmMsS0FBS3djLFNBQVd6QyxHQUFlQSxHQUFhLE1BQVEsQ0FBQSxFQUNwRC9aLEtBQUtzVSxLQUFPLENBQ2IsRUFxRUQySCxHQUFLeGMsVUFBa0IsT0F6RHZCLFNBQW9CeVMsR0FDbEIsSUFBSXRQLEVBQVM1QyxLQUFLeVQsSUFBSXZCLFdBQWVsUyxLQUFLd2MsU0FBU3RLLEdBRW5ELE9BREFsUyxLQUFLc1UsTUFBUTFSLEVBQVMsRUFBSSxFQUNuQkEsQ0FDUixFQXNERHFaLEdBQUt4YyxVQUFVbWYsSUEzQ2YsU0FBaUIxTSxHQUNmLElBQUl5SyxFQUFPM2MsS0FBS3djLFNBQ2hCLEdBQUl6QyxHQUFjLENBQ2hCLElBQUluWCxFQUFTK1osRUFBS3pLLEdBQ2xCLE9BQU90UCxJQUFXZ0UsRUFBaUJyQyxFQUFZM0IsQ0FDaEQsQ0FDRCxPQUFPbEQsR0FBZUMsS0FBS2dkLEVBQU16SyxHQUFPeUssRUFBS3pLLEdBQU8zTixDQUNyRCxFQXFDRDBYLEdBQUt4YyxVQUFVZ1UsSUExQmYsU0FBaUJ2QixHQUNmLElBQUl5SyxFQUFPM2MsS0FBS3djLFNBQ2hCLE9BQU96QyxHQUFnQjRDLEVBQUt6SyxLQUFTM04sRUFBYTdFLEdBQWVDLEtBQUtnZCxFQUFNekssRUFDN0UsRUF3QkQrSixHQUFLeGMsVUFBVXFWLElBWmYsU0FBaUI1QyxFQUFLaFIsR0FDcEIsSUFBSXliLEVBQU8zYyxLQUFLd2MsU0FHaEIsT0FGQXhjLEtBQUtzVSxNQUFRdFUsS0FBS3lULElBQUl2QixHQUFPLEVBQUksRUFDakN5SyxFQUFLekssR0FBUTZILElBQWdCN1ksSUFBVXFELEVBQWFxQyxFQUFpQjFGLEVBQzFEbEIsSUFDWixFQXdIRHFjLEdBQVU1YyxVQUFVMGMsTUFwRnBCLFdBQ0VuYyxLQUFLd2MsU0FBVyxHQUNoQnhjLEtBQUtzVSxLQUFPLENBQ2IsRUFrRkQrSCxHQUFVNWMsVUFBa0IsT0F2RTVCLFNBQXlCeVMsR0FDdkIsSUFBSXlLLEVBQU8zYyxLQUFLd2MsU0FDWm5ZLEVBQVE0WixHQUFhdEIsRUFBTXpLLEdBRS9CLFFBQUk3TixFQUFRLEtBSVJBLEdBRFlzWSxFQUFLamMsT0FBUyxFQUU1QmljLEVBQUt5RixNQUVMOWQsR0FBTzNFLEtBQUtnZCxFQUFNdFksRUFBTyxLQUV6QnJFLEtBQUtzVSxNQUNBLEVBQ1IsRUF5REQrSCxHQUFVNWMsVUFBVW1mLElBOUNwQixTQUFzQjFNLEdBQ3BCLElBQUl5SyxFQUFPM2MsS0FBS3djLFNBQ1puWSxFQUFRNFosR0FBYXRCLEVBQU16SyxHQUUvQixPQUFPN04sRUFBUSxFQUFJRSxFQUFZb1ksRUFBS3RZLEdBQU8sRUFDNUMsRUEwQ0RnWSxHQUFVNWMsVUFBVWdVLElBL0JwQixTQUFzQnZCLEdBQ3BCLE9BQU8rTCxHQUFhamUsS0FBS3djLFNBQVV0SyxJQUFRLENBQzVDLEVBOEJEbUssR0FBVTVjLFVBQVVxVixJQWxCcEIsU0FBc0I1QyxFQUFLaFIsR0FDekIsSUFBSXliLEVBQU8zYyxLQUFLd2MsU0FDWm5ZLEVBQVE0WixHQUFhdEIsRUFBTXpLLEdBUS9CLE9BTkk3TixFQUFRLEtBQ1JyRSxLQUFLc1UsS0FDUHFJLEVBQUtuYixLQUFLLENBQUMwUSxFQUFLaFIsS0FFaEJ5YixFQUFLdFksR0FBTyxHQUFLbkQsRUFFWmxCLElBQ1IsRUEwR0RzYyxHQUFTN2MsVUFBVTBjLE1BdEVuQixXQUNFbmMsS0FBS3NVLEtBQU8sRUFDWnRVLEtBQUt3YyxTQUFXLENBQ2Q2RixLQUFRLElBQUlwRyxHQUNaNUgsSUFBTyxJQUFLc0YsSUFBTzBDLElBQ25CcEosT0FBVSxJQUFJZ0osR0FFakIsRUFnRURLLEdBQVM3YyxVQUFrQixPQXJEM0IsU0FBd0J5UyxHQUN0QixJQUFJdFAsRUFBUzBmLEdBQVd0aUIsS0FBTWtTLEdBQWEsT0FBRUEsR0FFN0MsT0FEQWxTLEtBQUtzVSxNQUFRMVIsRUFBUyxFQUFJLEVBQ25CQSxDQUNSLEVBa0REMFosR0FBUzdjLFVBQVVtZixJQXZDbkIsU0FBcUIxTSxHQUNuQixPQUFPb1EsR0FBV3RpQixLQUFNa1MsR0FBSzBNLElBQUkxTSxFQUNsQyxFQXNDRG9LLEdBQVM3YyxVQUFVZ1UsSUEzQm5CLFNBQXFCdkIsR0FDbkIsT0FBT29RLEdBQVd0aUIsS0FBTWtTLEdBQUt1QixJQUFJdkIsRUFDbEMsRUEwQkRvSyxHQUFTN2MsVUFBVXFWLElBZG5CLFNBQXFCNUMsRUFBS2hSLEdBQ3hCLElBQUl5YixFQUFPMkYsR0FBV3RpQixLQUFNa1MsR0FDeEJvQyxFQUFPcUksRUFBS3JJLEtBSWhCLE9BRkFxSSxFQUFLN0gsSUFBSTVDLEVBQUtoUixHQUNkbEIsS0FBS3NVLE1BQVFxSSxFQUFLckksTUFBUUEsRUFBTyxFQUFJLEVBQzFCdFUsSUFDWixFQTBERHVjLEdBQVM5YyxVQUFVZ2QsSUFBTUYsR0FBUzljLFVBQVUrQixLQW5CNUMsU0FBcUJOLEdBRW5CLE9BREFsQixLQUFLd2MsU0FBUzFILElBQUk1VCxFQUFPMEYsR0FDZDVHLElBQ1osRUFpQkR1YyxHQUFTOWMsVUFBVWdVLElBTm5CLFNBQXFCdlMsR0FDbkIsT0FBV2xCLEtBQUN3YyxTQUFTL0ksSUFBSXZTLEVBQzFCLEVBc0dEd2IsR0FBTWpkLFVBQVUwYyxNQTNFaEIsV0FDRW5jLEtBQUt3YyxTQUFXLElBQUlILEdBQ3BCcmMsS0FBS3NVLEtBQU8sQ0FDYixFQXlFRG9JLEdBQU1qZCxVQUFrQixPQTlEeEIsU0FBcUJ5UyxHQUNuQixJQUFJeUssRUFBTzNjLEtBQUt3YyxTQUNaNVosRUFBUytaLEVBQWEsT0FBRXpLLEdBRzVCLE9BREFsUyxLQUFLc1UsS0FBT3FJLEVBQUtySSxLQUNWMVIsQ0FDUixFQXlERDhaLEdBQU1qZCxVQUFVbWYsSUE5Q2hCLFNBQWtCMU0sR0FDaEIsT0FBV2xTLEtBQUN3YyxTQUFTb0MsSUFBSTFNLEVBQzFCLEVBNkNEd0ssR0FBTWpkLFVBQVVnVSxJQWxDaEIsU0FBa0J2QixHQUNoQixPQUFXbFMsS0FBQ3djLFNBQVMvSSxJQUFJdkIsRUFDMUIsRUFpQ0R3SyxHQUFNamQsVUFBVXFWLElBckJoQixTQUFrQjVDLEVBQUtoUixHQUNyQixJQUFJeWIsRUFBTzNjLEtBQUt3YyxTQUNoQixHQUFJRyxhQUFnQk4sR0FBVyxDQUM3QixJQUFJa0csRUFBUTVGLEVBQUtILFNBQ2pCLElBQUs3QyxJQUFRNEksRUFBTTdoQixPQUFTOGhCLElBRzFCLE9BRkFELEVBQU0vZ0IsS0FBSyxDQUFDMFEsRUFBS2hSLElBQ2pCbEIsS0FBS3NVLE9BQVNxSSxFQUFLckksS0FDWnRVLEtBRVQyYyxFQUFPM2MsS0FBS3djLFNBQVcsSUFBSUYsR0FBU2lHLEVBQ3JDLENBR0QsT0FGQTVGLEVBQUs3SCxJQUFJNUMsRUFBS2hSLEdBQ2RsQixLQUFLc1UsS0FBT3FJLEVBQUtySSxLQUNOdFUsSUFDWixFQXFjRCxJQUFJbWUsR0FBV3NFLEdBQWVDLElBVTFCQyxHQUFnQkYsR0FBZUcsSUFBaUIsR0FXcEQsU0FBU0MsR0FBVTdRLEVBQVlsQixHQUM3QixJQUFJbE8sR0FBUyxFQUtiLE9BSkF1YixHQUFTbk0sR0FBWSxTQUFTOVEsRUFBT21ELEVBQU8yTixHQUUxQyxPQURBcFAsSUFBV2tPLEVBQVU1UCxFQUFPbUQsRUFBTzJOLEVBRTNDLElBQ2FwUCxDQUNSLENBWUQsU0FBU2tnQixHQUFhdlMsRUFBT0UsRUFBVVcsR0FJckMsSUFIQSxJQUFJL00sR0FBUyxFQUNUM0QsRUFBUzZQLEVBQU03UCxTQUVWMkQsRUFBUTNELEdBQVEsQ0FDdkIsSUFBSVEsRUFBUXFQLEVBQU1sTSxHQUNkeU8sRUFBVXJDLEVBQVN2UCxHQUV2QixHQUFlLE1BQVg0UixJQUFvQjhPLElBQWFyZCxFQUM1QnVPLEdBQVlBLElBQVlpUSxHQUFTalEsR0FDbEMxQixFQUFXMEIsRUFBUzhPLElBRTFCLElBQUlBLEVBQVc5TyxFQUNYbFEsRUFBUzFCLENBRWhCLENBQ0QsT0FBTzBCLENBQ1IsQ0FzQ0QsU0FBU29nQixHQUFXaFIsRUFBWWxCLEdBQzlCLElBQUlsTyxFQUFTLEdBTWIsT0FMQXViLEdBQVNuTSxHQUFZLFNBQVM5USxFQUFPbUQsRUFBTzJOLEdBQ3RDbEIsRUFBVTVQLEVBQU9tRCxFQUFPMk4sSUFDMUJwUCxFQUFPcEIsS0FBS04sRUFFdEIsSUFDYTBCLENBQ1IsQ0FhRCxTQUFTcWdCLEdBQVkxUyxFQUFPMlMsRUFBT3BTLEVBQVdxUyxFQUFVdmdCLEdBQ3RELElBQUl5QixHQUFTLEVBQ1QzRCxFQUFTNlAsRUFBTTdQLE9BS25CLElBSEFvUSxJQUFjQSxFQUFZc1MsSUFDMUJ4Z0IsSUFBV0EsRUFBUyxNQUVYeUIsRUFBUTNELEdBQVEsQ0FDdkIsSUFBSVEsRUFBUXFQLEVBQU1sTSxHQUNkNmUsRUFBUSxHQUFLcFMsRUFBVTVQLEdBQ3JCZ2lCLEVBQVEsRUFFVkQsR0FBWS9oQixFQUFPZ2lCLEVBQVEsRUFBR3BTLEVBQVdxUyxFQUFVdmdCLEdBRW5EME8sR0FBVTFPLEVBQVExQixHQUVWaWlCLElBQ1Z2Z0IsRUFBT0EsRUFBT2xDLFFBQVVRLEVBRTNCLENBQ0QsT0FBTzBCLENBQ1IsQ0FhRCxJQUFJeWdCLEdBQVVDLEtBWVZDLEdBQWVELElBQWMsR0FVakMsU0FBU1osR0FBVy9QLEVBQVFsQyxHQUMxQixPQUFPa0MsR0FBVTBRLEdBQVExUSxFQUFRbEMsRUFBVWlHLEdBQzVDLENBVUQsU0FBU2tNLEdBQWdCalEsRUFBUWxDLEdBQy9CLE9BQU9rQyxHQUFVNFEsR0FBYTVRLEVBQVFsQyxFQUFVaUcsR0FDakQsQ0FXRCxTQUFTOE0sR0FBYzdRLEVBQVFXLEdBQzdCLE9BQU92QyxHQUFZdUMsR0FBTyxTQUFTcEIsR0FDakMsT0FBT3VSLEdBQVc5USxFQUFPVCxHQUNqQyxHQUNLLENBVUQsU0FBU3dSLEdBQVEvUSxFQUFRbk4sR0FNdkIsSUFIQSxJQUFJbkIsRUFBUSxFQUNSM0QsR0FISjhFLEVBQU9tZSxHQUFTbmUsRUFBTW1OLElBR0pqUyxPQUVELE1BQVZpUyxHQUFrQnRPLEVBQVEzRCxHQUMvQmlTLEVBQVNBLEVBQU9pUixHQUFNcGUsRUFBS25CLE9BRTdCLE9BQVFBLEdBQVNBLEdBQVMzRCxFQUFVaVMsRUFBU3BPLENBQzlDLENBYUQsU0FBU3NmLEdBQWVsUixFQUFRbVIsRUFBVUMsR0FDeEMsSUFBSW5oQixFQUFTa2hCLEVBQVNuUixHQUN0QixPQUFPbUksR0FBUW5JLEdBQVUvUCxFQUFTME8sR0FBVTFPLEVBQVFtaEIsRUFBWXBSLEdBQ2pFLENBU0QsU0FBU3FSLEdBQVc5aUIsR0FDbEIsT0FBYSxNQUFUQSxFQUNLQSxJQUFVcUQsRUFuN0ZKLHFCQVJMLGdCQTY3RkZtVCxJQUFrQkEsTUFBa0J0WSxHQUFPOEIsR0EyM0ZyRCxTQUFtQkEsR0FDakIsSUFBSStpQixFQUFRdmtCLEdBQWVDLEtBQUt1QixFQUFPd1csSUFDbkMrSCxFQUFNdmUsRUFBTXdXLElBRWhCLElBQ0V4VyxFQUFNd1csSUFBa0JuVCxFQUN4QixJQUFJMmYsR0FBVyxDQUN2QixDQUFRLE1BQU81aUIsSUFFVCxJQUFJc0IsRUFBU2dVLEdBQXFCalgsS0FBS3VCLEdBQ25DZ2pCLElBQ0VELEVBQ0YvaUIsRUFBTXdXLElBQWtCK0gsU0FFakJ2ZSxFQUFNd1csS0FHakIsT0FBTzlVLENBQ1IsQ0E1NEZLdWhCLENBQVVqakIsR0ErNUdoQixTQUF3QkEsR0FDdEIsT0FBTzBWLEdBQXFCalgsS0FBS3VCLEVBQ2xDLENBaDZHS2tqQixDQUFlbGpCLEVBQ3BCLENBV0QsU0FBU21qQixHQUFPbmpCLEVBQU9vakIsR0FDckIsT0FBT3BqQixFQUFRb2pCLENBQ2hCLENBVUQsU0FBU0MsR0FBUTVSLEVBQVFULEdBQ3ZCLE9BQWlCLE1BQVZTLEdBQWtCalQsR0FBZUMsS0FBS2dULEVBQVFULEVBQ3RELENBVUQsU0FBU3NTLEdBQVU3UixFQUFRVCxHQUN6QixPQUFpQixNQUFWUyxHQUFrQlQsS0FBTzlTLEdBQU91VCxFQUN4QyxDQXlCRCxTQUFTOFIsR0FBaUJDLEVBQVFqVSxFQUFVVyxHQVMxQyxJQVJBLElBQUlvUSxFQUFXcFEsRUFBYUQsR0FBb0JGLEdBQzVDdlEsRUFBU2drQixFQUFPLEdBQUdoa0IsT0FDbkJpa0IsRUFBWUQsRUFBT2hrQixPQUNuQmtrQixFQUFXRCxFQUNYRSxFQUFTdGxCLEdBQU1vbEIsR0FDZkcsRUFBWUMsSUFDWm5pQixFQUFTLEdBRU5naUIsS0FBWSxDQUNqQixJQUFJclUsRUFBUW1VLEVBQU9FLEdBQ2ZBLEdBQVluVSxJQUNkRixFQUFRYyxHQUFTZCxFQUFPNkMsR0FBVTNDLEtBRXBDcVUsRUFBWTVMLEdBQVUzSSxFQUFNN1AsT0FBUW9rQixHQUNwQ0QsRUFBT0QsSUFBYXhULElBQWVYLEdBQWEvUCxHQUFVLEtBQU82UCxFQUFNN1AsUUFBVSxLQUM3RSxJQUFJNmIsR0FBU3FJLEdBQVlyVSxHQUN6QmhNLENBQ0wsQ0FDRGdNLEVBQVFtVSxFQUFPLEdBRWYsSUFBSXJnQixHQUFTLEVBQ1QyZ0IsRUFBT0gsRUFBTyxHQUVsQmxELEVBQ0EsT0FBU3RkLEVBQVEzRCxHQUFVa0MsRUFBT2xDLE9BQVNva0IsR0FBVyxDQUNwRCxJQUFJNWpCLEVBQVFxUCxFQUFNbE0sR0FDZHVkLEVBQVduUixFQUFXQSxFQUFTdlAsR0FBU0EsRUFHNUMsR0FEQUEsRUFBU2tRLEdBQXdCLElBQVZsUSxFQUFlQSxFQUFRLElBQ3hDOGpCLEVBQ0V6UixHQUFTeVIsRUFBTXBELEdBQ2ZKLEVBQVM1ZSxFQUFRZ2YsRUFBVXhRLElBQzVCLENBRUwsSUFEQXdULEVBQVdELElBQ0ZDLEdBQVUsQ0FDakIsSUFBSXBSLEVBQVFxUixFQUFPRCxHQUNuQixLQUFNcFIsRUFDRUQsR0FBU0MsRUFBT29PLEdBQ2hCSixFQUFTa0QsRUFBT0UsR0FBV2hELEVBQVV4USxJQUUzQyxTQUFTdVEsQ0FFWixDQUNHcUQsR0FDRkEsRUFBS3hqQixLQUFLb2dCLEdBRVpoZixFQUFPcEIsS0FBS04sRUFDYixDQUNGLENBQ0QsT0FBTzBCLENBQ1IsQ0E4QkQsU0FBU3FpQixHQUFXdFMsRUFBUW5OLEVBQU1kLEdBR2hDLElBQUkwTCxFQUFpQixPQURyQnVDLEVBQVM5TyxHQUFPOE8sRUFEaEJuTixFQUFPbWUsR0FBU25lLEVBQU1tTixLQUVNQSxFQUFTQSxFQUFPaVIsR0FBTXNCLEdBQUsxZixLQUN2RCxPQUFlLE1BQVI0SyxFQUFlN0wsRUFBWTVELEdBQU15UCxFQUFNdUMsRUFBUWpPLEVBQ3ZELENBU0QsU0FBU3lnQixHQUFnQmprQixHQUN2QixPQUFPMlosR0FBYTNaLElBQVU4aUIsR0FBVzlpQixJQUFVc0csQ0FDcEQsQ0FzQ0QsU0FBUzRkLEdBQVlsa0IsRUFBT29qQixFQUFPckYsRUFBU0MsRUFBWUMsR0FDdEQsT0FBSWplLElBQVVvakIsSUFHRCxNQUFUcGpCLEdBQTBCLE1BQVRvakIsSUFBbUJ6SixHQUFhM1osS0FBVzJaLEdBQWF5SixHQUNwRXBqQixHQUFVQSxHQUFTb2pCLEdBQVVBLEVBbUJ4QyxTQUF5QjNSLEVBQVEyUixFQUFPckYsRUFBU0MsRUFBWW1HLEVBQVdsRyxHQUN0RSxJQUFJbUcsRUFBV3hLLEdBQVFuSSxHQUNuQjRTLEVBQVd6SyxHQUFRd0osR0FDbkJrQixFQUFTRixFQUFXN2QsRUFBV2lZLEdBQU8vTSxHQUN0QzhTLEVBQVNGLEVBQVc5ZCxFQUFXaVksR0FBTzRFLEdBS3RDb0IsR0FISkYsRUFBU0EsR0FBVWhlLEVBQVVTLEVBQVl1ZCxJQUdoQnZkLEVBQ3JCMGQsR0FISkYsRUFBU0EsR0FBVWplLEVBQVVTLEVBQVl3ZCxJQUdoQnhkLEVBQ3JCMmQsRUFBWUosR0FBVUMsRUFFMUIsR0FBSUcsR0FBYWpOLEdBQVNoRyxHQUFTLENBQ2pDLElBQUtnRyxHQUFTMkwsR0FDWixPQUFZLEVBRWRnQixHQUFXLEVBQ1hJLEdBQVcsQ0FDWixDQUNELEdBQUlFLElBQWNGLEVBRWhCLE9BREF2RyxJQUFVQSxFQUFRLElBQUl6QyxJQUNkNEksR0FBWW5WLEdBQWF3QyxHQUM3QmtULEdBQVlsVCxFQUFRMlIsRUFBT3JGLEVBQVNDLEVBQVltRyxFQUFXbEcsR0E4MUVuRSxTQUFvQnhNLEVBQVEyUixFQUFPN0UsRUFBS1IsRUFBU0MsRUFBWW1HLEVBQVdsRyxHQUN0RSxPQUFRTSxHQUNOLEtBQUtoWCxFQUNILEdBQUtrSyxFQUFPOE4sWUFBYzZELEVBQU03RCxZQUMzQjlOLEVBQU82TixZQUFjOEQsRUFBTTlELFdBQzlCLE9BQVksRUFFZDdOLEVBQVNBLEVBQU80TixPQUNoQitELEVBQVFBLEVBQU0vRCxPQUVoQixLQUFLL1gsRUFDSCxRQUFLbUssRUFBTzhOLFlBQWM2RCxFQUFNN0QsYUFDM0I0RSxFQUFVLElBQUlwTyxHQUFXdEUsR0FBUyxJQUFJc0UsR0FBV3FOLEtBS3hELEtBQUs1YyxFQUNMLEtBQUtDLEVBQ0wsS0FBS0ssRUFHSCxPQUFPNlYsSUFBSWxMLEdBQVMyUixHQUV0QixLQUFLMWMsRUFDSCxPQUFPK0ssRUFBT21ULE1BQVF4QixFQUFNd0IsTUFBUW5ULEVBQU9vVCxTQUFXekIsRUFBTXlCLFFBRTlELEtBQUs1ZCxFQUNMLEtBQUtFLEVBSUgsT0FBT3NLLEdBQVcyUixFQUFRLEdBRTVCLEtBQUt2YyxFQUNILElBQUlpZSxFQUFVNVIsR0FFaEIsS0FBS2hNLEVBQ0gsSUFBSTZkLEVBeG5MZSxFQXduTEhoSCxFQUdoQixHQUZBK0csSUFBWUEsRUFBVW5SLElBRWxCbEMsRUFBTzJCLE1BQVFnUSxFQUFNaFEsT0FBUzJSLEVBQ2hDLE9BQVksRUFHZCxJQUFJakYsRUFBVTdCLEVBQU1QLElBQUlqTSxHQUN4QixHQUFJcU8sRUFDRixPQUFPQSxHQUFXc0QsRUFFcEJyRixHQWxvTHFCLEVBcW9MckJFLEVBQU1ySyxJQUFJbkMsRUFBUTJSLEdBQ2xCLElBQUkxaEIsRUFBU2lqQixHQUFZRyxFQUFRclQsR0FBU3FULEVBQVExQixHQUFRckYsRUFBU0MsRUFBWW1HLEVBQVdsRyxHQUUxRixPQURBQSxFQUFjLE9BQUV4TSxHQUNUL1AsRUFFVCxLQUFLMEYsRUFDSCxHQUFJbVMsR0FDRixPQUFPQSxHQUFjOWEsS0FBS2dULElBQVc4SCxHQUFjOWEsS0FBSzJrQixHQUc5RCxPQUFPLENBQ1IsQ0E1NUVPNEIsQ0FBV3ZULEVBQVEyUixFQUFPa0IsRUFBUXZHLEVBQVNDLEVBQVltRyxFQUFXbEcsR0FFeEUsS0F2dkd1QixFQXV2R2pCRixHQUFpQyxDQUNyQyxJQUFJa0gsRUFBZVQsR0FBWWhtQixHQUFlQyxLQUFLZ1QsRUFBUSxlQUN2RHlULEVBQWVULEdBQVlqbUIsR0FBZUMsS0FBSzJrQixFQUFPLGVBRTFELEdBQUk2QixHQUFnQkMsRUFBYyxDQUNoQyxJQUFJQyxFQUFlRixFQUFleFQsRUFBT3pSLFFBQVV5UixFQUMvQzJULEVBQWVGLEVBQWU5QixFQUFNcGpCLFFBQVVvakIsRUFHbEQsT0FEQW5GLElBQVVBLEVBQVEsSUFBSXpDLElBQ2YySSxFQUFVZ0IsRUFBY0MsRUFBY3JILEVBQVNDLEVBQVlDLEVBQ25FLENBQ0YsQ0FDRCxJQUFLeUcsRUFDSCxPQUFZLEVBR2QsT0FEQXpHLElBQVVBLEVBQVEsSUFBSXpDLElBMDVFeEIsU0FBc0IvSixFQUFRMlIsRUFBT3JGLEVBQVNDLEVBQVltRyxFQUFXbEcsR0FDbkUsSUFBSThHLEVBanFMbUIsRUFpcUxQaEgsRUFDWnNILEVBQVdwRixHQUFXeE8sR0FDdEI2VCxFQUFZRCxFQUFTN2xCLE9BQ3JCK2xCLEVBQVd0RixHQUFXbUQsR0FDdEJLLEVBQVk4QixFQUFTL2xCLE9BRXpCLEdBQUk4bEIsR0FBYTdCLElBQWNzQixFQUM3QixTQUVGLElBQUk1aEIsRUFBUW1pQixFQUNaLEtBQU9uaUIsS0FBUyxDQUNkLElBQUk2TixFQUFNcVUsRUFBU2xpQixHQUNuQixLQUFNNGhCLEVBQVkvVCxLQUFPb1MsRUFBUTVrQixHQUFlQyxLQUFLMmtCLEVBQU9wUyxJQUMxRCxPQUFPLENBRVYsQ0FFRCxJQUFJd1UsRUFBYXZILEVBQU1QLElBQUlqTSxHQUN2QmdVLEVBQWF4SCxFQUFNUCxJQUFJMEYsR0FDM0IsR0FBSW9DLEdBQWNDLEVBQ2hCLE9BQU9ELEdBQWNwQyxHQUFTcUMsR0FBY2hVLEVBRTlDLElBQUkvUCxHQUFTLEVBQ2J1YyxFQUFNckssSUFBSW5DLEVBQVEyUixHQUNsQm5GLEVBQU1ySyxJQUFJd1AsRUFBTzNSLEdBRWpCLElBQUlpVSxFQUFXWCxFQUNmLE9BQVM1aEIsRUFBUW1pQixHQUFXLENBRTFCLElBQUl4SSxFQUFXckwsRUFEZlQsRUFBTXFVLEVBQVNsaUIsSUFFWHdpQixFQUFXdkMsRUFBTXBTLEdBRXJCLEdBQUlnTixFQUNGLElBQUk0SCxFQUFXYixFQUNYL0csRUFBVzJILEVBQVU3SSxFQUFVOUwsRUFBS29TLEVBQU8zUixFQUFRd00sR0FDbkRELEVBQVdsQixFQUFVNkksRUFBVTNVLEVBQUtTLEVBQVEyUixFQUFPbkYsR0FHekQsS0FBTTJILElBQWF2aUIsRUFDVnlaLElBQWE2SSxHQUFZeEIsRUFBVXJILEVBQVU2SSxFQUFVNUgsRUFBU0MsRUFBWUMsR0FDN0UySCxHQUNELENBQ0xsa0IsR0FBUyxFQUNULEtBQ0QsQ0FDRGdrQixJQUFhQSxFQUFrQixlQUFQMVUsRUFDekIsQ0FDRCxHQUFJdFAsSUFBV2drQixFQUFVLENBQ3ZCLElBQUlHLEVBQVVwVSxFQUFPMVMsWUFDakIrbUIsRUFBVTFDLEVBQU1ya0IsWUFHaEI4bUIsR0FBV0MsS0FDVixnQkFBaUJyVSxNQUFVLGdCQUFpQjJSLElBQ3pCLG1CQUFYeUMsR0FBeUJBLGFBQW1CQSxHQUNqQyxtQkFBWEMsR0FBeUJBLGFBQW1CQSxJQUN2RHBrQixHQUFTLEVBRVosQ0FHRCxPQUZBdWMsRUFBYyxPQUFFeE0sR0FDaEJ3TSxFQUFjLE9BQUVtRixHQUNUMWhCLENBQ1IsQ0F4OUVRcWtCLENBQWF0VSxFQUFRMlIsRUFBT3JGLEVBQVNDLEVBQVltRyxFQUFXbEcsRUFDcEUsQ0E1RFErSCxDQUFnQmhtQixFQUFPb2pCLEVBQU9yRixFQUFTQyxFQUFZa0csR0FBYWpHLEdBQ3hFLENBa0ZELFNBQVNnSSxHQUFZeFUsRUFBUWpKLEVBQVEwZCxFQUFXbEksR0FDOUMsSUFBSTdhLEVBQVEraUIsRUFBVTFtQixPQUNsQkEsRUFBUzJELEVBQ1RnakIsR0FBZ0JuSSxFQUVwQixHQUFjLE1BQVZ2TSxFQUNGLE9BQVFqUyxFQUdWLElBREFpUyxFQUFTdlQsR0FBT3VULEdBQ1R0TyxLQUFTLENBQ2QsSUFBSXNZLEVBQU95SyxFQUFVL2lCLEdBQ3JCLEdBQUtnakIsR0FBZ0IxSyxFQUFLLEdBQ2xCQSxFQUFLLEtBQU9oSyxFQUFPZ0ssRUFBSyxNQUN0QkEsRUFBSyxLQUFNaEssR0FFbkIsT0FBWSxDQUVmLENBQ0QsT0FBU3RPLEVBQVEzRCxHQUFRLENBRXZCLElBQUl3UixHQURKeUssRUFBT3lLLEVBQVUvaUIsSUFDRixHQUNYMlosRUFBV3JMLEVBQU9ULEdBQ2xCb1YsRUFBVzNLLEVBQUssR0FFcEIsR0FBSTBLLEdBQWdCMUssRUFBSyxJQUN2QixHQUFJcUIsSUFBYXpaLEtBQWUyTixLQUFPUyxHQUNyQyxPQUFPLE1BRUosQ0FDTCxJQUFJd00sRUFBUSxJQUFJekMsR0FDaEIsR0FBSXdDLEVBQ0YsSUFBSXRjLEVBQVNzYyxFQUFXbEIsRUFBVXNKLEVBQVVwVixFQUFLUyxFQUFRakosRUFBUXlWLEdBRW5FLEtBQU12YyxJQUFXMkIsRUFDVDZnQixHQUFZa0MsRUFBVXRKLEVBQVV1SixFQUErQ3JJLEVBQVlDLEdBQzNGdmMsR0FFTixPQUFZLENBRWYsQ0FDRixDQUNELE9BQVcsQ0FDWixDQVVELFNBQVM0a0IsR0FBYXRtQixHQUNwQixTQUFLa2EsR0FBU2xhLEtBMDVGRWtQLEVBMTVGaUJsUCxFQTI1RnhCc1YsSUFBZUEsTUFBY3BHLE1BeDVGeEJxVCxHQUFXdmlCLEdBQVM2VixHQUFhL0wsSUFDaENtSixLQUFLZ0csR0FBU2paLElBczVGL0IsSUFBa0JrUCxDQXI1RmpCLENBMkNELFNBQVNxWCxHQUFhdm1CLEdBR3BCLE1BQW9CLG1CQUFUQSxFQUNGQSxFQUVJLE1BQVRBLEVBQ0t3bUIsR0FFVyxVQUFoQm5aLEVBQU9yTixHQUNGNFosR0FBUTVaLEdBQ1h5bUIsR0FBb0J6bUIsRUFBTSxHQUFJQSxFQUFNLElBQ3BDMG1CLEdBQVkxbUIsR0FFWDJtQixHQUFTM21CLEVBQ2pCLENBU0QsU0FBUzRtQixHQUFTblYsR0FDaEIsSUFBS29WLEdBQVlwVixHQUNmLE9BQU9vRyxHQUFXcEcsR0FFcEIsSUFBSS9QLEVBQVMsR0FDYixJQUFLLElBQUlzUCxLQUFPOVMsR0FBT3VULEdBQ2pCalQsR0FBZUMsS0FBS2dULEVBQVFULElBQWUsZUFBUEEsR0FDdEN0UCxFQUFPcEIsS0FBSzBRLEdBR2hCLE9BQU90UCxDQUNSLENBU0QsU0FBU29sQixHQUFXclYsR0FDbEIsSUFBS3lJLEdBQVN6SSxHQUNaLE9BMDlGSixTQUFzQkEsR0FDcEIsSUFBSS9QLEVBQVMsR0FDYixHQUFjLE1BQVYrUCxFQUNGLElBQUssSUFBSVQsS0FBTzlTLEdBQU91VCxHQUNyQi9QLEVBQU9wQixLQUFLMFEsR0FHaEIsT0FBT3RQLENBQ1IsQ0FsK0ZVcWxCLENBQWF0VixHQUV0QixJQUFJdVYsRUFBVUgsR0FBWXBWLEdBQ3RCL1AsRUFBUyxHQUViLElBQUssSUFBSXNQLEtBQU9TLEdBQ0QsZUFBUFQsSUFBeUJnVyxHQUFZeG9CLEdBQWVDLEtBQUtnVCxFQUFRVCxLQUNyRXRQLEVBQU9wQixLQUFLMFEsR0FHaEIsT0FBT3RQLENBQ1IsQ0FXRCxTQUFTdWxCLEdBQU9qbkIsRUFBT29qQixHQUNyQixPQUFPcGpCLEVBQVFvakIsQ0FDaEIsQ0FVRCxTQUFTOEQsR0FBUXBXLEVBQVl2QixHQUMzQixJQUFJcE0sR0FBUyxFQUNUekIsRUFBU3lsQixHQUFZclcsR0FBY3pTLEdBQU15UyxFQUFXdFIsUUFBVSxHQUtsRSxPQUhBeWQsR0FBU25NLEdBQVksU0FBUzlRLEVBQU9nUixFQUFLRixHQUN4Q3BQLElBQVN5QixHQUFTb00sRUFBU3ZQLEVBQU9nUixFQUFLRixFQUMvQyxJQUNhcFAsQ0FDUixDQVNELFNBQVNnbEIsR0FBWWxlLEdBQ25CLElBQUkwZCxFQUFZa0IsR0FBYTVlLEdBQzdCLE9BQXdCLEdBQXBCMGQsRUFBVTFtQixRQUFlMG1CLEVBQVUsR0FBRyxHQUNqQ21CLEdBQXdCbkIsRUFBVSxHQUFHLEdBQUlBLEVBQVUsR0FBRyxhQUUvQ3pVLEdBQ2QsT0FBT0EsSUFBV2pKLEdBQVV5ZCxHQUFZeFUsRUFBUWpKLEVBQVEwZCxFQUNoRSxDQUNLLENBVUQsU0FBU08sR0FBb0JuaUIsRUFBTThoQixHQUNqQyxPQUFJa0IsR0FBTWhqQixJQUFTaWpCLEdBQW1CbkIsR0FDN0JpQixHQUF3QjNFLEdBQU1wZSxHQUFPOGhCLEdBRTlCM1UsU0FBQUEsR0FDZCxJQUFJcUwsRUFBV1ksR0FBSWpNLEVBQVFuTixHQUMzQixPQUFRd1ksSUFBYXpaLEdBQWF5WixJQUFhc0osRUFDM0NvQixHQUFNL1YsRUFBUW5OLEdBQ2Q0ZixHQUFZa0MsRUFBVXRKLEVBQVV1SixFQUM1QyxDQUNLLENBYUQsU0FBU29CLEdBQVVoVyxFQUFRakosRUFBUWtmLEVBQVUxSixFQUFZQyxHQUNuRHhNLElBQVdqSixHQUdmMlosR0FBUTNaLEdBQVEsU0FBUzRkLEVBQVVwVixHQUVqQyxHQURBaU4sSUFBVUEsRUFBUSxJQUFJekMsSUFDbEJ0QixHQUFTa00sSUErQmpCLFNBQXVCM1UsRUFBUWpKLEVBQVF3SSxFQUFLMFcsRUFBVUMsRUFBVzNKLEVBQVlDLEdBQzNFLElBQUluQixFQUFXOEssR0FBUW5XLEVBQVFULEdBQzNCb1YsRUFBV3dCLEdBQVFwZixFQUFRd0ksR0FDM0I4TyxFQUFVN0IsRUFBTVAsSUFBSTBJLEdBRXhCLEdBQUl0RyxFQUVGLFlBREFwRCxHQUFpQmpMLEVBQVFULEVBQUs4TyxHQUdoQyxJQUFJK0gsRUFBVzdKLEVBQ1hBLEVBQVdsQixFQUFVc0osRUFBV3BWLEVBQU0sR0FBS1MsRUFBUWpKLEVBQVF5VixHQUMzRDVhLEVBRUFrZCxFQUFXc0gsSUFBYXhrQixFQUU1QixHQUFJa2QsRUFBVSxDQUNaLElBQUkzRSxFQUFRaEMsR0FBUXdNLEdBQ2hCckssR0FBVUgsR0FBU25FLEdBQVMyTyxHQUM1QjBCLEdBQVdsTSxJQUFVRyxHQUFVOU0sR0FBYW1YLEdBRWhEeUIsRUFBV3pCLEVBQ1B4SyxHQUFTRyxHQUFVK0wsRUFDakJsTyxHQUFRa0QsR0FDVitLLEVBQVcvSyxFQUVKaUwsR0FBa0JqTCxHQUN6QitLLEVBQVd0TCxHQUFVTyxHQUVkZixHQUNQd0UsR0FBVyxFQUNYc0gsRUFBV25KLEdBQVkwSCxHQUFVLElBRTFCMEIsR0FDUHZILEdBQVcsRUFDWHNILEVBQVdwSSxHQUFnQjJHLEdBQVUsSUFHckN5QixFQUFXLEdBR05HLEdBQWM1QixJQUFhdEssR0FBWXNLLElBQzlDeUIsRUFBVy9LLEVBQ1BoQixHQUFZZ0IsR0FDZCtLLEVBQVdJLEdBQWNuTCxHQUVqQjVDLEdBQVM0QyxLQUFheUYsR0FBV3pGLEtBQ3pDK0ssRUFBV2xKLEdBQWdCeUgsS0FJN0I3RixHQUFXLENBRWQsQ0FDR0EsSUFFRnRDLEVBQU1ySyxJQUFJd1MsRUFBVXlCLEdBQ3BCRixFQUFVRSxFQUFVekIsRUFBVXNCLEVBQVUxSixFQUFZQyxHQUNwREEsRUFBYyxPQUFFbUksSUFFbEIxSixHQUFpQmpMLEVBQVFULEVBQUs2VyxFQUMvQixDQTFGS0ssQ0FBY3pXLEVBQVFqSixFQUFRd0ksRUFBSzBXLEVBQVVELEdBQVd6SixFQUFZQyxPQUVqRSxDQUNILElBQUk0SixFQUFXN0osRUFDWEEsRUFBVzRKLEdBQVFuVyxFQUFRVCxHQUFNb1YsRUFBV3BWLEVBQU0sR0FBS1MsRUFBUWpKLEVBQVF5VixHQUN2RTVhLEVBRUF3a0IsSUFBYXhrQixJQUNmd2tCLEVBQVd6QixHQUViMUosR0FBaUJqTCxFQUFRVCxFQUFLNlcsRUFDL0IsQ0FDRixHQUFFL0ksR0FDSixDQXVGRCxTQUFTcUosR0FBUTlZLEVBQU8vUCxHQUN0QixJQUFJRSxFQUFTNlAsRUFBTTdQLE9BQ25CLEdBQUtBLEVBSUwsT0FBTzBjLEdBRFA1YyxHQUFLQSxFQUFJLEVBQUlFLEVBQVMsRUFDSkEsR0FBVTZQLEVBQU0vUCxHQUFLK0QsQ0FDeEMsQ0FXRCxTQUFTK2tCLEdBQVl0WCxFQUFZdVgsRUFBV0MsR0FFeENELEVBREVBLEVBQVU3b0IsT0FDQTJRLEdBQVNrWSxHQUFXLFNBQVM5WSxHQUN2QyxPQUFJcUssR0FBUXJLLFlBQ012UCxHQUNkLE9BQU93aUIsR0FBUXhpQixFQUEyQixJQUFwQnVQLEVBQVMvUCxPQUFlK1AsRUFBUyxHQUFLQSxFQUM3RCxFQUVJQSxDQUNqQixJQUVvQixDQUFDaVgsSUFHZixJQUFJcmpCLEdBQVMsRUFDYmtsQixFQUFZbFksR0FBU2tZLEVBQVduVyxHQUFVcVcsT0FFMUMsSUFBSTdtQixFQUFTd2xCLEdBQVFwVyxHQUFZLFNBQVM5USxFQUFPZ1IsRUFBS0YsR0FDcEQsSUFBSTBYLEVBQVdyWSxHQUFTa1ksR0FBVyxTQUFTOVksR0FDMUMsT0FBT0EsRUFBU3ZQLEVBQzFCLElBQ1EsTUFBTyxDQUFFd29CLFNBQVlBLEVBQVVybEIsUUFBV0EsRUFBT25ELE1BQVNBLEVBQ2xFLElBRU0sT0E1eEZKLFNBQW9CcVAsRUFBT29aLEdBQ3pCLElBQUlqcEIsRUFBUzZQLEVBQU03UCxPQUduQixJQURBNlAsRUFBTXFaLEtBQUtELEdBQ0pqcEIsS0FDTDZQLEVBQU03UCxHQUFVNlAsRUFBTTdQLEdBQVFRLE1BRWhDLE9BQU9xUCxDQUNSLENBb3hGVXNaLENBQVdqbkIsR0FBUSxTQUFTK1AsRUFBUTJSLEdBQ3pDLE9BMDRCSixTQUF5QjNSLEVBQVEyUixFQUFPa0YsR0FDdEMsSUFBSW5sQixHQUFTLEVBQ1R5bEIsRUFBY25YLEVBQU8rVyxTQUNyQkssRUFBY3pGLEVBQU1vRixTQUNwQmhwQixFQUFTb3BCLEVBQVlwcEIsT0FDckJzcEIsRUFBZVIsRUFBTzlvQixPQUUxQixPQUFTMkQsRUFBUTNELEdBQVEsQ0FDdkIsSUFBSWtDLEVBQVNxbkIsR0FBaUJILEVBQVl6bEIsR0FBUTBsQixFQUFZMWxCLElBQzlELEdBQUl6QixFQUNGLE9BQUl5QixHQUFTMmxCLEVBQ0pwbkIsRUFHRkEsR0FBbUIsUUFEZDRtQixFQUFPbmxCLElBQ2lCLEVBQUksRUFFM0MsQ0FRRCxPQUFPc08sRUFBT3RPLE1BQVFpZ0IsRUFBTWpnQixLQUM3QixDQW42QlU2bEIsQ0FBZ0J2WCxFQUFRMlIsRUFBT2tGLEVBQzlDLEdBQ0ssQ0EwQkQsU0FBU1csR0FBV3hYLEVBQVErTCxFQUFPNU4sR0FLakMsSUFKQSxJQUFJek0sR0FBUyxFQUNUM0QsRUFBU2dlLEVBQU1oZSxPQUNma0MsRUFBUyxDQUFBLElBRUp5QixFQUFRM0QsR0FBUSxDQUN2QixJQUFJOEUsRUFBT2taLEVBQU1yYSxHQUNibkQsRUFBUXdpQixHQUFRL1EsRUFBUW5OLEdBRXhCc0wsRUFBVTVQLEVBQU9zRSxJQUNuQjRrQixHQUFReG5CLEVBQVErZ0IsR0FBU25lLEVBQU1tTixHQUFTelIsRUFFM0MsQ0FDRCxPQUFPMEIsQ0FDUixDQTBCRCxTQUFTeW5CLEdBQVk5WixFQUFPZ0IsRUFBUWQsRUFBVVcsR0FDNUMsSUFBSTlMLEVBQVU4TCxFQUFhb0IsR0FBa0J0QixHQUN6QzdNLEdBQVMsRUFDVDNELEVBQVM2USxFQUFPN1EsT0FDaEJza0IsRUFBT3pVLEVBUVgsSUFOSUEsSUFBVWdCLElBQ1pBLEVBQVNrTSxHQUFVbE0sSUFFakJkLElBQ0Z1VSxFQUFPM1QsR0FBU2QsRUFBTzZDLEdBQVUzQyxPQUUxQnBNLEVBQVEzRCxHQUtmLElBSkEsSUFBSTBSLEVBQVksRUFDWmxSLEVBQVFxUSxFQUFPbE4sR0FDZnVkLEVBQVduUixFQUFXQSxFQUFTdlAsR0FBU0EsR0FFcENrUixFQUFZOU0sRUFBUTBmLEVBQU1wRCxFQUFVeFAsRUFBV2hCLEtBQWdCLEdBQ2pFNFQsSUFBU3pVLEdBQ1hqTSxHQUFPM0UsS0FBS3FsQixFQUFNNVMsRUFBVyxHQUUvQjlOLEdBQU8zRSxLQUFLNFEsRUFBTzZCLEVBQVcsR0FHbEMsT0FBTzdCLENBQ1IsQ0FXRCxTQUFTK1osR0FBVy9aLEVBQU9nYSxHQUl6QixJQUhBLElBQUk3cEIsRUFBUzZQLEVBQVFnYSxFQUFRN3BCLE9BQVMsRUFDbEN1VSxFQUFZdlUsRUFBUyxFQUVsQkEsS0FBVSxDQUNmLElBQUkyRCxFQUFRa21CLEVBQVE3cEIsR0FDcEIsR0FBSUEsR0FBVXVVLEdBQWE1USxJQUFVbW1CLEVBQVUsQ0FDN0MsSUFBSUEsRUFBV25tQixFQUNYK1ksR0FBUS9ZLEdBQ1ZDLEdBQU8zRSxLQUFLNFEsRUFBT2xNLEVBQU8sR0FFMUJvbUIsR0FBVWxhLEVBQU9sTSxFQUVwQixDQUNGLENBQ0QsT0FBT2tNLENBQ1IsQ0FXRCxTQUFTK00sR0FBV3dCLEVBQU9DLEdBQ3pCLE9BQU9ELEVBQVF4RyxHQUFZZ0IsTUFBa0J5RixFQUFRRCxFQUFRLEdBQzlELENBaUNELFNBQVM0TCxHQUFXelgsRUFBUXpTLEdBQzFCLElBQUlvQyxFQUFTLEdBQ2IsSUFBS3FRLEdBQVV6UyxFQUFJLEdBQUtBLEVBQUk0RyxFQUMxQixPQUFPeEUsRUFJVCxHQUNNcEMsRUFBSSxJQUNOb0MsR0FBVXFRLElBRVp6UyxFQUFJOFgsR0FBWTlYLEVBQUksTUFFbEJ5UyxHQUFVQSxTQUVMelMsR0FFVCxPQUFPb0MsQ0FDUixDQVVELFNBQVMrbkIsR0FBU3ZhLEVBQU13YSxHQUN0QixPQUFPQyxHQUFZQyxHQUFTMWEsRUFBTXdhLEVBQU9sRCxJQUFXdFgsRUFBTyxHQUM1RCxDQVNELFNBQVMyYSxHQUFXL1ksR0FDbEIsT0FBT3FMLEdBQVk5TCxHQUFPUyxHQUMzQixDQVVELFNBQVNnWixHQUFlaFosRUFBWXhSLEdBQ2xDLElBQUkrUCxFQUFRZ0IsR0FBT1MsR0FDbkIsT0FBT3dMLEdBQVlqTixFQUFPbU4sR0FBVWxkLEVBQUcsRUFBRytQLEVBQU03UCxRQUNqRCxDQVlELFNBQVMwcEIsR0FBUXpYLEVBQVFuTixFQUFNdEUsRUFBT2dlLEdBQ3BDLElBQUs5RCxHQUFTekksR0FDWixPQUFPQSxFQVNULElBTEEsSUFBSXRPLEdBQVMsRUFDVDNELEdBSEo4RSxFQUFPbWUsR0FBU25lLEVBQU1tTixJQUdKalMsT0FDZHVVLEVBQVl2VSxFQUFTLEVBQ3JCdXFCLEVBQVN0WSxFQUVJLE1BQVZzWSxLQUFvQjVtQixFQUFRM0QsR0FBUSxDQUN6QyxJQUFJd1IsRUFBTTBSLEdBQU1wZSxFQUFLbkIsSUFDakIwa0IsRUFBVzduQixFQUVmLEdBQVksY0FBUmdSLEdBQStCLGdCQUFSQSxHQUFpQyxjQUFSQSxFQUNsRCxPQUFPUyxFQUdULEdBQUl0TyxHQUFTNFEsRUFBVyxDQUN0QixJQUFJK0ksRUFBV2lOLEVBQU8vWSxJQUN0QjZXLEVBQVc3SixFQUFhQSxFQUFXbEIsRUFBVTlMLEVBQUsrWSxHQUFVMW1CLEtBQzNDQSxJQUNmd2tCLEVBQVczTixHQUFTNEMsR0FDaEJBLEVBQ0NaLEdBQVE1WCxFQUFLbkIsRUFBUSxJQUFNLEdBQUssR0FFeEMsQ0FDRDBaLEdBQVlrTixFQUFRL1ksRUFBSzZXLEdBQ3pCa0MsRUFBU0EsRUFBTy9ZLEVBQ2pCLENBQ0QsT0FBT1MsQ0FDUixDQVVELElBQUl1WSxHQUFlbFIsR0FBcUIsU0FBUzVKLEVBQU11TSxHQUVyRCxPQURBM0MsR0FBUWxGLElBQUkxRSxFQUFNdU0sR0FDWHZNLENBQ2IsRUFIaUNzWCxHQWF6QnlELEdBQW1CdlQsR0FBNEIsU0FBU3hILEVBQU02QyxHQUNoRSxPQUFPMkUsR0FBZXhILEVBQU0sV0FBWSxDQUN0Q2tPLGNBQWdCLEVBQ2hCQyxZQUFjLEVBQ2RyZCxNQUFTa3FCLEdBQVNuWSxHQUNsQnVMLFVBQVksR0FFcEIsRUFQNENrSixHQWdCeEMsU0FBUzJELEdBQVlyWixHQUNuQixPQUFPd0wsR0FBWWpNLEdBQU9TLEdBQzNCLENBV0QsU0FBU3NaLEdBQVUvYSxFQUFPcWEsRUFBT1csR0FDL0IsSUFBSWxuQixHQUFTLEVBQ1QzRCxFQUFTNlAsRUFBTTdQLE9BRWZrcUIsRUFBUSxJQUNWQSxHQUFTQSxFQUFRbHFCLEVBQVMsRUFBS0EsRUFBU2txQixJQUUxQ1csRUFBTUEsRUFBTTdxQixFQUFTQSxFQUFTNnFCLEdBQ3BCLElBQ1JBLEdBQU83cUIsR0FFVEEsRUFBU2txQixFQUFRVyxFQUFNLEVBQU1BLEVBQU1YLElBQVcsRUFDOUNBLEtBQVcsRUFHWCxJQURBLElBQUlob0IsRUFBU3JELEdBQU1tQixLQUNWMkQsRUFBUTNELEdBQ2ZrQyxFQUFPeUIsR0FBU2tNLEVBQU1sTSxFQUFRdW1CLEdBRWhDLE9BQU9ob0IsQ0FDUixDQVdELFNBQVM0b0IsR0FBU3haLEVBQVlsQixHQUM1QixJQUFJbE8sRUFNSixPQUpBdWIsR0FBU25NLEdBQVksU0FBUzlRLEVBQU9tRCxFQUFPMk4sR0FFMUMsUUFEQXBQLEVBQVNrTyxFQUFVNVAsRUFBT21ELEVBQU8yTixHQUV6QyxNQUNlcFAsQ0FDVixDQWNELFNBQVM2b0IsR0FBZ0JsYixFQUFPclAsRUFBT3dxQixHQUNyQyxJQUFJQyxFQUFNLEVBQ05DLEVBQWdCLE1BQVRyYixFQUFnQm9iLEVBQU1wYixFQUFNN1AsT0FFdkMsR0FBb0IsaUJBQVRRLEdBQXFCQSxHQUFVQSxHQUFTMHFCLEdBbi9IM0J0a0IsV0FtL0gwRCxDQUNoRixLQUFPcWtCLEVBQU1DLEdBQU0sQ0FDakIsSUFBSUMsRUFBT0YsRUFBTUMsSUFBVSxFQUN2QmhLLEVBQVdyUixFQUFNc2IsR0FFSixPQUFiakssSUFBc0JtQixHQUFTbkIsS0FDOUI4SixFQUFjOUosR0FBWTFnQixFQUFVMGdCLEVBQVcxZ0IsR0FDbER5cUIsRUFBTUUsRUFBTSxFQUVaRCxFQUFPQyxDQUVWLENBQ0QsT0FBT0QsQ0FDUixDQUNELE9BQU9FLEdBQWtCdmIsRUFBT3JQLEVBQU93bUIsR0FBVWdFLEVBQ2xELENBZUQsU0FBU0ksR0FBa0J2YixFQUFPclAsRUFBT3VQLEVBQVVpYixHQUNqRCxJQUFJQyxFQUFNLEVBQ05DLEVBQWdCLE1BQVRyYixFQUFnQixFQUFJQSxFQUFNN1AsT0FDckMsR0FBYSxJQUFUa3JCLEVBQ0YsT0FBUSxFQVNWLElBTEEsSUFBSUcsR0FESjdxQixFQUFRdVAsRUFBU3ZQLEtBQ1FBLEVBQ3JCOHFCLEVBQXNCLE9BQVY5cUIsRUFDWitxQixFQUFjbEosR0FBUzdoQixHQUN2QmdyQixFQUFpQmhyQixJQUFVcUQsRUFFeEJvbkIsRUFBTUMsR0FBTSxDQUNqQixJQUFJQyxFQUFNdlQsSUFBYXFULEVBQU1DLEdBQVEsR0FDakNoSyxFQUFXblIsRUFBU0YsRUFBTXNiLElBQzFCTSxFQUFldkssSUFBYXJkLEVBQzVCNm5CLEVBQXlCLE9BQWJ4SyxFQUNaeUssRUFBaUJ6SyxHQUFhQSxFQUM5QjBLLEVBQWN2SixHQUFTbkIsR0FFM0IsR0FBSW1LLEVBQ0YsSUFBSVEsRUFBU2IsR0FBY1csT0FFM0JFLEVBRFNMLEVBQ0FHLElBQW1CWCxHQUFjUyxHQUNqQ0gsRUFDQUssR0FBa0JGLElBQWlCVCxJQUFlVSxHQUNsREgsRUFDQUksR0FBa0JGLElBQWlCQyxJQUFjVixJQUFlWSxJQUNoRUYsSUFBYUUsSUFHYlosRUFBYzlKLEdBQVkxZ0IsRUFBVTBnQixFQUFXMWdCLEdBRXREcXJCLEVBQ0ZaLEVBQU1FLEVBQU0sRUFFWkQsRUFBT0MsQ0FFVixDQUNELE9BQU8zUyxHQUFVMFMsRUExaklDdGtCLFdBMmpJbkIsQ0FXRCxTQUFTa2xCLEdBQWVqYyxFQUFPRSxHQU03QixJQUxBLElBQUlwTSxHQUFTLEVBQ1QzRCxFQUFTNlAsRUFBTTdQLE9BQ2ZzUSxFQUFXLEVBQ1hwTyxFQUFTLEtBRUp5QixFQUFRM0QsR0FBUSxDQUN2QixJQUFJUSxFQUFRcVAsRUFBTWxNLEdBQ2R1ZCxFQUFXblIsRUFBV0EsRUFBU3ZQLEdBQVNBLEVBRTVDLElBQUttRCxJQUFVd1osR0FBRytELEVBQVVvRCxHQUFPLENBQ2pDLElBQUlBLEVBQU9wRCxFQUNYaGYsRUFBT29PLEtBQXdCLElBQVY5UCxFQUFjLEVBQUlBLENBQ3hDLENBQ0YsQ0FDRCxPQUFPMEIsQ0FDUixDQVVELFNBQVM2cEIsR0FBYXZyQixHQUNwQixNQUFvQixpQkFBVEEsRUFDRkEsRUFFTDZoQixHQUFTN2hCLEdBQ0ptRyxHQUVEbkcsQ0FDVCxDQVVELFNBQVN3ckIsR0FBYXhyQixHQUVwQixHQUFvQixpQkFBVEEsRUFDVCxPQUFPQSxFQUVULEdBQUk0WixHQUFRNVosR0FFVixPQUFPbVEsR0FBU25RLEVBQU93ckIsSUFBZ0IsR0FFekMsR0FBSTNKLEdBQVM3aEIsR0FDWCxPQUFPeVosR0FBaUJBLEdBQWVoYixLQUFLdUIsR0FBUyxHQUV2RCxJQUFJMEIsRUFBVTFCLEVBQVEsR0FDdEIsTUFBa0IsS0FBVjBCLEdBQWtCLEVBQUkxQixJQUFVLElBQWEsS0FBTzBCLENBQzdELENBV0QsU0FBUytwQixHQUFTcGMsRUFBT0UsRUFBVVcsR0FDakMsSUFBSS9NLEdBQVMsRUFDVG1kLEVBQVd2USxHQUNYdlEsRUFBUzZQLEVBQU03UCxPQUNmK2dCLEdBQVcsRUFDWDdlLEVBQVMsR0FDVG9pQixFQUFPcGlCLEVBRVgsR0FBSXdPLEVBQ0ZxUSxHQUFXLEVBQ1hELEVBQVdyUSxRQUVSLEdBQUl6USxHQWp0SVUsSUFpdElrQixDQUNuQyxJQUFJb1UsRUFBTXJFLEVBQVcsS0FBT21jLEdBQVVyYyxHQUN0QyxHQUFJdUUsRUFDRixPQUFPRCxHQUFXQyxHQUVwQjJNLEdBQVcsRUFDWEQsRUFBV2pPLEdBQ1h5UixFQUFPLElBQUl6SSxFQUNaLE1BRUN5SSxFQUFPdlUsRUFBVyxHQUFLN04sRUFFekIrZSxFQUNBLE9BQVN0ZCxFQUFRM0QsR0FBUSxDQUN2QixJQUFJUSxFQUFRcVAsRUFBTWxNLEdBQ2R1ZCxFQUFXblIsRUFBV0EsRUFBU3ZQLEdBQVNBLEVBRzVDLEdBREFBLEVBQVNrUSxHQUF3QixJQUFWbFEsRUFBZUEsRUFBUSxFQUMxQ3VnQixHQUFZRyxHQUFhQSxFQUFVLENBRXJDLElBREEsSUFBSWlMLEVBQVk3SCxFQUFLdGtCLE9BQ2Rtc0IsS0FDTCxHQUFJN0gsRUFBSzZILEtBQWVqTCxFQUN0QixTQUFTRCxFQUdUbFIsR0FDRnVVLEVBQUt4akIsS0FBS29nQixHQUVaaGYsRUFBT3BCLEtBQUtOLEVBQ2IsTUFDU3NnQixFQUFTd0QsRUFBTXBELEVBQVV4USxLQUM3QjRULElBQVNwaUIsR0FDWG9pQixFQUFLeGpCLEtBQUtvZ0IsR0FFWmhmLEVBQU9wQixLQUFLTixHQUVmLENBQ0QsT0FBTzBCLENBQ1IsQ0FVRCxTQUFTNm5CLEdBQVU5WCxFQUFRbk4sR0FHekIsT0FBaUIsT0FEakJtTixFQUFTOU8sR0FBTzhPLEVBRGhCbk4sRUFBT21lLEdBQVNuZSxFQUFNbU4sYUFFVUEsRUFBT2lSLEdBQU1zQixHQUFLMWYsSUFDbkQsQ0FZRCxTQUFTc25CLEdBQVduYSxFQUFRbk4sRUFBTXVuQixFQUFTN04sR0FDekMsT0FBT2tMLEdBQVF6WCxFQUFRbk4sRUFBTXVuQixFQUFRckosR0FBUS9RLEVBQVFuTixJQUFRMFosRUFDOUQsQ0FhRCxTQUFTOE4sR0FBVXpjLEVBQU9PLEVBQVdtYyxFQUFRNWEsR0FJM0MsSUFIQSxJQUFJM1IsRUFBUzZQLEVBQU03UCxPQUNmMkQsRUFBUWdPLEVBQVkzUixHQUFVLEdBRTFCMlIsRUFBWWhPLE1BQVlBLEVBQVEzRCxJQUN0Q29RLEVBQVVQLEVBQU1sTSxHQUFRQSxFQUFPa00sS0FFakMsT0FBTzBjLEVBQ0gzQixHQUFVL2EsRUFBUThCLEVBQVksRUFBSWhPLEVBQVNnTyxFQUFZaE8sRUFBUSxFQUFJM0QsR0FDbkU0cUIsR0FBVS9hLEVBQVE4QixFQUFZaE8sRUFBUSxFQUFJLEVBQUtnTyxFQUFZM1IsRUFBUzJELEVBQ3pFLENBWUQsU0FBUzZvQixHQUFpQmhzQixFQUFPaXNCLEdBQy9CLElBQUl2cUIsRUFBUzFCLEVBSWIsT0FISTBCLGFBQWtCbVksS0FDcEJuWSxFQUFTQSxFQUFPMUIsU0FFWHVRLEdBQVkwYixHQUFTLFNBQVN2cUIsRUFBUXdxQixHQUMzQyxPQUFPQSxFQUFPaGQsS0FBS3pQLE1BQU15c0IsRUFBTy9jLFFBQVNpQixHQUFVLENBQUMxTyxHQUFTd3FCLEVBQU8xb0IsTUFDckUsR0FBRTlCLEVBQ0osQ0FZRCxTQUFTeXFCLEdBQVEzSSxFQUFRalUsRUFBVVcsR0FDakMsSUFBSTFRLEVBQVNna0IsRUFBT2hrQixPQUNwQixHQUFJQSxFQUFTLEVBQ1gsT0FBT0EsRUFBU2lzQixHQUFTakksRUFBTyxJQUFNLEdBS3hDLElBSEEsSUFBSXJnQixHQUFTLEVBQ1R6QixFQUFTckQsR0FBTW1CLEtBRVYyRCxFQUFRM0QsR0FJZixJQUhBLElBQUk2UCxFQUFRbVUsRUFBT3JnQixHQUNmdWdCLEdBQVksSUFFUEEsRUFBV2xrQixHQUNka2tCLEdBQVl2Z0IsSUFDZHpCLEVBQU95QixHQUFTa2QsR0FBZTNlLEVBQU95QixJQUFVa00sRUFBT21VLEVBQU9FLEdBQVduVSxFQUFVVyxJQUl6RixPQUFPdWIsR0FBUzFKLEdBQVlyZ0IsRUFBUSxHQUFJNk4sRUFBVVcsRUFDbkQsQ0FXRCxTQUFTa2MsR0FBY2hhLEVBQU8vQixFQUFRZ2MsR0FNcEMsSUFMQSxJQUFJbHBCLEdBQVMsRUFDVDNELEVBQVM0UyxFQUFNNVMsT0FDZjhzQixFQUFhamMsRUFBTzdRLE9BQ3BCa0MsRUFBUyxDQUFBLElBRUp5QixFQUFRM0QsR0FBUSxDQUN2QixJQUFJUSxFQUFRbUQsRUFBUW1wQixFQUFhamMsRUFBT2xOLEdBQVNFLEVBQ2pEZ3BCLEVBQVczcUIsRUFBUTBRLEVBQU1qUCxHQUFRbkQsRUFDbEMsQ0FDRCxPQUFPMEIsQ0FDUixDQVNELFNBQVM2cUIsR0FBb0J2c0IsR0FDM0IsT0FBTytuQixHQUFrQi9uQixHQUFTQSxFQUFRLEVBQzNDLENBU0QsU0FBU3dzQixHQUFheHNCLEdBQ3BCLE1BQXVCLG1CQUFUQSxFQUFzQkEsRUFBUXdtQixFQUM3QyxDQVVELFNBQVMvRCxHQUFTemlCLEVBQU95UixHQUN2QixPQUFJbUksR0FBUTVaLEdBQ0hBLEVBRUZzbkIsR0FBTXRuQixFQUFPeVIsR0FBVSxDQUFDelIsR0FBU3lzQixHQUFhclgsR0FBU3BWLEdBQy9ELENBV0QsSUFBSTBzQixHQUFXakQsR0FXZixTQUFTa0QsR0FBVXRkLEVBQU9xYSxFQUFPVyxHQUMvQixJQUFJN3FCLEVBQVM2UCxFQUFNN1AsT0FFbkIsT0FEQTZxQixFQUFNQSxJQUFRaG5CLEVBQVk3RCxFQUFTNnFCLEdBQzFCWCxHQUFTVyxHQUFPN3FCLEVBQVU2UCxFQUFRK2EsR0FBVS9hLEVBQU9xYSxFQUFPVyxFQUNwRSxDQVFELElBQUl4VCxHQUFlRCxJQUFtQixTQUFTZ1csR0FDN0MsT0FBT3BmLEdBQUtxSixhQUFhK1YsRUFDL0IsRUFVSSxTQUFTbE8sR0FBWVcsRUFBUW5CLEdBQzNCLEdBQUlBLEVBQ0YsT0FBT21CLEVBQU94ZSxRQUVoQixJQUFJckIsRUFBUzZmLEVBQU83ZixPQUNoQmtDLEVBQVNzVSxHQUFjQSxHQUFZeFcsR0FBVSxJQUFJNmYsRUFBT3RnQixZQUFZUyxHQUd4RSxPQURBNmYsRUFBT3dOLEtBQUtuckIsR0FDTEEsQ0FDUixDQVNELFNBQVN5ZCxHQUFpQjJOLEdBQ3hCLElBQUlwckIsRUFBUyxJQUFJb3JCLEVBQVkvdEIsWUFBWSt0QixFQUFZdk4sWUFFckQsT0FEQSxJQUFJeEosR0FBV3JVLEdBQVFrUyxJQUFJLElBQUltQyxHQUFXK1csSUFDbkNwckIsQ0FDUixDQStDRCxTQUFTK2QsR0FBZ0JzTixFQUFZN08sR0FDbkMsSUFBSW1CLEVBQVNuQixFQUFTaUIsR0FBaUI0TixFQUFXMU4sUUFBVTBOLEVBQVcxTixPQUN2RSxPQUFPLElBQUkwTixFQUFXaHVCLFlBQVlzZ0IsRUFBUTBOLEVBQVd6TixXQUFZeU4sRUFBV3Z0QixPQUM3RSxDQVVELFNBQVN1cEIsR0FBaUIvb0IsRUFBT29qQixHQUMvQixHQUFJcGpCLElBQVVvakIsRUFBTyxDQUNuQixJQUFJNEosRUFBZWh0QixJQUFVcUQsRUFDekJ5bkIsRUFBc0IsT0FBVjlxQixFQUNaaXRCLEVBQWlCanRCLEdBQVVBLEVBQzNCK3FCLEVBQWNsSixHQUFTN2hCLEdBRXZCaXJCLEVBQWU3SCxJQUFVL2YsRUFDekI2bkIsRUFBc0IsT0FBVjlILEVBQ1orSCxFQUFpQi9ILEdBQVVBLEVBQzNCZ0ksRUFBY3ZKLEdBQVN1QixHQUUzQixJQUFNOEgsSUFBY0UsSUFBZ0JMLEdBQWUvcUIsRUFBUW9qQixHQUN0RDJILEdBQWVFLEdBQWdCRSxJQUFtQkQsSUFBY0UsR0FDaEVOLEdBQWFHLEdBQWdCRSxJQUM1QjZCLEdBQWdCN0IsSUFDakI4QixFQUNILE9BQVEsRUFFVixJQUFNbkMsSUFBY0MsSUFBZ0JLLEdBQWVwckIsRUFBUW9qQixHQUN0RGdJLEdBQWU0QixHQUFnQkMsSUFBbUJuQyxJQUFjQyxHQUNoRUcsR0FBYThCLEdBQWdCQyxJQUM1QmhDLEdBQWdCZ0MsSUFDakI5QixFQUNILE9BQVEsQ0FFWCxDQUNELE9BQU8sQ0FDUixDQXNERCxTQUFTK0IsR0FBWTFwQixFQUFNMnBCLEVBQVVDLEVBQVNDLEdBVTVDLElBVEEsSUFBSUMsR0FBYSxFQUNiQyxFQUFhL3BCLEVBQUtoRSxPQUNsQmd1QixFQUFnQkosRUFBUTV0QixPQUN4Qml1QixHQUFhLEVBQ2JDLEVBQWFQLEVBQVMzdEIsT0FDdEJtdUIsRUFBYzdWLEdBQVV5VixFQUFhQyxFQUFlLEdBQ3BEOXJCLEVBQVNyRCxHQUFNcXZCLEVBQWFDLEdBQzVCQyxHQUFlUCxJQUVWSSxFQUFZQyxHQUNuQmhzQixFQUFPK3JCLEdBQWFOLEVBQVNNLEdBRS9CLE9BQVNILEVBQVlFLElBQ2ZJLEdBQWVOLEVBQVlDLEtBQzdCN3JCLEVBQU8wckIsRUFBUUUsSUFBYzlwQixFQUFLOHBCLElBR3RDLEtBQU9LLEtBQ0xqc0IsRUFBTytyQixLQUFlanFCLEVBQUs4cEIsS0FFN0IsT0FBTzVyQixDQUNSLENBYUQsU0FBU21zQixHQUFpQnJxQixFQUFNMnBCLEVBQVVDLEVBQVNDLEdBV2pELElBVkEsSUFBSUMsR0FBYSxFQUNiQyxFQUFhL3BCLEVBQUtoRSxPQUNsQnN1QixHQUFnQixFQUNoQk4sRUFBZ0JKLEVBQVE1dEIsT0FDeEJ1dUIsR0FBYyxFQUNkQyxFQUFjYixFQUFTM3RCLE9BQ3ZCbXVCLEVBQWM3VixHQUFVeVYsRUFBYUMsRUFBZSxHQUNwRDlyQixFQUFTckQsR0FBTXN2QixFQUFjSyxHQUM3QkosR0FBZVAsSUFFVkMsRUFBWUssR0FDbkJqc0IsRUFBTzRyQixHQUFhOXBCLEVBQUs4cEIsR0FHM0IsSUFEQSxJQUFJaGQsRUFBU2dkLElBQ0pTLEVBQWFDLEdBQ3BCdHNCLEVBQU80TyxFQUFTeWQsR0FBY1osRUFBU1ksR0FFekMsT0FBU0QsRUFBZU4sSUFDbEJJLEdBQWVOLEVBQVlDLEtBQzdCN3JCLEVBQU80TyxFQUFTOGMsRUFBUVUsSUFBaUJ0cUIsRUFBSzhwQixNQUdsRCxPQUFPNXJCLENBQ1IsQ0FVRCxTQUFTNmEsR0FBVS9ULEVBQVE2RyxHQUN6QixJQUFJbE0sR0FBUyxFQUNUM0QsRUFBU2dKLEVBQU9oSixPQUdwQixJQURBNlAsSUFBVUEsRUFBUWhSLEdBQU1tQixNQUNmMkQsRUFBUTNELEdBQ2Y2UCxFQUFNbE0sR0FBU3FGLEVBQU9yRixHQUV4QixPQUFPa00sQ0FDUixDQVlELFNBQVM4TixHQUFXM1UsRUFBUTRKLEVBQU9YLEVBQVF1TSxHQUN6QyxJQUFJaVEsR0FBU3hjLEVBQ2JBLElBQVdBLEVBQVMsQ0FBQSxHQUtwQixJQUhBLElBQUl0TyxHQUFTLEVBQ1QzRCxFQUFTNFMsRUFBTTVTLFNBRVYyRCxFQUFRM0QsR0FBUSxDQUN2QixJQUFJd1IsRUFBTW9CLEVBQU1qUCxHQUVaMGtCLEVBQVc3SixFQUNYQSxFQUFXdk0sRUFBT1QsR0FBTXhJLEVBQU93SSxHQUFNQSxFQUFLUyxFQUFRakosR0FDbERuRixFQUVBd2tCLElBQWF4a0IsSUFDZndrQixFQUFXcmYsRUFBT3dJLElBRWhCaWQsRUFDRnJSLEdBQWdCbkwsRUFBUVQsRUFBSzZXLEdBRTdCaEwsR0FBWXBMLEVBQVFULEVBQUs2VyxFQUU1QixDQUNELE9BQU9wVyxDQUNSLENBa0NELFNBQVN5YyxHQUFpQjVlLEVBQVE2ZSxHQUNoQyxPQUFnQnJkLFNBQUFBLEVBQVl2QixHQUMxQixJQUFJTCxFQUFPMEssR0FBUTlJLEdBQWMxQixHQUFrQjROLEdBQy9DeE4sRUFBYzJlLEVBQWNBLElBQWdCLENBQUUsRUFFbEQsT0FBT2pmLEVBQUs0QixFQUFZeEIsRUFBUWlaLEdBQVloWixFQUFVLEdBQUlDLEVBQ2xFLENBQ0ssQ0FTRCxTQUFTNGUsR0FBZUMsR0FDdEIsT0FBTzVFLElBQVMsU0FBU2hZLEVBQVE2YyxHQUMvQixJQUFJbnJCLEdBQVMsRUFDVDNELEVBQVM4dUIsRUFBUTl1QixPQUNqQndlLEVBQWF4ZSxFQUFTLEVBQUk4dUIsRUFBUTl1QixFQUFTLEdBQUs2RCxFQUNoRGtyQixFQUFRL3VCLEVBQVMsRUFBSTh1QixFQUFRLEdBQUtqckIsRUFXdEMsSUFUQTJhLEVBQWNxUSxFQUFTN3VCLE9BQVMsR0FBMEIsbUJBQWR3ZSxHQUN2Q3hlLElBQVV3ZSxHQUNYM2EsRUFFQWtyQixHQUFTQyxHQUFlRixFQUFRLEdBQUlBLEVBQVEsR0FBSUMsS0FDbER2USxFQUFheGUsRUFBUyxFQUFJNkQsRUFBWTJhLEVBQ3RDeGUsRUFBUyxHQUVYaVMsRUFBU3ZULEdBQU91VCxLQUNQdE8sRUFBUTNELEdBQVEsQ0FDdkIsSUFBSWdKLEVBQVM4bEIsRUFBUW5yQixHQUNqQnFGLEdBQ0Y2bEIsRUFBUzVjLEVBQVFqSixFQUFRckYsRUFBTzZhLEVBRW5DLENBQ0QsT0FBT3ZNLENBQ2YsR0FDSyxDQVVELFNBQVM4UCxHQUFleFEsRUFBVUksR0FDaEMsT0FBTyxTQUFTTCxFQUFZdkIsR0FDMUIsR0FBa0IsTUFBZHVCLEVBQ0YsT0FBT0EsRUFFVCxJQUFLcVcsR0FBWXJXLEdBQ2YsT0FBT0MsRUFBU0QsRUFBWXZCLEdBTTlCLElBSkEsSUFBSS9QLEVBQVNzUixFQUFXdFIsT0FDcEIyRCxFQUFRZ08sRUFBWTNSLEdBQVUsRUFDOUJpdkIsRUFBV3Z3QixHQUFPNFMsSUFFZEssRUFBWWhPLE1BQVlBLEVBQVEzRCxLQUNhLElBQS9DK1AsRUFBU2tmLEVBQVN0ckIsR0FBUUEsRUFBT3NyQixLQUl2QyxPQUFPM2QsQ0FDZixDQUNLLENBU0QsU0FBU3NSLEdBQWNqUixHQUNyQixPQUFPLFNBQVNNLEVBQVFsQyxFQUFVcVQsR0FNaEMsSUFMQSxJQUFJemYsR0FBUyxFQUNUc3JCLEVBQVd2d0IsR0FBT3VULEdBQ2xCVyxFQUFRd1EsRUFBU25SLEdBQ2pCalMsRUFBUzRTLEVBQU01UyxPQUVaQSxLQUFVLENBQ2YsSUFBSXdSLEVBQU1vQixFQUFNakIsRUFBWTNSLElBQVcyRCxHQUN2QyxJQUErQyxJQUEzQ29NLEVBQVNrZixFQUFTemQsR0FBTUEsRUFBS3lkLEdBQy9CLEtBRUgsQ0FDRCxPQUFPaGQsQ0FDZixDQUNLLENBOEJELFNBQVNpZCxHQUFnQkMsR0FDdkIsT0FBTyxTQUFTNWMsR0FHZCxJQUFJVSxFQUFhTyxHQUZqQmpCLEVBQVNxRCxHQUFTckQsSUFHZGtDLEdBQWNsQyxHQUNkMU8sRUFFQTBQLEVBQU1OLEVBQ05BLEVBQVcsR0FDWFYsRUFBT3VDLE9BQU8sR0FFZHNhLEVBQVduYyxFQUNYa2EsR0FBVWxhLEVBQVksR0FBR3ZHLEtBQUssSUFDOUI2RixFQUFPbFIsTUFBTSxHQUVqQixPQUFPa1MsRUFBSTRiLEtBQWdCQyxDQUNuQyxDQUNLLENBU0QsU0FBU0MsR0FBaUJocUIsR0FDeEIsT0FBZ0JrTixTQUFBQSxHQUNkLE9BQU94QixHQUFZdWUsR0FBTUMsR0FBT2hkLEdBQVFFLFFBQVE1RixHQUFRLEtBQU14SCxFQUFVLEdBQ2hGLENBQ0ssQ0FVRCxTQUFTbXFCLEdBQVc5UCxHQUNsQixPQUFPLFdBSUwsSUFBSTFiLEVBQU9qRSxVQUNYLE9BQVFpRSxFQUFLaEUsUUFDWCxLQUFNLEVBQUUsT0FBTyxJQUFJMGYsRUFDbkIsS0FBTSxFQUFFLE9BQU8sSUFBSUEsRUFBSzFiLEVBQUssSUFDN0IsS0FBSyxFQUFHLE9BQVcsSUFBQTBiLEVBQUsxYixFQUFLLEdBQUlBLEVBQUssSUFDdEMsS0FBTSxFQUFFLE9BQU8sSUFBSTBiLEVBQUsxYixFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxJQUMvQyxLQUFLLEVBQUcsT0FBVyxJQUFBMGIsRUFBSzFiLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssSUFDeEQsS0FBSyxFQUFHLE9BQVcsSUFBQTBiLEVBQUsxYixFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssSUFDakUsS0FBTSxFQUFFLE9BQU8sSUFBSTBiLEVBQUsxYixFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxJQUMxRSxLQUFNLEVBQUUsT0FBTyxJQUFJMGIsRUFBSzFiLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLEdBQUlBLEVBQUssSUFFckYsSUFBSXlyQixFQUFjalYsR0FBV2tGLEVBQUszZ0IsV0FDOUJtRCxFQUFTd2QsRUFBS3pmLE1BQU13dkIsRUFBYXpyQixHQUlyQyxPQUFPMFcsR0FBU3hZLEdBQVVBLEVBQVN1dEIsQ0FDM0MsQ0FDSyxDQThDRCxTQUFTQyxHQUFXQyxHQUNsQixPQUFnQnJlLFNBQUFBLEVBQVlsQixFQUFXc0IsR0FDckMsSUFBSXVkLEVBQVd2d0IsR0FBTzRTLEdBQ3RCLElBQUtxVyxHQUFZclcsR0FBYSxDQUM1QixJQUFJdkIsRUFBV2daLEdBQVkzWSxFQUFXLEdBQ3RDa0IsRUFBYTBFLEdBQUsxRSxHQUNsQmxCLEVBQVksU0FBU29CLEdBQU8sT0FBT3pCLEVBQVNrZixFQUFTemQsR0FBTUEsRUFBS3lkLEdBQ2pFLENBQ0QsSUFBSXRyQixFQUFRZ3NCLEVBQWNyZSxFQUFZbEIsRUFBV3NCLEdBQ2pELE9BQU8vTixHQUFTLEVBQUlzckIsRUFBU2xmLEVBQVd1QixFQUFXM04sR0FBU0EsR0FBU0UsQ0FDN0UsQ0FDSyxDQVNELFNBQVMrckIsR0FBV2plLEdBQ2xCLE9BQU9rZSxJQUFTLFNBQVNDLEdBQ3ZCLElBQUk5dkIsRUFBUzh2QixFQUFNOXZCLE9BQ2YyRCxFQUFRM0QsRUFDUit2QixFQUFTelYsR0FBY3ZiLFVBQVVpeEIsS0FLckMsSUFISXJlLEdBQ0ZtZSxFQUFNL1csVUFFRHBWLEtBQVMsQ0FDZCxJQUFJK0wsRUFBT29nQixFQUFNbnNCLEdBQ2pCLEdBQW1CLG1CQUFSK0wsRUFDVCxNQUFVLElBQUF2USxHQUFVOEcsR0FFdEIsR0FBSThwQixJQUFXRSxHQUFnQyxXQUFyQkMsR0FBWXhnQixHQUNwQyxJQUFJdWdCLEVBQVUsSUFBSTNWLEdBQWMsSUFBSSxFQUV2QyxDQUVELElBREEzVyxFQUFRc3NCLEVBQVV0c0IsRUFBUTNELElBQ2pCMkQsRUFBUTNELEdBQVEsQ0FHdkIsSUFBSW13QixFQUFXRCxHQUZmeGdCLEVBQU9vZ0IsRUFBTW5zQixJQUdUc1ksRUFBbUIsV0FBWmtVLEVBQXdCQyxHQUFRMWdCLEdBQVE3TCxFQU1qRG9zQixFQUpFaFUsR0FBUW9VLEdBQVdwVSxFQUFLLEtBQ2YsS0FBUEEsRUFBSyxLQUNKQSxFQUFLLEdBQUdqYyxRQUFxQixHQUFYaWMsRUFBSyxHQUVsQmdVLEVBQVFDLEdBQVlqVSxFQUFLLEtBQUtoYyxNQUFNZ3dCLEVBQVNoVSxFQUFLLElBRWxDLEdBQWZ2TSxFQUFLMVAsUUFBZXF3QixHQUFXM2dCLEdBQ3RDdWdCLEVBQVFFLEtBQ1JGLEVBQVFELEtBQUt0Z0IsRUFFcEIsQ0FDRCxPQUFrQixXQUNoQixJQUFJMUwsRUFBT2pFLFVBQ1BTLEVBQVF3RCxFQUFLLEdBRWpCLEdBQUlpc0IsR0FBMEIsR0FBZmpzQixFQUFLaEUsUUFBZW9hLEdBQVE1WixHQUN6QyxPQUFPeXZCLEVBQVFLLE1BQU05dkIsR0FBT0EsUUFLOUIsSUFIQSxJQUFJbUQsRUFBUSxFQUNSekIsRUFBU2xDLEVBQVM4dkIsRUFBTW5zQixHQUFPMUQsTUFBTVgsS0FBTTBFLEdBQVF4RCxJQUU5Q21ELEVBQVEzRCxHQUNma0MsRUFBUzR0QixFQUFNbnNCLEdBQU8xRSxLQUFLSyxLQUFNNEMsR0FFbkMsT0FBT0EsQ0FDakIsQ0FDQSxHQUNLLENBcUJELFNBQVNxdUIsR0FBYTdnQixFQUFNNk8sRUFBUzVPLEVBQVNnZSxFQUFVQyxFQUFTNEMsRUFBZUMsRUFBY0MsRUFBUUMsRUFBS0MsR0FDekcsSUFBSUMsRUFBUXRTLEVBQVVoWSxFQUNsQnVxQixFQTVpS2EsRUE0aUtKdlMsRUFDVHdTLEVBNWlLaUIsRUE0aUtMeFMsRUFDWnNQLEVBQXVCbUQsR0FBWHpTLEVBQ1owUyxFQXRpS2EsSUFzaUtKMVMsRUFDVG1CLEVBQU9xUixFQUFZbHRCLEVBQVkyckIsR0FBVzlmLEdBNkM5QyxPQTNDQSxTQUFTdWdCLElBS1AsSUFKQSxJQUFJandCLEVBQVNELFVBQVVDLE9BQ25CZ0UsRUFBT25GLEdBQU1tQixHQUNiMkQsRUFBUTNELEVBRUwyRCxLQUNMSyxFQUFLTCxHQUFTNUQsVUFBVTRELEdBRTFCLEdBQUlrcUIsRUFDRixJQUFJM1osRUFBY2dkLEdBQVVqQixHQUN4QmtCLEVBdmhJWixTQUFzQnRoQixFQUFPcUUsR0FJM0IsSUFIQSxJQUFJbFUsRUFBUzZQLEVBQU03UCxPQUNma0MsRUFBUyxFQUVObEMsS0FDRDZQLEVBQU03UCxLQUFZa1UsS0FDbEJoUyxFQUdOLE9BQU9BLENBQ1IsQ0E2Z0kwQmt2QixDQUFhcHRCLEVBQU1rUSxHQVN4QyxHQVBJeVosSUFDRjNwQixFQUFPMHBCLEdBQVkxcEIsRUFBTTJwQixFQUFVQyxFQUFTQyxJQUUxQzJDLElBQ0Z4c0IsRUFBT3FxQixHQUFpQnJxQixFQUFNd3NCLEVBQWVDLEVBQWM1QyxJQUU3RDd0QixHQUFVbXhCLEVBQ050RCxHQUFhN3RCLEVBQVM0d0IsRUFBTyxDQUMvQixJQUFJUyxFQUFhcGQsR0FBZWpRLEVBQU1rUSxHQUN0QyxPQUFPb2QsR0FDTDVoQixFQUFNNk8sRUFBU2dTLEdBQWNOLEVBQVEvYixZQUFhdkUsRUFDbEQzTCxFQUFNcXRCLEVBQVlYLEVBQVFDLEVBQUtDLEVBQVE1d0IsRUFFMUMsQ0FDRCxJQUFJeXZCLEVBQWNxQixFQUFTbmhCLEVBQVVyUSxLQUNqQzJFLEVBQUs4c0IsRUFBWXRCLEVBQVkvZixHQUFRQSxFQWN6QyxPQVpBMVAsRUFBU2dFLEVBQUtoRSxPQUNWMHdCLEVBQ0Yxc0IsRUFnNENOLFNBQWlCNkwsRUFBT2dhLEdBQ3RCLElBQUkwSCxFQUFZMWhCLEVBQU03UCxPQUNsQkEsRUFBU3dZLEdBQVVxUixFQUFRN3BCLE9BQVF1eEIsR0FDbkNDLEVBQVd6VSxHQUFVbE4sR0FFekIsS0FBTzdQLEtBQVUsQ0FDZixJQUFJMkQsRUFBUWttQixFQUFRN3BCLEdBQ3BCNlAsRUFBTTdQLEdBQVUwYyxHQUFRL1ksRUFBTzR0QixHQUFhQyxFQUFTN3RCLEdBQVNFLENBQy9ELENBQ0QsT0FBT2dNLENBQ1IsQ0ExNENZNGhCLENBQVF6dEIsRUFBTTBzQixHQUNaTyxHQUFVanhCLEVBQVMsR0FDNUJnRSxFQUFLK1UsVUFFSDhYLEdBQVNGLEVBQU0zd0IsSUFDakJnRSxFQUFLaEUsT0FBUzJ3QixHQUVacnhCLE1BQVFBLE9BQVMwTyxJQUFRMU8sZ0JBQWdCMndCLElBQzNDaHNCLEVBQUt5YixHQUFROFAsR0FBV3ZyQixJQUVuQkEsRUFBR2hFLE1BQU13dkIsRUFBYXpyQixFQUM5QixDQUVGLENBVUQsU0FBUzB0QixHQUFlNWhCLEVBQVE2aEIsR0FDOUIsT0FBZ0IxZixTQUFBQSxFQUFRbEMsR0FDdEIsT0FoL0RKLFNBQXNCa0MsRUFBUW5DLEVBQVFDLEVBQVVDLEdBSTlDLE9BSEFnUyxHQUFXL1AsR0FBUSxTQUFTelIsRUFBT2dSLEVBQUtTLEdBQ3RDbkMsRUFBT0UsRUFBYUQsRUFBU3ZQLEdBQVFnUixFQUFLUyxFQUNsRCxJQUNhakMsQ0FDUixDQTIrRFU0aEIsQ0FBYTNmLEVBQVFuQyxFQUFRNmhCLEVBQVc1aEIsR0FBVyxDQUFFLEVBQ3BFLENBQ0ssQ0FVRCxTQUFTOGhCLEdBQW9CQyxFQUFVQyxHQUNyQyxPQUFnQnZ4QixTQUFBQSxFQUFPb2pCLEdBQ3JCLElBQUkxaEIsRUFDSixHQUFJMUIsSUFBVXFELEdBQWErZixJQUFVL2YsRUFDbkMsT0FBT2t1QixFQUtULEdBSEl2eEIsSUFBVXFELElBQ1ozQixFQUFTMUIsR0FFUG9qQixJQUFVL2YsRUFBVyxDQUN2QixHQUFJM0IsSUFBVzJCLEVBQ2IsT0FBTytmLEVBRVcsaUJBQVRwakIsR0FBcUMsaUJBQVRvakIsR0FDckNwakIsRUFBUXdyQixHQUFheHJCLEdBQ3JCb2pCLEVBQVFvSSxHQUFhcEksS0FFckJwakIsRUFBUXVyQixHQUFhdnJCLEdBQ3JCb2pCLEVBQVFtSSxHQUFhbkksSUFFdkIxaEIsRUFBUzR2QixFQUFTdHhCLEVBQU9vakIsRUFDMUIsQ0FDRCxPQUFPMWhCLENBQ2YsQ0FDSyxDQVNELFNBQVM4dkIsR0FBV0MsR0FDbEIsT0FBT3BDLElBQVMsU0FBU2hILEdBRXZCLE9BREFBLEVBQVlsWSxHQUFTa1ksRUFBV25XLEdBQVVxVyxPQUNuQ2tCLElBQVMsU0FBU2ptQixHQUN2QixJQUFJMkwsRUFBVXJRLEtBQ2QsT0FBTzJ5QixFQUFVcEosR0FBVyxTQUFTOVksR0FDbkMsT0FBTzlQLEdBQU04UCxFQUFVSixFQUFTM0wsRUFDNUMsR0FDQSxHQUNBLEdBQ0ssQ0FXRCxTQUFTa3VCLEdBQWNseUIsRUFBUW15QixHQUc3QixJQUFJQyxHQUZKRCxFQUFRQSxJQUFVdHVCLEVBQVksSUFBTW1vQixHQUFhbUcsSUFFekJueUIsT0FDeEIsR0FBSW95QixFQUFjLEVBQ2hCLE9BQU9BLEVBQWNwSSxHQUFXbUksRUFBT255QixHQUFVbXlCLEVBRW5ELElBQUlqd0IsRUFBUzhuQixHQUFXbUksRUFBT3phLEdBQVcxWCxFQUFTc1UsR0FBVzZkLEtBQzlELE9BQU8zZSxHQUFXMmUsR0FDZGhGLEdBQVUxWSxHQUFjdlMsR0FBUyxFQUFHbEMsR0FBUTBNLEtBQUssSUFDakR4SyxFQUFPYixNQUFNLEVBQUdyQixFQUNyQixDQTRDRCxTQUFTcXlCLEdBQVkxZ0IsR0FDbkIsT0FBTyxTQUFTdVksRUFBT1csRUFBS3lILEdBYTFCLE9BWklBLEdBQXVCLGlCQUFSQSxHQUFvQnRELEdBQWU5RSxFQUFPVyxFQUFLeUgsS0FDaEV6SCxFQUFNeUgsRUFBT3p1QixHQUdmcW1CLEVBQVFxSSxHQUFTckksR0FDYlcsSUFBUWhuQixHQUNWZ25CLEVBQU1YLEVBQ05BLEVBQVEsR0FFUlcsRUFBTTBILEdBQVMxSCxHQTU3Q3JCLFNBQW1CWCxFQUFPVyxFQUFLeUgsRUFBTTNnQixHQUtuQyxJQUpBLElBQUloTyxHQUFTLEVBQ1QzRCxFQUFTc1ksR0FBVVosSUFBWW1ULEVBQU1YLElBQVVvSSxHQUFRLElBQUssR0FDNURwd0IsRUFBU3JELEdBQU1tQixHQUVaQSxLQUNMa0MsRUFBT3lQLEVBQVkzUixJQUFXMkQsR0FBU3VtQixFQUN2Q0EsR0FBU29JLEVBRVgsT0FBT3B3QixDQUNSLENBcTdDVXN3QixDQUFVdEksRUFBT1csRUFEeEJ5SCxFQUFPQSxJQUFTenVCLEVBQWFxbUIsRUFBUVcsRUFBTSxHQUFLLEVBQUswSCxHQUFTRCxHQUMzQjNnQixFQUMzQyxDQUNLLENBU0QsU0FBUzhnQixHQUEwQlgsR0FDakMsT0FBTyxTQUFTdHhCLEVBQU9vakIsR0FLckIsTUFKc0IsaUJBQVRwakIsR0FBcUMsaUJBQVRvakIsSUFDdkNwakIsRUFBUWt5QixHQUFTbHlCLEdBQ2pCb2pCLEVBQVE4TyxHQUFTOU8sSUFFWmtPLEVBQVN0eEIsRUFBT29qQixFQUMvQixDQUNLLENBbUJELFNBQVMwTixHQUFjNWhCLEVBQU02TyxFQUFTb1UsRUFBVXplLEVBQWF2RSxFQUFTZ2UsRUFBVUMsRUFBUzhDLEVBQVFDLEVBQUtDLEdBQ3BHLElBQUlnQyxFQXJ4S2MsRUFxeEtKclUsRUFNZEEsR0FBWXFVLEVBQVV2c0IsRUFBb0JDLEVBNXhLbEIsR0E2eEt4QmlZLEtBQWFxVSxFQUFVdHNCLEVBQTBCRCxNQUcvQ2tZLElBQVcsR0FFYixJQUFJc1UsRUFBVSxDQUNabmpCLEVBQU02TyxFQUFTNU8sRUFWQ2lqQixFQUFVakYsRUFBVzlwQixFQUZ0Qit1QixFQUFVaEYsRUFBVS9wQixFQUdkK3VCLEVBQVUvdUIsRUFBWThwQixFQUZ2QmlGLEVBQVUvdUIsRUFBWStwQixFQVl6QjhDLEVBQVFDLEVBQUtDLEdBRzVCMXVCLEVBQVN5d0IsRUFBUzF5QixNQUFNNEQsRUFBV2d2QixHQUt2QyxPQUpJeEMsR0FBVzNnQixJQUNib2pCLEdBQVE1d0IsRUFBUTJ3QixHQUVsQjN3QixFQUFPZ1MsWUFBY0EsRUFDZDZlLEdBQWdCN3dCLEVBQVF3TixFQUFNNk8sRUFDdEMsQ0FTRCxTQUFTeVUsR0FBWTdELEdBQ25CLElBQUl6ZixFQUFPNEYsR0FBSzZaLEdBQ2hCLE9BQU8sU0FBU2hSLEVBQVE4VSxHQUd0QixHQUZBOVUsRUFBU3VVLEdBQVN2VSxJQUNsQjhVLEVBQXlCLE1BQWJBLEVBQW9CLEVBQUl6YSxHQUFVMGEsR0FBVUQsR0FBWSxPQUNuRC9hLEdBQWVpRyxHQUFTLENBR3ZDLElBQUlnVixHQUFRdmQsR0FBU3VJLEdBQVUsS0FBS3ZKLE1BQU0sS0FJMUMsU0FEQXVlLEdBQVF2ZCxHQUZJbEcsRUFBS3lqQixFQUFLLEdBQUssTUFBUUEsRUFBSyxHQUFLRixLQUVuQixLQUFLcmUsTUFBTSxNQUN2QixHQUFLLE1BQVF1ZSxFQUFLLEdBQUtGLEdBQ3RDLENBQ0QsT0FBT3ZqQixFQUFLeU8sRUFDcEIsQ0FDSyxDQVNELElBQUkrTixHQUFjL1MsSUFBUSxFQUFJaEYsR0FBVyxJQUFJZ0YsR0FBSSxDQUFBLEVBQUcsS0FBSyxJQUFPMVMsRUFBbUIsU0FBU29LLEdBQzFGLE9BQU8sSUFBSXNJLEdBQUl0SSxFQUNyQixFQUZnRnVpQixHQVc1RSxTQUFTQyxHQUFjalEsR0FDckIsT0FBZ0JuUixTQUFBQSxHQUNkLElBQUk4TSxFQUFNQyxHQUFPL00sR0FDakIsT0FBSThNLEdBQU8xWCxFQUNGcU0sR0FBV3pCLEdBRWhCOE0sR0FBT3JYLEVBQ0YyTSxHQUFXcEMsR0FuNkkxQixTQUFxQkEsRUFBUVcsR0FDM0IsT0FBT2pDLEdBQVNpQyxHQUFPLFNBQVNwQixHQUM5QixNQUFPLENBQUNBLEVBQUtTLEVBQU9ULEdBQzFCLEdBQ0csQ0FpNklZOGhCLENBQVlyaEIsRUFBUW1SLEVBQVNuUixHQUM1QyxDQUNLLENBMkJELFNBQVNzaEIsR0FBVzdqQixFQUFNNk8sRUFBUzVPLEVBQVNnZSxFQUFVQyxFQUFTOEMsRUFBUUMsRUFBS0MsR0FDMUUsSUFBSUcsRUFsNEtpQixFQWs0S0x4UyxFQUNoQixJQUFLd1MsR0FBNEIsbUJBQVJyaEIsRUFDdkIsTUFBTSxJQUFJdlEsR0FBVThHLEdBRXRCLElBQUlqRyxFQUFTMnRCLEVBQVdBLEVBQVMzdEIsT0FBUyxFQVMxQyxHQVJLQSxJQUNIdWUsSUFBVyxHQUNYb1AsRUFBV0MsRUFBVS9wQixHQUV2QjhzQixFQUFNQSxJQUFROXNCLEVBQVk4c0IsRUFBTXJZLEdBQVU0YSxHQUFVdkMsR0FBTSxHQUMxREMsRUFBUUEsSUFBVS9zQixFQUFZK3NCLEVBQVFzQyxHQUFVdEMsR0FDaEQ1d0IsR0FBVTR0QixFQUFVQSxFQUFRNXRCLE9BQVMsRUFFakN1ZSxFQUFValksRUFBeUIsQ0FDckMsSUFBSWtxQixFQUFnQjdDLEVBQ2hCOEMsRUFBZTdDLEVBRW5CRCxFQUFXQyxFQUFVL3BCLENBQ3RCLENBQ0QsSUFBSW9ZLEVBQU84VSxFQUFZbHRCLEVBQVl1c0IsR0FBUTFnQixHQUV2Q21qQixFQUFVLENBQ1puakIsRUFBTTZPLEVBQVM1TyxFQUFTZ2UsRUFBVUMsRUFBUzRDLEVBQWVDLEVBQzFEQyxFQUFRQyxFQUFLQyxHQWtCZixHQWZJM1UsR0EyNkJOLFNBQW1CQSxFQUFNalQsR0FDdkIsSUFBSXVWLEVBQVV0QyxFQUFLLEdBQ2Z1WCxFQUFheHFCLEVBQU8sR0FDcEJ5cUIsRUFBYWxWLEVBQVVpVixFQUN2QnpTLEVBQVcwUyxFQUFjQyxJQUV6QkMsRUFDQUgsR0FBY2p0QixHQTUwTUEsR0E0ME1tQmdZLEdBQ2pDaVYsR0FBY2p0QixHQUFtQmdZLEdBQVcvWCxHQUFxQnlWLEVBQUssR0FBR2pjLFFBQVVnSixFQUFPLElBQ2hGLEtBQVZ3cUIsR0FBcUR4cUIsRUFBTyxHQUFHaEosUUFBVWdKLEVBQU8sSUE5ME1sRSxHQTgwTTBFdVYsRUFHNUYsSUFBTXdDLElBQVk0UyxFQUNoQixPQUFPMVgsRUFyMU1RLEVBdzFNYnVYLElBQ0Z2WCxFQUFLLEdBQUtqVCxFQUFPLEdBRWpCeXFCLEdBMzFNZSxFQTIxTURsVixFQUEyQixFQXoxTW5CLEdBNDFNeEIsSUFBSS9kLEVBQVF3SSxFQUFPLEdBQ25CLEdBQUl4SSxFQUFPLENBQ1QsSUFBSW10QixFQUFXMVIsRUFBSyxHQUNwQkEsRUFBSyxHQUFLMFIsRUFBV0QsR0FBWUMsRUFBVW50QixFQUFPd0ksRUFBTyxJQUFNeEksRUFDL0R5YixFQUFLLEdBQUswUixFQUFXMVosR0FBZWdJLEVBQUssR0FBSTlWLEdBQWU2QyxFQUFPLEVBQ3BFLEVBRUR4SSxFQUFRd0ksRUFBTyxNQUViMmtCLEVBQVcxUixFQUFLLEdBQ2hCQSxFQUFLLEdBQUswUixFQUFXVSxHQUFpQlYsRUFBVW50QixFQUFPd0ksRUFBTyxJQUFNeEksRUFDcEV5YixFQUFLLEdBQUswUixFQUFXMVosR0FBZWdJLEVBQUssR0FBSTlWLEdBQWU2QyxFQUFPLEtBR3JFeEksRUFBUXdJLEVBQU8sTUFFYmlULEVBQUssR0FBS3piLEdBR1JnekIsRUFBYWp0QixJQUNmMFYsRUFBSyxHQUFnQixNQUFYQSxFQUFLLEdBQWFqVCxFQUFPLEdBQUt3UCxHQUFVeUQsRUFBSyxHQUFJalQsRUFBTyxLQUdyRCxNQUFYaVQsRUFBSyxLQUNQQSxFQUFLLEdBQUtqVCxFQUFPLElBR25CaVQsRUFBSyxHQUFLalQsRUFBTyxHQUNqQmlULEVBQUssR0FBS3dYLENBR1gsQ0EvOUJHRyxDQUFVZixFQUFTNVcsR0FFckJ2TSxFQUFPbWpCLEVBQVEsR0FDZnRVLEVBQVVzVSxFQUFRLEdBQ2xCbGpCLEVBQVVrakIsRUFBUSxHQUNsQmxGLEVBQVdrRixFQUFRLEdBQ25CakYsRUFBVWlGLEVBQVEsS0FDbEJqQyxFQUFRaUMsRUFBUSxHQUFLQSxFQUFRLEtBQU9odkIsRUFDL0JrdEIsRUFBWSxFQUFJcmhCLEVBQUsxUCxPQUN0QnNZLEdBQVV1YSxFQUFRLEdBQUs3eUIsRUFBUSxRQUVyQnVlLElBQ1pBLElBQVcsSUFFUkEsR0E1NktZLEdBNDZLREEsRUFHZHJjLEVBNTZLZ0IsR0EyNktQcWMsR0FBOEJBLEdBQVduWSxFQXBnQnRELFNBQXFCc0osRUFBTTZPLEVBQVNxUyxHQUNsQyxJQUFJbFIsRUFBTzhQLEdBQVc5ZixHQXdCdEIsT0F0QkEsU0FBU3VnQixJQU1QLElBTEEsSUFBSWp3QixFQUFTRCxVQUFVQyxPQUNuQmdFLEVBQU9uRixHQUFNbUIsR0FDYjJELEVBQVEzRCxFQUNSa1UsRUFBY2dkLEdBQVVqQixHQUVyQnRzQixLQUNMSyxFQUFLTCxHQUFTNUQsVUFBVTRELEdBRTFCLElBQUlpcUIsRUFBVzV0QixFQUFTLEdBQUtnRSxFQUFLLEtBQU9rUSxHQUFlbFEsRUFBS2hFLEVBQVMsS0FBT2tVLEVBQ3pFLEdBQ0FELEdBQWVqUSxFQUFNa1EsR0FHekIsT0FEQWxVLEdBQVU0dEIsRUFBUTV0QixRQUNMNHdCLEVBQ0pVLEdBQ0w1aEIsRUFBTTZPLEVBQVNnUyxHQUFjTixFQUFRL2IsWUFBYXJRLEVBQ2xERyxFQUFNNHBCLEVBQVMvcEIsRUFBV0EsRUFBVytzQixFQUFRNXdCLEdBRzFDQyxHQURHWCxNQUFRQSxPQUFTME8sSUFBUTFPLGdCQUFnQjJ3QixFQUFXdlEsRUFBT2hRLEVBQ3BEcFEsS0FBTTBFLEVBQ3hCLENBRUYsQ0EyZVk2dkIsQ0FBWW5rQixFQUFNNk8sRUFBU3FTLEdBQzFCclMsR0FBV2xZLE9BQXFCa1ksR0FBcURxUCxFQUFRNXRCLE9BRzlGdXdCLEdBQWF0d0IsTUFBTTRELEVBQVdndkIsR0E5TzNDLFNBQXVCbmpCLEVBQU02TyxFQUFTNU8sRUFBU2dlLEdBQzdDLElBQUltRCxFQXRzS2EsRUFzc0tKdlMsRUFDVG1CLEVBQU84UCxHQUFXOWYsR0FrQnRCLE9BaEJBLFNBQVN1Z0IsSUFRUCxJQVBBLElBQUluQyxHQUFhLEVBQ2JDLEVBQWFodUIsVUFBVUMsT0FDdkJpdUIsR0FBYSxFQUNiQyxFQUFhUCxFQUFTM3RCLE9BQ3RCZ0UsRUFBT25GLEdBQU1xdkIsRUFBYUgsR0FDMUI5cEIsRUFBTTNFLE1BQVFBLE9BQVMwTyxJQUFRMU8sZ0JBQWdCMndCLEVBQVd2USxFQUFPaFEsSUFFNUR1ZSxFQUFZQyxHQUNuQmxxQixFQUFLaXFCLEdBQWFOLEVBQVNNLEdBRTdCLEtBQU9GLEtBQ0wvcEIsRUFBS2lxQixLQUFlbHVCLFlBQVkrdEIsR0FFbEMsT0FBTzd0QixHQUFNZ0UsRUFBSTZzQixFQUFTbmhCLEVBQVVyUSxLQUFNMEUsRUFDM0MsQ0FFRixDQXVOWTh2QixDQUFjcGtCLEVBQU02TyxFQUFTNU8sRUFBU2dlLFFBSi9DLElBQUl6ckIsRUFobUJSLFNBQW9Cd04sRUFBTTZPLEVBQVM1TyxHQUNqQyxJQUFJbWhCLEVBOTBKYSxFQTgwSkp2UyxFQUNUbUIsRUFBTzhQLEdBQVc5ZixHQU10QixPQUpBLFNBQVN1Z0IsSUFFUCxPQURVM3dCLE1BQVFBLE9BQVMwTyxJQUFRMU8sZ0JBQWdCMndCLEVBQVd2USxFQUFPaFEsR0FDM0R6UCxNQUFNNndCLEVBQVNuaEIsRUFBVXJRLEtBQU1TLFVBQzFDLENBRUYsQ0F1bEJnQmcwQixDQUFXcmtCLEVBQU02TyxFQUFTNU8sR0FTekMsT0FBT29qQixJQURNOVcsRUFBT3VPLEdBQWNzSSxJQUNKNXdCLEVBQVEyd0IsR0FBVW5qQixFQUFNNk8sRUFDdkQsQ0FjRCxTQUFTeVYsR0FBdUIxVyxFQUFVc0osRUFBVXBWLEVBQUtTLEdBQ3ZELE9BQUlxTCxJQUFhelosR0FDWnNaLEdBQUdHLEVBQVU3SCxHQUFZakUsTUFBVXhTLEdBQWVDLEtBQUtnVCxFQUFRVCxHQUMzRG9WLEVBRUZ0SixDQUNSLENBZ0JELFNBQVMyVyxHQUFvQjNXLEVBQVVzSixFQUFVcFYsRUFBS1MsRUFBUWpKLEVBQVF5VixHQU9wRSxPQU5JL0QsR0FBUzRDLElBQWE1QyxHQUFTa00sS0FFakNuSSxFQUFNckssSUFBSXdTLEVBQVV0SixHQUNwQjJLLEdBQVUzSyxFQUFVc0osRUFBVS9pQixFQUFXb3dCLEdBQXFCeFYsR0FDOURBLEVBQWMsT0FBRW1JLElBRVh0SixDQUNSLENBV0QsU0FBUzRXLEdBQWdCMXpCLEdBQ3ZCLE9BQU9nb0IsR0FBY2hvQixHQUFTcUQsRUFBWXJELENBQzNDLENBZUQsU0FBUzJrQixHQUFZdFYsRUFBTytULEVBQU9yRixFQUFTQyxFQUFZbUcsRUFBV2xHLEdBQ2pFLElBQUk4RyxFQXBnTG1CLEVBb2dMUGhILEVBQ1pnVCxFQUFZMWhCLEVBQU03UCxPQUNsQmlrQixFQUFZTCxFQUFNNWpCLE9BRXRCLEdBQUl1eEIsR0FBYXROLEtBQWVzQixHQUFhdEIsRUFBWXNOLEdBQ3ZELE9BQVksRUFHZCxJQUFJNEMsRUFBYTFWLEVBQU1QLElBQUlyTyxHQUN2Qm9XLEVBQWF4SCxFQUFNUCxJQUFJMEYsR0FDM0IsR0FBSXVRLEdBQWNsTyxFQUNoQixPQUFPa08sR0FBY3ZRLEdBQVNxQyxHQUFjcFcsRUFFOUMsSUFBSWxNLEdBQVMsRUFDVHpCLEdBQVMsRUFDVG9pQixFQWxoTHFCLEVBa2hMYi9GLEVBQW9DLElBQUkxQyxHQUFXaFksRUFNL0QsSUFKQTRhLEVBQU1ySyxJQUFJdkUsRUFBTytULEdBQ2pCbkYsRUFBTXJLLElBQUl3UCxFQUFPL1QsS0FHUmxNLEVBQVE0dEIsR0FBVyxDQUMxQixJQUFJNkMsRUFBV3ZrQixFQUFNbE0sR0FDakJ3aUIsRUFBV3ZDLEVBQU1qZ0IsR0FFckIsR0FBSTZhLEVBQ0YsSUFBSTRILEVBQVdiLEVBQ1gvRyxFQUFXMkgsRUFBVWlPLEVBQVV6d0IsRUFBT2lnQixFQUFPL1QsRUFBTzRPLEdBQ3BERCxFQUFXNFYsRUFBVWpPLEVBQVV4aUIsRUFBT2tNLEVBQU8rVCxFQUFPbkYsR0FFMUQsR0FBSTJILElBQWF2aUIsRUFBVyxDQUMxQixHQUFJdWlCLEVBQ0YsU0FFRmxrQixHQUFTLEVBQ1QsS0FDRCxDQUVELEdBQUlvaUIsR0FDRixJQUFLcFQsR0FBVTBTLEdBQU8sU0FBU3VDLEVBQVVqQyxHQUNuQyxJQUFLclIsR0FBU3lSLEVBQU1KLEtBQ2ZrUSxJQUFhak8sR0FBWXhCLEVBQVV5UCxFQUFVak8sRUFBVTVILEVBQVNDLEVBQVlDLElBQy9FLE9BQU82RixFQUFLeGpCLEtBQUtvakIsRUFFbkMsSUFBa0IsQ0FDTmhpQixHQUFTLEVBQ1QsS0FDRCxPQUNJLEdBQ0RreUIsSUFBYWpPLElBQ1h4QixFQUFVeVAsRUFBVWpPLEVBQVU1SCxFQUFTQyxFQUFZQyxHQUNwRCxDQUNMdmMsR0FBUyxFQUNULEtBQ0QsQ0FDRixDQUdELE9BRkF1YyxFQUFjLE9BQUU1TyxHQUNoQjRPLEVBQWMsT0FBRW1GLEdBQ1QxaEIsQ0FDUixDQXlLRCxTQUFTMnRCLEdBQVNuZ0IsR0FDaEIsT0FBT3lhLEdBQVlDLEdBQVMxYSxFQUFNN0wsRUFBV3d3QixJQUFVM2tCLEVBQU8sR0FDL0QsQ0FTRCxTQUFTK1EsR0FBV3hPLEdBQ2xCLE9BQU9rUixHQUFlbFIsRUFBUStELEdBQU13SixHQUNyQyxDQVVELFNBQVNnQixHQUFhdk8sR0FDcEIsT0FBT2tSLEdBQWVsUixFQUFRcU4sR0FBUUYsR0FDdkMsQ0FTRCxJQUFJZ1IsR0FBVzlXLEdBQWlCLFNBQVM1SixHQUN2QyxPQUFPNEosR0FBUTRFLElBQUl4TyxFQUN6QixFQUY2QjBqQixHQVd6QixTQUFTbEQsR0FBWXhnQixHQUtuQixJQUpBLElBQUl4TixFQUFVd04sRUFBSzBWLEtBQU8sR0FDdEJ2VixFQUFRMEosR0FBVXJYLEdBQ2xCbEMsRUFBU2hCLEdBQWVDLEtBQUtzYSxHQUFXclgsR0FBVTJOLEVBQU03UCxPQUFTLEVBRTlEQSxLQUFVLENBQ2YsSUFBSWljLEVBQU9wTSxFQUFNN1AsR0FDYnMwQixFQUFZclksRUFBS3ZNLEtBQ3JCLEdBQWlCLE1BQWI0a0IsR0FBcUJBLEdBQWE1a0IsRUFDcEMsT0FBT3VNLEVBQUttSixJQUVmLENBQ0QsT0FBT2xqQixDQUNSLENBU0QsU0FBU2d2QixHQUFVeGhCLEdBRWpCLE9BRGExUSxHQUFlQyxLQUFLaWIsR0FBUSxlQUFpQkEsR0FBU3hLLEdBQ3JEd0UsV0FDZixDQWFELFNBQVM2VSxLQUNQLElBQUk3bUIsRUFBU2dZLEdBQU9uSyxVQUFZQSxHQUVoQyxPQURBN04sRUFBU0EsSUFBVzZOLEdBQVdnWCxHQUFlN2tCLEVBQ3ZDbkMsVUFBVUMsT0FBU2tDLEVBQU9uQyxVQUFVLEdBQUlBLFVBQVUsSUFBTW1DLENBQ2hFLENBVUQsU0FBUzBmLEdBQVdqTyxFQUFLbkMsR0FDdkIsSUFnWWlCaFIsRUFDYit6QixFQWpZQXRZLEVBQU90SSxFQUFJbUksU0FDZixPQWlZZ0IsV0FEWnlZLEVBQUkxbUIsRUFEU3JOLEVBL1hBZ1IsS0FpWW1CLFVBQVIraUIsR0FBNEIsVUFBUkEsR0FBNEIsV0FBUkEsRUFDckQsY0FBVi96QixFQUNVLE9BQVZBLEdBbFlEeWIsRUFBbUIsaUJBQVB6SyxFQUFrQixTQUFXLFFBQ3pDeUssRUFBS3RJLEdBQ1YsQ0FTRCxTQUFTaVUsR0FBYTNWLEdBSXBCLElBSEEsSUFBSS9QLEVBQVM4VCxHQUFLL0QsR0FDZGpTLEVBQVNrQyxFQUFPbEMsT0FFYkEsS0FBVSxDQUNmLElBQUl3UixFQUFNdFAsRUFBT2xDLEdBQ2JRLEVBQVF5UixFQUFPVCxHQUVuQnRQLEVBQU9sQyxHQUFVLENBQUN3UixFQUFLaFIsRUFBT3VuQixHQUFtQnZuQixHQUNsRCxDQUNELE9BQU8wQixDQUNSLENBVUQsU0FBU2lWLEdBQVVsRixFQUFRVCxHQUN6QixJQUFJaFIsRUFseEpSLFNBQWtCeVIsRUFBUVQsR0FDeEIsT0FBaUIsTUFBVlMsRUFBaUJwTyxFQUFZb08sRUFBT1QsRUFDNUMsQ0FneEplZ2pCLENBQVN2aUIsRUFBUVQsR0FDN0IsT0FBT3NWLEdBQWF0bUIsR0FBU0EsRUFBUXFELENBQ3RDLENBb0NELElBQUkyYixHQUFjMUgsR0FBK0IsU0FBUzdGLEdBQ3hELE9BQWMsTUFBVkEsRUFDSyxJQUVUQSxFQUFTdlQsR0FBT3VULEdBQ1Q1QixHQUFZeUgsR0FBaUI3RixJQUFTLFNBQVNtTyxHQUNwRCxPQUFPeEosR0FBcUIzWCxLQUFLZ1QsRUFBUW1PLEVBQ2pELElBQ0EsRUFSeUNxVSxHQWlCakNyVixHQUFnQnRILEdBQStCLFNBQVM3RixHQUUxRCxJQURBLElBQUkvUCxFQUFTLEdBQ04rUCxHQUNMckIsR0FBVTFPLEVBQVFzZCxHQUFXdk4sSUFDN0JBLEVBQVN3RSxHQUFheEUsR0FFeEIsT0FBTy9QLENBQ2IsRUFQMkN1eUIsR0FnQm5DelYsR0FBU3NFLEdBMkViLFNBQVNvUixHQUFRemlCLEVBQVFuTixFQUFNNnZCLEdBTzdCLElBSkEsSUFBSWh4QixHQUFTLEVBQ1QzRCxHQUhKOEUsRUFBT21lLEdBQVNuZSxFQUFNbU4sSUFHSmpTLE9BQ2RrQyxHQUFTLElBRUp5QixFQUFRM0QsR0FBUSxDQUN2QixJQUFJd1IsRUFBTTBSLEdBQU1wZSxFQUFLbkIsSUFDckIsS0FBTXpCLEVBQW1CLE1BQVYrUCxHQUFrQjBpQixFQUFRMWlCLEVBQVFULElBQy9DLE1BRUZTLEVBQVNBLEVBQU9ULEVBQ2pCLENBQ0QsT0FBSXRQLEtBQVl5QixHQUFTM0QsRUFDaEJrQyxLQUVUbEMsRUFBbUIsTUFBVmlTLEVBQWlCLEVBQUlBLEVBQU9qUyxTQUNsQjQwQixHQUFTNTBCLElBQVcwYyxHQUFRbEwsRUFBS3hSLEtBQ2pEb2EsR0FBUW5JLElBQVdxSyxHQUFZckssR0FDbkMsQ0E0QkQsU0FBU2tOLEdBQWdCbE4sR0FDdkIsTUFBcUMsbUJBQXRCQSxFQUFPMVMsYUFBOEI4bkIsR0FBWXBWLEdBRTVELENBQUEsRUFEQXVJLEdBQVcvRCxHQUFheEUsR0FFN0IsQ0E0RUQsU0FBU3lRLEdBQWNsaUIsR0FDckIsT0FBTzRaLEdBQVE1WixJQUFVOGIsR0FBWTliLE9BQ2hDcVcsSUFBb0JyVyxHQUFTQSxFQUFNcVcsSUFDekMsQ0FVRCxTQUFTNkYsR0FBUWxjLEVBQU9SLEdBQ3RCLElBQUl1MEIsRUFBSTFtQixFQUFVck4sR0FHbEIsU0FGQVIsRUFBbUIsTUFBVkEsRUFBaUIwRyxFQUFtQjFHLEtBR2xDLFVBQVJ1MEIsR0FDVSxVQUFSQSxHQUFvQi9wQixHQUFTaUosS0FBS2pULEtBQ2hDQSxHQUFTLEdBQUtBLEVBQVEsR0FBSyxHQUFLQSxFQUFRUixDQUNoRCxDQVlELFNBQVNndkIsR0FBZXh1QixFQUFPbUQsRUFBT3NPLEdBQ3BDLElBQUt5SSxHQUFTekksR0FDWixTQUVGLElBQUlzaUIsRUFBSTFtQixFQUFVbEssR0FDbEIsU0FBWSxVQUFSNHdCLEVBQ0s1TSxHQUFZMVYsSUFBV3lLLEdBQVEvWSxFQUFPc08sRUFBT2pTLFFBQ3JDLFVBQVJ1MEIsR0FBb0I1d0IsS0FBU3NPLElBRTdCa0wsR0FBR2xMLEVBQU90TyxHQUFRbkQsRUFHNUIsQ0FVRCxTQUFTc25CLEdBQU10bkIsRUFBT3lSLEdBQ3BCLEdBQUltSSxHQUFRNVosR0FDVixTQUVGLElBQUkrekIsRUFBSTFtQixFQUFVck4sR0FDbEIsUUFBWSxVQUFSK3pCLEdBQTRCLFVBQVJBLEdBQTRCLFdBQVJBLEdBQy9CLE1BQVQvekIsSUFBaUI2aEIsR0FBUzdoQixNQUd2QjhJLEdBQWNtSyxLQUFLalQsS0FBVzZJLEdBQWFvSyxLQUFLalQsSUFDMUMsTUFBVnlSLEdBQWtCelIsS0FBUzlCLEdBQU91VCxHQUN0QyxDQXdCRCxTQUFTb2UsR0FBVzNnQixHQUNsQixJQUFJeWdCLEVBQVdELEdBQVl4Z0IsR0FDdkJrVSxFQUFRMUosR0FBT2lXLEdBRW5CLEdBQW9CLG1CQUFUdk0sS0FBeUJ1TSxLQUFZOVYsR0FBWXRiLFdBQzFELE9BQU8sRUFFVCxHQUFJMlEsSUFBU2tVLEVBQ1gsT0FBTyxFQUVULElBQUkzSCxFQUFPbVUsR0FBUXhNLEdBQ25CLFFBQVMzSCxHQUFRdk0sSUFBU3VNLEVBQUssRUFDaEMsRUE5U0lqRCxJQUFZZ0csR0FBTyxJQUFJaEcsR0FBUyxJQUFJNmIsWUFBWSxNQUFROXNCLEdBQ3hEa1IsSUFBTytGLEdBQU8sSUFBSS9GLEtBQVE1UixHQUMxQjZSLElBQVc4RixHQUFPOUYsR0FBUTRiLFlBQWN0dEIsR0FDeEMyUixJQUFPNkYsR0FBTyxJQUFJN0YsS0FBUXpSLEdBQzFCMFIsSUFBVzRGLEdBQU8sSUFBSTVGLEtBQVl2UixLQUNyQ21YLEdBQVMsU0FBU3hlLEdBQ2hCLElBQUkwQixFQUFTb2hCLEdBQVc5aUIsR0FDcEJrZixFQUFPeGQsR0FBVXFGLEVBQVkvRyxFQUFNakIsWUFBY3NFLEVBQ2pEa3hCLEVBQWFyVixFQUFPakcsR0FBU2lHLEdBQVEsR0FFekMsR0FBSXFWLEVBQ0YsT0FBUUEsR0FDTixLQUFLdmIsR0FBb0IsT0FBT3pSLEVBQ2hDLEtBQUsyUixHQUFlLE9BQU9yUyxFQUMzQixLQUFLc1MsR0FBbUIsT0FBT25TLEVBQy9CLEtBQUtvUyxHQUFlLE9BQU9sUyxFQUMzQixLQUFLbVMsR0FBbUIsT0FBT2hTLEVBR25DLE9BQU8zRixDQUNmLEdBOFNJLElBQUk4eUIsR0FBYXRmLEdBQWFxTixHQUFha1MsR0FTM0MsU0FBUzVOLEdBQVk3bUIsR0FDbkIsSUFBSWtmLEVBQU9sZixHQUFTQSxFQUFNakIsWUFHMUIsT0FBT2lCLEtBRnFCLG1CQUFSa2YsR0FBc0JBLEVBQUszZ0IsV0FBYzBXLEdBRzlELENBVUQsU0FBU3NTLEdBQW1Cdm5CLEdBQzFCLE9BQU9BLEdBQVVBLElBQVVrYSxHQUFTbGEsRUFDckMsQ0FXRCxTQUFTcW5CLEdBQXdCclcsRUFBS29WLEdBQ3BDLE9BQU8sU0FBUzNVLEdBQ2QsT0FBYyxNQUFWQSxJQUdHQSxFQUFPVCxLQUFTb1YsSUFDcEJBLElBQWEvaUIsR0FBYzJOLEtBQU85UyxHQUFPdVQsSUFDcEQsQ0FDSyxDQW9JRCxTQUFTbVksR0FBUzFhLEVBQU13YSxFQUFPblcsR0FFN0IsT0FEQW1XLEVBQVE1UixHQUFVNFIsSUFBVXJtQixFQUFhNkwsRUFBSzFQLE9BQVMsRUFBS2txQixFQUFPLGNBT2pFLElBTEEsSUFBSWxtQixFQUFPakUsVUFDUDRELEdBQVMsRUFDVDNELEVBQVNzWSxHQUFVdFUsRUFBS2hFLE9BQVNrcUIsRUFBTyxHQUN4Q3JhLEVBQVFoUixHQUFNbUIsS0FFVDJELEVBQVEzRCxHQUNmNlAsRUFBTWxNLEdBQVNLLEVBQUtrbUIsRUFBUXZtQixHQUU5QkEsR0FBUyxFQUVULElBREEsSUFBSXV4QixFQUFZcjJCLEdBQU1xckIsRUFBUSxLQUNyQnZtQixFQUFRdW1CLEdBQ2ZnTCxFQUFVdnhCLEdBQVNLLEVBQUtMLEdBRzFCLE9BREF1eEIsRUFBVWhMLEdBQVNuVyxFQUFVbEUsR0FDdEI1UCxHQUFNeVAsRUFBTXBRLEtBQU00MUIsRUFDakMsQ0FDSyxDQVVELFNBQVMveEIsR0FBTzhPLEVBQVFuTixHQUN0QixPQUFPQSxFQUFLOUUsT0FBUyxFQUFJaVMsRUFBUytRLEdBQVEvUSxFQUFRMlksR0FBVTlsQixFQUFNLEdBQUksR0FDdkUsQ0FnQ0QsU0FBU3NqQixHQUFRblcsRUFBUVQsR0FDdkIsSUFBWSxnQkFBUkEsR0FBZ0QsbUJBQWhCUyxFQUFPVCxLQUloQyxhQUFQQSxFQUlKLE9BQU9TLEVBQU9ULEVBQ2YsQ0FnQkQsSUFBSXNoQixHQUFVcUMsR0FBUzNLLElBVW5CL1MsR0FBYUQsSUFBaUIsU0FBUzlILEVBQU1rUixHQUMvQyxPQUFPNVMsR0FBS3lKLFdBQVcvSCxFQUFNa1IsRUFDbkMsRUFVUXVKLEdBQWNnTCxHQUFTMUssSUFZM0IsU0FBU3NJLEdBQWdCOUMsRUFBU21GLEVBQVc3VyxHQUMzQyxJQUFJdlYsRUFBVW9zQixFQUFZLEdBQzFCLE9BQU9qTCxHQUFZOEYsRUExYnJCLFNBQTJCam5CLEVBQVFxc0IsR0FDakMsSUFBSXIxQixFQUFTcTFCLEVBQVFyMUIsT0FDckIsSUFBS0EsRUFDSCxPQUFPZ0osRUFFVCxJQUFJdUwsRUFBWXZVLEVBQVMsRUFHekIsT0FGQXExQixFQUFROWdCLElBQWN2VSxFQUFTLEVBQUksS0FBTyxJQUFNcTFCLEVBQVE5Z0IsR0FDeEQ4Z0IsRUFBVUEsRUFBUTNvQixLQUFLMU0sRUFBUyxFQUFJLEtBQU8sS0FDcENnSixFQUFPeUosUUFBUTdJLEdBQWUsdUJBQXlCeXJCLEVBQVUsU0FDekUsQ0FpYjZCQyxDQUFrQnRzQixFQXFIaEQsU0FBMkJxc0IsRUFBUzlXLEdBT2xDLE9BTkF0TyxHQUFVcEosR0FBVyxTQUFTc3NCLEdBQzVCLElBQUkzeUIsRUFBUSxLQUFPMnlCLEVBQUssR0FDbkI1VSxFQUFVNFUsRUFBSyxLQUFRNWlCLEdBQWM4a0IsRUFBUzcwQixJQUNqRDYwQixFQUFRdjBCLEtBQUtOLEVBRXZCLElBQ2E2MEIsRUFBUW5NLE1BQ2hCLENBN0h1RHFNLENBdGpCeEQsU0FBd0J2c0IsR0FDdEIsSUFBSTBMLEVBQVExTCxFQUFPMEwsTUFBTTdLLElBQ3pCLE9BQU82SyxFQUFRQSxFQUFNLEdBQUdFLE1BQU05SyxJQUFrQixFQUNqRCxDQW1qQnlFMHJCLENBQWV4c0IsR0FBU3VWLElBQ2pHLENBV0QsU0FBUzRXLEdBQVN6bEIsR0FDaEIsSUFBSStsQixFQUFRLEVBQ1JDLEVBQWEsRUFFakIsT0FBTyxXQUNMLElBQUlDLEVBQVFqZCxLQUNSa2QsRUFwaU5LLElBb2lObUJELEVBQVFELEdBR3BDLEdBREFBLEVBQWFDLEVBQ1RDLEVBQVksR0FDZCxLQUFNSCxHQXppTkUsSUEwaU5OLE9BQU8xMUIsVUFBVSxRQUduQjAxQixFQUFRLEVBRVYsT0FBTy9sQixFQUFLelAsTUFBTTRELEVBQVc5RCxVQUNyQyxDQUNLLENBVUQsU0FBUytjLEdBQVlqTixFQUFPK0QsR0FDMUIsSUFBSWpRLEdBQVMsRUFDVDNELEVBQVM2UCxFQUFNN1AsT0FDZnVVLEVBQVl2VSxFQUFTLEVBR3pCLElBREE0VCxFQUFPQSxJQUFTL1AsRUFBWTdELEVBQVM0VCxJQUM1QmpRLEVBQVFpUSxHQUFNLENBQ3JCLElBQUlpaUIsRUFBT2paLEdBQVdqWixFQUFPNFEsR0FDekIvVCxFQUFRcVAsRUFBTWdtQixHQUVsQmhtQixFQUFNZ21CLEdBQVFobUIsRUFBTWxNLEdBQ3BCa00sRUFBTWxNLEdBQVNuRCxDQUNoQixDQUVELE9BREFxUCxFQUFNN1AsT0FBUzRULEVBQ1IvRCxDQUNSLENBU0QsSUFBSW9kLEdBdlRKLFNBQXVCdmQsR0FDckIsSUFBSXhOLEVBQVM0ekIsR0FBUXBtQixHQUFNLFNBQVM4QixHQUlsQyxPQWgwTWlCLE1BNnpNYnNCLEVBQU1jLE1BQ1JkLEVBQU0ySSxRQUVEakssQ0FDZixJQUVVc0IsRUFBUTVRLEVBQU80USxNQUNuQixPQUFPNVEsQ0FDUixDQTZTa0I2ekIsRUFBYyxTQUFTeGpCLEdBQ3hDLElBQUlyUSxFQUFTLEdBT2IsT0FONkIsS0FBekJxUSxFQUFPeWpCLFdBQVcsSUFDcEI5ekIsRUFBT3BCLEtBQUssSUFFZHlSLEVBQU9FLFFBQVFsSixJQUFZLFNBQVNtTCxFQUFPeUosRUFBUThYLEVBQU9DLEdBQ3hEaDBCLEVBQU9wQixLQUFLbTFCLEVBQVFDLEVBQVV6akIsUUFBUXhJLEdBQWMsTUFBU2tVLEdBQVV6SixFQUMvRSxJQUNheFMsQ0FDYixJQVNJLFNBQVNnaEIsR0FBTTFpQixHQUNiLEdBQW9CLGlCQUFUQSxHQUFxQjZoQixHQUFTN2hCLEdBQ3ZDLE9BQU9BLEVBRVQsSUFBSTBCLEVBQVUxQixFQUFRLEdBQ3RCLE1BQWtCLEtBQVYwQixHQUFrQixFQUFJMUIsSUFBVSxJQUFhLEtBQU8wQixDQUM3RCxDQVNELFNBQVN1WCxHQUFTL0osR0FDaEIsR0FBWSxNQUFSQSxFQUFjLENBQ2hCLElBQ0UsT0FBT2lHLEdBQWExVyxLQUFLeVEsRUFDbkMsQ0FBVSxNQUFPOU8sR0FBRyxDQUNaLElBQ0UsT0FBUThPLEVBQU8sRUFDekIsQ0FBVSxNQUFPOU8sR0FBRyxDQUNiLENBQ0QsTUFBTyxFQUNSLENBMkJELFNBQVMyWixHQUFhMFYsR0FDcEIsR0FBSUEsYUFBbUI1VixHQUNyQixPQUFPNFYsRUFBUWtHLFFBRWpCLElBQUlqMEIsRUFBUyxJQUFJb1ksR0FBYzJWLEVBQVFwVixZQUFhb1YsRUFBUWxWLFdBSTVELE9BSEE3WSxFQUFPNFksWUFBY2lDLEdBQVVrVCxFQUFRblYsYUFDdkM1WSxFQUFPOFksVUFBYWlWLEVBQVFqVixVQUM1QjlZLEVBQU8rWSxXQUFhZ1YsRUFBUWhWLFdBQ3JCL1ksQ0FDUixDQXFJRCxJQUFJazBCLEdBQWFuTSxJQUFTLFNBQVNwYSxFQUFPZ0IsR0FDeEMsT0FBTzBYLEdBQWtCMVksR0FDckJnUixHQUFlaFIsRUFBTzBTLEdBQVkxUixFQUFRLEVBQUcwWCxJQUFtQixJQUNoRSxFQUNWLElBNEJROE4sR0FBZXBNLElBQVMsU0FBU3BhLEVBQU9nQixHQUMxQyxJQUFJZCxFQUFXeVUsR0FBSzNULEdBSXBCLE9BSEkwWCxHQUFrQnhZLEtBQ3BCQSxFQUFXbE0sR0FFTjBrQixHQUFrQjFZLEdBQ3JCZ1IsR0FBZWhSLEVBQU8wUyxHQUFZMVIsRUFBUSxFQUFHMFgsSUFBbUIsR0FBT1EsR0FBWWhaLEVBQVUsSUFDN0YsRUFDVixJQXlCUXVtQixHQUFpQnJNLElBQVMsU0FBU3BhLEVBQU9nQixHQUM1QyxJQUFJSCxFQUFhOFQsR0FBSzNULEdBSXRCLE9BSEkwWCxHQUFrQjdYLEtBQ3BCQSxFQUFhN00sR0FFUjBrQixHQUFrQjFZLEdBQ3JCZ1IsR0FBZWhSLEVBQU8wUyxHQUFZMVIsRUFBUSxFQUFHMFgsSUFBbUIsR0FBTzFrQixFQUFXNk0sR0FDbEYsRUFDVixJQXFPSSxTQUFTNmxCLEdBQVUxbUIsRUFBT08sRUFBV3NCLEdBQ25DLElBQUkxUixFQUFrQixNQUFUNlAsRUFBZ0IsRUFBSUEsRUFBTTdQLE9BQ3ZDLElBQUtBLEVBQ0gsT0FBUSxFQUVWLElBQUkyRCxFQUFxQixNQUFiK04sRUFBb0IsRUFBSXdoQixHQUFVeGhCLEdBSTlDLE9BSEkvTixFQUFRLElBQ1ZBLEVBQVEyVSxHQUFVdFksRUFBUzJELEVBQU8sSUFFN0I4TixHQUFjNUIsRUFBT2taLEdBQVkzWSxFQUFXLEdBQUl6TSxFQUN4RCxDQXFDRCxTQUFTNnlCLEdBQWMzbUIsRUFBT08sRUFBV3NCLEdBQ3ZDLElBQUkxUixFQUFrQixNQUFUNlAsRUFBZ0IsRUFBSUEsRUFBTTdQLE9BQ3ZDLElBQUtBLEVBQ0gsT0FBUSxFQUVWLElBQUkyRCxFQUFRM0QsRUFBUyxFQU9yQixPQU5JMFIsSUFBYzdOLElBQ2hCRixFQUFRdXZCLEdBQVV4aEIsR0FDbEIvTixFQUFRK04sRUFBWSxFQUNoQjRHLEdBQVV0WSxFQUFTMkQsRUFBTyxHQUMxQjZVLEdBQVU3VSxFQUFPM0QsRUFBUyxJQUV6QnlSLEdBQWM1QixFQUFPa1osR0FBWTNZLEVBQVcsR0FBSXpNLEdBQU8sRUFDL0QsQ0FnQkQsU0FBUzB3QixHQUFReGtCLEdBRWYsT0FEc0IsTUFBVEEsRUFBZ0IsRUFBSUEsRUFBTTdQLFFBQ3ZCdWlCLEdBQVkxUyxFQUFPLEdBQUssRUFDekMsQ0ErRkQsU0FBUzRtQixHQUFLNW1CLEdBQ1osT0FBUUEsR0FBU0EsRUFBTTdQLE9BQVU2UCxFQUFNLEdBQUtoTSxDQUM3QyxDQXlFRCxJQUFJNnlCLEdBQWV6TSxJQUFTLFNBQVNqRyxHQUNuQyxJQUFJMlMsRUFBU2htQixHQUFTcVQsRUFBUStJLElBQzlCLE9BQVE0SixFQUFPMzJCLFFBQVUyMkIsRUFBTyxLQUFPM1MsRUFBTyxHQUMxQ0QsR0FBaUI0UyxHQUNqQixFQUNWLElBeUJRQyxHQUFpQjNNLElBQVMsU0FBU2pHLEdBQ3JDLElBQUlqVSxFQUFXeVUsR0FBS1IsR0FDaEIyUyxFQUFTaG1CLEdBQVNxVCxFQUFRK0ksSUFPOUIsT0FMSWhkLElBQWF5VSxHQUFLbVMsR0FDcEI1bUIsRUFBV2xNLEVBRVg4eUIsRUFBT2pWLE1BRURpVixFQUFPMzJCLFFBQVUyMkIsRUFBTyxLQUFPM1MsRUFBTyxHQUMxQ0QsR0FBaUI0UyxFQUFRNU4sR0FBWWhaLEVBQVUsSUFDL0MsRUFDVixJQXVCUThtQixHQUFtQjVNLElBQVMsU0FBU2pHLEdBQ3ZDLElBQUl0VCxFQUFhOFQsR0FBS1IsR0FDbEIyUyxFQUFTaG1CLEdBQVNxVCxFQUFRK0ksSUFNOUIsT0FKQXJjLEVBQWtDLG1CQUFkQSxFQUEyQkEsRUFBYTdNLElBRTFEOHlCLEVBQU9qVixNQUVEaVYsRUFBTzMyQixRQUFVMjJCLEVBQU8sS0FBTzNTLEVBQU8sR0FDMUNELEdBQWlCNFMsRUFBUTl5QixFQUFXNk0sR0FDcEMsRUFDVixJQW1DSSxTQUFTOFQsR0FBSzNVLEdBQ1osSUFBSTdQLEVBQWtCLE1BQVQ2UCxFQUFnQixFQUFJQSxFQUFNN1AsT0FDdkMsT0FBT0EsRUFBUzZQLEVBQU03UCxFQUFTLEdBQUs2RCxDQUNyQyxDQXNGRCxJQUFJaXpCLEdBQU83TSxHQUFTOE0sSUFzQnBCLFNBQVNBLEdBQVFsbkIsRUFBT2dCLEdBQ3RCLE9BQVFoQixHQUFTQSxFQUFNN1AsUUFBVTZRLEdBQVVBLEVBQU83USxPQUM5QzJwQixHQUFZOVosRUFBT2dCLEdBQ25CaEIsQ0FDTCxDQW9GRCxJQUFJbW5CLEdBQVNuSCxJQUFTLFNBQVNoZ0IsRUFBT2dhLEdBQ3BDLElBQUk3cEIsRUFBa0IsTUFBVDZQLEVBQWdCLEVBQUlBLEVBQU03UCxPQUNuQ2tDLEVBQVM2YixHQUFPbE8sRUFBT2dhLEdBTTNCLE9BSkFELEdBQVcvWixFQUFPYyxHQUFTa1osR0FBUyxTQUFTbG1CLEdBQzNDLE9BQU8rWSxHQUFRL1ksRUFBTzNELElBQVcyRCxFQUFRQSxDQUNqRCxJQUFTdWxCLEtBQUtLLEtBRURybkIsQ0FDYixJQTBFSSxTQUFTNlcsR0FBUWxKLEdBQ2YsT0FBZ0IsTUFBVEEsRUFBZ0JBLEVBQVFpSixHQUFjN1osS0FBSzRRLEVBQ25ELENBaWFELElBQUlvbkIsR0FBUWhOLElBQVMsU0FBU2pHLEdBQzVCLE9BQU9pSSxHQUFTMUosR0FBWXlCLEVBQVEsRUFBR3VFLElBQW1CLEdBQ2hFLElBeUJRMk8sR0FBVWpOLElBQVMsU0FBU2pHLEdBQzlCLElBQUlqVSxFQUFXeVUsR0FBS1IsR0FJcEIsT0FISXVFLEdBQWtCeFksS0FDcEJBLEVBQVdsTSxHQUVOb29CLEdBQVMxSixHQUFZeUIsRUFBUSxFQUFHdUUsSUFBbUIsR0FBT1EsR0FBWWhaLEVBQVUsR0FDN0YsSUF1QlFvbkIsR0FBWWxOLElBQVMsU0FBU2pHLEdBQ2hDLElBQUl0VCxFQUFhOFQsR0FBS1IsR0FFdEIsT0FEQXRULEVBQWtDLG1CQUFkQSxFQUEyQkEsRUFBYTdNLEVBQ3JEb29CLEdBQVMxSixHQUFZeUIsRUFBUSxFQUFHdUUsSUFBbUIsR0FBTzFrQixFQUFXNk0sRUFDbEYsSUErRkksU0FBUzBtQixHQUFNdm5CLEdBQ2IsSUFBTUEsSUFBU0EsRUFBTTdQLE9BQ25CLE1BQU8sR0FFVCxJQUFJQSxFQUFTLEVBT2IsT0FOQTZQLEVBQVFRLEdBQVlSLEdBQU8sU0FBU3duQixHQUNsQyxHQUFJOU8sR0FBa0I4TyxHQUVwQixPQURBcjNCLEVBQVNzWSxHQUFVK2UsRUFBTXIzQixPQUFRQSxJQUMxQixDQUVqQixJQUNhcVMsR0FBVXJTLEdBQVEsU0FBUzJELEdBQ2hDLE9BQU9nTixHQUFTZCxFQUFPdUIsR0FBYXpOLEdBQzVDLEdBQ0ssQ0F1QkQsU0FBUzJ6QixHQUFVem5CLEVBQU9FLEdBQ3hCLElBQU1GLElBQVNBLEVBQU03UCxPQUNuQixNQUFPLEdBRVQsSUFBSWtDLEVBQVNrMUIsR0FBTXZuQixHQUNuQixPQUFnQixNQUFaRSxFQUNLN04sRUFFRnlPLEdBQVN6TyxHQUFRLFNBQVNtMUIsR0FDL0IsT0FBT3AzQixHQUFNOFAsRUFBVWxNLEVBQVd3ekIsRUFDMUMsR0FDSyxDQXNCRCxJQUFJRSxHQUFVdE4sSUFBUyxTQUFTcGEsRUFBT2dCLEdBQ3JDLE9BQU8wWCxHQUFrQjFZLEdBQ3JCZ1IsR0FBZWhSLEVBQU9nQixHQUN0QixFQUNWLElBb0JRMm1CLEdBQU12TixJQUFTLFNBQVNqRyxHQUMxQixPQUFPMkksR0FBUXRjLEdBQVkyVCxFQUFRdUUsSUFDekMsSUF5QlFrUCxHQUFReE4sSUFBUyxTQUFTakcsR0FDNUIsSUFBSWpVLEVBQVd5VSxHQUFLUixHQUlwQixPQUhJdUUsR0FBa0J4WSxLQUNwQkEsRUFBV2xNLEdBRU44b0IsR0FBUXRjLEdBQVkyVCxFQUFRdUUsSUFBb0JRLEdBQVloWixFQUFVLEdBQ25GLElBdUJRMm5CLEdBQVV6TixJQUFTLFNBQVNqRyxHQUM5QixJQUFJdFQsRUFBYThULEdBQUtSLEdBRXRCLE9BREF0VCxFQUFrQyxtQkFBZEEsRUFBMkJBLEVBQWE3TSxFQUNyRDhvQixHQUFRdGMsR0FBWTJULEVBQVF1RSxJQUFvQjFrQixFQUFXNk0sRUFDeEUsSUFrQlFpbkIsR0FBTTFOLEdBQVNtTixJQTZEbkIsSUFBSVEsR0FBVTNOLElBQVMsU0FBU2pHLEdBQzlCLElBQUloa0IsRUFBU2drQixFQUFPaGtCLE9BQ2hCK1AsRUFBVy9QLEVBQVMsRUFBSWdrQixFQUFPaGtCLEVBQVMsR0FBSzZELEVBR2pELE9BREFrTSxFQUE4QixtQkFBWkEsR0FBMEJpVSxFQUFPdEMsTUFBTzNSLEdBQVlsTSxFQUMvRHl6QixHQUFVdFQsRUFBUWpVLEVBQy9CLElBaUNJLFNBQVM4bkIsR0FBTXIzQixHQUNiLElBQUkwQixFQUFTZ1ksR0FBTzFaLEdBRXBCLE9BREEwQixFQUFPNlksV0FBWSxFQUNaN1ksQ0FDUixDQXFERCxTQUFTOHRCLEdBQUt4dkIsRUFBT3MzQixHQUNuQixPQUFPQSxFQUFZdDNCLEVBQ3BCLENBa0JELElBQUl1M0IsR0FBWWxJLElBQVMsU0FBUzdSLEdBQ2hDLElBQUloZSxFQUFTZ2UsRUFBTWhlLE9BQ2ZrcUIsRUFBUWxxQixFQUFTZ2UsRUFBTSxHQUFLLEVBQzVCeGQsRUFBUWxCLEtBQUt1YixZQUNiaWQsRUFBYyxTQUFTN2xCLEdBQVUsT0FBTzhMLEdBQU85TCxFQUFRK0wsSUFFM0QsUUFBSWhlLEVBQVMsR0FBS1YsS0FBS3diLFlBQVk5YSxTQUM3QlEsYUFBaUI2WixJQUFpQnFDLEdBQVF3TixLQUdoRDFwQixFQUFRQSxFQUFNYSxNQUFNNm9CLEdBQVFBLEdBQVNscUIsRUFBUyxFQUFJLEtBQzVDOGEsWUFBWWhhLEtBQUssQ0FDckI0TyxLQUFRc2dCLEdBQ1Joc0IsS0FBUSxDQUFDOHpCLEdBQ1Rub0IsUUFBVzlMLElBRUYsSUFBQXlXLEdBQWM5WixFQUFPbEIsS0FBS3liLFdBQVdpVixNQUFLLFNBQVNuZ0IsR0FJNUQsT0FISTdQLElBQVc2UCxFQUFNN1AsUUFDbkI2UCxFQUFNL08sS0FBSytDLEdBRU5nTSxDQUNmLFVBYm9CbWdCLEtBQUs4SCxFQWN6QixJQWlQSSxJQUFJRSxHQUFVdEosSUFBaUIsU0FBU3hzQixFQUFRMUIsRUFBT2dSLEdBQ2pEeFMsR0FBZUMsS0FBS2lELEVBQVFzUCxLQUM1QnRQLEVBQU9zUCxHQUVUNEwsR0FBZ0JsYixFQUFRc1AsRUFBSyxFQUVyQyxJQXFJSSxJQUFJeW1CLEdBQU92SSxHQUFXNkcsSUFxQmxCMkIsR0FBV3hJLEdBQVc4RyxJQTJHMUIsU0FBUzNpQixHQUFRdkMsRUFBWXZCLEdBRTNCLE9BRFdxSyxHQUFROUksR0FBY3JCLEdBQVl3TixJQUNqQ25NLEVBQVl5WCxHQUFZaFosRUFBVSxHQUMvQyxDQXNCRCxTQUFTb29CLEdBQWE3bUIsRUFBWXZCLEdBRWhDLE9BRFdxSyxHQUFROUksR0FBY3BCLEdBQWlCK1IsSUFDdEMzUSxFQUFZeVgsR0FBWWhaLEVBQVUsR0FDL0MsQ0F5QkQsSUFBSXFvQixHQUFVMUosSUFBaUIsU0FBU3hzQixFQUFRMUIsRUFBT2dSLEdBQ2pEeFMsR0FBZUMsS0FBS2lELEVBQVFzUCxHQUM5QnRQLEVBQU9zUCxHQUFLMVEsS0FBS04sR0FFakI0YyxHQUFnQmxiLEVBQVFzUCxFQUFLLENBQUNoUixHQUV0QyxJQW9FSSxJQUFJNjNCLEdBQVlwTyxJQUFTLFNBQVMzWSxFQUFZeE0sRUFBTWQsR0FDbEQsSUFBSUwsR0FBUyxFQUNUc2IsRUFBd0IsbUJBQVJuYSxFQUNoQjVDLEVBQVN5bEIsR0FBWXJXLEdBQWN6UyxHQUFNeVMsRUFBV3RSLFFBQVUsR0FLbEUsT0FIQXlkLEdBQVNuTSxHQUFZLFNBQVM5USxHQUM1QjBCLElBQVN5QixHQUFTc2IsRUFBU2hmLEdBQU02RSxFQUFNdEUsRUFBT3dELEdBQVF1Z0IsR0FBVy9qQixFQUFPc0UsRUFBTWQsRUFDdEYsSUFDYTlCLENBQ2IsSUE4QlFvMkIsR0FBUTVKLElBQWlCLFNBQVN4c0IsRUFBUTFCLEVBQU9nUixHQUNuRDRMLEdBQWdCbGIsRUFBUXNQLEVBQUtoUixFQUNuQyxJQTRDSSxTQUFTbVQsR0FBSXJDLEVBQVl2QixHQUV2QixPQURXcUssR0FBUTlJLEdBQWNYLEdBQVcrVyxJQUNoQ3BXLEVBQVl5WCxHQUFZaFosRUFBVSxHQUMvQyxDQWlGRCxJQUFJd29CLEdBQVk3SixJQUFpQixTQUFTeHNCLEVBQVExQixFQUFPZ1IsR0FDdkR0UCxFQUFPc1AsRUFBTSxFQUFJLEdBQUcxUSxLQUFLTixFQUMvQixJQUFPLFdBQWEsTUFBTyxDQUFDLEdBQUksR0FBTSxJQW1TbEMsSUFBSWc0QixHQUFTdk8sSUFBUyxTQUFTM1ksRUFBWXVYLEdBQ3pDLEdBQWtCLE1BQWR2WCxFQUNGLE1BQU8sR0FFVCxJQUFJdFIsRUFBUzZvQixFQUFVN29CLE9BTXZCLE9BTElBLEVBQVMsR0FBS2d2QixHQUFlMWQsRUFBWXVYLEVBQVUsR0FBSUEsRUFBVSxJQUNuRUEsRUFBWSxHQUNIN29CLEVBQVMsR0FBS2d2QixHQUFlbkcsRUFBVSxHQUFJQSxFQUFVLEdBQUlBLEVBQVUsTUFDNUVBLEVBQVksQ0FBQ0EsRUFBVSxLQUVsQkQsR0FBWXRYLEVBQVlpUixHQUFZc0csRUFBVyxHQUFJLEdBQ2hFLElBb0JRdFIsR0FBTUQsSUFBVSxXQUNsQixPQUFPdEosR0FBS3FILEtBQUtrQyxLQUN2QixFQXlESSxTQUFTb1osR0FBSWpoQixFQUFNNVAsRUFBR2l2QixHQUdwQixPQUZBanZCLEVBQUlpdkIsRUFBUWxyQixFQUFZL0QsRUFDeEJBLEVBQUs0UCxHQUFhLE1BQUw1UCxFQUFhNFAsRUFBSzFQLE9BQVNGLEVBQ2pDeXpCLEdBQVc3akIsRUFBTW5KLEVBQWUxQyxFQUFXQSxFQUFXQSxFQUFXQSxFQUFXL0QsRUFDcEYsQ0FtQkQsU0FBUzI0QixHQUFPMzRCLEVBQUc0UCxHQUNqQixJQUFJeE4sRUFDSixHQUFtQixtQkFBUndOLEVBQ1QsTUFBTSxJQUFJdlEsR0FBVThHLEdBR3RCLE9BREFuRyxFQUFJb3pCLEdBQVVwekIsR0FDSSxXQU9oQixRQU5NQSxFQUFJLElBQ1JvQyxFQUFTd04sRUFBS3pQLE1BQU1YLEtBQU1TLFlBRXhCRCxHQUFLLElBQ1A0UCxFQUFPN0wsR0FFRjNCLENBQ2YsQ0FDSyxDQXFDRCxJQUFJdzJCLEdBQU96TyxJQUFTLFNBQVN2YSxFQUFNQyxFQUFTZ2UsR0FDMUMsSUFBSXBQLEVBdjRUYSxFQXc0VGpCLEdBQUlvUCxFQUFTM3RCLE9BQVEsQ0FDbkIsSUFBSTR0QixFQUFVM1osR0FBZTBaLEVBQVV1RCxHQUFVd0gsS0FDakRuYSxHQUFXbFksQ0FDWixDQUNELE9BQU9rdEIsR0FBVzdqQixFQUFNNk8sRUFBUzVPLEVBQVNnZSxFQUFVQyxFQUMxRCxJQStDUStLLEdBQVUxTyxJQUFTLFNBQVNoWSxFQUFRVCxFQUFLbWMsR0FDM0MsSUFBSXBQLEVBQVVtVixFQUNkLEdBQUkvRixFQUFTM3RCLE9BQVEsQ0FDbkIsSUFBSTR0QixFQUFVM1osR0FBZTBaLEVBQVV1RCxHQUFVeUgsS0FDakRwYSxHQUFXbFksQ0FDWixDQUNELE9BQU9rdEIsR0FBVy9oQixFQUFLK00sRUFBU3RNLEVBQVEwYixFQUFVQyxFQUN4RCxJQXFKSSxTQUFTZ0wsR0FBU2xwQixFQUFNa1IsRUFBTTFjLEdBQzVCLElBQUkyMEIsRUFDQUMsRUFDQUMsRUFDQTcyQixFQUNBODJCLEVBQ0FDLEVBQ0FDLEVBQWlCLEVBQ2pCQyxHQUFVLEVBQ1ZDLEdBQVMsRUFDVGhLLEdBQVcsRUFFZixHQUFtQixtQkFBUjFmLEVBQ1QsVUFBVXZRLEdBQVU4RyxHQVV0QixTQUFTb3pCLEVBQVdDLEdBQ2xCLElBQUl0MUIsRUFBTzYwQixFQUNQbHBCLEVBQVVtcEIsRUFLZCxPQUhBRCxFQUFXQyxFQUFXajFCLEVBQ3RCcTFCLEVBQWlCSSxFQUNqQnAzQixFQUFTd04sRUFBS3pQLE1BQU0wUCxFQUFTM0wsRUFFOUIsQ0FxQkQsU0FBU3UxQixFQUFhRCxHQUNwQixJQUFJRSxFQUFvQkYsRUFBT0wsRUFNL0IsT0FBUUEsSUFBaUJwMUIsR0FBYzIxQixHQUFxQjVZLEdBQ3pENFksRUFBb0IsR0FBT0osR0FOSkUsRUFBT0osR0FNOEJILENBQ2hFLENBRUQsU0FBU1UsSUFDUCxJQUFJSCxFQUFPL2hCLEtBQ1gsR0FBSWdpQixFQUFhRCxHQUNmLE9BQU9JLEVBQWFKLEdBR3RCTixFQUFVdmhCLEdBQVdnaUIsRUEzQnZCLFNBQXVCSCxHQUNyQixJQUVJSyxFQUFjL1ksR0FGTTBZLEVBQU9MLEdBSS9CLE9BQU9HLEVBQ0g1Z0IsR0FBVW1oQixFQUFhWixHQUpETyxFQUFPSixJQUs3QlMsQ0FDTCxDQW1Cb0NDLENBQWNOLEdBQ2xELENBRUQsU0FBU0ksRUFBYUosR0FLcEIsT0FKQU4sRUFBVW4xQixFQUlOdXJCLEdBQVl5SixFQUNQUSxFQUFXQyxJQUVwQlQsRUFBV0MsRUFBV2oxQixFQUNmM0IsRUFDUixDQWNELFNBQVMyM0IsSUFDUCxJQUFJUCxFQUFPL2hCLEtBQ1B1aUIsRUFBYVAsRUFBYUQsR0FNOUIsR0FKQVQsRUFBVzk0QixVQUNYKzRCLEVBQVd4NUIsS0FDWDI1QixFQUFlSyxFQUVYUSxFQUFZLENBQ2QsR0FBSWQsSUFBWW4xQixFQUNkLE9BekVOLFNBQXFCeTFCLEdBTW5CLE9BSkFKLEVBQWlCSSxFQUVqQk4sRUFBVXZoQixHQUFXZ2lCLEVBQWM3WSxHQUU1QnVZLEVBQVVFLEVBQVdDLEdBQVFwM0IsQ0FDckMsQ0FrRVk2M0IsQ0FBWWQsR0FFckIsR0FBSUcsRUFJRixPQUZBL2hCLEdBQWEyaEIsR0FDYkEsRUFBVXZoQixHQUFXZ2lCLEVBQWM3WSxHQUM1QnlZLEVBQVdKLEVBRXJCLENBSUQsT0FISUQsSUFBWW4xQixJQUNkbTFCLEVBQVV2aEIsR0FBV2dpQixFQUFjN1ksSUFFOUIxZSxDQUNSLENBR0QsT0EzR0EwZSxFQUFPOFIsR0FBUzlSLElBQVMsRUFDckJsRyxHQUFTeFcsS0FDWGkxQixJQUFZajFCLEVBQVFpMUIsUUFFcEJKLEdBREFLLEVBQVMsWUFBYWwxQixHQUNIb1UsR0FBVW9hLEdBQVN4dUIsRUFBUTYwQixVQUFZLEVBQUduWSxHQUFRbVksRUFDckUzSixFQUFXLGFBQWNsckIsSUFBWUEsRUFBUWtyQixTQUFXQSxHQW9HMUR5SyxFQUFVRyxPQXBDVixXQUNNaEIsSUFBWW4xQixHQUNkd1QsR0FBYTJoQixHQUVmRSxFQUFpQixFQUNqQkwsRUFBV0ksRUFBZUgsRUFBV0UsRUFBVW4xQixDQUNoRCxFQStCRGcyQixFQUFVSSxNQTdCVixXQUNFLE9BQU9qQixJQUFZbjFCLEVBQVkzQixFQUFTdzNCLEVBQWFuaUIsS0FDdEQsRUE0Qk1zaUIsQ0FDUixDQW9CRCxJQUFJSyxHQUFRalEsSUFBUyxTQUFTdmEsRUFBTTFMLEdBQ2xDLE9BQU8yYyxHQUFValIsRUFBTSxFQUFHMUwsRUFDaEMsSUFxQlFtMkIsR0FBUWxRLElBQVMsU0FBU3ZhLEVBQU1rUixFQUFNNWMsR0FDeEMsT0FBTzJjLEdBQVVqUixFQUFNZ2pCLEdBQVM5UixJQUFTLEVBQUc1YyxFQUNsRCxJQW9FSSxTQUFTOHhCLEdBQVFwbUIsRUFBTTBxQixHQUNyQixHQUFtQixtQkFBUjFxQixHQUFtQyxNQUFaMHFCLEdBQXVDLG1CQUFaQSxFQUMzRCxNQUFVLElBQUFqN0IsR0FBVThHLEdBRXRCLElBQUlvMEIsRUFBVyxTQUFYQSxJQUNGLElBQUlyMkIsRUFBT2pFLFVBQ1B5UixFQUFNNG9CLEVBQVdBLEVBQVNuNkIsTUFBTVgsS0FBTTBFLEdBQVFBLEVBQUssR0FDbkQ4TyxFQUFRdW5CLEVBQVN2bkIsTUFFckIsR0FBSUEsRUFBTUMsSUFBSXZCLEdBQ1osT0FBT3NCLEVBQU1vTCxJQUFJMU0sR0FFbkIsSUFBSXRQLEVBQVN3TixFQUFLelAsTUFBTVgsS0FBTTBFLEdBRTlCLE9BREFxMkIsRUFBU3ZuQixNQUFRQSxFQUFNc0IsSUFBSTVDLEVBQUt0UCxJQUFXNFEsRUFDcEM1USxDQUNmLEVBRU0sT0FEQW00QixFQUFTdm5CLE1BQVEsSUFBS2dqQixHQUFRd0UsT0FBUzFlLElBQ2hDeWUsQ0FDUixDQXlCRCxTQUFTRSxHQUFPbnFCLEdBQ2QsR0FBd0IsbUJBQWJBLEVBQ1QsTUFBVSxJQUFBalIsR0FBVThHLEdBRXRCLE9BQU8sV0FDTCxJQUFJakMsRUFBT2pFLFVBQ1gsT0FBUWlFLEVBQUtoRSxRQUNYLEtBQU0sRUFBRSxPQUFRb1EsRUFBVW5SLEtBQUtLLE1BQy9CLEtBQUssRUFBRyxPQUFROFEsRUFBVW5SLEtBQUtLLEtBQU0wRSxFQUFLLElBQzFDLEtBQUssRUFBRyxPQUFRb00sRUFBVW5SLEtBQUtLLEtBQU0wRSxFQUFLLEdBQUlBLEVBQUssSUFDbkQsS0FBSyxFQUFHLE9BQVFvTSxFQUFVblIsS0FBS0ssS0FBTTBFLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLElBRTlELE9BQVFvTSxFQUFVblEsTUFBTVgsS0FBTTBFLEVBQ3RDLENBQ0ssQ0FwQ0Q4eEIsR0FBUXdFLE1BQVExZSxHQTJGaEIsSUFBSTRlLEdBQVd0TixJQUFTLFNBQVN4ZCxFQUFNK3FCLEdBS3JDLElBQUlDLEdBSkpELEVBQW1DLEdBQXJCQSxFQUFXejZCLFFBQWVvYSxHQUFRcWdCLEVBQVcsSUFDdkQ5cEIsR0FBUzhwQixFQUFXLEdBQUkvbkIsR0FBVXFXLE9BQ2xDcFksR0FBUzRSLEdBQVlrWSxFQUFZLEdBQUkvbkIsR0FBVXFXLFFBRXRCL29CLE9BQzdCLE9BQU9pcUIsSUFBUyxTQUFTam1CLEdBSXZCLElBSEEsSUFBSUwsR0FBUyxFQUNUM0QsRUFBU3dZLEdBQVV4VSxFQUFLaEUsT0FBUTA2QixLQUUzQi8yQixFQUFRM0QsR0FDZmdFLEVBQUtMLEdBQVM4MkIsRUFBVzkyQixHQUFPMUUsS0FBS0ssS0FBTTBFLEVBQUtMLElBRWxELE9BQU8xRCxHQUFNeVAsRUFBTXBRLEtBQU0wRSxFQUNqQyxHQUNBLElBbUNRMjJCLEdBQVUxUSxJQUFTLFNBQVN2YSxFQUFNaWUsR0FDcEMsSUFBSUMsRUFBVTNaLEdBQWUwWixFQUFVdUQsR0FBVXlKLEtBQ2pELE9BQU9wSCxHQUFXN2pCLEVBQU1ySixFQUFtQnhDLEVBQVc4cEIsRUFBVUMsRUFDdEUsSUFrQ1FnTixHQUFlM1EsSUFBUyxTQUFTdmEsRUFBTWllLEdBQ3pDLElBQUlDLEVBQVUzWixHQUFlMFosRUFBVXVELEdBQVUwSixLQUNqRCxPQUFPckgsR0FBVzdqQixFQUFNcEosRUFBeUJ6QyxFQUFXOHBCLEVBQVVDLEVBQzVFLElBd0JRaU4sR0FBUWhMLElBQVMsU0FBU25nQixFQUFNbWEsR0FDbEMsT0FBTzBKLEdBQVc3akIsRUFBTWxKLEVBQWlCM0MsRUFBV0EsRUFBV0EsRUFBV2dtQixFQUNoRixJQWdhSSxTQUFTMU0sR0FBRzNjLEVBQU9vakIsR0FDakIsT0FBT3BqQixJQUFVb2pCLEdBQVVwakIsR0FBVUEsR0FBU29qQixHQUFVQSxDQUN6RCxDQXlCRCxJQUFJa1gsR0FBS3JJLEdBQTBCOU8sSUF5Qi9Cb1gsR0FBTXRJLElBQTBCLFNBQVNqeUIsRUFBT29qQixHQUNsRCxPQUFPcGpCLEdBQVNvakIsQ0FDdEIsSUFvQlF0SCxHQUFjbUksR0FBZ0IsV0FBYSxPQUFPMWtCLFNBQVUsQ0FBOUIsSUFBc0Mwa0IsR0FBa0IsU0FBU2prQixHQUNqRyxPQUFPMlosR0FBYTNaLElBQVV4QixHQUFlQyxLQUFLdUIsRUFBTyxZQUN0RG9XLEdBQXFCM1gsS0FBS3VCLEVBQU8sU0FDMUMsRUF5QlE0WixHQUFVdmIsR0FBTXViLFFBbUJoQnJMLEdBQWdCRCxHQUFvQjRELEdBQVU1RCxJQTc1UGxELFNBQTJCdE8sR0FDekIsT0FBTzJaLEdBQWEzWixJQUFVOGlCLEdBQVc5aUIsSUFBVXNILENBQ3BELEVBczdQRCxTQUFTNmYsR0FBWW5uQixHQUNuQixPQUFnQixNQUFUQSxHQUFpQm8wQixHQUFTcDBCLEVBQU1SLFVBQVkraUIsR0FBV3ZpQixFQUMvRCxDQTJCRCxTQUFTK25CLEdBQWtCL25CLEdBQ3pCLE9BQU8yWixHQUFhM1osSUFBVW1uQixHQUFZbm5CLEVBQzNDLENBeUNELElBQUl5WCxHQUFXRCxJQUFrQmlkLEdBbUI3QmhtQixHQUFTRCxHQUFhMEQsR0FBVTFELElBeGdRcEMsU0FBb0J4TyxHQUNsQixPQUFPMlosR0FBYTNaLElBQVU4aUIsR0FBVzlpQixJQUFVeUcsQ0FDcEQsRUE4cVFELFNBQVMrekIsR0FBUXg2QixHQUNmLElBQUsyWixHQUFhM1osR0FDaEIsT0FBWSxFQUVkLElBQUl1ZSxFQUFNdUUsR0FBVzlpQixHQUNyQixPQUFPdWUsR0FBTzdYLEdBOXlXRix5QkE4eVdjNlgsR0FDQyxpQkFBakJ2ZSxFQUFNNmtCLFNBQTRDLGlCQUFkN2tCLEVBQU00a0IsT0FBcUJvRCxHQUFjaG9CLEVBQ3hGLENBaURELFNBQVN1aUIsR0FBV3ZpQixHQUNsQixJQUFLa2EsR0FBU2xhLEdBQ1osT0FBTyxFQUlULElBQUl1ZSxFQUFNdUUsR0FBVzlpQixHQUNyQixPQUFPdWUsR0FBTzVYLEdBQVc0WCxHQUFPM1gsR0EzMldyQiwwQkEyMlcrQjJYLEdBLzFXL0Isa0JBKzFXa0RBLENBQzlELENBNEJELFNBQVNrYyxHQUFVejZCLEdBQ2pCLE1BQXVCLGlCQUFUQSxHQUFxQkEsR0FBUzB5QixHQUFVMXlCLEVBQ3ZELENBNEJELFNBQVNvMEIsR0FBU3AwQixHQUNoQixNQUF1QixpQkFBVEEsR0FDWkEsR0FBUyxHQUFLQSxFQUFRLEdBQUssR0FBS0EsR0FBU2tHLENBQzVDLENBMkJELFNBQVNnVSxHQUFTbGEsR0FDaEIsSUFBSSt6QixFQUFJMW1CLEVBQVVyTixHQUNsQixPQUFnQixNQUFUQSxJQUEwQixVQUFSK3pCLEdBQTRCLFlBQVJBLEVBQzlDLENBMEJELFNBQVNwYSxHQUFhM1osR0FDcEIsT0FBZ0IsTUFBVEEsR0FBaUMsVUFBaEJxTixFQUFPck4sRUFDaEMsQ0FtQkQsSUFBSTJPLEdBQVFELEdBQVl3RCxHQUFVeEQsSUE1eFFsQyxTQUFtQjFPLEdBQ2pCLE9BQU8yWixHQUFhM1osSUFBVXdlLEdBQU94ZSxJQUFVNkcsQ0FDaEQsRUE0K1FELFNBQVM2ekIsR0FBUzE2QixHQUNoQixNQUF1QixpQkFBVEEsR0FDWDJaLEdBQWEzWixJQUFVOGlCLEdBQVc5aUIsSUFBVThHLENBQ2hELENBOEJELFNBQVNraEIsR0FBY2hvQixHQUNyQixJQUFLMlosR0FBYTNaLElBQVU4aUIsR0FBVzlpQixJQUFVK0csRUFDL0MsT0FBTyxFQUVULElBQUlrVCxFQUFRaEUsR0FBYWpXLEdBQ3pCLEdBQWMsT0FBVmlhLEVBQ0YsT0FBTyxFQUVULElBQUlpRixFQUFPMWdCLEdBQWVDLEtBQUt3YixFQUFPLGdCQUFrQkEsRUFBTWxiLFlBQzlELE1BQXNCLG1CQUFSbWdCLEdBQXNCQSxhQUFnQkEsR0FDbEQvSixHQUFhMVcsS0FBS3lnQixJQUFTdkosRUFDOUIsQ0FtQkQsSUFBSTlHLEdBQVdELEdBQWVzRCxHQUFVdEQsSUE1OVF4QyxTQUFzQjVPLEdBQ3BCLE9BQU8yWixHQUFhM1osSUFBVThpQixHQUFXOWlCLElBQVVpSCxDQUNwRCxFQTRnUkQsSUFBSThILEdBQVFELEdBQVlvRCxHQUFVcEQsSUFuZ1JsQyxTQUFtQjlPLEdBQ2pCLE9BQU8yWixHQUFhM1osSUFBVXdlLEdBQU94ZSxJQUFVa0gsQ0FDaEQsRUFvaFJELFNBQVN5ekIsR0FBUzM2QixHQUNoQixNQUF1QixpQkFBVEEsSUFDVjRaLEdBQVE1WixJQUFVMlosR0FBYTNaLElBQVU4aUIsR0FBVzlpQixJQUFVbUgsQ0FDbkUsQ0FtQkQsU0FBUzBhLEdBQVM3aEIsR0FDaEIsTUFBdUIsVUFBaEJxTixFQUFPck4sSUFDWDJaLEdBQWEzWixJQUFVOGlCLEdBQVc5aUIsSUFBVW9ILENBQ2hELENBbUJELElBQUk2SCxHQUFlRCxHQUFtQmtELEdBQVVsRCxJQXZqUmhELFNBQTBCaFAsR0FDeEIsT0FBTzJaLEdBQWEzWixJQUNsQm8wQixHQUFTcDBCLEVBQU1SLFdBQWFxTixHQUFlaVcsR0FBVzlpQixHQUN6RCxFQTRvUkQsSUFBSTQ2QixHQUFLM0ksR0FBMEJoTCxJQXlCL0I0VCxHQUFNNUksSUFBMEIsU0FBU2p5QixFQUFPb2pCLEdBQ2xELE9BQU9wakIsR0FBU29qQixDQUN0QixJQXlCSSxTQUFTMFgsR0FBUTk2QixHQUNmLElBQUtBLEVBQ0gsTUFBTyxHQUVULEdBQUltbkIsR0FBWW5uQixHQUNkLE9BQU8yNkIsR0FBUzM2QixHQUFTaVUsR0FBY2pVLEdBQVN1YyxHQUFVdmMsR0FFNUQsR0FBSXVXLElBQWV2VyxFQUFNdVcsSUFDdkIsT0F2OFZOLFNBQXlCMVcsR0FJdkIsSUFIQSxJQUFJNGIsRUFDQS9aLEVBQVMsS0FFSitaLEVBQU81YixFQUFTRSxRQUFRRSxNQUMvQnlCLEVBQU9wQixLQUFLbWIsRUFBS3piLE9BRW5CLE9BQU8wQixDQUNSLENBKzdWWXE1QixDQUFnQi82QixFQUFNdVcsT0FFL0IsSUFBSWdJLEVBQU1DLEdBQU94ZSxHQUdqQixPQUZXdWUsR0FBTzFYLEVBQVNxTSxHQUFjcUwsR0FBT3JYLEVBQVN5TSxHQUFhdEQsSUFFMURyUSxFQUNiLENBeUJELFNBQVMreEIsR0FBUy94QixHQUNoQixPQUFLQSxHQUdMQSxFQUFRa3lCLEdBQVNseUIsTUFDSGlHLEdBQVlqRyxLQUFVLElBeGtZdEIsdUJBeWtZQUEsRUFBUSxHQUFLLEVBQUksR0FHeEJBLEdBQVVBLEVBQVFBLEVBQVEsRUFQZCxJQUFWQSxFQUFjQSxFQUFRLENBUWhDLENBNEJELFNBQVMweUIsR0FBVTF5QixHQUNqQixJQUFJMEIsRUFBU3F3QixHQUFTL3hCLEdBQ2xCZzdCLEVBQVl0NUIsRUFBUyxFQUV6QixPQUFPQSxHQUFXQSxFQUFVczVCLEVBQVl0NUIsRUFBU3M1QixFQUFZdDVCLEVBQVUsQ0FDeEUsQ0E2QkQsU0FBU3U1QixHQUFTajdCLEdBQ2hCLE9BQU9BLEVBQVF3YyxHQUFVa1csR0FBVTF5QixHQUFRLEVBQUdvRyxHQUFvQixDQUNuRSxDQXlCRCxTQUFTOHJCLEdBQVNseUIsR0FDaEIsR0FBb0IsaUJBQVRBLEVBQ1QsT0FBT0EsRUFFVCxHQUFJNmhCLEdBQVM3aEIsR0FDWCxPQUFPbUcsRUFFVCxHQUFJK1QsR0FBU2xhLEdBQVEsQ0FDbkIsSUFBSW9qQixFQUFnQyxtQkFBakJwakIsRUFBTXdaLFFBQXdCeFosRUFBTXdaLFVBQVl4WixFQUNuRUEsRUFBUWthLEdBQVNrSixHQUFVQSxFQUFRLEdBQU1BLENBQzFDLENBQ0QsR0FBb0IsaUJBQVRwakIsRUFDVCxPQUFpQixJQUFWQSxFQUFjQSxHQUFTQSxFQUVoQ0EsRUFBUThSLEdBQVM5UixHQUNqQixJQUFJazdCLEVBQVdyeEIsR0FBV29KLEtBQUtqVCxHQUMvQixPQUFRazdCLEdBQVlueEIsR0FBVWtKLEtBQUtqVCxHQUMvQmtOLEdBQWFsTixFQUFNYSxNQUFNLEdBQUlxNkIsRUFBVyxFQUFJLEdBQzNDdHhCLEdBQVdxSixLQUFLalQsR0FBU21HLEdBQU9uRyxDQUN0QyxDQTBCRCxTQUFTaW9CLEdBQWNqb0IsR0FDckIsT0FBT21kLEdBQVduZCxFQUFPOGUsR0FBTzllLEdBQ2pDLENBcURELFNBQVNvVixHQUFTcFYsR0FDaEIsT0FBZ0IsTUFBVEEsRUFBZ0IsR0FBS3dyQixHQUFheHJCLEVBQzFDLENBb0NELElBQUlkLEdBQVNrdkIsSUFBZSxTQUFTM2MsRUFBUWpKLEdBQzNDLEdBQUlxZSxHQUFZcmUsSUFBVzJlLEdBQVkzZSxHQUNyQzJVLEdBQVczVSxFQUFRZ04sR0FBS2hOLEdBQVNpSixRQUduQyxJQUFLLElBQUlULEtBQU94SSxFQUNWaEssR0FBZUMsS0FBSytKLEVBQVF3SSxJQUM5QjZMLEdBQVlwTCxFQUFRVCxFQUFLeEksRUFBT3dJLEdBRzFDLElBaUNRbXFCLEdBQVcvTSxJQUFlLFNBQVMzYyxFQUFRakosR0FDN0MyVSxHQUFXM1UsRUFBUXNXLEdBQU90VyxHQUFTaUosRUFDekMsSUErQlEycEIsR0FBZWhOLElBQWUsU0FBUzNjLEVBQVFqSixFQUFRa2YsRUFBVTFKLEdBQ25FYixHQUFXM1UsRUFBUXNXLEdBQU90VyxHQUFTaUosRUFBUXVNLEVBQ2pELElBOEJRcWQsR0FBYWpOLElBQWUsU0FBUzNjLEVBQVFqSixFQUFRa2YsRUFBVTFKLEdBQ2pFYixHQUFXM1UsRUFBUWdOLEdBQUtoTixHQUFTaUosRUFBUXVNLEVBQy9DLElBbUJRc2QsR0FBS2pNLEdBQVM5UixJQThEbEIsSUFBSTVJLEdBQVc4VSxJQUFTLFNBQVNoWSxFQUFRNmMsR0FDdkM3YyxFQUFTdlQsR0FBT3VULEdBRWhCLElBQUl0TyxHQUFTLEVBQ1QzRCxFQUFTOHVCLEVBQVE5dUIsT0FDakIrdUIsRUFBUS91QixFQUFTLEVBQUk4dUIsRUFBUSxHQUFLanJCLEVBTXRDLElBSklrckIsR0FBU0MsR0FBZUYsRUFBUSxHQUFJQSxFQUFRLEdBQUlDLEtBQ2xEL3VCLEVBQVMsS0FHRjJELEVBQVEzRCxHQU1mLElBTEEsSUFBSWdKLEVBQVM4bEIsRUFBUW5yQixHQUNqQmlQLEVBQVEwTSxHQUFPdFcsR0FDZit5QixHQUFjLEVBQ2RDLEVBQWNwcEIsRUFBTTVTLFNBRWYrN0IsRUFBYUMsR0FBYSxDQUNqQyxJQUFJeHFCLEVBQU1vQixFQUFNbXBCLEdBQ1p2N0IsRUFBUXlSLEVBQU9ULElBRWZoUixJQUFVcUQsR0FDVHNaLEdBQUczYyxFQUFPaVYsR0FBWWpFLE1BQVV4UyxHQUFlQyxLQUFLZ1QsRUFBUVQsTUFDL0RTLEVBQU9ULEdBQU94SSxFQUFPd0ksR0FFeEIsQ0FHSCxPQUFPUyxDQUNiLElBcUJRZ3FCLEdBQWVoUyxJQUFTLFNBQVNqbUIsR0FFbkMsT0FEQUEsRUFBS2xELEtBQUsrQyxFQUFXb3dCLElBQ2RoMEIsR0FBTWk4QixHQUFXcjRCLEVBQVdHLEVBQ3pDLElBK1JJLFNBQVNrYSxHQUFJak0sRUFBUW5OLEVBQU1pdEIsR0FDekIsSUFBSTd2QixFQUFtQixNQUFWK1AsRUFBaUJwTyxFQUFZbWYsR0FBUS9RLEVBQVFuTixHQUMxRCxPQUFPNUMsSUFBVzJCLEVBQVlrdUIsRUFBZTd2QixDQUM5QyxDQTJERCxTQUFTOGxCLEdBQU0vVixFQUFRbk4sR0FDckIsT0FBaUIsTUFBVm1OLEdBQWtCeWlCLEdBQVF6aUIsRUFBUW5OLEVBQU1nZixHQUNoRCxDQW9CRCxJQUFJcVksR0FBU3pLLElBQWUsU0FBU3h2QixFQUFRMUIsRUFBT2dSLEdBQ3JDLE1BQVRoUixHQUN5QixtQkFBbEJBLEVBQU1vVixXQUNmcFYsRUFBUTBWLEdBQXFCalgsS0FBS3VCLElBR3BDMEIsRUFBTzFCLEdBQVNnUixDQUN0QixHQUFPa1osR0FBUzFELEtBNEJSb1YsR0FBVzFLLElBQWUsU0FBU3h2QixFQUFRMUIsRUFBT2dSLEdBQ3ZDLE1BQVRoUixHQUN5QixtQkFBbEJBLEVBQU1vVixXQUNmcFYsRUFBUTBWLEdBQXFCalgsS0FBS3VCLElBR2hDeEIsR0FBZUMsS0FBS2lELEVBQVExQixHQUM5QjBCLEVBQU8xQixHQUFPTSxLQUFLMFEsR0FFbkJ0UCxFQUFPMUIsR0FBUyxDQUFDZ1IsRUFFcEIsR0FBRXVYLElBb0JDc1QsR0FBU3BTLEdBQVMxRixJQThCdEIsU0FBU3ZPLEdBQUsvRCxHQUNaLE9BQU8wVixHQUFZMVYsR0FBVWlLLEdBQWNqSyxHQUFVbVYsR0FBU25WLEVBQy9ELENBeUJELFNBQVNxTixHQUFPck4sR0FDZCxPQUFPMFYsR0FBWTFWLEdBQVVpSyxHQUFjakssR0FBUSxHQUFRcVYsR0FBV3JWLEVBQ3ZFLENBc0dELElBQUkzUCxHQUFRc3NCLElBQWUsU0FBUzNjLEVBQVFqSixFQUFRa2YsR0FDbERELEdBQVVoVyxFQUFRakosRUFBUWtmLEVBQ2hDLElBaUNRZ1UsR0FBWXROLElBQWUsU0FBUzNjLEVBQVFqSixFQUFRa2YsRUFBVTFKLEdBQ2hFeUosR0FBVWhXLEVBQVFqSixFQUFRa2YsRUFBVTFKLEVBQzFDLElBc0JROGQsR0FBT3pNLElBQVMsU0FBUzVkLEVBQVErTCxHQUNuQyxJQUFJOWIsRUFBUyxDQUFFLEVBQ2YsR0FBYyxNQUFWK1AsRUFDRixPQUFPL1AsRUFFVCxJQUFJd2MsR0FBUyxFQUNiVixFQUFRck4sR0FBU3FOLEdBQU8sU0FBU2xaLEdBRy9CLE9BRkFBLEVBQU9tZSxHQUFTbmUsRUFBTW1OLEdBQ3RCeU0sSUFBV0EsRUFBUzVaLEVBQUs5RSxPQUFTLEdBQzNCOEUsQ0FDZixJQUNNNlksR0FBVzFMLEVBQVF1TyxHQUFhdk8sR0FBUy9QLEdBQ3JDd2MsSUFDRnhjLEVBQVNvYyxHQUFVcGMsRUFBUXE2QixFQUF3RHJJLEtBR3JGLElBREEsSUFBSWwwQixFQUFTZ2UsRUFBTWhlLE9BQ1pBLEtBQ0wrcEIsR0FBVTduQixFQUFROGIsRUFBTWhlLElBRTFCLE9BQU9rQyxDQUNiLElBMkNJLElBQUlrVCxHQUFPeWEsSUFBUyxTQUFTNWQsRUFBUStMLEdBQ25DLE9BQWlCLE1BQVYvTCxFQUFpQixDQUFBLEVBbm1UMUIsU0FBa0JBLEVBQVErTCxHQUN4QixPQUFPeUwsR0FBV3hYLEVBQVErTCxHQUFPLFNBQVN4ZCxFQUFPc0UsR0FDL0MsT0FBT2tqQixHQUFNL1YsRUFBUW5OLEVBQzdCLEdBQ0ssQ0ErbFQ4QjAzQixDQUFTdnFCLEVBQVErTCxFQUNwRCxJQW9CSSxTQUFTeWUsR0FBT3hxQixFQUFRN0IsR0FDdEIsR0FBYyxNQUFWNkIsRUFDRixNQUFPLENBQUUsRUFFWCxJQUFJVyxFQUFRakMsR0FBUzZQLEdBQWF2TyxJQUFTLFNBQVN5cUIsR0FDbEQsTUFBTyxDQUFDQSxFQUNoQixJQUVNLE9BREF0c0IsRUFBWTJZLEdBQVkzWSxHQUNqQnFaLEdBQVd4WCxFQUFRVyxHQUFPLFNBQVNwUyxFQUFPc0UsR0FDL0MsT0FBT3NMLEVBQVU1UCxFQUFPc0UsRUFBSyxHQUNyQyxHQUNLLENBMElELElBQUk2M0IsR0FBVXRKLEdBQWNyZCxJQTBCeEI0bUIsR0FBWXZKLEdBQWMvVCxJQTRLOUIsU0FBU3pPLEdBQU9vQixHQUNkLE9BQWlCLE1BQVZBLEVBQWlCLEdBQUtVLEdBQVdWLEVBQVErRCxHQUFLL0QsR0FDdEQsQ0FpTkQsSUFBSTRxQixHQUFZeE4sSUFBaUIsU0FBU250QixFQUFRNDZCLEVBQU1uNUIsR0FFdEQsT0FEQW01QixFQUFPQSxFQUFLQyxjQUNMNzZCLEdBQVV5QixFQUFRcTVCLEdBQVdGLEdBQVFBLEVBQ2xELElBaUJJLFNBQVNFLEdBQVd6cUIsR0FDbEIsT0FBTzBxQixHQUFXcm5CLEdBQVNyRCxHQUFRd3FCLGNBQ3BDLENBb0JELFNBQVN4TixHQUFPaGQsR0FFZCxPQURBQSxFQUFTcUQsR0FBU3JELEtBQ0RBLEVBQU9FLFFBQVFoSSxHQUFTMkksSUFBY1gsUUFBUTNGLEdBQWEsR0FDN0UsQ0FxSEQsSUFBSW93QixHQUFZN04sSUFBaUIsU0FBU250QixFQUFRNDZCLEVBQU1uNUIsR0FDdEQsT0FBT3pCLEdBQVV5QixFQUFRLElBQU0sSUFBTW01QixFQUFLQyxhQUNoRCxJQXNCUUksR0FBWTlOLElBQWlCLFNBQVNudEIsRUFBUTQ2QixFQUFNbjVCLEdBQ3RELE9BQU96QixHQUFVeUIsRUFBUSxJQUFNLElBQU1tNUIsRUFBS0MsYUFDaEQsSUFtQlFLLEdBQWFsTyxHQUFnQixlQTBOakMsSUFBSW1PLEdBQVloTyxJQUFpQixTQUFTbnRCLEVBQVE0NkIsRUFBTW41QixHQUN0RCxPQUFPekIsR0FBVXlCLEVBQVEsSUFBTSxJQUFNbTVCLEVBQUtDLGFBQ2hELElBK0RJLElBQUlPLEdBQVlqTyxJQUFpQixTQUFTbnRCLEVBQVE0NkIsRUFBTW41QixHQUN0RCxPQUFPekIsR0FBVXlCLEVBQVEsSUFBTSxJQUFNczVCLEdBQVdILEVBQ3RELElBcWlCSSxJQUFJUyxHQUFZbE8sSUFBaUIsU0FBU250QixFQUFRNDZCLEVBQU1uNUIsR0FDdEQsT0FBT3pCLEdBQVV5QixFQUFRLElBQU0sSUFBTW01QixFQUFLVSxhQUNoRCxJQW1CUVAsR0FBYS9OLEdBQWdCLGVBcUJqQyxTQUFTSSxHQUFNL2MsRUFBUWtyQixFQUFTMU8sR0FJOUIsT0FIQXhjLEVBQVNxRCxHQUFTckQsSUFDbEJrckIsRUFBVTFPLEVBQVFsckIsRUFBWTQ1QixLQUVkNTVCLEVBcnlicEIsU0FBd0IwTyxHQUN0QixPQUFPckYsR0FBaUJ1RyxLQUFLbEIsRUFDOUIsQ0FveWJZbXJCLENBQWVuckIsR0ExamI1QixTQUFzQkEsR0FDcEIsT0FBT0EsRUFBT21DLE1BQU0xSCxLQUFrQixFQUN2QyxDQXdqYnFDMndCLENBQWFwckIsR0F6cmNuRCxTQUFvQkEsR0FDbEIsT0FBT0EsRUFBT21DLE1BQU0zSyxLQUFnQixFQUNyQyxDQXVyYzRENnpCLENBQVdyckIsR0FFN0RBLEVBQU9tQyxNQUFNK29CLElBQVksRUFDakMsQ0EwQkQsSUFBSUksR0FBVTVULElBQVMsU0FBU3ZhLEVBQU0xTCxHQUNwQyxJQUNFLE9BQU8vRCxHQUFNeVAsRUFBTTdMLEVBQVdHLEVBQy9CLENBQUMsTUFBT3BELEdBQ1AsT0FBT282QixHQUFRcDZCLEdBQUtBLEVBQUksSUFBSWtELEdBQU1sRCxFQUNuQyxDQUNQLElBNEJRazlCLEdBQVVqTyxJQUFTLFNBQVM1ZCxFQUFROHJCLEdBS3RDLE9BSkE5dEIsR0FBVTh0QixHQUFhLFNBQVN2c0IsR0FDOUJBLEVBQU0wUixHQUFNMVIsR0FDWjRMLEdBQWdCbkwsRUFBUVQsRUFBS2tuQixHQUFLem1CLEVBQU9ULEdBQU1TLEdBQ3ZELElBQ2FBLENBQ2IsSUFvR0ksU0FBU3lZLEdBQVNscUIsR0FDaEIsT0FBa0IsV0FDaEIsT0FBT0EsQ0FDZixDQUNLLENBZ0RELElBQUl3OUIsR0FBT3BPLEtBdUJQcU8sR0FBWXJPLElBQVcsR0FrQjNCLFNBQVM1SSxHQUFTeG1CLEdBQ2hCLE9BQU9BLENBQ1IsQ0E0Q0QsU0FBU3VQLEdBQVNMLEdBQ2hCLE9BQU9xWCxHQUE0QixtQkFBUnJYLEVBQXFCQSxFQUFPNE8sR0FBVTVPLEVBanRlL0MsR0FrdGVuQixDQXNHRCxJQUFJd3VCLEdBQVNqVSxJQUFTLFNBQVNubEIsRUFBTWQsR0FDbkMsZ0JBQWdCaU8sR0FDZCxPQUFPc1MsR0FBV3RTLEVBQVFuTixFQUFNZCxFQUN4QyxDQUNBLElBeUJRbTZCLEdBQVdsVSxJQUFTLFNBQVNoWSxFQUFRak8sR0FDdkMsZ0JBQWdCYyxHQUNkLE9BQU95ZixHQUFXdFMsRUFBUW5OLEVBQU1kLEVBQ3hDLENBQ0EsSUFzQ0ksU0FBU282QixHQUFNbnNCLEVBQVFqSixFQUFROUUsR0FDN0IsSUFBSTBPLEVBQVFvRCxHQUFLaE4sR0FDYiswQixFQUFjamIsR0FBYzlaLEVBQVE0SixHQUV6QixNQUFYMU8sR0FDRXdXLEdBQVMxUixLQUFZKzBCLEVBQVkvOUIsU0FBVzRTLEVBQU01UyxVQUN0RGtFLEVBQVU4RSxFQUNWQSxFQUFTaUosRUFDVEEsRUFBUzNTLEtBQ1R5K0IsRUFBY2piLEdBQWM5WixFQUFRZ04sR0FBS2hOLEtBRTNDLElBQUk2dUIsSUFBVW5kLEdBQVN4VyxJQUFZLFVBQVdBLElBQWNBLEVBQVEyekIsT0FDaEU1WSxFQUFTOEQsR0FBVzlRLEdBcUJ4QixPQW5CQWhDLEdBQVU4dEIsR0FBYSxTQUFTNU8sR0FDOUIsSUFBSXpmLEVBQU8xRyxFQUFPbW1CLEdBQ2xCbGQsRUFBT2tkLEdBQWN6ZixFQUNqQnVQLElBQ0ZoTixFQUFPbFQsVUFBVW93QixHQUFjLFdBQzdCLElBQUl2VSxFQUFXdGIsS0FBS3liLFVBQ3BCLEdBQUk4YyxHQUFTamQsRUFBVSxDQUNyQixJQUFJMVksRUFBUytQLEVBQU8zUyxLQUFLdWIsYUFLekIsT0FKYzNZLEVBQU80WSxZQUFjaUMsR0FBVXpkLEtBQUt3YixjQUUxQ2hhLEtBQUssQ0FBRTRPLEtBQVFBLEVBQU0xTCxLQUFRakUsVUFBVzRQLFFBQVdzQyxJQUMzRC9QLEVBQU82WSxVQUFZSCxFQUNaMVksQ0FDUixDQUNELE9BQU93TixFQUFLelAsTUFBTWdTLEVBQVFyQixHQUFVLENBQUN0UixLQUFLa0IsU0FBVVQsV0FDaEUsRUFFQSxJQUVha1MsQ0FDUixDQWtDRCxTQUFTbWhCLEtBQ2IsQ0FnREksSUFBSWlMLEdBQU9yTSxHQUFXcmhCLElBOEJsQjJ0QixHQUFZdE0sR0FBVzdoQixJQWlDdkJvdUIsR0FBV3ZNLEdBQVc5Z0IsSUF3QjFCLFNBQVNpVyxHQUFTcmlCLEdBQ2hCLE9BQU9nakIsR0FBTWhqQixHQUFRc00sR0FBYThSLEdBQU1wZSxJQWgzWDFDLFNBQTBCQSxHQUN4QixPQUFPLFNBQVNtTixHQUNkLE9BQU8rUSxHQUFRL1EsRUFBUW5OLEVBQy9CLENBQ0ssQ0E0MlhrRDA1QixDQUFpQjE1QixFQUNuRSxDQXNFRCxJQUFJMjVCLEdBQVFwTSxLQXNDUnFNLEdBQWFyTSxJQUFZLEdBb0I3QixTQUFTb0MsS0FDUCxNQUFPLEVBQ1IsQ0FlRCxTQUFTUSxLQUNQLE9BQVksQ0FDYixDQThKRCxJQUFJbFosR0FBTThWLElBQW9CLFNBQVM4TSxFQUFRQyxHQUM3QyxPQUFPRCxFQUFTQyxDQUNqQixHQUFFLEdBdUJDam5CLEdBQU9xYixHQUFZLFFBaUJuQjZMLEdBQVNoTixJQUFvQixTQUFTaU4sRUFBVUMsR0FDbEQsT0FBT0QsRUFBV0MsQ0FDbkIsR0FBRSxHQXVCQ2xuQixHQUFRbWIsR0FBWSxTQXdLeEIsSUFnYU1ocUIsR0FoYUZnMkIsR0FBV25OLElBQW9CLFNBQVNvTixFQUFZQyxHQUN0RCxPQUFPRCxFQUFhQyxDQUNyQixHQUFFLEdBdUJDQyxHQUFRbk0sR0FBWSxTQWlCcEJvTSxHQUFXdk4sSUFBb0IsU0FBU3dOLEVBQVNDLEdBQ25ELE9BQU9ELEVBQVVDLENBQ2xCLEdBQUUsR0FnbUJILE9BMWlCQXBsQixHQUFPcWxCLE1BcDZNUCxTQUFlei9CLEVBQUc0UCxHQUNoQixHQUFtQixtQkFBUkEsRUFDVCxNQUFVLElBQUF2USxHQUFVOEcsR0FHdEIsT0FEQW5HLEVBQUlvekIsR0FBVXB6QixHQUNQLFdBQ0wsS0FBTUEsRUFBSSxFQUNSLE9BQU80UCxFQUFLelAsTUFBTVgsS0FBTVMsVUFFbEMsQ0FDSyxFQTI1TURtYSxHQUFPeVcsSUFBTUEsR0FDYnpXLEdBQU94YSxPQUFTQSxHQUNoQndhLEdBQU95aEIsU0FBV0EsR0FDbEJ6aEIsR0FBTzBoQixhQUFlQSxHQUN0QjFoQixHQUFPMmhCLFdBQWFBLEdBQ3BCM2hCLEdBQU80aEIsR0FBS0EsR0FDWjVoQixHQUFPdWUsT0FBU0EsR0FDaEJ2ZSxHQUFPd2UsS0FBT0EsR0FDZHhlLEdBQU80akIsUUFBVUEsR0FDakI1akIsR0FBT3llLFFBQVVBLEdBQ2pCemUsR0FBT3NsQixVQWw4S1AsV0FDRSxJQUFLei9CLFVBQVVDLE9BQ2IsTUFBTyxHQUVULElBQUlRLEVBQVFULFVBQVUsR0FDdEIsT0FBT3FhLEdBQVE1WixHQUFTQSxFQUFRLENBQUNBLEVBQ2xDLEVBNjdLRDBaLEdBQU8yZCxNQUFRQSxHQUNmM2QsR0FBT3VsQixNQXBnVFAsU0FBZTV2QixFQUFPK0QsRUFBTW1iLEdBRXhCbmIsR0FER21iLEVBQVFDLEdBQWVuZixFQUFPK0QsRUFBTW1iLEdBQVNuYixJQUFTL1AsR0FDbEQsRUFFQXlVLEdBQVU0YSxHQUFVdGYsR0FBTyxHQUVwQyxJQUFJNVQsRUFBa0IsTUFBVDZQLEVBQWdCLEVBQUlBLEVBQU03UCxPQUN2QyxJQUFLQSxHQUFVNFQsRUFBTyxFQUNwQixNQUFPLEdBTVQsSUFKQSxJQUFJalEsRUFBUSxFQUNSMk0sRUFBVyxFQUNYcE8sRUFBU3JELEdBQU02WSxHQUFXMVgsRUFBUzRULElBRWhDalEsRUFBUTNELEdBQ2JrQyxFQUFPb08sS0FBY3NhLEdBQVUvYSxFQUFPbE0sRUFBUUEsR0FBU2lRLEdBRXpELE9BQU8xUixDQUNSLEVBbS9TRGdZLEdBQU93bEIsUUFsK1NQLFNBQWlCN3ZCLEdBTWYsSUFMQSxJQUFJbE0sR0FBUyxFQUNUM0QsRUFBa0IsTUFBVDZQLEVBQWdCLEVBQUlBLEVBQU03UCxPQUNuQ3NRLEVBQVcsRUFDWHBPLEVBQVMsS0FFSnlCLEVBQVEzRCxHQUFRLENBQ3ZCLElBQUlRLEVBQVFxUCxFQUFNbE0sR0FDZG5ELElBQ0YwQixFQUFPb08sS0FBYzlQLEVBRXhCLENBQ0QsT0FBTzBCLENBQ1IsRUFzOVNEZ1ksR0FBTzVZLE9BOTdTUCxXQUNFLElBQUl0QixFQUFTRCxVQUFVQyxPQUN2QixJQUFLQSxFQUNILE1BQU8sR0FNVCxJQUpBLElBQUlnRSxFQUFPbkYsR0FBTW1CLEVBQVMsR0FDdEI2UCxFQUFROVAsVUFBVSxHQUNsQjRELEVBQVEzRCxFQUVMMkQsS0FDTEssRUFBS0wsRUFBUSxHQUFLNUQsVUFBVTRELEdBRTlCLE9BQU9pTixHQUFVd0osR0FBUXZLLEdBQVNrTixHQUFVbE4sR0FBUyxDQUFDQSxHQUFRMFMsR0FBWXZlLEVBQU0sR0FDakYsRUFrN1NEa1csR0FBT3lsQixLQTN0Q1AsU0FBYzlkLEdBQ1osSUFBSTdoQixFQUFrQixNQUFUNmhCLEVBQWdCLEVBQUlBLEVBQU03aEIsT0FDbkMyeEIsRUFBYTVJLEtBU2pCLE9BUEFsSCxFQUFTN2hCLEVBQWMyUSxHQUFTa1IsR0FBTyxTQUFTc1IsR0FDOUMsR0FBc0IsbUJBQVhBLEVBQUssR0FDZCxNQUFNLElBQUloMEIsR0FBVThHLEdBRXRCLE1BQU8sQ0FBQzByQixFQUFXd0IsRUFBSyxJQUFLQSxFQUFLLEdBQzFDLElBTHdCLEdBT1hsSixJQUFTLFNBQVNqbUIsR0FFdkIsSUFEQSxJQUFJTCxHQUFTLElBQ0pBLEVBQVEzRCxHQUFRLENBQ3ZCLElBQUltekIsRUFBT3RSLEVBQU1sZSxHQUNqQixHQUFJMUQsR0FBTWt6QixFQUFLLEdBQUk3ekIsS0FBTTBFLEdBQ3ZCLE9BQU8vRCxHQUFNa3pCLEVBQUssR0FBSTd6QixLQUFNMEUsRUFFL0IsQ0FDVCxHQUNLLEVBd3NDRGtXLEdBQU8wbEIsU0E5cUNQLFNBQWtCNTJCLEdBQ2hCLE9BejVZRixTQUFzQkEsR0FDcEIsSUFBSTRKLEVBQVFvRCxHQUFLaE4sR0FDakIsT0FBZ0JpSixTQUFBQSxHQUNkLE9BQU95TyxHQUFlek8sRUFBUWpKLEVBQVE0SixFQUM5QyxDQUNLLENBbzVZUWl0QixDQUFhdmhCLEdBQVV0VixFQS9pZVosR0FnamVuQixFQTZxQ0RrUixHQUFPd1EsU0FBV0EsR0FDbEJ4USxHQUFPOGQsUUFBVUEsR0FDakI5ZCxHQUFPMWEsT0F0dUhQLFNBQWdCVCxFQUFXK2dDLEdBQ3pCLElBQUk1OUIsRUFBU3NZLEdBQVd6YixHQUN4QixPQUFxQixNQUFkK2dDLEVBQXFCNTlCLEVBQVN3YixHQUFXeGIsRUFBUTQ5QixFQUN6RCxFQW91SEQ1bEIsR0FBTzZsQixNQXp1TVAsU0FBU0EsRUFBTXJ3QixFQUFNa2hCLEVBQU83QixHQUUxQixJQUFJN3NCLEVBQVNxeEIsR0FBVzdqQixFQTcrVE4sRUE2K1Q2QjdMLEVBQVdBLEVBQVdBLEVBQVdBLEVBQVdBLEVBRDNGK3NCLEVBQVE3QixFQUFRbHJCLEVBQVkrc0IsR0FHNUIsT0FEQTF1QixFQUFPZ1MsWUFBYzZyQixFQUFNN3JCLFlBQ3BCaFMsQ0FDUixFQXF1TURnWSxHQUFPOGxCLFdBN3JNUCxTQUFTQSxFQUFXdHdCLEVBQU1raEIsRUFBTzdCLEdBRS9CLElBQUk3c0IsRUFBU3F4QixHQUFXN2pCLEVBQU10SixFQUF1QnZDLEVBQVdBLEVBQVdBLEVBQVdBLEVBQVdBLEVBRGpHK3NCLEVBQVE3QixFQUFRbHJCLEVBQVkrc0IsR0FHNUIsT0FEQTF1QixFQUFPZ1MsWUFBYzhyQixFQUFXOXJCLFlBQ3pCaFMsQ0FDUixFQXlyTURnWSxHQUFPMGUsU0FBV0EsR0FDbEIxZSxHQUFPL0UsU0FBV0EsR0FDbEIrRSxHQUFPK2hCLGFBQWVBLEdBQ3RCL2hCLEdBQU9nZ0IsTUFBUUEsR0FDZmhnQixHQUFPaWdCLE1BQVFBLEdBQ2ZqZ0IsR0FBT2tjLFdBQWFBLEdBQ3BCbGMsR0FBT21jLGFBQWVBLEdBQ3RCbmMsR0FBT29jLGVBQWlCQSxHQUN4QnBjLEdBQU9uVSxLQXQwU1AsU0FBYzhKLEVBQU8vUCxFQUFHaXZCLEdBQ3RCLElBQUkvdUIsRUFBa0IsTUFBVDZQLEVBQWdCLEVBQUlBLEVBQU03UCxPQUN2QyxPQUFLQSxFQUlFNHFCLEdBQVUvYSxHQURqQi9QLEVBQUtpdkIsR0FBU2p2QixJQUFNK0QsRUFBYSxFQUFJcXZCLEdBQVVwekIsSUFDbkIsRUFBSSxFQUFJQSxFQUFHRSxHQUg5QixFQUlWLEVBZzBTRGthLEdBQU8rbEIsVUFyeVNQLFNBQW1CcHdCLEVBQU8vUCxFQUFHaXZCLEdBQzNCLElBQUkvdUIsRUFBa0IsTUFBVDZQLEVBQWdCLEVBQUlBLEVBQU03UCxPQUN2QyxPQUFLQSxFQUtFNHFCLEdBQVUvYSxFQUFPLEdBRHhCL1AsRUFBSUUsR0FESkYsRUFBS2l2QixHQUFTanZCLElBQU0rRCxFQUFhLEVBQUlxdkIsR0FBVXB6QixLQUVoQixFQUFJLEVBQUlBLEdBSjlCLEVBS1YsRUE4eFNEb2EsR0FBT2dtQixlQXp2U1AsU0FBd0Jyd0IsRUFBT08sR0FDN0IsT0FBUVAsR0FBU0EsRUFBTTdQLE9BQ25Cc3NCLEdBQVV6YyxFQUFPa1osR0FBWTNZLEVBQVcsSUFBSSxHQUFNLEdBQ2xELEVBQ0wsRUFzdlNEOEosR0FBT2ltQixVQWp0U1AsU0FBbUJ0d0IsRUFBT08sR0FDeEIsT0FBUVAsR0FBU0EsRUFBTTdQLE9BQ25Cc3NCLEdBQVV6YyxFQUFPa1osR0FBWTNZLEVBQVcsSUFBSSxHQUM1QyxFQUNMLEVBOHNTRDhKLEdBQU9rbUIsS0EvcVNQLFNBQWN2d0IsRUFBT3JQLEVBQU8wcEIsRUFBT1csR0FDakMsSUFBSTdxQixFQUFrQixNQUFUNlAsRUFBZ0IsRUFBSUEsRUFBTTdQLE9BQ3ZDLE9BQUtBLEdBR0RrcUIsR0FBeUIsaUJBQVRBLEdBQXFCOEUsR0FBZW5mLEVBQU9yUCxFQUFPMHBCLEtBQ3BFQSxFQUFRLEVBQ1JXLEVBQU03cUIsR0F6dklWLFNBQWtCNlAsRUFBT3JQLEVBQU8wcEIsRUFBT1csR0FDckMsSUFBSTdxQixFQUFTNlAsRUFBTTdQLE9BV25CLEtBVEFrcUIsRUFBUWdKLEdBQVVoSixJQUNOLElBQ1ZBLEdBQVNBLEVBQVFscUIsRUFBUyxFQUFLQSxFQUFTa3FCLElBRTFDVyxFQUFPQSxJQUFRaG5CLEdBQWFnbkIsRUFBTTdxQixFQUFVQSxFQUFTa3pCLEdBQVVySSxJQUNyRCxJQUNSQSxHQUFPN3FCLEdBRVQ2cUIsRUFBTVgsRUFBUVcsRUFBTSxFQUFJNFEsR0FBUzVRLEdBQzFCWCxFQUFRVyxHQUNiaGIsRUFBTXFhLEtBQVcxcEIsRUFFbkIsT0FBT3FQLENBQ1IsQ0EydUlRd3dCLENBQVN4d0IsRUFBT3JQLEVBQU8wcEIsRUFBT1csSUFONUIsRUFPVixFQXNxU0QzUSxHQUFPb21CLE9BM3ZPUCxTQUFnQmh2QixFQUFZbEIsR0FFMUIsT0FEV2dLLEdBQVE5SSxHQUFjakIsR0FBY2lTLElBQ25DaFIsRUFBWXlYLEdBQVkzWSxFQUFXLEdBQ2hELEVBeXZPRDhKLEdBQU9xbUIsUUF2cU9QLFNBQWlCanZCLEVBQVl2QixHQUMzQixPQUFPd1MsR0FBWTVPLEdBQUlyQyxFQUFZdkIsR0FBVyxFQUMvQyxFQXNxT0RtSyxHQUFPc21CLFlBaHBPUCxTQUFxQmx2QixFQUFZdkIsR0FDL0IsT0FBT3dTLEdBQVk1TyxHQUFJckMsRUFBWXZCLEdBQVd0SixFQUMvQyxFQStvT0R5VCxHQUFPdW1CLGFBeG5PUCxTQUFzQm52QixFQUFZdkIsRUFBVXlTLEdBRTFDLE9BREFBLEVBQVFBLElBQVUzZSxFQUFZLEVBQUlxdkIsR0FBVTFRLEdBQ3JDRCxHQUFZNU8sR0FBSXJDLEVBQVl2QixHQUFXeVMsRUFDL0MsRUFzbk9EdEksR0FBT21hLFFBQVVBLEdBQ2pCbmEsR0FBT3dtQixZQXZpU1AsU0FBcUI3d0IsR0FFbkIsT0FEc0IsTUFBVEEsRUFBZ0IsRUFBSUEsRUFBTTdQLFFBQ3ZCdWlCLEdBQVkxUyxFQUFPcEosR0FBWSxFQUNoRCxFQXFpU0R5VCxHQUFPeW1CLGFBL2dTUCxTQUFzQjl3QixFQUFPMlMsR0FFM0IsT0FEc0IsTUFBVDNTLEVBQWdCLEVBQUlBLEVBQU03UCxRQUtoQ3VpQixHQUFZMVMsRUFEbkIyUyxFQUFRQSxJQUFVM2UsRUFBWSxFQUFJcXZCLEdBQVUxUSxJQUZuQyxFQUlWLEVBeWdTRHRJLEdBQU8wbUIsS0F6OUxQLFNBQWNseEIsR0FDWixPQUFPNmpCLEdBQVc3akIsRUE1d1VELElBNndVbEIsRUF3OUxEd0ssR0FBTzhqQixLQUFPQSxHQUNkOWpCLEdBQU8rakIsVUFBWUEsR0FDbkIvakIsR0FBTzJtQixVQTMvUlAsU0FBbUJoZixHQUtqQixJQUpBLElBQUlsZSxHQUFTLEVBQ1QzRCxFQUFrQixNQUFUNmhCLEVBQWdCLEVBQUlBLEVBQU03aEIsT0FDbkNrQyxFQUFTLENBQUUsSUFFTnlCLEVBQVEzRCxHQUFRLENBQ3ZCLElBQUltekIsRUFBT3RSLEVBQU1sZSxHQUNqQnpCLEVBQU9peEIsRUFBSyxJQUFNQSxFQUFLLEVBQ3hCLENBQ0QsT0FBT2p4QixDQUNSLEVBay9SRGdZLEdBQU80bUIsVUEzOEdQLFNBQW1CN3VCLEdBQ2pCLE9BQWlCLE1BQVZBLEVBQWlCLEdBQUs2USxHQUFjN1EsRUFBUStELEdBQUsvRCxHQUN6RCxFQTA4R0RpSSxHQUFPNm1CLFlBajdHUCxTQUFxQjl1QixHQUNuQixPQUFpQixNQUFWQSxFQUFpQixHQUFLNlEsR0FBYzdRLEVBQVFxTixHQUFPck4sR0FDM0QsRUFnN0dEaUksR0FBT2tlLFFBQVVBLEdBQ2pCbGUsR0FBTzhtQixRQTU2UlAsU0FBaUJueEIsR0FFZixPQURzQixNQUFUQSxFQUFnQixFQUFJQSxFQUFNN1AsUUFDdkI0cUIsR0FBVS9hLEVBQU8sR0FBSSxHQUFLLEVBQzNDLEVBMDZSRHFLLEdBQU93YyxhQUFlQSxHQUN0QnhjLEdBQU8wYyxlQUFpQkEsR0FDeEIxYyxHQUFPMmMsaUJBQW1CQSxHQUMxQjNjLEdBQU9paUIsT0FBU0EsR0FDaEJqaUIsR0FBT2tpQixTQUFXQSxHQUNsQmxpQixHQUFPbWUsVUFBWUEsR0FDbkJuZSxHQUFPbkssU0FBV0EsR0FDbEJtSyxHQUFPb2UsTUFBUUEsR0FDZnBlLEdBQU9sRSxLQUFPQSxHQUNka0UsR0FBT29GLE9BQVNBLEdBQ2hCcEYsR0FBT3ZHLElBQU1BLEdBQ2J1RyxHQUFPK21CLFFBMXJHUCxTQUFpQmh2QixFQUFRbEMsR0FDdkIsSUFBSTdOLEVBQVMsQ0FBRSxFQU1mLE9BTEE2TixFQUFXZ1osR0FBWWhaLEVBQVUsR0FFakNpUyxHQUFXL1AsR0FBUSxTQUFTelIsRUFBT2dSLEVBQUtTLEdBQ3RDbUwsR0FBZ0JsYixFQUFRNk4sRUFBU3ZQLEVBQU9nUixFQUFLUyxHQUFTelIsRUFDOUQsSUFDYTBCLENBQ1IsRUFtckdEZ1ksR0FBT2duQixVQXJwR1AsU0FBbUJqdkIsRUFBUWxDLEdBQ3pCLElBQUk3TixFQUFTLENBQUUsRUFNZixPQUxBNk4sRUFBV2daLEdBQVloWixFQUFVLEdBRWpDaVMsR0FBVy9QLEdBQVEsU0FBU3pSLEVBQU9nUixFQUFLUyxHQUN0Q21MLEdBQWdCbGIsRUFBUXNQLEVBQUt6QixFQUFTdlAsRUFBT2dSLEVBQUtTLEdBQzFELElBQ2EvUCxDQUNSLEVBOG9HRGdZLEdBQU9pbkIsUUFwaENQLFNBQWlCbjRCLEdBQ2YsT0FBT2tlLEdBQVk1SSxHQUFVdFYsRUF4dmVYLEdBeXZlbkIsRUFtaENEa1IsR0FBT2tuQixnQkFoL0JQLFNBQXlCdDhCLEVBQU04aEIsR0FDN0IsT0FBT0ssR0FBb0JuaUIsRUFBTXdaLEdBQVVzSSxFQTd4ZXpCLEdBOHhlbkIsRUErK0JEMU0sR0FBTzRiLFFBQVVBLEdBQ2pCNWIsR0FBTzVYLE1BQVFBLEdBQ2Y0WCxHQUFPZ2lCLFVBQVlBLEdBQ25CaGlCLEdBQU9na0IsT0FBU0EsR0FDaEJoa0IsR0FBT2lrQixTQUFXQSxHQUNsQmprQixHQUFPa2tCLE1BQVFBLEdBQ2Zsa0IsR0FBT3FnQixPQUFTQSxHQUNoQnJnQixHQUFPbW5CLE9BenpCUCxTQUFnQnZoQyxHQUVkLE9BREFBLEVBQUlvekIsR0FBVXB6QixHQUNQbXFCLElBQVMsU0FBU2ptQixHQUN2QixPQUFPMmtCLEdBQVEza0IsRUFBTWxFLEVBQzdCLEdBQ0ssRUFxekJEb2EsR0FBT29pQixLQUFPQSxHQUNkcGlCLEdBQU9vbkIsT0FuaEdQLFNBQWdCcnZCLEVBQVE3QixHQUN0QixPQUFPcXNCLEdBQU94cUIsRUFBUXNvQixHQUFPeFIsR0FBWTNZLElBQzFDLEVBa2hHRDhKLEdBQU9xbkIsS0E3M0xQLFNBQWM3eEIsR0FDWixPQUFPK29CLEdBQU8sRUFBRy9vQixFQUNsQixFQTQzTER3SyxHQUFPc25CLFFBcjROUCxTQUFpQmx3QixFQUFZdVgsRUFBV0MsRUFBUWlHLEdBQzlDLE9BQWtCLE1BQWR6ZCxFQUNLLElBRUo4SSxHQUFReU8sS0FDWEEsRUFBeUIsTUFBYkEsRUFBb0IsR0FBSyxDQUFDQSxJQUduQ3pPLEdBREwwTyxFQUFTaUcsRUFBUWxyQixFQUFZaWxCLEtBRTNCQSxFQUFtQixNQUFWQSxFQUFpQixHQUFLLENBQUNBLElBRTNCRixHQUFZdFgsRUFBWXVYLEVBQVdDLEdBQzNDLEVBMDNORDVPLEdBQU9ta0IsS0FBT0EsR0FDZG5rQixHQUFPc2dCLFNBQVdBLEdBQ2xCdGdCLEdBQU9va0IsVUFBWUEsR0FDbkJwa0IsR0FBT3FrQixTQUFXQSxHQUNsQnJrQixHQUFPeWdCLFFBQVVBLEdBQ2pCemdCLEdBQU8wZ0IsYUFBZUEsR0FDdEIxZ0IsR0FBT3FlLFVBQVlBLEdBQ25CcmUsR0FBTzlFLEtBQU9BLEdBQ2Q4RSxHQUFPdWlCLE9BQVNBLEdBQ2hCdmlCLEdBQU9pTixTQUFXQSxHQUNsQmpOLEdBQU91bkIsV0EvckJQLFNBQW9CeHZCLEdBQ2xCLE9BQWdCbk4sU0FBQUEsR0FDZCxPQUFpQixNQUFWbU4sRUFBaUJwTyxFQUFZbWYsR0FBUS9RLEVBQVFuTixFQUM1RCxDQUNLLEVBNHJCRG9WLEdBQU80YyxLQUFPQSxHQUNkNWMsR0FBTzZjLFFBQVVBLEdBQ2pCN2MsR0FBT3duQixVQXBzUlAsU0FBbUI3eEIsRUFBT2dCLEVBQVFkLEdBQ2hDLE9BQVFGLEdBQVNBLEVBQU03UCxRQUFVNlEsR0FBVUEsRUFBTzdRLE9BQzlDMnBCLEdBQVk5WixFQUFPZ0IsRUFBUWtZLEdBQVloWixFQUFVLElBQ2pERixDQUNMLEVBaXNSRHFLLEdBQU95bkIsWUF4cVJQLFNBQXFCOXhCLEVBQU9nQixFQUFRSCxHQUNsQyxPQUFRYixHQUFTQSxFQUFNN1AsUUFBVTZRLEdBQVVBLEVBQU83USxPQUM5QzJwQixHQUFZOVosRUFBT2dCLEVBQVFoTixFQUFXNk0sR0FDdENiLENBQ0wsRUFxcVJEcUssR0FBTzhjLE9BQVNBLEdBQ2hCOWMsR0FBT3VrQixNQUFRQSxHQUNmdmtCLEdBQU93a0IsV0FBYUEsR0FDcEJ4a0IsR0FBTzJnQixNQUFRQSxHQUNmM2dCLEdBQU8wbkIsT0F4dk5QLFNBQWdCdHdCLEVBQVlsQixHQUUxQixPQURXZ0ssR0FBUTlJLEdBQWNqQixHQUFjaVMsSUFDbkNoUixFQUFZaXBCLEdBQU94UixHQUFZM1ksRUFBVyxJQUN2RCxFQXN2TkQ4SixHQUFPMm5CLE9Bem1SUCxTQUFnQmh5QixFQUFPTyxHQUNyQixJQUFJbE8sRUFBUyxHQUNiLElBQU0yTixJQUFTQSxFQUFNN1AsT0FDbkIsT0FBT2tDLEVBRVQsSUFBSXlCLEdBQVMsRUFDVGttQixFQUFVLEdBQ1Y3cEIsRUFBUzZQLEVBQU03UCxPQUduQixJQURBb1EsRUFBWTJZLEdBQVkzWSxFQUFXLEtBQzFCek0sRUFBUTNELEdBQVEsQ0FDdkIsSUFBSVEsRUFBUXFQLEVBQU1sTSxHQUNkeU0sRUFBVTVQLEVBQU9tRCxFQUFPa00sS0FDMUIzTixFQUFPcEIsS0FBS04sR0FDWnFwQixFQUFRL29CLEtBQUs2QyxHQUVoQixDQUVELE9BREFpbUIsR0FBVy9aLEVBQU9nYSxHQUNYM25CLENBQ1IsRUF1bFJEZ1ksR0FBTzRuQixLQWx1TFAsU0FBY3B5QixFQUFNd2EsR0FDbEIsR0FBbUIsbUJBQVJ4YSxFQUNULE1BQVUsSUFBQXZRLEdBQVU4RyxHQUd0QixPQUFPZ2tCLEdBQVN2YSxFQURoQndhLEVBQVFBLElBQVVybUIsRUFBWXFtQixFQUFRZ0osR0FBVWhKLEdBRWpELEVBNnRMRGhRLEdBQU9uQixRQUFVQSxHQUNqQm1CLEdBQU82bkIsV0FodE5QLFNBQW9CendCLEVBQVl4UixFQUFHaXZCLEdBT2pDLE9BTEVqdkIsR0FER2l2QixFQUFRQyxHQUFlMWQsRUFBWXhSLEVBQUdpdkIsR0FBU2p2QixJQUFNK0QsR0FDcEQsRUFFQXF2QixHQUFVcHpCLElBRUxzYSxHQUFROUksR0FBY3VMLEdBQWtCeU4sSUFDdkNoWixFQUFZeFIsRUFDekIsRUF5c05Eb2EsR0FBTzlGLElBdjZGUCxTQUFhbkMsRUFBUW5OLEVBQU10RSxHQUN6QixPQUFpQixNQUFWeVIsRUFBaUJBLEVBQVN5WCxHQUFRelgsRUFBUW5OLEVBQU10RSxFQUN4RCxFQXM2RkQwWixHQUFPOG5CLFFBNTRGUCxTQUFpQi92QixFQUFRbk4sRUFBTXRFLEVBQU9nZSxHQUVwQyxPQURBQSxFQUFrQyxtQkFBZEEsRUFBMkJBLEVBQWEzYSxFQUMzQyxNQUFWb08sRUFBaUJBLEVBQVN5WCxHQUFRelgsRUFBUW5OLEVBQU10RSxFQUFPZ2UsRUFDL0QsRUEwNEZEdEUsR0FBTytuQixRQTFyTlAsU0FBaUIzd0IsR0FFZixPQURXOEksR0FBUTlJLEdBQWMyTCxHQUFlME4sSUFDcENyWixFQUNiLEVBd3JORDRJLEdBQU83WSxNQWhqUlAsU0FBZXdPLEVBQU9xYSxFQUFPVyxHQUMzQixJQUFJN3FCLEVBQWtCLE1BQVQ2UCxFQUFnQixFQUFJQSxFQUFNN1AsT0FDdkMsT0FBS0EsR0FHRDZxQixHQUFxQixpQkFBUEEsR0FBbUJtRSxHQUFlbmYsRUFBT3FhLEVBQU9XLElBQ2hFWCxFQUFRLEVBQ1JXLEVBQU03cUIsSUFHTmtxQixFQUFpQixNQUFUQSxFQUFnQixFQUFJZ0osR0FBVWhKLEdBQ3RDVyxFQUFNQSxJQUFRaG5CLEVBQVk3RCxFQUFTa3pCLEdBQVVySSxJQUV4Q0QsR0FBVS9hLEVBQU9xYSxFQUFPVyxJQVZ0QixFQVdWLEVBbWlSRDNRLEdBQU9zZSxPQUFTQSxHQUNoQnRlLEdBQU9nb0IsV0F4M1FQLFNBQW9CcnlCLEdBQ2xCLE9BQVFBLEdBQVNBLEVBQU03UCxPQUNuQjhyQixHQUFlamMsR0FDZixFQUNMLEVBcTNRRHFLLEdBQU9pb0IsYUFuMlFQLFNBQXNCdHlCLEVBQU9FLEdBQzNCLE9BQVFGLEdBQVNBLEVBQU03UCxPQUNuQjhyQixHQUFlamMsRUFBT2taLEdBQVloWixFQUFVLElBQzVDLEVBQ0wsRUFnMlFEbUssR0FBT3RGLE1BNWhFUCxTQUFlckMsRUFBUTZ2QixFQUFXQyxHQUtoQyxPQUpJQSxHQUF5QixpQkFBVEEsR0FBcUJyVCxHQUFlemMsRUFBUTZ2QixFQUFXQyxLQUN6RUQsRUFBWUMsRUFBUXgrQixJQUV0QncrQixFQUFRQSxJQUFVeCtCLEVBQVkrQyxFQUFtQnk3QixJQUFVLElBSTNEOXZCLEVBQVNxRCxHQUFTckQsTUFFUSxpQkFBYjZ2QixHQUNPLE1BQWJBLElBQXNCL3lCLEdBQVMreUIsT0FFcENBLEVBQVlwVyxHQUFhb1csS0FDUDV1QixHQUFXakIsR0FDcEI0YSxHQUFVMVksR0FBY2xDLEdBQVMsRUFBRzh2QixHQUd4Qzl2QixFQUFPcUMsTUFBTXd0QixFQUFXQyxHQVp0QixFQWFWLEVBMGdFRG5vQixHQUFPb29CLE9BbnNMUCxTQUFnQjV5QixFQUFNd2EsR0FDcEIsR0FBbUIsbUJBQVJ4YSxFQUNULE1BQU0sSUFBSXZRLEdBQVU4RyxHQUd0QixPQURBaWtCLEVBQWlCLE1BQVRBLEVBQWdCLEVBQUk1UixHQUFVNGEsR0FBVWhKLEdBQVEsR0FDakRELElBQVMsU0FBU2ptQixHQUN2QixJQUFJNkwsRUFBUTdMLEVBQUtrbUIsR0FDYmdMLEVBQVkvSCxHQUFVbnBCLEVBQU0sRUFBR2ttQixHQUtuQyxPQUhJcmEsR0FDRmUsR0FBVXNrQixFQUFXcmxCLEdBRWhCNVAsR0FBTXlQLEVBQU1wUSxLQUFNNDFCLEVBQ2pDLEdBQ0ssRUFzckxEaGIsR0FBT3FvQixLQWwxUVAsU0FBYzF5QixHQUNaLElBQUk3UCxFQUFrQixNQUFUNlAsRUFBZ0IsRUFBSUEsRUFBTTdQLE9BQ3ZDLE9BQU9BLEVBQVM0cUIsR0FBVS9hLEVBQU8sRUFBRzdQLEdBQVUsRUFDL0MsRUFnMVFEa2EsR0FBT3NvQixLQXJ6UVAsU0FBYzN5QixFQUFPL1AsRUFBR2l2QixHQUN0QixPQUFNbGYsR0FBU0EsRUFBTTdQLE9BSWQ0cUIsR0FBVS9hLEVBQU8sR0FEeEIvUCxFQUFLaXZCLEdBQVNqdkIsSUFBTStELEVBQWEsRUFBSXF2QixHQUFVcHpCLElBQ2hCLEVBQUksRUFBSUEsR0FIOUIsRUFJVixFQWd6UURvYSxHQUFPdW9CLFVBcnhRUCxTQUFtQjV5QixFQUFPL1AsRUFBR2l2QixHQUMzQixJQUFJL3VCLEVBQWtCLE1BQVQ2UCxFQUFnQixFQUFJQSxFQUFNN1AsT0FDdkMsT0FBS0EsRUFLRTRxQixHQUFVL2EsR0FEakIvUCxFQUFJRSxHQURKRixFQUFLaXZCLEdBQVNqdkIsSUFBTStELEVBQWEsRUFBSXF2QixHQUFVcHpCLEtBRW5CLEVBQUksRUFBSUEsRUFBR0UsR0FKOUIsRUFLVixFQTh3UURrYSxHQUFPd29CLGVBenVRUCxTQUF3Qjd5QixFQUFPTyxHQUM3QixPQUFRUCxHQUFTQSxFQUFNN1AsT0FDbkJzc0IsR0FBVXpjLEVBQU9rWixHQUFZM1ksRUFBVyxJQUFJLEdBQU8sR0FDbkQsRUFDTCxFQXN1UUQ4SixHQUFPeW9CLFVBanNRUCxTQUFtQjl5QixFQUFPTyxHQUN4QixPQUFRUCxHQUFTQSxFQUFNN1AsT0FDbkJzc0IsR0FBVXpjLEVBQU9rWixHQUFZM1ksRUFBVyxJQUN4QyxFQUNMLEVBOHJRRDhKLEdBQU8wb0IsSUFwdVBQLFNBQWFwaUMsRUFBT3MzQixHQUVsQixPQURBQSxFQUFZdDNCLEdBQ0xBLENBQ1IsRUFrdVBEMFosR0FBTzJvQixTQTlvTFAsU0FBa0JuekIsRUFBTWtSLEVBQU0xYyxHQUM1QixJQUFJaTFCLEdBQVUsRUFDVi9KLEdBQVcsRUFFZixHQUFtQixtQkFBUjFmLEVBQ1QsTUFBVSxJQUFBdlEsR0FBVThHLEdBTXRCLE9BSkl5VSxHQUFTeFcsS0FDWGkxQixFQUFVLFlBQWFqMUIsSUFBWUEsRUFBUWkxQixRQUFVQSxFQUNyRC9KLEVBQVcsYUFBY2xyQixJQUFZQSxFQUFRa3JCLFNBQVdBLEdBRW5Ed0osR0FBU2xwQixFQUFNa1IsRUFBTSxDQUMxQnVZLFFBQVdBLEVBQ1hKLFFBQVduWSxFQUNYd08sU0FBWUEsR0FFZixFQStuTERsVixHQUFPOFYsS0FBT0EsR0FDZDlWLEdBQU9vaEIsUUFBVUEsR0FDakJwaEIsR0FBT3lpQixRQUFVQSxHQUNqQnppQixHQUFPMGlCLFVBQVlBLEdBQ25CMWlCLEdBQU80b0IsT0FyZlAsU0FBZ0J0aUMsR0FDZCxPQUFJNFosR0FBUTVaLEdBQ0htUSxHQUFTblEsRUFBTzBpQixJQUVsQmIsR0FBUzdoQixHQUFTLENBQUNBLEdBQVN1YyxHQUFVa1EsR0FBYXJYLEdBQVNwVixJQUNwRSxFQWlmRDBaLEdBQU91TyxjQUFnQkEsR0FDdkJ2TyxHQUFPbkcsVUExMEZQLFNBQW1COUIsRUFBUWxDLEVBQVVDLEdBQ25DLElBQUlvTSxFQUFRaEMsR0FBUW5JLEdBQ2hCOHdCLEVBQVkzbUIsR0FBU25FLEdBQVNoRyxJQUFXeEMsR0FBYXdDLEdBRzFELEdBREFsQyxFQUFXZ1osR0FBWWhaLEVBQVUsR0FDZCxNQUFmQyxFQUFxQixDQUN2QixJQUFJMFAsRUFBT3pOLEdBQVVBLEVBQU8xUyxZQUUxQnlRLEVBREUreUIsRUFDWTNtQixFQUFRLElBQUlzRCxFQUFPLEdBRTFCaEYsR0FBU3pJLElBQ0Y4USxHQUFXckQsR0FBUWxGLEdBQVcvRCxHQUFheEUsSUFHM0MsQ0FBRSxDQUVuQixDQUlELE9BSEM4d0IsRUFBWTl5QixHQUFZK1IsSUFBWS9QLEdBQVEsU0FBU3pSLEVBQU9tRCxFQUFPc08sR0FDbEUsT0FBT2xDLEVBQVNDLEVBQWF4UCxFQUFPbUQsRUFBT3NPLEVBQ25ELElBQ2FqQyxDQUNSLEVBc3pGRGtLLEdBQU84b0IsTUFybkxQLFNBQWV0ekIsR0FDYixPQUFPaWhCLEdBQUlqaEIsRUFBTSxFQUNsQixFQW9uTER3SyxHQUFPK2MsTUFBUUEsR0FDZi9jLEdBQU9nZCxRQUFVQSxHQUNqQmhkLEdBQU9pZCxVQUFZQSxHQUNuQmpkLEdBQU8rb0IsS0F6bVFQLFNBQWNwekIsR0FDWixPQUFRQSxHQUFTQSxFQUFNN1AsT0FBVWlzQixHQUFTcGMsR0FBUyxFQUNwRCxFQXdtUURxSyxHQUFPZ3BCLE9BL2tRUCxTQUFnQnJ6QixFQUFPRSxHQUNyQixPQUFRRixHQUFTQSxFQUFNN1AsT0FBVWlzQixHQUFTcGMsRUFBT2taLEdBQVloWixFQUFVLElBQU0sRUFDOUUsRUE4a1FEbUssR0FBT2lwQixTQXhqUVAsU0FBa0J0ekIsRUFBT2EsR0FFdkIsT0FEQUEsRUFBa0MsbUJBQWRBLEVBQTJCQSxFQUFhN00sRUFDcERnTSxHQUFTQSxFQUFNN1AsT0FBVWlzQixHQUFTcGMsRUFBT2hNLEVBQVc2TSxHQUFjLEVBQzNFLEVBc2pRRHdKLEdBQU9rcEIsTUFoeUZQLFNBQWVueEIsRUFBUW5OLEdBQ3JCLE9BQWlCLE1BQVZtTixHQUF3QjhYLEdBQVU5WCxFQUFRbk4sRUFDbEQsRUEreEZEb1YsR0FBT2tkLE1BQVFBLEdBQ2ZsZCxHQUFPb2QsVUFBWUEsR0FDbkJwZCxHQUFPbXBCLE9BcHdGUCxTQUFnQnB4QixFQUFRbk4sRUFBTXVuQixHQUM1QixPQUFpQixNQUFWcGEsRUFBaUJBLEVBQVNtYSxHQUFXbmEsRUFBUW5OLEVBQU1rb0IsR0FBYVgsR0FDeEUsRUFtd0ZEblMsR0FBT29wQixXQXp1RlAsU0FBb0JyeEIsRUFBUW5OLEVBQU11bkIsRUFBUzdOLEdBRXpDLE9BREFBLEVBQWtDLG1CQUFkQSxFQUEyQkEsRUFBYTNhLEVBQzNDLE1BQVZvTyxFQUFpQkEsRUFBU21hLEdBQVduYSxFQUFRbk4sRUFBTWtvQixHQUFhWCxHQUFVN04sRUFDbEYsRUF1dUZEdEUsR0FBT3JKLE9BQVNBLEdBQ2hCcUosR0FBT3FwQixTQWhyRlAsU0FBa0J0eEIsR0FDaEIsT0FBaUIsTUFBVkEsRUFBaUIsR0FBS1UsR0FBV1YsRUFBUXFOLEdBQU9yTixHQUN4RCxFQStxRkRpSSxHQUFPcWQsUUFBVUEsR0FDakJyZCxHQUFPb1YsTUFBUUEsR0FDZnBWLEdBQU9zcEIsS0EzbUxQLFNBQWNoakMsRUFBT3l2QixHQUNuQixPQUFPMEssR0FBUTNOLEdBQWFpRCxHQUFVenZCLEVBQ3ZDLEVBMG1MRDBaLEdBQU9zZCxJQUFNQSxHQUNidGQsR0FBT3VkLE1BQVFBLEdBQ2Z2ZCxHQUFPd2QsUUFBVUEsR0FDakJ4ZCxHQUFPeWQsSUFBTUEsR0FDYnpkLEdBQU91cEIsVUFqM1BQLFNBQW1CN3dCLEVBQU8vQixHQUN4QixPQUFPK2IsR0FBY2hhLEdBQVMsR0FBSS9CLEdBQVUsR0FBSXdNLEdBQ2pELEVBZzNQRG5ELEdBQU93cEIsY0EvMVBQLFNBQXVCOXdCLEVBQU8vQixHQUM1QixPQUFPK2IsR0FBY2hhLEdBQVMsR0FBSS9CLEdBQVUsR0FBSTZZLEdBQ2pELEVBODFQRHhQLEdBQU8wZCxRQUFVQSxHQUdqQjFkLEdBQU9zQixRQUFVbWhCLEdBQ2pCemlCLEdBQU95cEIsVUFBWS9HLEdBQ25CMWlCLEdBQU8wcEIsT0FBU2pJLEdBQ2hCemhCLEdBQU8ycEIsV0FBYWpJLEdBR3BCd0MsR0FBTWxrQixHQUFRQSxJQUtkQSxHQUFPNkIsSUFBTUEsR0FDYjdCLEdBQU8yakIsUUFBVUEsR0FDakIzakIsR0FBTzJpQixVQUFZQSxHQUNuQjNpQixHQUFPOGlCLFdBQWFBLEdBQ3BCOWlCLEdBQU92QyxLQUFPQSxHQUNkdUMsR0FBTzRwQixNQXByRlAsU0FBZTNsQixFQUFRQyxFQUFPQyxHQWE1QixPQVpJQSxJQUFVeGEsSUFDWndhLEVBQVFELEVBQ1JBLEVBQVF2YSxHQUVOd2EsSUFBVXhhLElBRVp3YSxHQURBQSxFQUFRcVUsR0FBU3JVLEtBQ0NBLEVBQVFBLEVBQVEsR0FFaENELElBQVV2YSxJQUVadWEsR0FEQUEsRUFBUXNVLEdBQVN0VSxLQUNDQSxFQUFRQSxFQUFRLEdBRTdCcEIsR0FBVTBWLEdBQVN2VSxHQUFTQyxFQUFPQyxFQUMzQyxFQXVxRkRuRSxHQUFPaWMsTUE3akxQLFNBQWUzMUIsR0FDYixPQUFPOGQsR0FBVTlkLEVBcnpWSSxFQXN6VnRCLEVBNGpMRDBaLEdBQU82cEIsVUFwZ0xQLFNBQW1CdmpDLEdBQ2pCLE9BQU84ZCxHQUFVOWQsRUFBTys3QixFQUN6QixFQW1nTERyaUIsR0FBTzhwQixjQXIrS1AsU0FBdUJ4akMsRUFBT2dlLEdBRTVCLE9BQU9GLEdBQVU5ZCxFQUFPKzdCLEVBRHhCL2QsRUFBa0MsbUJBQWRBLEVBQTJCQSxFQUFhM2EsRUFFN0QsRUFtK0tEcVcsR0FBTytwQixVQTdoTFAsU0FBbUJ6akMsRUFBT2dlLEdBRXhCLE9BQU9GLEdBQVU5ZCxFQXoxVkksRUF3MVZyQmdlLEVBQWtDLG1CQUFkQSxFQUEyQkEsRUFBYTNhLEVBRTdELEVBMmhMRHFXLEdBQU9ncUIsV0ExOEtQLFNBQW9CanlCLEVBQVFqSixHQUMxQixPQUFpQixNQUFWQSxHQUFrQjBYLEdBQWV6TyxFQUFRakosRUFBUWdOLEdBQUtoTixHQUM5RCxFQXk4S0RrUixHQUFPcVYsT0FBU0EsR0FDaEJyVixHQUFPaXFCLFVBMXhDUCxTQUFtQjNqQyxFQUFPdXhCLEdBQ3hCLE9BQWlCLE1BQVR2eEIsR0FBaUJBLEdBQVVBLEVBQVN1eEIsRUFBZXZ4QixDQUM1RCxFQXl4Q0QwWixHQUFPMmtCLE9BQVNBLEdBQ2hCM2tCLEdBQU9rcUIsU0F6OUVQLFNBQWtCN3hCLEVBQVE4eEIsRUFBUUMsR0FDaEMveEIsRUFBU3FELEdBQVNyRCxHQUNsQjh4QixFQUFTclksR0FBYXFZLEdBRXRCLElBQUlya0MsRUFBU3VTLEVBQU92UyxPQUtoQjZxQixFQUpKeVosRUFBV0EsSUFBYXpnQyxFQUNwQjdELEVBQ0FnZCxHQUFVa1csR0FBVW9SLEdBQVcsRUFBR3RrQyxHQUl0QyxPQURBc2tDLEdBQVlELEVBQU9ya0MsU0FDQSxHQUFLdVMsRUFBT2xSLE1BQU1pakMsRUFBVXpaLElBQVF3WixDQUN4RCxFQTg4RURucUIsR0FBT2lELEdBQUtBLEdBQ1pqRCxHQUFPbUgsT0FqN0VQLFNBQWdCOU8sR0FFZCxPQURBQSxFQUFTcUQsR0FBU3JELEtBQ0F0SixFQUFtQndLLEtBQUtsQixHQUN0Q0EsRUFBT0UsUUFBUTVKLEVBQWlCd0ssSUFDaENkLENBQ0wsRUE2NkVEMkgsR0FBT3FxQixhQTU1RVAsU0FBc0JoeUIsR0FFcEIsT0FEQUEsRUFBU3FELEdBQVNyRCxLQUNBOUksR0FBZ0JnSyxLQUFLbEIsR0FDbkNBLEVBQU9FLFFBQVFqSixHQUFjLFFBQzdCK0ksQ0FDTCxFQXc1RUQySCxHQUFPc3FCLE1BNTdPUCxTQUFlbHpCLEVBQVlsQixFQUFXMmUsR0FDcEMsSUFBSXJmLEVBQU8wSyxHQUFROUksR0FBY25CLEdBQWFnUyxHQUk5QyxPQUhJNE0sR0FBU0MsR0FBZTFkLEVBQVlsQixFQUFXMmUsS0FDakQzZSxFQUFZdk0sR0FFUDZMLEVBQUs0QixFQUFZeVgsR0FBWTNZLEVBQVcsR0FDaEQsRUF1N09EOEosR0FBTytkLEtBQU9BLEdBQ2QvZCxHQUFPcWMsVUFBWUEsR0FDbkJyYyxHQUFPdXFCLFFBcnhIUCxTQUFpQnh5QixFQUFRN0IsR0FDdkIsT0FBT2lCLEdBQVlZLEVBQVE4VyxHQUFZM1ksRUFBVyxHQUFJNFIsR0FDdkQsRUFveEhEOUgsR0FBT2dlLFNBQVdBLEdBQ2xCaGUsR0FBT3NjLGNBQWdCQSxHQUN2QnRjLEdBQU93cUIsWUFqdkhQLFNBQXFCenlCLEVBQVE3QixHQUMzQixPQUFPaUIsR0FBWVksRUFBUThXLEdBQVkzWSxFQUFXLEdBQUk4UixHQUN2RCxFQWd2SERoSSxHQUFPckMsTUFBUUEsR0FDZnFDLEdBQU9yRyxRQUFVQSxHQUNqQnFHLEdBQU9pZSxhQUFlQSxHQUN0QmplLEdBQU95cUIsTUFydEhQLFNBQWUxeUIsRUFBUWxDLEdBQ3JCLE9BQWlCLE1BQVZrQyxFQUNIQSxFQUNBMFEsR0FBUTFRLEVBQVE4VyxHQUFZaFosRUFBVSxHQUFJdVAsR0FDL0MsRUFrdEhEcEYsR0FBTzBxQixXQXRySFAsU0FBb0IzeUIsRUFBUWxDLEdBQzFCLE9BQWlCLE1BQVZrQyxFQUNIQSxFQUNBNFEsR0FBYTVRLEVBQVE4VyxHQUFZaFosRUFBVSxHQUFJdVAsR0FDcEQsRUFtckhEcEYsR0FBTzJxQixPQXJwSFAsU0FBZ0I1eUIsRUFBUWxDLEdBQ3RCLE9BQU9rQyxHQUFVK1AsR0FBVy9QLEVBQVE4VyxHQUFZaFosRUFBVSxHQUMzRCxFQW9wSERtSyxHQUFPNHFCLFlBeG5IUCxTQUFxQjd5QixFQUFRbEMsR0FDM0IsT0FBT2tDLEdBQVVpUSxHQUFnQmpRLEVBQVE4VyxHQUFZaFosRUFBVSxHQUNoRSxFQXVuSERtSyxHQUFPZ0UsSUFBTUEsR0FDYmhFLEdBQU80Z0IsR0FBS0EsR0FDWjVnQixHQUFPNmdCLElBQU1BLEdBQ2I3Z0IsR0FBT25ILElBemdIUCxTQUFhZCxFQUFRbk4sR0FDbkIsT0FBaUIsTUFBVm1OLEdBQWtCeWlCLEdBQVF6aUIsRUFBUW5OLEVBQU0rZSxHQUNoRCxFQXdnSEQzSixHQUFPOE4sTUFBUUEsR0FDZjlOLEdBQU91YyxLQUFPQSxHQUNkdmMsR0FBTzhNLFNBQVdBLEdBQ2xCOU0sR0FBTzRHLFNBNXBPUCxTQUFrQnhQLEVBQVk5USxFQUFPa1IsRUFBV3FkLEdBQzlDemQsRUFBYXFXLEdBQVlyVyxHQUFjQSxFQUFhVCxHQUFPUyxHQUMzREksRUFBYUEsSUFBY3FkLEVBQVNtRSxHQUFVeGhCLEdBQWEsRUFFM0QsSUFBSTFSLEVBQVNzUixFQUFXdFIsT0FJeEIsT0FISTBSLEVBQVksSUFDZEEsRUFBWTRHLEdBQVV0WSxFQUFTMFIsRUFBVyxJQUVyQ3lwQixHQUFTN3BCLEdBQ1hJLEdBQWExUixHQUFVc1IsRUFBVzFNLFFBQVFwRSxFQUFPa1IsSUFBYyxJQUM3RDFSLEdBQVV3USxHQUFZYyxFQUFZOVEsRUFBT2tSLElBQWMsQ0FDL0QsRUFrcE9Ed0ksR0FBT3RWLFFBOWxTUCxTQUFpQmlMLEVBQU9yUCxFQUFPa1IsR0FDN0IsSUFBSTFSLEVBQWtCLE1BQVQ2UCxFQUFnQixFQUFJQSxFQUFNN1AsT0FDdkMsSUFBS0EsRUFDSCxPQUFRLEVBRVYsSUFBSTJELEVBQXFCLE1BQWIrTixFQUFvQixFQUFJd2hCLEdBQVV4aEIsR0FJOUMsT0FISS9OLEVBQVEsSUFDVkEsRUFBUTJVLEdBQVV0WSxFQUFTMkQsRUFBTyxJQUU3QjZNLEdBQVlYLEVBQU9yUCxFQUFPbUQsRUFDbEMsRUFxbFNEdVcsR0FBTzZxQixRQWxxRlAsU0FBaUI1bUIsRUFBUStMLEVBQU9XLEdBUzlCLE9BUkFYLEVBQVFxSSxHQUFTckksR0FDYlcsSUFBUWhuQixHQUNWZ25CLEVBQU1YLEVBQ05BLEVBQVEsR0FFUlcsRUFBTTBILEdBQVMxSCxHQXJzVm5CLFNBQXFCMU0sRUFBUStMLEVBQU9XLEdBQ2xDLE9BQU8xTSxHQUFVM0YsR0FBVTBSLEVBQU9XLElBQVExTSxFQUFTN0YsR0FBVTRSLEVBQU9XLEVBQ3JFLENBc3NWUW1hLENBRFA3bUIsRUFBU3VVLEdBQVN2VSxHQUNTK0wsRUFBT1csRUFDbkMsRUF5cEZEM1EsR0FBT21pQixPQUFTQSxHQUNoQm5pQixHQUFPb0MsWUFBY0EsR0FDckJwQyxHQUFPRSxRQUFVQSxHQUNqQkYsR0FBT25MLGNBQWdCQSxHQUN2Qm1MLEdBQU95TixZQUFjQSxHQUNyQnpOLEdBQU9xTyxrQkFBb0JBLEdBQzNCck8sR0FBTytxQixVQXR3S1AsU0FBbUJ6a0MsR0FDakIsT0FBaUIsSUFBVkEsSUFBNEIsSUFBVkEsR0FDdEIyWixHQUFhM1osSUFBVThpQixHQUFXOWlCLElBQVV3RyxDQUNoRCxFQW93S0RrVCxHQUFPakMsU0FBV0EsR0FDbEJpQyxHQUFPakwsT0FBU0EsR0FDaEJpTCxHQUFPZ3JCLFVBN3NLUCxTQUFtQjFrQyxHQUNqQixPQUFPMlosR0FBYTNaLElBQTZCLElBQW5CQSxFQUFNNE4sV0FBbUJvYSxHQUFjaG9CLEVBQ3RFLEVBNHNLRDBaLEdBQU9pckIsUUF6cUtQLFNBQWlCM2tDLEdBQ2YsR0FBYSxNQUFUQSxFQUNGLE9BQU8sRUFFVCxHQUFJbW5CLEdBQVlubkIsS0FDWDRaLEdBQVE1WixJQUEwQixpQkFBVEEsR0FBNEMsbUJBQWhCQSxFQUFNb0QsUUFDMURxVSxHQUFTelgsSUFBVWlQLEdBQWFqUCxJQUFVOGIsR0FBWTliLElBQzFELE9BQVFBLEVBQU1SLE9BRWhCLElBQUkrZSxFQUFNQyxHQUFPeGUsR0FDakIsR0FBSXVlLEdBQU8xWCxHQUFVMFgsR0FBT3JYLEVBQzFCLE9BQVFsSCxFQUFNb1QsS0FFaEIsR0FBSXlULEdBQVk3bUIsR0FDZCxPQUFRNG1CLEdBQVM1bUIsR0FBT1IsT0FFMUIsSUFBSyxJQUFJd1IsS0FBT2hSLEVBQ2QsR0FBSXhCLEdBQWVDLEtBQUt1QixFQUFPZ1IsR0FDN0IsT0FBWSxFQUdoQixPQUFPLENBQ1IsRUFvcEtEMEksR0FBT2tyQixRQXRuS1AsU0FBaUI1a0MsRUFBT29qQixHQUN0QixPQUFPYyxHQUFZbGtCLEVBQU9vakIsRUFDM0IsRUFxbktEMUosR0FBT21yQixZQW5sS1AsU0FBcUI3a0MsRUFBT29qQixFQUFPcEYsR0FFakMsSUFBSXRjLEdBREpzYyxFQUFrQyxtQkFBZEEsRUFBMkJBLEVBQWEzYSxHQUNsQzJhLEVBQVdoZSxFQUFPb2pCLEdBQVMvZixFQUNyRCxPQUFPM0IsSUFBVzJCLEVBQVk2Z0IsR0FBWWxrQixFQUFPb2pCLEVBQU8vZixFQUFXMmEsS0FBZ0J0YyxDQUNwRixFQWdsS0RnWSxHQUFPOGdCLFFBQVVBLEdBQ2pCOWdCLEdBQU8vQixTQTFoS1AsU0FBa0IzWCxHQUNoQixNQUF1QixpQkFBVEEsR0FBcUIwWCxHQUFlMVgsRUFDbkQsRUF5aEtEMFosR0FBTzZJLFdBQWFBLEdBQ3BCN0ksR0FBTytnQixVQUFZQSxHQUNuQi9nQixHQUFPMGEsU0FBV0EsR0FDbEIxYSxHQUFPL0ssTUFBUUEsR0FDZitLLEdBQU9vckIsUUExMUpQLFNBQWlCcnpCLEVBQVFqSixHQUN2QixPQUFPaUosSUFBV2pKLEdBQVV5ZCxHQUFZeFUsRUFBUWpKLEVBQVE0ZSxHQUFhNWUsR0FDdEUsRUF5MUpEa1IsR0FBT3FyQixZQXZ6SlAsU0FBcUJ0ekIsRUFBUWpKLEVBQVF3VixHQUVuQyxPQURBQSxFQUFrQyxtQkFBZEEsRUFBMkJBLEVBQWEzYSxFQUNyRDRpQixHQUFZeFUsRUFBUWpKLEVBQVE0ZSxHQUFhNWUsR0FBU3dWLEVBQzFELEVBcXpKRHRFLEdBQU9zckIsTUF2eEpQLFNBQWVobEMsR0FJYixPQUFPMDZCLEdBQVMxNkIsSUFBVUEsSUFBVUEsQ0FDckMsRUFteEpEMFosR0FBT3VyQixTQXZ2SlAsU0FBa0JqbEMsR0FDaEIsR0FBSXcwQixHQUFXeDBCLEdBQ2IsTUFBVSxJQUFBc0QsR0F0c1hNLG1FQXdzWGxCLE9BQU9nakIsR0FBYXRtQixFQUNyQixFQW12SkQwWixHQUFPd3JCLE1BeHNKUCxTQUFlbGxDLEdBQ2IsT0FBZ0IsTUFBVEEsQ0FDUixFQXVzSkQwWixHQUFPeXJCLE9BanVKUCxTQUFnQm5sQyxHQUNkLE9BQWlCLE9BQVZBLENBQ1IsRUFndUpEMFosR0FBT2doQixTQUFXQSxHQUNsQmhoQixHQUFPUSxTQUFXQSxHQUNsQlIsR0FBT0MsYUFBZUEsR0FDdEJELEdBQU9zTyxjQUFnQkEsR0FDdkJ0TyxHQUFPN0ssU0FBV0EsR0FDbEI2SyxHQUFPMHJCLGNBcmxKUCxTQUF1QnBsQyxHQUNyQixPQUFPeTZCLEdBQVV6NkIsSUFBVUEsSUFBUyxrQkFBcUJBLEdBQVNrRyxDQUNuRSxFQW9sSkR3VCxHQUFPM0ssTUFBUUEsR0FDZjJLLEdBQU9paEIsU0FBV0EsR0FDbEJqaEIsR0FBT21JLFNBQVdBLEdBQ2xCbkksR0FBT3pLLGFBQWVBLEdBQ3RCeUssR0FBTzJyQixZQW4vSVAsU0FBcUJybEMsR0FDbkIsT0FBT0EsSUFBVXFELENBQ2xCLEVBay9JRHFXLEdBQU80ckIsVUEvOUlQLFNBQW1CdGxDLEdBQ2pCLE9BQU8yWixHQUFhM1osSUFBVXdlLEdBQU94ZSxJQUFVcUgsQ0FDaEQsRUE4OUlEcVMsR0FBTzZyQixVQTM4SVAsU0FBbUJ2bEMsR0FDakIsT0FBTzJaLEdBQWEzWixJQW42WFAsb0JBbTZYaUI4aUIsR0FBVzlpQixFQUMxQyxFQTA4SUQwWixHQUFPeE4sS0F6L1JQLFNBQWNtRCxFQUFPdXlCLEdBQ25CLE9BQWdCLE1BQVR2eUIsRUFBZ0IsR0FBS3VJLEdBQVduWixLQUFLNFEsRUFBT3V5QixFQUNwRCxFQXcvUkRsb0IsR0FBT2dqQixVQUFZQSxHQUNuQmhqQixHQUFPc0ssS0FBT0EsR0FDZHRLLEdBQU84ckIsWUFoOVJQLFNBQXFCbjJCLEVBQU9yUCxFQUFPa1IsR0FDakMsSUFBSTFSLEVBQWtCLE1BQVQ2UCxFQUFnQixFQUFJQSxFQUFNN1AsT0FDdkMsSUFBS0EsRUFDSCxPQUFRLEVBRVYsSUFBSTJELEVBQVEzRCxFQUtaLE9BSkkwUixJQUFjN04sSUFFaEJGLEdBREFBLEVBQVF1dkIsR0FBVXhoQixJQUNGLEVBQUk0RyxHQUFVdFksRUFBUzJELEVBQU8sR0FBSzZVLEdBQVU3VSxFQUFPM0QsRUFBUyxJQUV4RVEsR0FBVUEsRUFydk1yQixTQUEyQnFQLEVBQU9yUCxFQUFPa1IsR0FFdkMsSUFEQSxJQUFJL04sRUFBUStOLEVBQVksRUFDakIvTixLQUNMLEdBQUlrTSxFQUFNbE0sS0FBV25ELEVBQ25CLE9BQU9tRCxFQUdYLE9BQU9BLENBQ1IsQ0E4dU1Pc2lDLENBQWtCcDJCLEVBQU9yUCxFQUFPbUQsR0FDaEM4TixHQUFjNUIsRUFBT2dDLEdBQVdsTyxHQUFPLEVBQzVDLEVBbzhSRHVXLEdBQU9pakIsVUFBWUEsR0FDbkJqakIsR0FBT2tqQixXQUFhQSxHQUNwQmxqQixHQUFPa2hCLEdBQUtBLEdBQ1psaEIsR0FBT21oQixJQUFNQSxHQUNibmhCLEdBQU8zQixJQWhmUCxTQUFhMUksR0FDWCxPQUFRQSxHQUFTQSxFQUFNN1AsT0FDbkJvaUIsR0FBYXZTLEVBQU9tWCxHQUFVckQsSUFDOUI5ZixDQUNMLEVBNmVEcVcsR0FBT2dzQixNQXBkUCxTQUFlcjJCLEVBQU9FLEdBQ3BCLE9BQVFGLEdBQVNBLEVBQU03UCxPQUNuQm9pQixHQUFhdlMsRUFBT2taLEdBQVloWixFQUFVLEdBQUk0VCxJQUM5QzlmLENBQ0wsRUFpZERxVyxHQUFPaXNCLEtBamNQLFNBQWN0MkIsR0FDWixPQUFPa0MsR0FBU2xDLEVBQU9tWCxHQUN4QixFQWdjRDlNLEdBQU9rc0IsT0F2YVAsU0FBZ0J2MkIsRUFBT0UsR0FDckIsT0FBT2dDLEdBQVNsQyxFQUFPa1osR0FBWWhaLEVBQVUsR0FDOUMsRUFzYURtSyxHQUFPekIsSUFsWlAsU0FBYTVJLEdBQ1gsT0FBUUEsR0FBU0EsRUFBTTdQLE9BQ25Cb2lCLEdBQWF2UyxFQUFPbVgsR0FBVVMsSUFDOUI1akIsQ0FDTCxFQStZRHFXLEdBQU9tc0IsTUF0WFAsU0FBZXgyQixFQUFPRSxHQUNwQixPQUFRRixHQUFTQSxFQUFNN1AsT0FDbkJvaUIsR0FBYXZTLEVBQU9rWixHQUFZaFosRUFBVSxHQUFJMFgsSUFDOUM1akIsQ0FDTCxFQW1YRHFXLEdBQU91YSxVQUFZQSxHQUNuQnZhLEdBQU8rYSxVQUFZQSxHQUNuQi9hLEdBQU9vc0IsV0F6dEJQLFdBQ0UsTUFBTyxDQUFBLENBQ1IsRUF3dEJEcHNCLEdBQU9xc0IsV0F6c0JQLFdBQ0UsTUFBTyxFQUNSLEVBd3NCRHJzQixHQUFPc3NCLFNBenJCUCxXQUNFLE9BQVcsQ0FDWixFQXdyQkR0c0IsR0FBTzhrQixTQUFXQSxHQUNsQjlrQixHQUFPdXNCLElBNzdSUCxTQUFhNTJCLEVBQU8vUCxHQUNsQixPQUFRK1AsR0FBU0EsRUFBTTdQLE9BQVUyb0IsR0FBUTlZLEVBQU9xakIsR0FBVXB6QixJQUFNK0QsQ0FDakUsRUE0N1JEcVcsR0FBT3dzQixXQWxpQ1AsV0FJRSxPQUhJMTRCLEdBQUtnSCxJQUFNMVYsT0FDYjBPLEdBQUtnSCxFQUFJb0IsSUFFQTlXLElBQ1osRUE4aENENGEsR0FBT2taLEtBQU9BLEdBQ2RsWixHQUFPM0MsSUFBTUEsR0FDYjJDLEdBQU95c0IsSUFqNUVQLFNBQWFwMEIsRUFBUXZTLEVBQVFteUIsR0FDM0I1ZixFQUFTcUQsR0FBU3JELEdBR2xCLElBQUlxMEIsR0FGSjVtQyxFQUFTa3pCLEdBQVVsekIsSUFFTXNVLEdBQVcvQixHQUFVLEVBQzlDLElBQUt2UyxHQUFVNG1DLEdBQWE1bUMsRUFDMUIsT0FBT3VTLEVBRVQsSUFBSTRZLEdBQU9uckIsRUFBUzRtQyxHQUFhLEVBQ2pDLE9BQ0UxVSxHQUFjdGEsR0FBWXVULEdBQU1nSCxHQUNoQzVmLEVBQ0EyZixHQUFjeGEsR0FBV3lULEdBQU1nSCxFQUVsQyxFQW80RURqWSxHQUFPMnNCLE9BMzJFUCxTQUFnQnQwQixFQUFRdlMsRUFBUW15QixHQUM5QjVmLEVBQVNxRCxHQUFTckQsR0FHbEIsSUFBSXEwQixHQUZKNW1DLEVBQVNrekIsR0FBVWx6QixJQUVNc1UsR0FBVy9CLEdBQVUsRUFDOUMsT0FBUXZTLEdBQVU0bUMsRUFBWTVtQyxFQUN6QnVTLEVBQVMyZixHQUFjbHlCLEVBQVM0bUMsRUFBV3pVLEdBQzVDNWYsQ0FDTCxFQW8yRUQySCxHQUFPNHNCLFNBMzBFUCxTQUFrQnYwQixFQUFRdlMsRUFBUW15QixHQUNoQzVmLEVBQVNxRCxHQUFTckQsR0FHbEIsSUFBSXEwQixHQUZKNW1DLEVBQVNrekIsR0FBVWx6QixJQUVNc1UsR0FBVy9CLEdBQVUsRUFDOUMsT0FBUXZTLEdBQVU0bUMsRUFBWTVtQyxFQUN6Qmt5QixHQUFjbHlCLEVBQVM0bUMsRUFBV3pVLEdBQVM1ZixFQUM1Q0EsQ0FDTCxFQW8wRUQySCxHQUFPdk0sU0ExeUVQLFNBQWtCNEUsRUFBUXcwQixFQUFPaFksR0FNL0IsT0FMSUEsR0FBa0IsTUFBVGdZLEVBQ1hBLEVBQVEsRUFDQ0EsSUFDVEEsR0FBU0EsR0FFSnB1QixHQUFlL0MsR0FBU3JELEdBQVFFLFFBQVEvSSxHQUFhLElBQUtxOUIsR0FBUyxFQUMzRSxFQW95RUQ3c0IsR0FBT3JCLE9BMXJGUCxTQUFnQnVGLEVBQU9DLEVBQU8yb0IsR0EyQjVCLEdBMUJJQSxHQUErQixrQkFBWkEsR0FBeUJoWSxHQUFlNVEsRUFBT0MsRUFBTzJvQixLQUMzRTNvQixFQUFRMm9CLEVBQVduakMsR0FFakJtakMsSUFBYW5qQyxJQUNLLGtCQUFUd2EsR0FDVDJvQixFQUFXM29CLEVBQ1hBLEVBQVF4YSxHQUVlLGtCQUFUdWEsSUFDZDRvQixFQUFXNW9CLEVBQ1hBLEVBQVF2YSxJQUdSdWEsSUFBVXZhLEdBQWF3YSxJQUFVeGEsR0FDbkN1YSxFQUFRLEVBQ1JDLEVBQVEsSUFHUkQsRUFBUW1VLEdBQVNuVSxHQUNiQyxJQUFVeGEsR0FDWndhLEVBQVFELEVBQ1JBLEVBQVEsR0FFUkMsRUFBUWtVLEdBQVNsVSxJQUdqQkQsRUFBUUMsRUFBTyxDQUNqQixJQUFJNG9CLEVBQU83b0IsRUFDWEEsRUFBUUMsRUFDUkEsRUFBUTRvQixDQUNULENBQ0QsR0FBSUQsR0FBWTVvQixFQUFRLEdBQUtDLEVBQVEsRUFBRyxDQUN0QyxJQUFJd1gsRUFBT2pkLEtBQ1gsT0FBT0osR0FBVTRGLEVBQVN5WCxHQUFReFgsRUFBUUQsRUFBUTVRLEdBQWUsUUFBVXFvQixFQUFPLElBQUk3MUIsT0FBUyxLQUFPcWUsRUFDdkcsQ0FDRCxPQUFPekIsR0FBV3dCLEVBQU9DLEVBQzFCLEVBc3BGRG5FLEdBQU9ndEIsT0E1K05QLFNBQWdCNTFCLEVBQVl2QixFQUFVQyxHQUNwQyxJQUFJTixFQUFPMEssR0FBUTlJLEdBQWNQLEdBQWNvQixHQUMzQ25CLEVBQVlqUixVQUFVQyxPQUFTLEVBRW5DLE9BQU8wUCxFQUFLNEIsRUFBWXlYLEdBQVloWixFQUFVLEdBQUlDLEVBQWFnQixFQUFXeU0sR0FDM0UsRUF3K05EdkQsR0FBT2l0QixZQWg5TlAsU0FBcUI3MUIsRUFBWXZCLEVBQVVDLEdBQ3pDLElBQUlOLEVBQU8wSyxHQUFROUksR0FBY0wsR0FBbUJrQixHQUNoRG5CLEVBQVlqUixVQUFVQyxPQUFTLEVBRW5DLE9BQU8wUCxFQUFLNEIsRUFBWXlYLEdBQVloWixFQUFVLEdBQUlDLEVBQWFnQixFQUFXaVIsR0FDM0UsRUE0OE5EL0gsR0FBT2t0QixPQS93RVAsU0FBZ0I3MEIsRUFBUXpTLEVBQUdpdkIsR0FNekIsT0FKRWp2QixHQURHaXZCLEVBQVFDLEdBQWV6YyxFQUFRelMsRUFBR2l2QixHQUFTanZCLElBQU0rRCxHQUNoRCxFQUVBcXZCLEdBQVVwekIsR0FFVGtxQixHQUFXcFUsR0FBU3JELEdBQVN6UyxFQUNyQyxFQXl3RURvYSxHQUFPekgsUUFwdkVQLFdBQ0UsSUFBSXpPLEVBQU9qRSxVQUNQd1MsRUFBU3FELEdBQVM1UixFQUFLLElBRTNCLE9BQU9BLEVBQUtoRSxPQUFTLEVBQUl1UyxFQUFTQSxFQUFPRSxRQUFRek8sRUFBSyxHQUFJQSxFQUFLLEdBQ2hFLEVBZ3ZFRGtXLEdBQU9oWSxPQXRvR1AsU0FBZ0IrUCxFQUFRbk4sRUFBTWl0QixHQUc1QixJQUFJcHVCLEdBQVMsRUFDVDNELEdBSEo4RSxFQUFPbWUsR0FBU25lLEVBQU1tTixJQUdKalMsT0FPbEIsSUFKS0EsSUFDSEEsRUFBUyxFQUNUaVMsRUFBU3BPLEtBRUZGLEVBQVEzRCxHQUFRLENBQ3ZCLElBQUlRLEVBQWtCLE1BQVZ5UixFQUFpQnBPLEVBQVlvTyxFQUFPaVIsR0FBTXBlLEVBQUtuQixLQUN2RG5ELElBQVVxRCxJQUNaRixFQUFRM0QsRUFDUlEsRUFBUXV4QixHQUVWOWYsRUFBUzhRLEdBQVd2aUIsR0FBU0EsRUFBTXZCLEtBQUtnVCxHQUFVelIsQ0FDbkQsQ0FDRCxPQUFPeVIsQ0FDUixFQW1uR0RpSSxHQUFPaWxCLE1BQVFBLEdBQ2ZqbEIsR0FBT2pGLGFBQWVBLEVBQ3RCaUYsR0FBT210QixPQTE1TlAsU0FBZ0IvMUIsR0FFZCxPQURXOEksR0FBUTlJLEdBQWNxTCxHQUFjME4sSUFDbkMvWSxFQUNiLEVBdzVORDRJLEdBQU90RyxLQS8wTlAsU0FBY3RDLEdBQ1osR0FBa0IsTUFBZEEsRUFDRixPQUFPLEVBRVQsR0FBSXFXLEdBQVlyVyxHQUNkLE9BQU82cEIsR0FBUzdwQixHQUFjZ0QsR0FBV2hELEdBQWNBLEVBQVd0UixPQUVwRSxJQUFJK2UsRUFBTUMsR0FBTzFOLEdBQ2pCLE9BQUl5TixHQUFPMVgsR0FBVTBYLEdBQU9yWCxFQUNuQjRKLEVBQVdzQyxLQUVid1QsR0FBUzlWLEdBQVl0UixNQUM3QixFQW8wTkRrYSxHQUFPbWpCLFVBQVlBLEdBQ25CbmpCLEdBQU9vdEIsS0EveE5QLFNBQWNoMkIsRUFBWWxCLEVBQVcyZSxHQUNuQyxJQUFJcmYsRUFBTzBLLEdBQVE5SSxHQUFjSixHQUFZNFosR0FJN0MsT0FISWlFLEdBQVNDLEdBQWUxZCxFQUFZbEIsRUFBVzJlLEtBQ2pEM2UsRUFBWXZNLEdBRVA2TCxFQUFLNEIsRUFBWXlYLEdBQVkzWSxFQUFXLEdBQ2hELEVBMHhORDhKLEdBQU9xdEIsWUFoc1JQLFNBQXFCMTNCLEVBQU9yUCxHQUMxQixPQUFPdXFCLEdBQWdCbGIsRUFBT3JQLEVBQy9CLEVBK3JSRDBaLEdBQU9zdEIsY0FwcVJQLFNBQXVCMzNCLEVBQU9yUCxFQUFPdVAsR0FDbkMsT0FBT3FiLEdBQWtCdmIsRUFBT3JQLEVBQU91b0IsR0FBWWhaLEVBQVUsR0FDOUQsRUFtcVJEbUssR0FBT3V0QixjQWpwUlAsU0FBdUI1M0IsRUFBT3JQLEdBQzVCLElBQUlSLEVBQWtCLE1BQVQ2UCxFQUFnQixFQUFJQSxFQUFNN1AsT0FDdkMsR0FBSUEsRUFBUSxDQUNWLElBQUkyRCxFQUFRb25CLEdBQWdCbGIsRUFBT3JQLEdBQ25DLEdBQUltRCxFQUFRM0QsR0FBVW1kLEdBQUd0TixFQUFNbE0sR0FBUW5ELEdBQ3JDLE9BQU9tRCxDQUVWLENBQ0QsT0FBUSxDQUNULEVBeW9SRHVXLEdBQU93dEIsZ0JBcm5SUCxTQUF5QjczQixFQUFPclAsR0FDOUIsT0FBT3VxQixHQUFnQmxiLEVBQU9yUCxHQUFPLEVBQ3RDLEVBb25SRDBaLEdBQU95dEIsa0JBemxSUCxTQUEyQjkzQixFQUFPclAsRUFBT3VQLEdBQ3ZDLE9BQU9xYixHQUFrQnZiLEVBQU9yUCxFQUFPdW9CLEdBQVloWixFQUFVLElBQUksRUFDbEUsRUF3bFJEbUssR0FBTzB0QixrQkF0a1JQLFNBQTJCLzNCLEVBQU9yUCxHQUVoQyxHQURzQixNQUFUcVAsRUFBZ0IsRUFBSUEsRUFBTTdQLE9BQzNCLENBQ1YsSUFBSTJELEVBQVFvbkIsR0FBZ0JsYixFQUFPclAsR0FBTyxHQUFRLEVBQ2xELEdBQUkyYyxHQUFHdE4sRUFBTWxNLEdBQVFuRCxHQUNuQixPQUFPbUQsQ0FFVixDQUNELE9BQVEsQ0FDVCxFQThqUkR1VyxHQUFPb2pCLFVBQVlBLEdBQ25CcGpCLEdBQU8ydEIsV0Ezb0VQLFNBQW9CdDFCLEVBQVE4eEIsRUFBUUMsR0FPbEMsT0FOQS94QixFQUFTcUQsR0FBU3JELEdBQ2xCK3hCLEVBQXVCLE1BQVpBLEVBQ1AsRUFDQXRuQixHQUFVa1csR0FBVW9SLEdBQVcsRUFBRy94QixFQUFPdlMsUUFFN0Nxa0MsRUFBU3JZLEdBQWFxWSxHQUNmOXhCLEVBQU9sUixNQUFNaWpDLEVBQVVBLEVBQVdELEVBQU9ya0MsU0FBV3FrQyxDQUM1RCxFQW9vRURucUIsR0FBT2tsQixTQUFXQSxHQUNsQmxsQixHQUFPNHRCLElBelVQLFNBQWFqNEIsR0FDWCxPQUFRQSxHQUFTQSxFQUFNN1AsT0FDbkJnUyxHQUFRbkMsRUFBT21YLElBQ2YsQ0FDTCxFQXNVRDlNLEdBQU82dEIsTUE3U1AsU0FBZWw0QixFQUFPRSxHQUNwQixPQUFRRixHQUFTQSxFQUFNN1AsT0FDbkJnUyxHQUFRbkMsRUFBT2taLEdBQVloWixFQUFVLElBQ3JDLENBQ0wsRUEwU0RtSyxHQUFPOHRCLFNBN2hFUCxTQUFrQnoxQixFQUFRck8sRUFBUzZxQixHQUlqQyxJQUFJa1osRUFBVy90QixHQUFPa0gsaUJBRWxCMk4sR0FBU0MsR0FBZXpjLEVBQVFyTyxFQUFTNnFCLEtBQzNDN3FCLEVBQVVMLEdBRVowTyxFQUFTcUQsR0FBU3JELEdBQ2xCck8sRUFBVTAzQixHQUFhLENBQUEsRUFBSTEzQixFQUFTK2pDLEVBQVVqVSxJQUU5QyxJQUlJa1UsRUFDQUMsRUFMQTFtQixFQUFVbWEsR0FBYSxHQUFJMTNCLEVBQVF1ZCxRQUFTd21CLEVBQVN4bUIsUUFBU3VTLElBQzlEb1UsRUFBY3B5QixHQUFLeUwsR0FDbkI0bUIsRUFBZ0IxMUIsR0FBVzhPLEVBQVMybUIsR0FJcEN6a0MsRUFBUSxFQUNSNGQsRUFBY3JkLEVBQVFxZCxhQUFlN1csR0FDckMxQixFQUFTLFdBR1RzL0IsRUFBZXYvQixJQUNoQjdFLEVBQVFtZCxRQUFVM1csSUFBVzFCLE9BQVMsSUFDdkN1WSxFQUFZdlksT0FBUyxLQUNwQnVZLElBQWdCblksR0FBZ0JjLEdBQWVRLElBQVcxQixPQUFTLEtBQ25FOUUsRUFBUW9kLFVBQVk1VyxJQUFXMUIsT0FBUyxLQUN6QyxLQU1FdS9CLEVBQVksa0JBQ2J2cEMsR0FBZUMsS0FBS2lGLEVBQVMsY0FDekJBLEVBQVFxa0MsVUFBWSxJQUFJOTFCLFFBQVEsTUFBTyxLQUN2Qyw2QkFBK0JyRixHQUFtQixLQUNuRCxLQUVObUYsRUFBT0UsUUFBUTYxQixHQUFjLFNBQVM1ekIsRUFBTzh6QixFQUFhQyxFQUFrQkMsRUFBaUJDLEVBQWU3M0IsR0FzQjFHLE9BckJBMjNCLElBQXFCQSxFQUFtQkMsR0FHeEMxL0IsR0FBVXVKLEVBQU9sUixNQUFNc0MsRUFBT21OLEdBQVEyQixRQUFROUgsR0FBbUIySSxJQUc3RGsxQixJQUNGTixHQUFhLEVBQ2JsL0IsR0FBVSxZQUFjdy9CLEVBQWMsVUFFcENHLElBQ0ZSLEdBQWUsRUFDZm4vQixHQUFVLE9BQVMyL0IsRUFBZ0IsZUFFakNGLElBQ0Z6L0IsR0FBVSxpQkFBbUJ5L0IsRUFBbUIsK0JBRWxEOWtDLEVBQVFtTixFQUFTNEQsRUFBTTFVLE9BSWhCMFUsQ0FDZixJQUVNMUwsR0FBVSxPQUlWLElBQUl3WSxFQUFXeGlCLEdBQWVDLEtBQUtpRixFQUFTLGFBQWVBLEVBQVFzZCxTQUNuRSxHQUFLQSxNQUtJeFgsR0FBMkJ5SixLQUFLK04sR0FDdkMsVUFBVTFkLEdBM2lkbUIsMkRBc2lkN0JrRixFQUFTLGlCQUFtQkEsRUFBUyxRQVN2Q0EsR0FBVW0vQixFQUFlbi9CLEVBQU95SixRQUFRaEssRUFBc0IsSUFBTU8sR0FDakV5SixRQUFRL0osRUFBcUIsTUFDN0IrSixRQUFROUosRUFBdUIsT0FHbENLLEVBQVMsYUFBZXdZLEdBQVksT0FBUyxTQUMxQ0EsRUFDRyxHQUNBLHdCQUVKLHFCQUNDMG1CLEVBQ0ksbUJBQ0EsS0FFSkMsRUFDRyx1RkFFQSxPQUVKbi9CLEVBQ0EsZ0JBRUYsSUFBSTlHLEVBQVMyN0IsSUFBUSxXQUNuQixPQUFPNXZCLEdBQVNtNkIsRUFBYUcsRUFBWSxVQUFZdi9CLEdBQ2xEL0ksTUFBTTRELEVBQVd3a0MsRUFDNUIsSUFLTSxHQURBbm1DLEVBQU84RyxPQUFTQSxFQUNaZ3lCLEdBQVE5NEIsR0FDVixNQUFNQSxFQUVSLE9BQU9BLENBQ1IsRUEyNkREZ1ksR0FBTzB1QixNQXBzQlAsU0FBZTlvQyxFQUFHaVEsR0FFaEIsSUFEQWpRLEVBQUlvekIsR0FBVXB6QixJQUNOLEdBQUtBLEVBQUk0RyxFQUNmLE1BQU8sR0FFVCxJQUFJL0MsRUFBUWlELEVBQ1I1RyxFQUFTd1ksR0FBVTFZLEVBQUc4RyxHQUUxQm1KLEVBQVdnWixHQUFZaFosR0FDdkJqUSxHQUFLOEcsRUFHTCxJQURBLElBQUkxRSxFQUFTbVEsR0FBVXJTLEVBQVErUCxLQUN0QnBNLEVBQVE3RCxHQUNmaVEsRUFBU3BNLEdBRVgsT0FBT3pCLENBQ1IsRUFxckJEZ1ksR0FBT3FZLFNBQVdBLEdBQ2xCclksR0FBT2daLFVBQVlBLEdBQ25CaFosR0FBT3VoQixTQUFXQSxHQUNsQnZoQixHQUFPMnVCLFFBeDVEUCxTQUFpQnJvQyxHQUNmLE9BQU9vVixHQUFTcFYsR0FBT3U4QixhQUN4QixFQXU1REQ3aUIsR0FBT3dZLFNBQVdBLEdBQ2xCeFksR0FBTzR1QixjQXB1SVAsU0FBdUJ0b0MsR0FDckIsT0FBT0EsRUFDSHdjLEdBQVVrVyxHQUFVMXlCLElBQVEsaUJBQW1Ca0csR0FDcEMsSUFBVmxHLEVBQWNBLEVBQVEsQ0FDNUIsRUFpdUlEMFosR0FBT3RFLFNBQVdBLEdBQ2xCc0UsR0FBTzZ1QixRQW40RFAsU0FBaUJ2b0MsR0FDZixPQUFPb1YsR0FBU3BWLEdBQU9nOUIsYUFDeEIsRUFrNEREdGpCLEdBQU84dUIsS0ExMkRQLFNBQWN6MkIsRUFBUTRmLEVBQU9wRCxHQUUzQixJQURBeGMsRUFBU3FELEdBQVNyRCxNQUNId2MsR0FBU29ELElBQVV0dUIsR0FDaEMsT0FBT3lPLEdBQVNDLEdBRWxCLElBQUtBLEtBQVk0ZixFQUFRbkcsR0FBYW1HLElBQ3BDLE9BQU81ZixFQUVULElBQUlVLEVBQWF3QixHQUFjbEMsR0FDM0JXLEVBQWF1QixHQUFjMGQsR0FJL0IsT0FBT2hGLEdBQVVsYSxFQUhMRCxHQUFnQkMsRUFBWUMsR0FDOUJDLEdBQWNGLEVBQVlDLEdBQWMsR0FFVHhHLEtBQUssR0FDL0MsRUE2MUREd04sR0FBTyt1QixRQXgwRFAsU0FBaUIxMkIsRUFBUTRmLEVBQU9wRCxHQUU5QixJQURBeGMsRUFBU3FELEdBQVNyRCxNQUNId2MsR0FBU29ELElBQVV0dUIsR0FDaEMsT0FBTzBPLEVBQU9sUixNQUFNLEVBQUdtUixHQUFnQkQsR0FBVSxHQUVuRCxJQUFLQSxLQUFZNGYsRUFBUW5HLEdBQWFtRyxJQUNwQyxPQUFPNWYsRUFFVCxJQUFJVSxFQUFhd0IsR0FBY2xDLEdBRy9CLE9BQU80YSxHQUFVbGEsRUFBWSxFQUZuQkUsR0FBY0YsRUFBWXdCLEdBQWMwZCxJQUFVLEdBRXZCemxCLEtBQUssR0FDM0MsRUE2ekREd04sR0FBT2d2QixVQXh5RFAsU0FBbUIzMkIsRUFBUTRmLEVBQU9wRCxHQUVoQyxJQURBeGMsRUFBU3FELEdBQVNyRCxNQUNId2MsR0FBU29ELElBQVV0dUIsR0FDaEMsT0FBTzBPLEVBQU9FLFFBQVEvSSxHQUFhLElBRXJDLElBQUs2SSxLQUFZNGYsRUFBUW5HLEdBQWFtRyxJQUNwQyxPQUFPNWYsRUFFVCxJQUFJVSxFQUFhd0IsR0FBY2xDLEdBRy9CLE9BQU80YSxHQUFVbGEsRUFGTEQsR0FBZ0JDLEVBQVl3QixHQUFjMGQsS0FFbEJ6bEIsS0FBSyxHQUMxQyxFQTZ4RER3TixHQUFPaXZCLFNBdHZEUCxTQUFrQjUyQixFQUFRck8sR0FDeEIsSUFBSWxFLEVBbnZkbUIsR0FvdmRuQm9wQyxFQW52ZHFCLE1BcXZkekIsR0FBSTF1QixHQUFTeFcsR0FBVSxDQUNyQixJQUFJaytCLEVBQVksY0FBZWwrQixFQUFVQSxFQUFRaytCLFVBQVlBLEVBQzdEcGlDLEVBQVMsV0FBWWtFLEVBQVVndkIsR0FBVWh2QixFQUFRbEUsUUFBVUEsRUFDM0RvcEMsRUFBVyxhQUFjbGxDLEVBQVU4bkIsR0FBYTluQixFQUFRa2xDLFVBQVlBLENBQ3JFLENBR0QsSUFBSXhDLEdBRkpyMEIsRUFBU3FELEdBQVNyRCxJQUVLdlMsT0FDdkIsR0FBSXdULEdBQVdqQixHQUFTLENBQ3RCLElBQUlVLEVBQWF3QixHQUFjbEMsR0FDL0JxMEIsRUFBWTN6QixFQUFXalQsTUFDeEIsQ0FDRCxHQUFJQSxHQUFVNG1DLEVBQ1osT0FBT3IwQixFQUVULElBQUlzWSxFQUFNN3FCLEVBQVNzVSxHQUFXODBCLEdBQzlCLEdBQUl2ZSxFQUFNLEVBQ1IsT0FBT3VlLEVBRVQsSUFBSWxuQyxFQUFTK1EsRUFDVGthLEdBQVVsYSxFQUFZLEVBQUc0WCxHQUFLbmUsS0FBSyxJQUNuQzZGLEVBQU9sUixNQUFNLEVBQUd3cEIsR0FFcEIsR0FBSXVYLElBQWN2K0IsRUFDaEIsT0FBTzNCLEVBQVNrbkMsRUFLbEIsR0FISW4yQixJQUNGNFgsR0FBUTNvQixFQUFPbEMsT0FBUzZxQixHQUV0QnhiLEdBQVMreUIsSUFDWCxHQUFJN3ZCLEVBQU9sUixNQUFNd3BCLEdBQUt3ZSxPQUFPakgsR0FBWSxDQUN2QyxJQUFJMXRCLEVBQ0E0MEIsRUFBWXBuQyxFQU1oQixJQUpLa2dDLEVBQVV0MEIsU0FDYnMwQixFQUFZcjVCLEdBQU9xNUIsRUFBVXA1QixPQUFRNE0sR0FBU3pMLEdBQVE0TCxLQUFLcXNCLElBQWMsTUFFM0VBLEVBQVU3dEIsVUFBWSxFQUNkRyxFQUFRMHRCLEVBQVVyc0IsS0FBS3V6QixJQUM3QixJQUFJQyxFQUFTNzBCLEVBQU0vUSxNQUVyQnpCLEVBQVNBLEVBQU9iLE1BQU0sRUFBR2tvQyxJQUFXMWxDLEVBQVlnbkIsRUFBTTBlLEVBQ3ZELFVBQ1FoM0IsRUFBTzNOLFFBQVFvbkIsR0FBYW9XLEdBQVl2WCxJQUFRQSxFQUFLLENBQzlELElBQUlsbkIsRUFBUXpCLEVBQU84akMsWUFBWTVELEdBQzNCeitCLEdBQVMsSUFDWHpCLEVBQVNBLEVBQU9iLE1BQU0sRUFBR3NDLEdBRTVCLENBQ0QsT0FBT3pCLEVBQVNrbkMsQ0FDakIsRUFpc0REbHZCLEdBQU9zdkIsU0E1cURQLFNBQWtCajNCLEdBRWhCLE9BREFBLEVBQVNxRCxHQUFTckQsS0FDQXpKLEVBQWlCMkssS0FBS2xCLEdBQ3BDQSxFQUFPRSxRQUFRN0osRUFBZW1NLElBQzlCeEMsQ0FDTCxFQXdxREQySCxHQUFPdXZCLFNBdnBCUCxTQUFrQkMsR0FDaEIsSUFBSXRjLElBQU92WCxHQUNYLE9BQU9ELEdBQVM4ekIsR0FBVXRjLENBQzNCLEVBcXBCRGxULEdBQU9xakIsVUFBWUEsR0FDbkJyakIsR0FBTytpQixXQUFhQSxHQUdwQi9pQixHQUFPeXZCLEtBQU85MUIsR0FDZHFHLEdBQU8wdkIsVUFBWXpSLEdBQ25CamUsR0FBT3BVLE1BQVEyd0IsR0FFZjJILEdBQU1sa0IsSUFDQWxSLEdBQVMsQ0FBQSxFQUNiZ1osR0FBVzlILElBQVEsU0FBU3hLLEVBQU15ZixHQUMzQm53QixHQUFlQyxLQUFLaWIsR0FBT25iLFVBQVdvd0IsS0FDekNubUIsR0FBT21tQixHQUFjemYsRUFFL0IsSUFDYTFHLElBQ0gsQ0FBRTZ1QixPQUFTLElBV2pCM2QsR0FBTzJ2QixRQS9paEJLLFVBa2poQlo1NUIsR0FBVSxDQUFDLE9BQVEsVUFBVyxRQUFTLGFBQWMsVUFBVyxpQkFBaUIsU0FBU2tmLEdBQ3hGalYsR0FBT2lWLEdBQVlqYixZQUFjZ0csRUFDdkMsSUFHSWpLLEdBQVUsQ0FBQyxPQUFRLFNBQVMsU0FBU2tmLEVBQVl4ckIsR0FDL0MwVyxHQUFZdGIsVUFBVW93QixHQUFjLFNBQVNydkIsR0FDM0NBLEVBQUlBLElBQU0rRCxFQUFZLEVBQUl5VSxHQUFVNGEsR0FBVXB6QixHQUFJLEdBRWxELElBQUlvQyxFQUFVNUMsS0FBSzZiLGVBQWlCeFgsRUFDaEMsSUFBSTBXLEdBQVkvYSxNQUNoQkEsS0FBSzYyQixRQVVULE9BUklqMEIsRUFBT2laLGFBQ1RqWixFQUFPbVosY0FBZ0I3QyxHQUFVMVksRUFBR29DLEVBQU9tWixlQUUzQ25aLEVBQU9vWixVQUFVeGEsS0FBSyxDQUNwQjhTLEtBQVE0RSxHQUFVMVksRUFBRzhHLEdBQ3JCMnRCLEtBQVFwRixHQUFjanRCLEVBQU9nWixRQUFVLEVBQUksUUFBVSxNQUdsRGhaLENBQ2YsRUFFTW1ZLEdBQVl0YixVQUFVb3dCLEVBQWEsU0FBVyxTQUFTcnZCLEdBQ3JELE9BQU9SLEtBQUt5WixVQUFVb1csR0FBWXJ2QixHQUFHaVosU0FDN0MsQ0FDQSxJQUdJOUksR0FBVSxDQUFDLFNBQVUsTUFBTyxjQUFjLFNBQVNrZixFQUFZeHJCLEdBQzdELElBQUk0d0IsRUFBTzV3QixFQUFRLEVBQ2ZtbUMsRUFqaWhCZSxHQWlpaEJKdlYsR0EvaGhCRyxHQStoaEJ5QkEsRUFFM0NsYSxHQUFZdGIsVUFBVW93QixHQUFjLFNBQVNwZixHQUMzQyxJQUFJN04sRUFBUzVDLEtBQUs2MkIsUUFNbEIsT0FMQWowQixFQUFPa1osY0FBY3RhLEtBQUssQ0FDeEJpUCxTQUFZZ1osR0FBWWhaLEVBQVUsR0FDbEN3a0IsS0FBUUEsSUFFVnJ5QixFQUFPaVosYUFBZWpaLEVBQU9pWixjQUFnQjJ1QixFQUN0QzVuQyxDQUNmLENBQ0EsSUFHSStOLEdBQVUsQ0FBQyxPQUFRLFNBQVMsU0FBU2tmLEVBQVl4ckIsR0FDL0MsSUFBSW9tQyxFQUFXLFFBQVVwbUMsRUFBUSxRQUFVLElBRTNDMFcsR0FBWXRiLFVBQVVvd0IsR0FBYyxXQUNsQyxPQUFXN3ZCLEtBQUN5cUMsR0FBVSxHQUFHdnBDLFFBQVEsRUFDekMsQ0FDQSxJQUdJeVAsR0FBVSxDQUFDLFVBQVcsU0FBUyxTQUFTa2YsRUFBWXhyQixHQUNsRCxJQUFJcW1DLEVBQVcsUUFBVXJtQyxFQUFRLEdBQUssU0FFdEMwVyxHQUFZdGIsVUFBVW93QixHQUFjLFdBQ2xDLFlBQVloVSxhQUFlLElBQUlkLEdBQVkvYSxNQUFRQSxLQUFLMHFDLEdBQVUsRUFDMUUsQ0FDQSxJQUVJM3ZCLEdBQVl0YixVQUFVMmdDLFFBQVUsV0FDOUIsWUFBWVksT0FBT3RaLEdBQ3pCLEVBRUkzTSxHQUFZdGIsVUFBVWs1QixLQUFPLFNBQVM3bkIsR0FDcEMsT0FBTzlRLEtBQUtnaEMsT0FBT2x3QixHQUFXcW1CLE1BQ3BDLEVBRUlwYyxHQUFZdGIsVUFBVW01QixTQUFXLFNBQVM5bkIsR0FDeEMsT0FBTzlRLEtBQUt5WixVQUFVa2YsS0FBSzduQixFQUNqQyxFQUVJaUssR0FBWXRiLFVBQVVzNUIsVUFBWXBPLElBQVMsU0FBU25sQixFQUFNZCxHQUN4RCxNQUFtQixtQkFBUmMsRUFDRixJQUFJdVYsR0FBWS9hLE1BRWxCQSxLQUFLcVUsS0FBSSxTQUFTblQsR0FDdkIsT0FBTytqQixHQUFXL2pCLEVBQU9zRSxFQUFNZCxFQUN2QyxHQUNBLElBRUlxVyxHQUFZdGIsVUFBVTZpQyxPQUFTLFNBQVN4eEIsR0FDdEMsWUFBWWt3QixPQUFPL0YsR0FBT3hSLEdBQVkzWSxJQUM1QyxFQUVJaUssR0FBWXRiLFVBQVVzQyxNQUFRLFNBQVM2b0IsRUFBT1csR0FDNUNYLEVBQVFnSixHQUFVaEosR0FFbEIsSUFBSWhvQixFQUFTNUMsS0FDYixPQUFJNEMsRUFBT2laLGVBQWlCK08sRUFBUSxHQUFLVyxFQUFNLEdBQ3RDLElBQUl4USxHQUFZblksSUFFckJnb0IsRUFBUSxFQUNWaG9CLEVBQVNBLEVBQU91Z0MsV0FBV3ZZLEdBQ2xCQSxJQUNUaG9CLEVBQVNBLEVBQU82RCxLQUFLbWtCLElBRW5CVyxJQUFRaG5CLElBRVYzQixHQURBMm9CLEVBQU1xSSxHQUFVckksSUFDRCxFQUFJM29CLEVBQU8rOUIsV0FBV3BWLEdBQU8zb0IsRUFBT3NnQyxLQUFLM1gsRUFBTVgsSUFFekRob0IsRUFDYixFQUVJbVksR0FBWXRiLFVBQVUyakMsZUFBaUIsU0FBU3R5QixHQUM5QyxZQUFZMkksVUFBVTRwQixVQUFVdnlCLEdBQVcySSxTQUNqRCxFQUVJc0IsR0FBWXRiLFVBQVV1OEIsUUFBVSxXQUM5QixPQUFPaDhCLEtBQUtrakMsS0FBSzU3QixFQUN2QixFQUdJb2IsR0FBVzNILEdBQVl0YixXQUFXLFNBQVMyUSxFQUFNeWYsR0FDL0MsSUFBSThhLEVBQWdCLHFDQUFxQ3gyQixLQUFLMGIsR0FDMUQrYSxFQUFVLGtCQUFrQnoyQixLQUFLMGIsR0FDakNnYixFQUFhandCLEdBQU9nd0IsRUFBVyxRQUF3QixRQUFkL2EsRUFBdUIsUUFBVSxJQUFPQSxHQUNqRmliLEVBQWVGLEdBQVcsUUFBUXoyQixLQUFLMGIsR0FFdENnYixJQUdMandCLEdBQU9uYixVQUFVb3dCLEdBQWMsV0FDN0IsSUFBSTN1QixFQUFRbEIsS0FBS3ViLFlBQ2I3VyxFQUFPa21DLEVBQVUsQ0FBQyxHQUFLbnFDLFVBQ3ZCc3FDLEVBQVM3cEMsYUFBaUI2WixHQUMxQnRLLEVBQVcvTCxFQUFLLEdBQ2hCc21DLEVBQVVELEdBQVVqd0IsR0FBUTVaLEdBRTVCczNCLEVBQWMsU0FBU3QzQixHQUN6QixJQUFJMEIsRUFBU2lvQyxFQUFXbHFDLE1BQU1pYSxHQUFRdEosR0FBVSxDQUFDcFEsR0FBUXdELElBQ3pELE9BQVFrbUMsR0FBV3R2QixFQUFZMVksRUFBTyxHQUFLQSxDQUNyRCxFQUVZb29DLEdBQVdMLEdBQW9DLG1CQUFabDZCLEdBQTZDLEdBQW5CQSxFQUFTL1AsU0FFeEVxcUMsRUFBU0MsR0FBVSxHQUVyQixJQUFJMXZCLEVBQVd0YixLQUFLeWIsVUFDaEJ3dkIsSUFBYWpyQyxLQUFLd2IsWUFBWTlhLE9BQzlCd3FDLEVBQWNKLElBQWlCeHZCLEVBQy9CNnZCLEVBQVdKLElBQVdFLEVBRTFCLElBQUtILEdBQWdCRSxFQUFTLENBQzVCOXBDLEVBQVFpcUMsRUFBV2pxQyxFQUFRLElBQUk2WixHQUFZL2EsTUFDM0MsSUFBSTRDLEVBQVN3TixFQUFLelAsTUFBTU8sRUFBT3dELEdBRS9CLE9BREE5QixFQUFPNFksWUFBWWhhLEtBQUssQ0FBRTRPLEtBQVFzZ0IsR0FBTWhzQixLQUFRLENBQUM4ekIsR0FBY25vQixRQUFXOUwsSUFDbkUsSUFBSXlXLEdBQWNwWSxFQUFRMFksRUFDbEMsQ0FDRCxPQUFJNHZCLEdBQWVDLEVBQ1YvNkIsRUFBS3pQLE1BQU1YLEtBQU0wRSxJQUUxQjlCLEVBQVM1QyxLQUFLMHdCLEtBQUs4SCxHQUNaMFMsRUFBZU4sRUFBVWhvQyxFQUFPMUIsUUFBUSxHQUFLMEIsRUFBTzFCLFFBQVcwQixFQUM5RSxFQUNBLElBR0krTixHQUFVLENBQUMsTUFBTyxPQUFRLFFBQVMsT0FBUSxTQUFVLFlBQVksU0FBU2tmLEdBQ3hFLElBQUl6ZixFQUFPNkYsR0FBVzRaLEdBQ2xCdWIsRUFBWSwwQkFBMEJqM0IsS0FBSzBiLEdBQWMsTUFBUSxPQUNqRWliLEVBQWUsa0JBQWtCMzJCLEtBQUswYixHQUUxQ2pWLEdBQU9uYixVQUFVb3dCLEdBQWMsV0FDN0IsSUFBSW5yQixFQUFPakUsVUFDWCxHQUFJcXFDLElBQWlCOXFDLEtBQUt5YixVQUFXLENBQ25DLElBQUl2YSxFQUFRbEIsS0FBS2tCLFFBQ2pCLE9BQU9rUCxFQUFLelAsTUFBTW1hLEdBQVE1WixHQUFTQSxFQUFRLEdBQUl3RCxFQUNoRCxDQUNELE9BQVcxRSxLQUFDb3JDLElBQVcsU0FBU2xxQyxHQUM5QixPQUFPa1AsRUFBS3pQLE1BQU1tYSxHQUFRNVosR0FBU0EsRUFBUSxHQUFJd0QsRUFDekQsR0FDQSxDQUNBLElBR0lnZSxHQUFXM0gsR0FBWXRiLFdBQVcsU0FBUzJRLEVBQU15ZixHQUMvQyxJQUFJZ2IsRUFBYWp3QixHQUFPaVYsR0FDeEIsR0FBSWdiLEVBQVksQ0FDZCxJQUFJMzRCLEVBQU0yNEIsRUFBVy9rQixLQUFPLEdBQ3ZCcG1CLEdBQWVDLEtBQUtzYSxHQUFXL0gsS0FDbEMrSCxHQUFVL0gsR0FBTyxJQUVuQitILEdBQVUvSCxHQUFLMVEsS0FBSyxDQUFFc2tCLEtBQVErSixFQUFZemYsS0FBUXk2QixHQUNuRCxDQUNQLElBRUk1d0IsR0FBVWdYLEdBQWExc0IsRUFsdGhCQSxHQWt0aEIrQnVoQixNQUFRLENBQUMsQ0FDN0RBLEtBQVEsVUFDUjFWLEtBQVE3TCxJQUlWd1csR0FBWXRiLFVBQVVvM0IsTUFoOWR0QixXQUNFLElBQUlqMEIsRUFBUyxJQUFJbVksR0FBWS9hLEtBQUt1YixhQU9sQyxPQU5BM1ksRUFBTzRZLFlBQWNpQyxHQUFVemQsS0FBS3diLGFBQ3BDNVksRUFBT2daLFFBQVU1YixLQUFLNGIsUUFDdEJoWixFQUFPaVosYUFBZTdiLEtBQUs2YixhQUMzQmpaLEVBQU9rWixjQUFnQjJCLEdBQVV6ZCxLQUFLOGIsZUFDdENsWixFQUFPbVosY0FBZ0IvYixLQUFLK2IsY0FDNUJuWixFQUFPb1osVUFBWXlCLEdBQVV6ZCxLQUFLZ2MsV0FDM0JwWixDQUNSLEVBdzhkRG1ZLEdBQVl0YixVQUFVZ2EsUUE5N2R0QixXQUNFLEdBQUl6WixLQUFLNmIsYUFBYyxDQUNyQixJQUFJalosRUFBUyxJQUFJbVksR0FBWS9hLE1BQzdCNEMsRUFBT2daLFNBQVcsRUFDbEJoWixFQUFPaVosY0FBZSxDQUM5QixNQUNRalosRUFBUzVDLEtBQUs2MkIsU0FDUGpiLFVBQVksRUFFckIsT0FBT2haLENBQ1IsRUFxN2REbVksR0FBWXRiLFVBQVV5QixNQTM2ZHRCLFdBQ0UsSUFBSXFQLEVBQVF2USxLQUFLdWIsWUFBWXJhLFFBQ3pCbXFDLEVBQU1yckMsS0FBSzRiLFFBQ1hrQixFQUFRaEMsR0FBUXZLLEdBQ2hCKzZCLEVBQVVELEVBQU0sRUFDaEJwWixFQUFZblYsRUFBUXZNLEVBQU03UCxPQUFTLEVBQ25DNnFDLEVBOHBJTixTQUFpQjNnQixFQUFPVyxFQUFLNFAsR0FDM0IsSUFBSTkyQixHQUFTLEVBQ1QzRCxFQUFTeTZCLEVBQVd6NkIsT0FFeEIsT0FBUzJELEVBQVEzRCxHQUFRLENBQ3ZCLElBQUlpYyxFQUFPd2UsRUFBVzkyQixHQUNsQmlRLEVBQU9xSSxFQUFLckksS0FFaEIsT0FBUXFJLEVBQUtzWSxNQUNYLElBQUssT0FBYXJLLEdBQVN0VyxFQUFNLE1BQ2pDLElBQUssWUFBYWlYLEdBQU9qWCxFQUFNLE1BQy9CLElBQUssT0FBYWlYLEVBQU1yUyxHQUFVcVMsRUFBS1gsRUFBUXRXLEdBQU8sTUFDdEQsSUFBSyxZQUFhc1csRUFBUTVSLEdBQVU0UixFQUFPVyxFQUFNalgsR0FFcEQsQ0FDRCxNQUFPLENBQUVzVyxNQUFTQSxFQUFPVyxJQUFPQSxFQUNqQyxDQTlxSVlpZ0IsQ0FBUSxFQUFHdlosRUFBV2p5QixLQUFLZ2MsV0FDbEM0TyxFQUFRMmdCLEVBQUszZ0IsTUFDYlcsRUFBTWdnQixFQUFLaGdCLElBQ1g3cUIsRUFBUzZxQixFQUFNWCxFQUNmdm1CLEVBQVFpbkMsRUFBVS9mLEVBQU9YLEVBQVEsRUFDakNyQixFQUFZdnBCLEtBQUs4YixjQUNqQjJ2QixFQUFhbGlCLEVBQVU3b0IsT0FDdkJzUSxFQUFXLEVBQ1gwNkIsRUFBWXh5QixHQUFVeFksRUFBUVYsS0FBSytiLGVBRXZDLElBQUtlLElBQVd3dUIsR0FBV3JaLEdBQWF2eEIsR0FBVWdyQyxHQUFhaHJDLEVBQzdELE9BQU93c0IsR0FBaUIzYyxFQUFPdlEsS0FBS3diLGFBRXRDLElBQUk1WSxFQUFTLEdBRWIrZSxFQUNBLEtBQU9qaEIsS0FBWXNRLEVBQVcwNkIsR0FBVyxDQU12QyxJQUhBLElBQUlDLEdBQWEsRUFDYnpxQyxFQUFRcVAsRUFIWmxNLEdBQVNnbkMsS0FLQU0sRUFBWUYsR0FBWSxDQUMvQixJQUFJOXVCLEVBQU80TSxFQUFVb2lCLEdBQ2pCbDdCLEVBQVdrTSxFQUFLbE0sU0FDaEJ3a0IsRUFBT3RZLEVBQUtzWSxLQUNaclQsRUFBV25SLEVBQVN2UCxHQUV4QixHQTd6RFksR0E2ekRSK3pCLEVBQ0YvekIsRUFBUTBnQixPQUNILElBQUtBLEVBQVUsQ0FDcEIsR0FqMERhLEdBaTBEVHFULEVBQ0YsU0FBU3RULEVBRVQsTUFBTUEsQ0FFVCxDQUNGLENBQ0QvZSxFQUFPb08sS0FBYzlQLENBQ3RCLENBQ0QsT0FBTzBCLENBQ1IsRUErM2REZ1ksR0FBT25iLFVBQVUrOEIsR0FBSy9ELEdBQ3RCN2QsR0FBT25iLFVBQVU4NEIsTUExaVFqQixXQUNFLE9BQU9BLEdBQU12NEIsS0FDZCxFQXlpUUQ0YSxHQUFPbmIsVUFBVW1zQyxPQTdnUWpCLFdBQ0UsT0FBVyxJQUFBNXdCLEdBQWNoYixLQUFLa0IsUUFBU2xCLEtBQUt5YixVQUM3QyxFQTRnUURiLEdBQU9uYixVQUFVd0IsS0FwL1BqQixXQUNNakIsS0FBSzJiLGFBQWVwWCxJQUN0QnZFLEtBQUsyYixXQUFhcWdCLEdBQVFoOEIsS0FBS2tCLFVBRWpDLElBQUlDLEVBQU9uQixLQUFLMGIsV0FBYTFiLEtBQUsyYixXQUFXamIsT0FHN0MsTUFBTyxDQUFFUyxLQUFRQSxFQUFNRCxNQUZYQyxFQUFPb0QsRUFBWXZFLEtBQUsyYixXQUFXM2IsS0FBSzBiLGFBR3JELEVBNitQRGQsR0FBT25iLFVBQVV1eEIsTUE3N1BqQixTQUFzQjl2QixHQUlwQixJQUhBLElBQUkwQixFQUNBaUIsRUFBUzdELEtBRU42RCxhQUFrQndYLElBQVksQ0FDbkMsSUFBSXdiLEVBQVE1YixHQUFhcFgsR0FDekJnekIsRUFBTW5iLFVBQVksRUFDbEJtYixFQUFNbGIsV0FBYXBYLEVBQ2YzQixFQUNGNG5CLEVBQVNqUCxZQUFjc2IsRUFFdkJqMEIsRUFBU2kwQixFQUVYLElBQUlyTSxFQUFXcU0sRUFDZmh6QixFQUFTQSxFQUFPMFgsV0FDakIsQ0FFRCxPQURBaVAsRUFBU2pQLFlBQWNyYSxFQUNoQjBCLENBQ1IsRUE0NlBEZ1ksR0FBT25iLFVBQVVnYSxRQXQ1UGpCLFdBQ0UsSUFBSXZZLEVBQVFsQixLQUFLdWIsWUFDakIsR0FBSXJhLGFBQWlCNlosR0FBYSxDQUNoQyxJQUFJOHdCLEVBQVUzcUMsRUFVZCxPQVRJbEIsS0FBS3diLFlBQVk5YSxTQUNuQm1yQyxFQUFVLElBQUk5d0IsR0FBWS9hLFFBRTVCNnJDLEVBQVVBLEVBQVFweUIsV0FDVitCLFlBQVloYSxLQUFLLENBQ3ZCNE8sS0FBUXNnQixHQUNSaHNCLEtBQVEsQ0FBQytVLElBQ1RwSixRQUFXOUwsSUFFRixJQUFBeVcsR0FBYzZ3QixFQUFTN3JDLEtBQUt5YixVQUN4QyxDQUNELE9BQVd6YixLQUFDMHdCLEtBQUtqWCxHQUNsQixFQXU0UERtQixHQUFPbmIsVUFBVXFzQyxPQUFTbHhCLEdBQU9uYixVQUFVaWIsUUFBVUUsR0FBT25iLFVBQVV5QixNQXYzUHRFLFdBQ0UsT0FBT2dzQixHQUFpQmx0QixLQUFLdWIsWUFBYXZiLEtBQUt3YixZQUNoRCxFQXczUERaLEdBQU9uYixVQUFVK0csTUFBUW9VLEdBQU9uYixVQUFVMDNCLEtBRXRDMWYsS0FDRm1ELEdBQU9uYixVQUFVZ1ksSUFqK1BuQixXQUNFLE9BQVd6WCxJQUNaLEdBaStQTTRhLEVBQ1gsQ0FLVWpGLEdBaUJDNUcsS0FFTkEsR0FBV0YsUUFBVTZHLElBQUdBLEVBQUlBLEdBRTdCOUcsR0FBWThHLEVBQUlBLElBSWhCaEgsR0FBS2dILEVBQUlBLEVBRVosR0FBQy9WLEtBQUtLLHFCQzlxaEJLK3JDLEVBTUFDLEVBVUFDLEVBS0FDLEVBWUFDLEVBeUJBQyxFQVlBQyxFQU1BQyxnQkF4RVh6OUIsRUFBQWs5QixRQUFBLEdBSldBLEVBQUFBLE9BQUFBLEVBQUFBLEdBSVgsQ0FBQSxJQUhDQSxFQUFBLE1BQUEsR0FBQSxRQUNBQSxFQUFBQSxFQUFBLE9BQUEsR0FBQSxRQUNBQSxFQUFBQSxFQUFBLE1BQUEsR0FBQSxRQVdEbDlCLEVBQUFtOUIsV0FBQSxHQVJXQSxFQUFBQSxVQUFBQSxFQUFBQSxNQVFYLENBQUEsSUFQQyxjQUFBLGtCQUNBQSxFQUFBLEtBQUEsT0FDQUEsRUFBQSxRQUFBLFVBQ0FBLEVBQUEsV0FBQSxjQUNBQSxFQUFBLGNBQUEsa0JBQ0FBLEVBQUEsT0FBQSxTQUNBQSxFQUFBLGVBQUEsaUJBTURuOUIsRUFBQW85Qix3QkFBQSxHQUhXQSxFQUFBQSx1QkFBQUEsRUFBQUEsbUJBR1gsQ0FBQSxJQUZDLFFBQUEsVUFDQUEsRUFBQSxRQUFBLFVBYURwOUIsRUFBQXE5QixZQUFBLEdBVldBLEVBQUFBLFdBQUFBLEVBQUFBLE9BVVgsQ0FBQSxJQVRDLEtBQUEsSUFDQUEsRUFBQSxNQUFBLElBQ0FBLEVBQUEsSUFBQSxJQUNBQSxFQUFBLE9BQUEsSUFDQUEsRUFBQSxTQUFBLEtBQ0FBLEVBQUEsUUFBQSxLQUNBQSxFQUFBLFdBQUEsS0FDQUEsRUFBQSxZQUFBLEtBQ0FBLEVBQUEsT0FBQSxJQVFEcjlCLEVBQUFzOUIsWUFBQSxHQUxXQSxFQUFBQSxXQUFBQSxFQUFBQSxPQUtYLENBQUEsSUFKQyxLQUFBLEdBQ0FBLEVBQUEsSUFBQSxNQUNBQSxFQUFBLElBQUEsTUFDQUEsRUFBQSxVQUFBLFlBbUJEdDlCLEVBQUEwOUIsWUFBQSxFQWhCRCxTQUFZQSxHQUNWQSxFQUFBLFFBQUEsS0FDQUEsRUFBQSxPQUFBLEtBQ0FBLEVBQUEsWUFBQSxNQUNBQSxFQUFBLE9BQUEsS0FDQUEsRUFBQSxZQUFBLE1BQ0FBLEVBQUEsU0FBQSxNQUNBQSxFQUFBLE1BQUEsS0FDQUEsRUFBQSxPQUFBLE1BQ0FBLEVBQUEsT0FBQSxLQUNBQSxFQUFBLGFBQUEsTUFDQUEsRUFBQSxhQUFBLE1BQ0FBLEVBQUEsWUFBQSxNQUNBQSxFQUFBLEtBQUEsT0FFQUEsRUFBQSxLQUFBLEVBQ0QsQ0FoQkQsQ0FBWUEsV0FBQUEsRUFBQUEsT0FnQlgsQ0FBQSxJQVlBMTlCLEVBQUF1OUIsWUFBQSxHQVZXQSxFQUFBQSxXQUFBQSxFQUFBQSxPQVVYLENBQUEsSUFUQyxLQUFBLEdBQ0FBLEVBQUEsV0FBQSxJQUNBQSxFQUFBLFdBQUEsSUFDQUEsRUFBQSxPQUFBLElBQ0FBLEVBQUEsT0FBQSxJQUNBQSxFQUFBLFNBQUEsTUFDQUEsRUFBQSxNQUFBLEtBQ0FBLEVBQUEsTUFBQSxLQUNBQSxFQUFBLEtBQUEsSUFPRHY5QixFQUFBdzlCLHVCQUFBLEdBSldBLEVBQUFBLHNCQUFBQSxFQUFBQSxrQkFJWCxDQUFBLElBSEMsTUFBQSxJQUNBQSxFQUFBLE1BQUEsSUFDQUEsRUFBQSxRQUFBLElBT0R4OUIsRUFBQXk5QiwyQkFBQSxHQUpXQSxFQUFBQSxFQUFxQkEsd0JBQXJCQSx3QkFJWCxDQUFBLElBSEMsS0FBQSxPQUNBQSxFQUFBLElBQUEsTUFDQUEsRUFBQSxLQUFBLE9DdE5GLElBQU0zRCxFQUFpQix1QkFJVjZELEVBQWEsQ0FDeEIsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsS0F1QldDLEVBQWEsQ0FDeEIsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FFckRDLEVBQWMsQ0FDekIsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsS0FRV0MsRUFBa0IsQ0FDN0JDLFVBQVcsR0FDWEMsUUFBUyxHQUNUQyxPQUFRLEVBQ1JDLGFBQWEsRUFDYkMsWUFBWSxFQUNaQyxNQUFPakIsRUFBS0EsTUFBQ2tCLEtBQ2JDLFlBQVksRUFDWkMsTUFBTSxFQUNOQyxjQUFjLEdBR0hDLElBQWVDLEVBQUEsQ0FBQSxHQUd6QnZCLEVBQUFBLE1BQU13QixlQUFnQixDQUNyQkMsT0FBUSxHQUNSQyxPQUFRLElBRVZILEVBQUN2QixFQUFBQSxNQUFNMkIsU0FBVSxDQUNmQyxNQUFPLEdBQUE1ckMsT0FBRzJtQyxFQUE2QyxtQ0FDdkQ4RSxPQUFRLENBQUMsR0FBQXpyQyxPQUFHMm1DLHNDQUNaK0UsT0FBUSxDQUFDLEdBQUExckMsT0FBRzJtQyx1Q0FFZDRFLEVBQUN2QixFQUFBQSxNQUFNNkIsWUFBYSxDQUNsQkQsTUFBTyxHQUFBNXJDLE9BQUcybUMsRUFBaUQsdUNBQzNEOEUsT0FBUSxDQUFDLEdBQUF6ckMsT0FBRzJtQywwQ0FDWitFLE9BQVEsQ0FDTixHQUFHMXJDLE9BQUEybUMsRUFBa0Qsd0NBQ3JELEdBQUczbUMsT0FBQTJtQyxFQUFrRCx3Q0FDckQsR0FBRzNtQyxPQUFBMm1DLEVBQWtELHdDQUNyRCxHQUFHM21DLE9BQUEybUMsRUFBa0Qsd0NBQ3JELEdBQUczbUMsT0FBQTJtQyxFQUFrRCwwQ0FHekQ0RSxFQUFDdkIsRUFBQUEsTUFBTThCLGVBQWdCLENBQ3JCRixNQUFPLEdBQUE1ckMsT0FBRzJtQyxFQUFxRCwyQ0FDL0Q4RSxPQUFRLENBQ04sR0FBR3pyQyxPQUFBMm1DLEVBQXNELDRDQUN6RCxHQUFHM21DLE9BQUEybUMsRUFBc0QsNENBQ3pELEdBQUczbUMsT0FBQTJtQyxFQUFzRCw0Q0FDekQsR0FBRzNtQyxPQUFBMm1DLEVBQXNELDRDQUN6RCxHQUFHM21DLE9BQUEybUMsRUFBc0QsNkNBRTNEK0UsT0FBUSxDQUNOLEdBQUcxckMsT0FBQTJtQyxFQUFzRCw0Q0FDekQsR0FBRzNtQyxPQUFBMm1DLEVBQXNELDRDQUN6RCxHQUFHM21DLE9BQUEybUMsRUFBc0QsNENBQ3pELEdBQUczbUMsT0FBQTJtQyxFQUFzRCw0Q0FDekQsR0FBRzNtQyxPQUFBMm1DLEVBQXNELDhDQUc3RDRFLEVBQUN2QixFQUFBQSxNQUFNK0IsUUFBUyxDQUNkSCxNQUFPLEdBQUE1ckMsT0FBRzJtQyxFQUE0QyxrQ0FDdEQ4RSxPQUFRLENBQUMsR0FBQXpyQyxPQUFHMm1DLHFDQUNaK0UsT0FBUSxDQUFDLEdBQUExckMsT0FBRzJtQyxzQ0FFZDRFLEVBQUN2QixFQUFBQSxNQUFNZ0MsZ0JBQWlCLENBQ3RCSixNQUFPLEdBQUE1ckMsT0FBRzJtQyxFQUFvRCwwQ0FDOUQ4RSxPQUFRLENBQUMsR0FBQXpyQyxPQUFHMm1DLDZDQUNaK0UsT0FBUSxDQUFDLEdBQUExckMsT0FBRzJtQyw4Q0FFZDRFLEVBQUN2QixFQUFBQSxNQUFNa0IsTUFBTyxDQUNaTyxPQUFRLEdBQ1JDLE9BQVEsT0FJQ08sRUFBa0Isd0JBQ2xCQyxFQUFtQix3QkFDbkJDLEVBQWEsd0JBQ2JDLEVBQWdCLHdCQ3RKaEJDLEVBQWlCLENBQzVCLElBR0EsS0FDQSxLQUVXQyxFQUFrQixDQUM3QixLQUNBLEtBQ0EsTUFJV0MsRUFBNEIsQ0FDdkMsSUFDQSxJQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsSUFDQSxLQUNBLEtBRVdDLEVBQTRCLENBQ3ZDLEtBQ0EsS0FDQSxNQUlXQyxFQUFtQixDQUM5QixLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLE1BR1dDLEVBQWlCLENBQUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQ2hEQyxFQUFzQixDQUVqQyxLQUVBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLE1BS1dDLEVBQW1CLENBQUMsS0FBTSxNQUFPLE1BQU8sT0FFeENDLEVBQXNCLENBQUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFFbEVDLEVBQWMsSUFBSXJsQyxPQUFPLDBCQUUvQnNsQyxFQUFBLFdBTUUsU0FBWUEsRUFBQUMsRUFBZTl0QyxHQUpwQmxCLEtBQUlpMUIsS0FBVyxJQUNaajFCLEtBQU1pdkMsT0FBVyxHQUNqQmp2QyxLQUFPa3ZDLFFBQWEsR0FHNUJsdkMsS0FBS2d2QyxNQUFRQSxFQUNRLGlCQUFWOXRDLEdBQXNCQSxhQUFpQnBCLE9BQ2hERSxLQUFLa0IsTUFBUUEsRUFDSjNCLE1BQU11YixRQUFRNVosS0FDdkJsQixLQUFLdVIsT0FBU3JRLEVBRWpCLENBMkJILE9BekJFOUIsT0FBQXdZLGVBQUltM0IsRUFBS3R2QyxVQUFBLFFBQUEsQ0FBVG1mLElBQUEsV0FDRSxPQUFPNWUsS0FBS2l2QyxNQUNiLEVBRURuNkIsSUFBQSxTQUFVaVUsR0FDUi9vQixLQUFLaXZDLE9BQVNsbUIsRUFDVjhsQixFQUFvQnJ0QixTQUFTeGhCLEtBQUtndkMsT0FDcENodkMsS0FBS2t2QyxRQUFVbm1CLEVBQVN6VCxNQUFNLEtBRTlCdFYsS0FBS2t2QyxRQUFVLENBQUNubUIsRUFFbkIsa0NBRUQzcEIsT0FBQXdZLGVBQUltM0IsRUFBTXR2QyxVQUFBLFNBQUEsQ0FBVm1mLElBQUEsV0FDRSxPQUFPNWUsS0FBS2t2QyxPQUNiLEVBRURwNkIsSUFBQSxTQUFXcTZCLEdBQ1RudkMsS0FBS2t2QyxRQUFVQyxFQUNmbnZDLEtBQUtpdkMsT0FBU0UsRUFBVS9oQyxLQUFLLElBQzlCLGtDQUVEMmhDLEVBQUF0dkMsVUFBQTZXLFNBQUEsV0FDRSxNQUFPLEdBQUF0VSxPQUFHaEMsS0FBS2d2QyxPQUFLaHRDLE9BQUdoQyxLQUFLa3ZDLFFBQVE3NkIsS0FBSSxTQUFBKzZCLEdBQUssTUFBQSxJQUFJcHRDLE9BQUFvdEMsRUFBSSxJQUFBLElBQUVoaUMsS0FBSyxNQUUvRDJoQyxDQUFELElBRUFNLEVBQUEsU0FBQUMsR0FDRSxTQUFZRCxFQUFBTCxFQUFlOXRDLEdBQ3pCLElBQUFxdUMsRUFBQUQsRUFBTTN2QyxLQUFBSyxLQUFBZ3ZDLEVBQU85dEMsSUFBT2xCLFlBQ3BCdXZDLEVBQUt0YSxLQUFPLFFBQ2IsQ0FrQ0gsT0F0QzhCcjFCLEVBQVd5dkMsRUFBQUMsR0FNaENELEVBQUl6dEMsS0FBWCxTQUFZNHRDLEdBQ1YsSUFBTXA2QixFQUFRbzZCLEVBQUlwNkIsTUFBTSwwQkFDeEIsT0FBSUEsRUFHSyxJQUFJaTZCLEVBRkdqNkIsRUFBTSxHQUNSQSxFQUFNLElBR2IsSUFBSWk2QixFQUFTLEdBQUksS0FJMUJqd0MsT0FBQXdZLGVBQUl5M0IsRUFBSzV2QyxVQUFBLFFBQUEsQ0FBVG1mLElBQUEsV0FDRSxPQUFPNWUsS0FBS2l2QyxNQUNiLEVBRURuNkIsSUFBQSxTQUFVaVUsR0FDUi9vQixLQUFLaXZDLE9BQVNsbUIsRUFDVjhsQixFQUFvQnJ0QixTQUFTeGhCLEtBQUtndkMsT0FDcENodkMsS0FBS2t2QyxRQUFVbm1CLEVBQVN6VCxNQUFNLEtBRTlCdFYsS0FBS2t2QyxRQUFVLENBQUNubUIsRUFFbkIsa0NBRUQzcEIsT0FBQXdZLGVBQUl5M0IsRUFBTTV2QyxVQUFBLFNBQUEsQ0FBVm1mLElBQUEsV0FDRSxPQUFPNWUsS0FBS2t2QyxPQUNiLEVBRURwNkIsSUFBQSxTQUFXcTZCLEdBQ1RudkMsS0FBS2t2QyxRQUFVQyxFQUNmbnZDLEtBQUtpdkMsT0FBU0UsRUFBVS9oQyxLQUFLLElBQzlCLGtDQUNGaWlDLENBQUQsQ0F0Q0EsQ0FBOEJOLEdBd0M5QlUsRUFBQSxTQUFBSCxHQUNFLFNBQVlHLEVBQUFULEVBQWU5dEMsR0FDekIsSUFBQXF1QyxFQUFBRCxFQUFNM3ZDLEtBQUFLLEtBQUFndkMsRUFBTzl0QyxJQUFPbEIsWUFDcEJ1dkMsRUFBS3RhLEtBQU8sU0FDYixDQWtDSCxPQXRDK0JyMUIsRUFBVzZ2QyxFQUFBSCxHQU1qQ0csRUFBSTd0QyxLQUFYLFNBQVk0dEMsR0FDVixJQUFNRSxFQUFhRixFQUFJcDZCLE1BQU0wNUIsR0FHekJFLEVBQVEsR0FDTlcsRUFBT2p1QyxFQUFBLEdBQUFOLEVBSE1vdUMsRUFBSUksU0FBUyxxQkFHSCxHQUFBdjdCLEtBQUksU0FBQXJULEdBQUssT0FBQUEsRUFBRSxFQUFGLElBRXRDLE9BREkwdUMsSUFBWVYsRUFBUVUsRUFBVyxJQUM1QixJQUFJRCxFQUFVVCxFQUFPVyxJQUk5QnZ3QyxPQUFBd1ksZUFBSTYzQixFQUFLaHdDLFVBQUEsUUFBQSxDQUFUbWYsSUFBQSxXQUNFLE9BQU81ZSxLQUFLaXZDLE1BQ2IsRUFFRG42QixJQUFBLFNBQVVpVSxHQUNSL29CLEtBQUtpdkMsT0FBU2xtQixFQUNWOGxCLEVBQW9CcnRCLFNBQVN4aEIsS0FBS2d2QyxPQUNwQ2h2QyxLQUFLa3ZDLFFBQVVubUIsRUFBU3pULE1BQU0sS0FFOUJ0VixLQUFLa3ZDLFFBQVUsQ0FBQ25tQixFQUVuQixrQ0FFRDNwQixPQUFBd1ksZUFBSTYzQixFQUFNaHdDLFVBQUEsU0FBQSxDQUFWbWYsSUFBQSxXQUNFLE9BQU81ZSxLQUFLa3ZDLE9BQ2IsRUFFRHA2QixJQUFBLFNBQVdxNkIsR0FDVG52QyxLQUFLa3ZDLFFBQVVDLEVBQ2ZudkMsS0FBS2l2QyxPQUFTRSxFQUFVL2hDLEtBQUssSUFDOUIsa0NBQ0ZxaUMsQ0FBRCxDQXRDQSxDQUErQlYsR0F3Qy9CYyxFQUFBLFNBQUFQLEdBQ0UsU0FBWU8sRUFBQWIsRUFBZTl0QyxHQUN6QixJQUFBcXVDLEVBQUFELEVBQU0zdkMsS0FBQUssS0FBQWd2QyxFQUFPOXRDLElBQU9sQixZQUNwQnV2QyxFQUFLdGEsS0FBTyxtQkFDYixDQWlDSCxPQXJDd0NyMUIsRUFBV2l3QyxFQUFBUCxHQUsxQ08sRUFBSWp1QyxLQUFYLFNBQVk0dEMsR0FDVixJQUFNcDZCLEVBQVFvNkIsRUFBSXA2QixNQUFNLDBCQUN4QixPQUFJQSxFQUdLLElBQUl5NkIsRUFGR3o2QixFQUFNLEdBQ1JBLEVBQU0sSUFHYixJQUFJeTZCLEVBQW1CLEdBQUksS0FJcEN6d0MsT0FBQXdZLGVBQUlpNEIsRUFBS3B3QyxVQUFBLFFBQUEsQ0FBVG1mLElBQUEsV0FDRSxPQUFPNWUsS0FBS2l2QyxNQUNiLEVBRURuNkIsSUFBQSxTQUFVaVUsR0FDUi9vQixLQUFLaXZDLE9BQVNsbUIsRUFDVjhsQixFQUFvQnJ0QixTQUFTeGhCLEtBQUtndkMsT0FDcENodkMsS0FBS2t2QyxRQUFVbm1CLEVBQVN6VCxNQUFNLEtBRTlCdFYsS0FBS2t2QyxRQUFVLENBQUNubUIsRUFFbkIsa0NBRUQzcEIsT0FBQXdZLGVBQUlpNEIsRUFBTXB3QyxVQUFBLFNBQUEsQ0FBVm1mLElBQUEsV0FDRSxPQUFPNWUsS0FBS2t2QyxPQUNiLEVBRURwNkIsSUFBQSxTQUFXcTZCLEdBQ1RudkMsS0FBS2t2QyxRQUFVQyxFQUNmbnZDLEtBQUtpdkMsT0FBU0UsRUFBVS9oQyxLQUFLLElBQzlCLGtDQUNGeWlDLENBQUQsQ0FyQ0EsQ0FBd0NkLEdBdUN4Q2UsRUFBQSxTQUFBUixHQUNFLFNBQVlRLEVBQUFkLEVBQWU5dEMsR0FDekIsSUFBQXF1QyxFQUFBRCxFQUFNM3ZDLEtBQUFLLEtBQUFndkMsRUFBTzl0QyxJQUFPbEIsWUFDcEJ1dkMsRUFBS3RhLEtBQU8sbUJBQ2IsQ0FpQ0gsT0FyQ3dDcjFCLEVBQVdrd0MsRUFBQVIsR0FLMUNRLEVBQUlsdUMsS0FBWCxTQUFZNHRDLEdBQ1YsSUFBTXA2QixFQUFRbzZCLEVBQUlwNkIsTUFBTSwwQkFDeEIsT0FBSUEsRUFHSyxJQUFJMDZCLEVBRkcxNkIsRUFBTSxHQUNSQSxFQUFNLElBR2IsSUFBSTA2QixFQUFtQixHQUFJLEtBSXBDMXdDLE9BQUF3WSxlQUFJazRCLEVBQUtyd0MsVUFBQSxRQUFBLENBQVRtZixJQUFBLFdBQ0UsT0FBTzVlLEtBQUtpdkMsTUFDYixFQUVEbjZCLElBQUEsU0FBVWlVLEdBQ1Ivb0IsS0FBS2l2QyxPQUFTbG1CLEVBQ1Y4bEIsRUFBb0JydEIsU0FBU3hoQixLQUFLZ3ZDLE9BQ3BDaHZDLEtBQUtrdkMsUUFBVW5tQixFQUFTelQsTUFBTSxLQUU5QnRWLEtBQUtrdkMsUUFBVSxDQUFDbm1CLEVBRW5CLGtDQUVEM3BCLE9BQUF3WSxlQUFJazRCLEVBQU1yd0MsVUFBQSxTQUFBLENBQVZtZixJQUFBLFdBQ0UsT0FBTzVlLEtBQUtrdkMsT0FDYixFQUVEcDZCLElBQUEsU0FBV3E2QixHQUNUbnZDLEtBQUtrdkMsUUFBVUMsRUFDZm52QyxLQUFLaXZDLE9BQVNFLEVBQVUvaEMsS0FBSyxJQUM5QixrQ0FDRjBpQyxDQUFELENBckNBLENBQXdDZixHQXVDeENnQixFQUFBLFNBQUFULEdBQUEsU0FBQVMsa0RBQWtELENBQUQsT0FBYm53QyxFQUFXbXdDLEVBQUFULEdBQUdTLENBQUQsQ0FBakQsQ0FBb0NoQixHQUNwQ2lCLEVBQUEsU0FBQVYsR0FDRSxTQUFZVSxFQUFBaEIsRUFBZTl0QyxHQUN6QixJQUFBcXVDLEVBQUFELEVBQU0zdkMsS0FBQUssS0FBQWd2QyxFQUFPOXRDLElBQU9sQixZQUNwQnV2QyxFQUFLdGEsS0FBTyxVQUNiLENBaUNILE9BckNnQ3IxQixFQUFXb3dDLEVBQUFWLEdBS2xDVSxFQUFJcHVDLEtBQVgsU0FBWTR0QyxHQUNWLElBQU1FLEVBQWFGLEVBQUlwNkIsTUFBTTA1QixHQUd6QkUsRUFBUSxHQUNOVyxFQUFPanVDLEVBQUEsR0FBQU4sRUFITW91QyxFQUFJSSxTQUFTLHFCQUdILEdBQUF2N0IsS0FBSSxTQUFBclQsR0FBSyxPQUFBQSxFQUFFLEVBQUYsSUFFdEMsT0FESTB1QyxJQUFZVixFQUFRVSxFQUFXLElBQzVCLElBQUlNLEVBQVdoQixFQUFPVyxJQUkvQnZ3QyxPQUFBd1ksZUFBSW80QixFQUFLdndDLFVBQUEsUUFBQSxDQUFUbWYsSUFBQSxXQUNFLE9BQU81ZSxLQUFLaXZDLE1BQ2IsRUFFRG42QixJQUFBLFNBQVVpVSxHQUNSL29CLEtBQUtpdkMsT0FBU2xtQixFQUNWOGxCLEVBQW9CcnRCLFNBQVN4aEIsS0FBS2d2QyxPQUNwQ2h2QyxLQUFLa3ZDLFFBQVVubUIsRUFBU3pULE1BQU0sS0FFOUJ0VixLQUFLa3ZDLFFBQVUsQ0FBQ25tQixFQUVuQixrQ0FFRDNwQixPQUFBd1ksZUFBSW80QixFQUFNdndDLFVBQUEsU0FBQSxDQUFWbWYsSUFBQSxXQUNFLE9BQU81ZSxLQUFLa3ZDLE9BQ2IsRUFFRHA2QixJQUFBLFNBQVdxNkIsR0FDVG52QyxLQUFLa3ZDLFFBQVVDLEVBQ2ZudkMsS0FBS2l2QyxPQUFTRSxFQUFVL2hDLEtBQUssSUFDOUIsa0NBQ0Y0aUMsQ0FBRCxDQXJDQSxDQUFnQ2pCLEdBdUNoQ2tCLEVBQUEsU0FBQVgsR0FDRSxTQUFZVyxFQUFBakIsRUFBZTl0QyxHQUN6QixJQUFBcXVDLEVBQUFELEVBQU0zdkMsS0FBQUssS0FBQWd2QyxFQUFPOXRDLElBQU9sQixZQUNwQnV2QyxFQUFLdGEsS0FBTyxRQUNiLENBaUNILE9BckM4QnIxQixFQUFXcXdDLEVBQUFYLEdBS2hDVyxFQUFJcnVDLEtBQVgsU0FBWTR0QyxHQUNWLElBQU1wNkIsRUFBUW82QixFQUFJcDZCLE1BQU0sMEJBQ3hCLE9BQUlBLEVBR0ssSUFBSTY2QixFQUZHNzZCLEVBQU0sR0FDUkEsRUFBTSxJQUdiLElBQUk2NkIsRUFBUyxHQUFJLEtBSTFCN3dDLE9BQUF3WSxlQUFJcTRCLEVBQUt4d0MsVUFBQSxRQUFBLENBQVRtZixJQUFBLFdBQ0UsT0FBTzVlLEtBQUtpdkMsTUFDYixFQUVEbjZCLElBQUEsU0FBVWlVLEdBQ1Ivb0IsS0FBS2l2QyxPQUFTbG1CLEVBQ1Y4bEIsRUFBb0JydEIsU0FBU3hoQixLQUFLZ3ZDLE9BQ3BDaHZDLEtBQUtrdkMsUUFBVW5tQixFQUFTelQsTUFBTSxLQUU5QnRWLEtBQUtrdkMsUUFBVSxDQUFDbm1CLEVBRW5CLGtDQUVEM3BCLE9BQUF3WSxlQUFJcTRCLEVBQU14d0MsVUFBQSxTQUFBLENBQVZtZixJQUFBLFdBQ0UsT0FBTzVlLEtBQUtrdkMsT0FDYixFQUVEcDZCLElBQUEsU0FBV3E2QixHQUNUbnZDLEtBQUtrdkMsUUFBVUMsRUFDZm52QyxLQUFLaXZDLE9BQVNFLEVBQVUvaEMsS0FBSyxJQUM5QixrQ0FDRjZpQyxDQUFELENBckNBLENBQThCbEIsR0F1QzlCbUIsR0FBQSxTQUFBWixHQUNFLFNBQVlZLEVBQUFsQixFQUFlOXRDLEdBQ3pCLElBQUFxdUMsRUFBQUQsRUFBTTN2QyxLQUFBSyxLQUFBZ3ZDLEVBQU85dEMsSUFBT2xCLFlBQ3BCdXZDLEVBQUt0YSxLQUFPLGFBQ2IsQ0FnQ0gsT0FwQ2tDcjFCLEVBQVdzd0MsRUFBQVosR0FLcENZLEVBQUl0dUMsS0FBWCxTQUFZNHRDLEdBQ1YsSUFBTXA2QixFQUFRbzZCLEVBQUlwNkIsTUFBTSwwQkFDeEIsT0FBSUEsRUFHSyxJQUFJODZCLEVBRkc5NkIsRUFBTSxHQUNSQSxFQUFNLElBR2IsSUFBSTg2QixFQUFhLEdBQUksS0FHOUI5d0MsT0FBQXdZLGVBQUlzNEIsRUFBS3p3QyxVQUFBLFFBQUEsQ0FBVG1mLElBQUEsV0FDRSxPQUFPNWUsS0FBS2l2QyxNQUNiLEVBRURuNkIsSUFBQSxTQUFVaVUsR0FDUi9vQixLQUFLaXZDLE9BQVNsbUIsRUFDVjhsQixFQUFvQnJ0QixTQUFTeGhCLEtBQUtndkMsT0FDcENodkMsS0FBS2t2QyxRQUFVbm1CLEVBQVN6VCxNQUFNLEtBRTlCdFYsS0FBS2t2QyxRQUFVLENBQUNubUIsRUFFbkIsa0NBRUQzcEIsT0FBQXdZLGVBQUlzNEIsRUFBTXp3QyxVQUFBLFNBQUEsQ0FBVm1mLElBQUEsV0FDRSxPQUFPNWUsS0FBS2t2QyxPQUNiLEVBRURwNkIsSUFBQSxTQUFXcTZCLEdBQ1RudkMsS0FBS2t2QyxRQUFVQyxFQUNmbnZDLEtBQUtpdkMsT0FBU0UsRUFBVS9oQyxLQUFLLElBQzlCLGtDQUNGOGlDLENBQUQsQ0FwQ0EsQ0FBa0NuQixHQXNDbENvQixHQUFBLFNBQUFiLEdBQ0UsU0FBWWEsRUFBQW5CLEVBQWU5dEMsR0FDekIsSUFBQXF1QyxFQUFBRCxFQUFNM3ZDLEtBQUFLLEtBQUFndkMsRUFBTzl0QyxJQUFPbEIsWUFDcEJ1dkMsRUFBS3RhLEtBQU8sVUFDYixDQWdDSCxPQXBDZ0NyMUIsRUFBV3V3QyxFQUFBYixHQUtsQ2EsRUFBSXZ1QyxLQUFYLFNBQVk0dEMsR0FDVixJQUFNcDZCLEVBQVFvNkIsRUFBSXA2QixNQUFNLDBCQUN4QixPQUFJQSxFQUdLLElBQUkrNkIsRUFGRy82QixFQUFNLEdBQ1JBLEVBQU0sSUFHYixJQUFJKzZCLEVBQVcsR0FBSSxLQUc1Qi93QyxPQUFBd1ksZUFBSXU0QixFQUFLMXdDLFVBQUEsUUFBQSxDQUFUbWYsSUFBQSxXQUNFLE9BQU81ZSxLQUFLaXZDLE1BQ2IsRUFFRG42QixJQUFBLFNBQVVpVSxHQUNSL29CLEtBQUtpdkMsT0FBU2xtQixFQUNWOGxCLEVBQW9CcnRCLFNBQVN4aEIsS0FBS2d2QyxPQUNwQ2h2QyxLQUFLa3ZDLFFBQVVubUIsRUFBU3pULE1BQU0sS0FFOUJ0VixLQUFLa3ZDLFFBQVUsQ0FBQ25tQixFQUVuQixrQ0FFRDNwQixPQUFBd1ksZUFBSXU0QixFQUFNMXdDLFVBQUEsU0FBQSxDQUFWbWYsSUFBQSxXQUNFLE9BQU81ZSxLQUFLa3ZDLE9BQ2IsRUFFRHA2QixJQUFBLFNBQVdxNkIsR0FDVG52QyxLQUFLa3ZDLFFBQVVDLEVBQ2ZudkMsS0FBS2l2QyxPQUFTRSxFQUFVL2hDLEtBQUssSUFDOUIsa0NBQ0YraUMsQ0FBRCxDQXBDQSxDQUFnQ3BCLEdBc0NoQ3FCLEdBQUEsU0FBQWQsR0FDRSxTQUFZYyxFQUFBcEIsRUFBZTl0QyxHQUN6QixJQUFBcXVDLEVBQUFELEVBQU0zdkMsS0FBQUssS0FBQWd2QyxFQUFPOXRDLElBQU9sQixZQUNwQnV2QyxFQUFLdGEsS0FBTyxVQUNiLENBdUJILE9BM0JnQ3IxQixFQUFXd3dDLEVBQUFkLEdBTXpDbHdDLE9BQUF3WSxlQUFJdzRCLEVBQUszd0MsVUFBQSxRQUFBLENBQVRtZixJQUFBLFdBQ0UsT0FBTzVlLEtBQUtpdkMsTUFDYixFQUVEbjZCLElBQUEsU0FBVWlVLEdBQ1Ivb0IsS0FBS2l2QyxPQUFTbG1CLEVBQ1Y4bEIsRUFBb0JydEIsU0FBU3hoQixLQUFLZ3ZDLE9BQ3BDaHZDLEtBQUtrdkMsUUFBVW5tQixFQUFTelQsTUFBTSxLQUU5QnRWLEtBQUtrdkMsUUFBVSxDQUFDbm1CLEVBRW5CLGtDQUVEM3BCLE9BQUF3WSxlQUFJdzRCLEVBQU0zd0MsVUFBQSxTQUFBLENBQVZtZixJQUFBLFdBQ0UsT0FBTzVlLEtBQUtrdkMsT0FDYixFQUVEcDZCLElBQUEsU0FBV3E2QixHQUNUbnZDLEtBQUtrdkMsUUFBVUMsRUFDZm52QyxLQUFLaXZDLE9BQVNFLEVBQVUvaEMsS0FBSyxJQUM5QixrQ0FDRmdqQyxDQUFELENBM0JBLENBQWdDckIsR0E2QmhDc0IsR0FBQSxTQUFBZixHQUFBLFNBQUFlLGtEQUFxRCxDQUFELE9BQWJ6d0MsRUFBV3l3QyxFQUFBZixHQUFHZSxDQUFELENBQXBELENBQXVDdEIsR0M3Y25DdUIsR0FBWSxFQUNaQyxHQUEwQixHQU94QkMsR0FBVyxTQUFDQyxHQUdoQixNQUFPLENBRlVBLEVBQUkvdkMsT0FDRCt2QyxFQUFJL3ZDLE9BQVMsRUFBSSt2QyxFQUFJLEdBQUcvdkMsT0FBUyxFQUV2RCxFQVNNZ3dDLEdBQWtCLFNBQUNELEVBQWlCRSxFQUFXQyxFQUFXQyxHQUM5RCxJQUFNdjhCLEVBQU9rOEIsR0FBU0MsR0FDbEJFLEdBQUssR0FBS0EsRUFBSXI4QixFQUFLLElBQU1zOEIsR0FBSyxHQUFLQSxFQUFJdDhCLEVBQUssS0FDMUNtOEIsRUFBSUUsR0FBR0MsS0FBT0MsR0FBT04sR0FBYy91QixTQUFTLEdBQUd4ZixPQUFBMnVDLGNBQUtDLElBTS9CLElBQWRILEVBQUlFLEdBQUdDLEtBQ2hCTixJQUFhLElBTmJDLEdBQWMvdUMsS0FBSyxHQUFBUSxPQUFHMnVDLEVBQUssS0FBQTN1QyxPQUFBNHVDLElBQzNCRixHQUFnQkQsRUFBS0UsRUFBSSxFQUFHQyxFQUFHQyxHQUMvQkgsR0FBZ0JELEVBQUtFLEVBQUksRUFBR0MsRUFBR0MsR0FDL0JILEdBQWdCRCxFQUFLRSxFQUFHQyxFQUFJLEVBQUdDLEdBQy9CSCxHQUFnQkQsRUFBS0UsRUFBR0MsRUFBSSxFQUFHQyxJQUtyQyxFQUVNQyxHQUFjLFNBQUNMLEVBQWlCRSxFQUFXQyxFQUFXQyxHQUMxRCxJQUFNdjhCLEVBQU9rOEIsR0FBU0MsR0FJdEIsT0FIQUgsR0FBWSxFQUNaQyxHQUFnQixHQUVaSSxFQUFJLEdBQUtDLEVBQUksR0FBS0QsRUFBSXI4QixFQUFLLEdBQUssR0FBS3M4QixFQUFJdDhCLEVBQUssR0FBSyxHQU9yQyxJQUFkbThCLEVBQUlFLEdBQUdDLEdBTkYsQ0FDTEcsUUFBUyxFQUNUUixjQUFlLEtBVW5CRyxHQUFnQkQsRUFBS0UsRUFBR0MsRUFBR0MsR0FDcEIsQ0FDTEUsUUFBU1QsR0FDVEMsY0FBYUEsSUFFakIsRUFFYVMsR0FBYyxTQUN6QlAsRUFDQWx3QyxFQUNBMHdDLEVBQ0FKLEdBRUEsSUFBTUssRUFBV1QsRUFDWGxELEVBQXVEdUQsR0FDM0RMLEVBQ0Fsd0MsRUFDQTB3QyxFQUFJLEVBQ0pKLEdBSmNNLFlBQTBCQyxrQkFNcENDLEVBQTJEUCxHQUMvREwsRUFDQWx3QyxFQUNBMHdDLEVBQUksRUFDSkosR0FKY1MsWUFBNEJDLGtCQU10Q0MsRUFBMkRWLEdBQy9ETCxFQUNBbHdDLEVBQUksRUFDSjB3QyxFQUNBSixHQUpjWSxZQUE0QkMsa0JBTXRDQyxFQUNKYixHQUFZTCxFQUFLbHdDLEVBQUksRUFBRzB3QyxFQUFHSixHQURiZSxZQUE2QkMsa0JBMEI3QyxPQXhCa0IsSUFBZFYsR0FDRkMsRUFBZ0I3OEIsU0FBUSxTQUFBdTlCLEdBQ3RCLElBQU1DLEVBQVFELEVBQUt4OEIsTUFBTSxLQUN6QjQ3QixFQUFTN2lDLFNBQVMwakMsRUFBTSxLQUFLMWpDLFNBQVMwakMsRUFBTSxLQUFPLENBQ3JELElBRWtCLElBQWhCVCxHQUNGQyxFQUFrQmg5QixTQUFRLFNBQUF1OUIsR0FDeEIsSUFBTUMsRUFBUUQsRUFBS3g4QixNQUFNLEtBQ3pCNDdCLEVBQVM3aUMsU0FBUzBqQyxFQUFNLEtBQUsxakMsU0FBUzBqQyxFQUFNLEtBQU8sQ0FDckQsSUFFa0IsSUFBaEJOLEdBQ0ZDLEVBQWtCbjlCLFNBQVEsU0FBQXU5QixHQUN4QixJQUFNQyxFQUFRRCxFQUFLeDhCLE1BQU0sS0FDekI0N0IsRUFBUzdpQyxTQUFTMGpDLEVBQU0sS0FBSzFqQyxTQUFTMGpDLEVBQU0sS0FBTyxDQUNyRCxJQUVtQixJQUFqQkgsR0FDRkMsRUFBbUJ0OUIsU0FBUSxTQUFBdTlCLEdBQ3pCLElBQU1DLEVBQVFELEVBQUt4OEIsTUFBTSxLQUN6QjQ3QixFQUFTN2lDLFNBQVMwakMsRUFBTSxLQUFLMWpDLFNBQVMwakMsRUFBTSxLQUFPLENBQ3JELElBRUtiLENBQ1QsRUFFTWMsR0FBYSxTQUFDdkIsRUFBaUJsd0MsRUFBVzB3QyxFQUFXSixHQUNuRCxJQUFBdEQsRUFBdUR1RCxHQUMzREwsRUFDQWx3QyxFQUNBMHdDLEVBQUksRUFDSkosR0FKY00sWUFBMEJDLGtCQU1wQ0MsRUFBMkRQLEdBQy9ETCxFQUNBbHdDLEVBQ0Ewd0MsRUFBSSxFQUNKSixHQUpjUyxZQUE0QkMsa0JBTXRDQyxFQUEyRFYsR0FDL0RMLEVBQ0Fsd0MsRUFBSSxFQUNKMHdDLEVBQ0FKLEdBSmNZLFlBQTRCQyxrQkFNdENDLEVBQ0piLEdBQVlMLEVBQUtsd0MsRUFBSSxFQUFHMHdDLEVBQUdKLEdBRGJlLFlBQTZCQyxrQkFFN0MsT0FBa0IsSUFBZFYsR0FBbUJDLEVBQWdCMXdDLE9BQVMsSUFHNUIsSUFBaEI0d0MsR0FBcUJDLEVBQWtCN3dDLE9BQVMsSUFHaEMsSUFBaEIrd0MsR0FBcUJDLEVBQWtCaHhDLE9BQVMsR0FHL0IsSUFBakJreEMsR0FBc0JDLEVBQW1CbnhDLE9BQVMsR0FJeEQsRUFFYXV4QyxHQUFVLFNBQUN4QixFQUFpQmx3QyxFQUFXMHdDLEVBQVdKLEdBQzdELElBQU1LLEVBQVd6TSxZQUFVZ00sR0FDM0IsR0FBSWx3QyxFQUFJLEdBQUswd0MsRUFBSSxFQUFHLE9BQU8sRUFDM0IsR0FBa0IsSUFBZFIsRUFBSWx3QyxHQUFHMHdDLEdBQ1QsT0FBTyxFQUdUQyxFQUFTM3dDLEdBQUcwd0MsR0FBS0osRUFDVixJQUFBRSxFQUFXRCxHQUFZSSxFQUFVM3dDLEVBQUcwd0MsRUFBR0osV0FDOUMsUUFBSW1CLEdBQVdkLEVBQVUzd0MsRUFBRzB3QyxHQUFJSixLQUc1Qm1CLEdBQVdkLEVBQVUzd0MsRUFBRzB3QyxFQUFHSixJQUdmLElBQVpFLENBSU4sV0N2S2dCbUIsR0FDZEMsRUFDQTN4QyxFQUNBNHhDLEdBY0EsWUFkQSxJQUFBQSxJQUFBQSxFQUFTLENBQUEsSUFBSyxLQUFNLE9BRVJBLEVBQU0vOUIsS0FBSSxTQUFBMVEsR0FDcEIsSUFBTTJCLEVBQVU2c0MsRUFBSXB3QyxNQUFNLEVBQUd2QixHQUFHa21DLFlBQVkvaUMsR0FDNUMsSUFBaUIsSUFBYjJCLEVBQWdCLE9BQU8sRUFFM0IsSUFBTStzQyxFQUFhL3NDLEVBQVUzQixFQUFLakQsT0FDNUI0eEMsRUFBV0gsRUFBSTdzQyxRQUFRLElBQUsrc0MsR0FFbEMsT0FBa0IsSUFBZEMsSUFFRzl4QyxHQUFLNnhDLEdBQWM3eEMsR0FBSzh4QyxFQUNqQyxJQUVXOXdCLFVBQVMsRUFDdEIsQ0FwQndCLElBQUlsZSxFQzBCNUIsSUFBQWl2QyxHQUFBLFdBbUNFLFNBQ1VBLEVBQUFDLEVBQ0FDLFFBQUEsSUFBQUEsSUFBQUEsRUFBQSxDQUNOQyxlQUFnQixLQUZWMXlDLEtBQU93eUMsUUFBUEEsRUFDQXh5QyxLQUFZeXlDLGFBQVpBLEVBcENWenlDLEtBQVEyeUMsU0FBRyxJQUNYM3lDLEtBQUE0eUMsVUFBWSxDQUFDLElBQUssS0FDbEI1eUMsS0FBQTZ5QyxTQUFXLENBQUMsSUFBSyxLQUNqQjd5QyxLQUFBOHlDLGdCQUFrQixDQUNoQixLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsTUFFRjl5QyxLQUFBK3lDLGdCQUFrQixDQUFDL3lDLEtBQUsyeUMsVUFBVTN3QyxPQUFPaEMsS0FBSzR5QyxXQUU5QzV5QyxLQUFBZ3pDLEtBQWtCLElBQUkxdkMsRUFDdEJ0RCxLQUFJME8sS0FBbUMsS0FDdkMxTyxLQUFJMkQsS0FBbUMsS0FDdkMzRCxLQUFXaXpDLFlBQW1DLEtBQzlDanpDLEtBQVVrekMsV0FBbUMsS0FDN0NsekMsS0FBQW16QyxVQUFpQyxJQUFJeDVCLElBYVosaUJBQVo2NEIsRUFDVHh5QyxLQUFLK0UsTUFBTXl0QyxHQUNpQixpQkFBWkEsR0FDaEJ4eUMsS0FBS296QyxRQUFRWixFQUVoQixDQTZMSCxPQXJMRUQsRUFBTzl5QyxVQUFBMnpDLFFBQVAsU0FBUTFrQyxHQUVOLE9BREExTyxLQUFLME8sS0FBT0EsRUFDTDFPLE1BT1R1eUMsRUFBQTl5QyxVQUFBNHpDLE1BQUEsV0FDRSxNQUFPLElBQUFyeEMsT0FBSWhDLEtBQUtzekMsYUFBYXR6QyxLQUFLME8sTUFBSyxNQVF6QzZqQyxFQUFBOXlDLFVBQUE4ekMscUJBQUEsV0FDRSxJQUFNcEIsRUFBTSxJQUFJbndDLE9BQUFoQyxLQUFLc3pDLGFBQWF0ekMsS0FBSzBPLE1BQUssS0FDNUMsT0FBT3lFLFVBQVFnL0IsRUFBSyxlQUFnQixNQVF0Q0ksRUFBSzl5QyxVQUFBc0YsTUFBTCxTQUFNb3RDLEdBQ0osR0FBS0EsRUFBTCxDQUNBQSxFQUFNQSxFQUFJaC9CLFFBQVEscUJBQXNCLElBS3hDLElBSkEsSUFBSXFnQyxFQUFZLEVBQ1pDLEVBQVUsRUFDUnQwQixFQUFtQyxjQUVoQzVlLEdBQ1AsSUFBTW16QyxFQUFJdkIsRUFBSTV4QyxHQUNkLEdBQUlvekMsRUFBS1osZ0JBQWdCdnhCLFNBQVNreUIsS0FBT3hCLEdBQWtCQyxFQUFLNXhDLEdBQUksQ0FDbEUsSUFBTWl5QyxFQUFVTCxFQUFJcHdDLE1BQU15eEMsRUFBV2p6QyxHQUNyQyxHQUFnQixLQUFaaXlDLEVBQWdCLENBQ2xCLElBQU1vQixFQUF3QixHQUN4QkMsRUFBMEIsR0FDMUJDLEVBQXdCLEdBQ3hCQyxFQUE0QixHQUM1QkMsRUFBZ0MsR0FDaENDLEVBQTRDLEdBQzVDQyxFQUE0QyxHQUM1Q0MsRUFBNEIsR0FFNUJ0UyxFQUFPbmdDLEVBQUEsR0FBQU4sRUFDUm94QyxFQUFRNUMsU0FLVG5tQyxPQUFPLDJDQUE0QyxXQW1DdkQsR0EvQkFvNEIsRUFBUXR0QixTQUFRLFNBQUF2VCxHQUNkLElBQU0wdUMsRUFBYTF1QyxFQUFFLEdBQUdvVSxNQUFNLGNBQzlCLEdBQUlzNkIsRUFBWSxDQUNkLElBQU1WLEVBQVFVLEVBQVcsR0FDckJyQixFQUFlN3NCLFNBQVN3dEIsSUFDMUI0RSxFQUFVcHlDLEtBQUs2dEMsRUFBU3p0QyxLQUFLWixFQUFFLEtBRTdCc3RDLEVBQWdCOXNCLFNBQVN3dEIsSUFDM0I2RSxFQUFXcnlDLEtBQUtpdUMsRUFBVTd0QyxLQUFLWixFQUFFLEtBRS9CMHRDLEVBQWVsdEIsU0FBU3d0QixJQUMxQjhFLEVBQVV0eUMsS0FBS3l1QyxFQUFTcnVDLEtBQUtaLEVBQUUsS0FFN0J5dEMsRUFBaUJqdEIsU0FBU3d0QixJQUM1QitFLEVBQVl2eUMsS0FBS3d1QyxFQUFXcHVDLEtBQUtaLEVBQUUsS0FFakMydEMsRUFBb0JudEIsU0FBU3d0QixJQUMvQmdGLEVBQWN4eUMsS0FBSzB1QyxHQUFhdHVDLEtBQUtaLEVBQUUsS0FFckN1dEMsRUFBMEIvc0IsU0FBU3d0QixJQUNyQ2lGLEVBQW9CenlDLEtBQUtxdUMsRUFBbUJqdUMsS0FBS1osRUFBRSxLQUVqRHd0QyxFQUEwQmh0QixTQUFTd3RCLElBQ3JDa0YsRUFBb0IxeUMsS0FBS3N1QyxFQUFtQmx1QyxLQUFLWixFQUFFLEtBRWpENHRDLEVBQWlCcHRCLFNBQVN3dEIsSUFDNUJtRixFQUFZM3lDLEtBQUsydUMsR0FBV3Z1QyxLQUFLWixFQUFFLElBRXRDLENBQ0gsSUFFSTZnQyxFQUFRbmhDLE9BQVMsRUFBRyxDQUN0QixJQUFNMHpDLEVBQU1DLEdBQVFWLEVBQUtWLFlBQWFXLEdBQ2hDandDLEVBQU9nd0MsRUFBS1gsS0FBS2p1QyxNQUFlLENBQ3BDK29CLEdBQUlzbUIsRUFDSnR1QixLQUFNc3VCLEVBQ04vdkMsTUFBT292QyxFQUNQNTBCLE9BQVEsRUFDUnkxQixVQUFTVixFQUNUVyxXQUFVVixFQUNWVyxVQUFTVixFQUNUVyxZQUFXVixFQUNYVyxjQUFhVixFQUNiVyxvQkFBbUJWLEVBQ25CVyxvQkFBbUJWLEVBQ25CVyxZQUFXVixJQUdUUixFQUFLVixhQUNQVSxFQUFLVixZQUFZL3VDLFNBQVNQLEdBRTFCQSxFQUFLSyxNQUFNNmEsT0FBU2kyQixHQUFjbnhDLEdBRWxDQSxFQUFLSyxNQUFNRixTQUFXLENBQUNILEtBRXZCZ3dDLEVBQUtqbEMsS0FBTy9LLEVBQ1pnd0MsRUFBS1QsV0FBYXZ2QyxHQUVwQmd3QyxFQUFLVixZQUFjdHZDLEVBQ25COHZDLEdBQVcsQ0FDWixDQUNGLENBQ0YsRUFDUyxNQUFOQyxHQUFhQyxFQUFLVixjQUFnQmYsR0FBa0JDLEVBQUs1eEMsSUFFM0Q0ZSxFQUFNM2QsS0FBS215QyxFQUFLVixhQUVSLE1BQU5TLElBQWN4QixHQUFrQkMsRUFBSzV4QyxJQUFNNGUsRUFBTXplLE9BQVMsTUFDdERpRCxFQUFPd2IsRUFBTWlELFNBRWpCdXhCLEVBQUtWLFlBQWN0dkMsSUFJbkJnd0MsRUFBS1osZ0JBQWdCdnhCLFNBQVNreUIsS0FBT3hCLEdBQWtCQyxFQUFLNXhDLEtBQzlEaXpDLEVBQVlqekMsV0FuR1BBLEVBQUksRUFBR0EsRUFBSTR4QyxFQUFJenhDLE9BQVFILE1BQXZCQSxFQU5RLEdBb0hYZ3lDLEVBQVk5eUMsVUFBQTZ6QyxhQUFwQixTQUFxQjN2QyxHQUFyQixJQW1DQzRyQyxFQUFBdnZDLEtBbENLd3lDLEVBQVUsR0FpQ2QsT0FoQ0E3dUMsRUFBS2lDLE1BQUssU0FBQ3BGLEdBQ0gsSUFBQStzQyxFQVNGL3NDLEVBQUV3RCxNQVJKd3dDLEVBQVNqSCxFQUFBaUgsVUFDVEYsRUFBUy9HLEVBQUErRyxVQUNUTyxFQUFXdEgsRUFBQXNILFlBQ1hOLEVBQVVoSCxFQUFBZ0gsV0FDVkUsRUFBV2xILEVBQUFrSCxZQUNYRSxFQUFtQnBILEVBQUFvSCxvQkFDbkJDLEVBQW1CckgsRUFBQXFILG9CQUNuQkYsRUFBYW5ILEVBQUFtSCxjQUVUdEMsRUFBUWhTLEVBQUFBLFFBQ1QxK0IsRUFBQUEsRUFBQUEsRUFBQUEsRUFBQUEsRUFBQUEsRUFBQUEsRUFBQUEsRUFBQSxHQUFBTixFQUFBb3pDLElBQ0EsR0FBQXB6QyxFQUFBeXpDLElBQ0EsR0FBQXp6QyxFQUFBa3pDLElBQ0EsR0FBQWx6QyxFQUFBMnpDLEdBQXFCUixLQUNyQixHQUFBbnpDLEVBQUEyekMsR0FBcUJOLEtBQVksR0FBQXJ6QyxFQUNqQ3N6QyxJQUFhLEdBQUF0ekMsRUFDYnV6QyxJQUFtQixHQUFBdnpDLEVBQ25Cd3pDLElBQW1CLElBV3hCLE9BVEFwQyxHQUFXLElBQ1hKLEVBQU03OUIsU0FBUSxTQUFDL1QsR0FDYmd5QyxHQUFXaHlDLEVBQUU4VixVQUNmLElBQ0k5VixFQUFFc0QsU0FBU3BELE9BQVMsR0FDdEJGLEVBQUVzRCxTQUFTeVEsU0FBUSxTQUFDM1EsR0FDbEI0dUMsR0FBVyxXQUFJakQsRUFBSytELGFBQWExdkMsR0FBTSxJQUN6QyxJQUVLcEQsRUFBRXNELFNBQVNwRCxPQUFTLENBQzdCLElBQ084eEMsR0FFVkQsQ0FBRCxJQ3pNTXlDLEdBQVMxbEMsUUFBUSxvQkFrR1YybEMsR0FBUyxTQUFDN0YsRUFBVzhGLEVBQVdDLEdBQzNDLFlBRGdDLElBQUFELElBQUFBLEVBQVMsUUFBRSxJQUFBQyxJQUFBQSxFQUFTLElBQzNDbi9CLEtBQUs2cEIsTUFBVSxJQUFKdVAsR0FBWSxJQUFROEYsR0FBT0UsUUFBUUQsRUFDekQsRUFFYUosR0FBdUIsU0FBQ00sR0FDbkMsT0FBT3JVLFNBQ0xxVSxHQUNBLFNBQUNqWSxFQUFtQi80QixHQUNsQixPQUFBQSxJQUNBNnlCLGdCQUNFbWUsR0FDQSxTQUFDQyxHQUNDLE9BQUFsWSxFQUFLNFIsUUFBVXNHLEVBQVF0RyxPQUFTNVIsRUFBS2w4QixRQUFVbzBDLEVBQVFwMEMsS0FBdkQsR0FKSixHQU9OLEVBRWFxMEMsR0FBYSxTQUFDLzBDLEdBQ3pCLE9BQU9BLEVBQUV3RCxNQUFNc3dDLFVBQVU1ekMsT0FBUyxDQUNwQyxFQU1hODBDLEdBQWMsU0FBQ2gxQyxHQUMxQixPQUFPQSxFQUFFd0QsTUFBTXV3QyxXQUFXN3pDLE9BQVMsQ0FDckMsRUFPYSswQyxHQUFlLFNBQUNqMUMsU0FDckJrekMsRUFBK0IsUUFBM0JuRyxFQUFBL3NDLEVBQUV3RCxNQUFNMndDLDJCQUFtQixJQUFBcEgsT0FBQSxFQUFBQSxFQUFFNVUsTUFDckMsU0FBQ241QixHQUEwQixNQUFZLE1BQVpBLEVBQUV3dkMsS0FBYSxJQUU1QyxPQUFPMEUsYUFBQyxFQUFEQSxFQUFHeHlDLE1BQU1zZ0IsU0FBUyxTQUMzQixFQUVhazBCLEdBQWVELEdBRWZFLEdBQWMsU0FBQ24xQyxTQUNwQmt6QyxFQUErQixRQUEzQm5HLEVBQUEvc0MsRUFBRXdELE1BQU0yd0MsMkJBQW1CLElBQUFwSCxPQUFBLEVBQUFBLEVBQUU1VSxNQUNyQyxTQUFDbjVCLEdBQTBCLE1BQVksTUFBWkEsRUFBRXd2QyxLQUFhLElBRTVDLE9BQU8wRSxhQUFDLEVBQURBLEVBQUd4eUMsTUFBTXNnQixTQUFTLFFBQzNCLEVBRWFvMEIsR0FBb0IsU0FBQ3AxQyxTQUMxQmt6QyxFQUErQixRQUEzQm5HLEVBQUEvc0MsRUFBRXdELE1BQU0yd0MsMkJBQW1CLElBQUFwSCxPQUFBLEVBQUFBLEVBQUU1VSxNQUNyQyxTQUFDbjVCLEdBQTBCLE1BQVksTUFBWkEsRUFBRXd2QyxLQUFhLElBRTVDLE9BQU8wRSxhQUFDLEVBQURBLEVBQUd4eUMsTUFBTXNnQixTQUFTLFVBQzNCLEVBTWFxMEIsR0FBYyxTQUFDcjFDLFNBQ3BCa3pDLEVBQStCLFFBQTNCbkcsRUFBQS9zQyxFQUFFd0QsTUFBTTJ3QywyQkFBbUIsSUFBQXBILE9BQUEsRUFBQUEsRUFBRTVVLE1BQ3JDLFNBQUNuNUIsR0FBMEIsTUFBWSxNQUFaQSxFQUFFd3ZDLEtBQWEsSUFFNUMsT0FBTzBFLGFBQUMsRUFBREEsRUFBR3h5QyxNQUFNc2dCLFNBQVMsUUFDM0IsRUFVYXMwQixHQUFtQixTQUFDdDFDLEdBQy9CLElBQ011MUMsRUFET3YxQyxFQUFFK0UsVUFBVSxHQUNHaUIsT0FBTSxTQUFDaEcsR0FDakMsT0FBQXExQyxHQUFZcjFDLEVBQVosSUFFRixPQUFPdTFDLGFBQWMsRUFBZEEsRUFBZ0IveEMsTUFBTThwQixNQUFPdHRCLEVBQUV3RCxNQUFNOHBCLEVBQzlDLEVBRWFrb0IsR0FBZ0IsU0FBQ3gxQyxTQUN0Qmt6QyxFQUErQixRQUEzQm5HLEVBQUEvc0MsRUFBRXdELE1BQU0yd0MsMkJBQW1CLElBQUFwSCxPQUFBLEVBQUFBLEVBQUU1VSxNQUNyQyxTQUFDbjVCLEdBQTBCLE1BQVksTUFBWkEsRUFBRXd2QyxLQUFhLElBRTVDLE9BQU8wRSxhQUFDLEVBQURBLEVBQUd4eUMsTUFBTXNnQixTQUFTLFVBQzNCLEVBTWF5MEIsR0FBYyxTQUFDejFDLFNBQ3BCa3pDLEVBQStCLFFBQTNCbkcsRUFBQS9zQyxFQUFFd0QsTUFBTTJ3QywyQkFBbUIsSUFBQXBILE9BQUEsRUFBQUEsRUFBRTVVLE1BQ3JDLFNBQUNuNUIsR0FBMEIsTUFBWSxNQUFaQSxFQUFFd3ZDLEtBQWEsSUFFNUMsUUFBUzBFLGFBQUEsRUFBQUEsRUFBR3h5QyxNQUFNc2dCLFNBQVMsZUFBZWt5QixhQUFDLEVBQURBLEVBQUd4eUMsTUFBTXNnQixTQUFTLFlBQWNreUIsQ0FDNUUsRUFNYXdDLEdBQVMsU0FDcEJ2eUMsRUFDQXd5QyxFQUNBcnhDLEVBQ0FzeEMsRUFDQUMsY0FGQSxJQUFBdnhDLElBQUFBLEVBQWtDd25DLEVBQUFBLHNCQUFzQmdLLE1BSXhELElBQU05d0MsRUFBTzR3QyxRQUFBQSxFQUFZenlDLEVBQUs0QixVQUN4Qmd4QyxFQUVKLFFBREFoSixFQUFBOEksYUFBQSxFQUFBQSxFQUFXclYsUUFBTyxTQUFDeGdDLEdBQStCLE9BQUEyMUMsRUFBZ0IzMUMsRUFBRSxXQUNwRSxJQUFBK3NDLEVBQUFBLEVBQUE1cEMsRUFBSzRDLEtBQUksU0FBQy9GLEdBQStCLE9BQUEyMUMsRUFBZ0IzMUMsRUFBRSxJQUN2RGcyQyxFQUFnQmh4QyxFQUFLdzdCLFFBQU8sU0FBQ3hnQyxHQUNqQyxPQUFBMjFDLEVBQWdCMzFDLEVBQWhCLElBR0YsT0FBUXNFLEdBQ04sS0FBS3duQyxFQUFxQkEsc0JBQUNnSyxLQUN6QixPQUFPQyxFQUFlNzFDLE9BQVMsRUFDakMsS0FBSzRyQyxFQUFxQkEsc0JBQUNtSyxJQUN6QixPQUFPRCxFQUFjOTFDLE9BQVMsRUFDaEMsS0FBSzRyQyxFQUFxQkEsc0JBQUNvSyxLQUN6QixPQUFPRixFQUFjOTFDLE9BQVMsR0FBSzYxQyxFQUFlNzFDLE9BQVMsRUFDN0QsUUFDRSxPQUFPLEVBRWIsRUFFYWkyQyxHQUFjLFNBQ3pCaHpDLEVBQ0FtQixFQUNBc3hDLEVBQ0FDLEdBRUEsWUFKQSxJQUFBdnhDLElBQUFBLEVBQWtDd25DLEVBQUFBLHNCQUFzQmdLLE1BSWpESixHQUFPdnlDLEVBQU1reUMsR0FBYS93QyxFQUFVc3hDLEVBQVVDLEVBQ3ZELEVBc0NhTyxHQUFlLFNBQzFCanpDLEVBQ0FtQixFQUNBc3hDLEVBQ0FDLEdBRUEsWUFKQSxJQUFBdnhDLElBQUFBLEVBQWtDd25DLEVBQUFBLHNCQUFzQmdLLE1BSWpESixHQUFPdnlDLEVBQU04eEMsR0FBYzN3QyxFQUFVc3hDLEVBQVVDLEVBQ3hELEVBRWFRLEdBQWVELEdBRWZFLEdBQWdCLFNBQzNCbnpDLEVBQ0FtQixFQUNBc3hDLEVBQ0FDLEdBRUEsWUFKQSxJQUFBdnhDLElBQUFBLEVBQWtDd25DLEVBQUFBLHNCQUFzQmdLLE1BSWpESixHQUFPdnlDLEVBQU1xeUMsR0FBZWx4QyxFQUFVc3hDLEVBQVVDLEVBQ3pELEVBRWFVLEdBQWMsU0FDekJwekMsRUFDQW1CLEVBQ0FzeEMsRUFDQUMsR0FFQSxZQUpBLElBQUF2eEMsSUFBQUEsRUFBa0N3bkMsRUFBQUEsc0JBQXNCZ0ssTUFJakRKLEdBQU92eUMsRUFBTXN5QyxHQUFhbnhDLEVBQVVzeEMsRUFBVUMsRUFDdkQsRUFFYXZCLEdBQWdCLFNBQzNCdDBDLEVBQ0FxRCxHQUVBLElBQ0ltekMsRUFEU3gyQyxFQUFFK0UsVUFDT3k3QixRQUFPLFNBQUF4Z0MsR0FBSyxPQUFBKzBDLEdBQVcvMEMsRUFBRSxJQUFFRSxPQUlqRCxPQUhJbUQsSUFDRm16QyxHQUFjbnpDLEVBQU8wQixVQUFVeTdCLFFBQU8sU0FBQXhnQyxHQUFLLE9BQUErMEMsR0FBVy8wQyxFQUFFLElBQUVFLFFBRXJEczJDLENBQ1QsRUFFYTNDLEdBQVUsU0FDckIxd0MsRUFDQTJ3QyxRQUFBLElBQUFBLElBQUFBLEVBQTBCLElBRTFCLElBQUkyQyxFQUFXLElBS2YsR0FKSTNDLEVBQVU1ekMsT0FBUyxJQUNyQnUyQyxHQUFZLEdBQUdqMUMsT0FBQXN5QyxFQUFVLEdBQUd0RixPQUFRaHRDLE9BQUFzeUMsRUFBVSxHQUFHcHpDLFFBRy9DeUMsRUFBTSxDQUNSLElBQU02QixFQUFPN0IsRUFBSzRCLFVBRWRDLEVBQUs5RSxPQUFTLElBQ2hCdTJDLEVBQ0V6eEMsRUFBSzZPLEtBQUksU0FBQzdULEdBQStCLE9BQUFBLEVBQUV3RCxNQUFNOHBCLE1BQUkxZ0IsS0FBSyxNQUMxRCxLQUFLcEwsT0FBQWkxQyxHQUVWLENBR0QsT0FEWWpDLEdBQU9pQyxHQUFVM2dDLFdBQVd2VSxNQUFNLEVBQUcsRUFFbkQsRUE2QmFtMUMsR0FBYSxTQUFDQyxFQUFhaEMsUUFBQSxJQUFBQSxJQUFBQSxFQUFTLEdBQy9DLElBVU1yRCxFQVZTLENBQ2IsQ0FBQzV3QyxNQUFPLEVBQUc0ZixPQUFRLElBQ25CLENBQUM1ZixNQUFPLElBQUs0ZixPQUFRLEtBQ3JCLENBQUM1ZixNQUFPLElBQUs0ZixPQUFRLEtBQ3JCLENBQUM1ZixNQUFPLElBQUs0ZixPQUFRLEtBQ3JCLENBQUM1ZixNQUFPLEtBQU00ZixPQUFRLEtBQ3RCLENBQUM1ZixNQUFPLEtBQU00ZixPQUFRLEtBQ3RCLENBQUM1ZixNQUFPLEtBQU00ZixPQUFRLE1BSXJCL2UsUUFDQTBYLFVBQ0FrZixNQUFLLFNBQUFtWixHQUNKLE9BQU9xRixHQUFPckYsRUFBSzV3QyxLQUNyQixJQUNGLE9BQU80d0MsR0FDRnFGLEVBQU1yRixFQUFLNXdDLE9BQU9rMEMsUUFBUUQsR0FBT2hpQyxRQVIzQiwyQkFRdUMsTUFBUTIrQixFQUFLaHhCLE9BQzNELEdBQ04sRUFxRGFzMkIsR0FBVyxTQUFDNUgsR0FDdkIsSUFBTXFCLEVBQWdCLE1BQVhyQixFQUFJLEdBQWEsR0FBSyxFQUMzQjZILEVBQVUsV0FBVzVnQyxLQUFLKzRCLEdBQ2hDLEdBQUk2SCxFQUFTLENBQ1gsSUFBTUMsRUFBTUQsRUFBUSxHQUdwQixNQUFPLENBQUMxRyxFQUZFakUsRUFBWXBuQyxRQUFRZ3lDLEVBQUksSUFFdkIxRyxFQUREbEUsRUFBWXBuQyxRQUFRZ3lDLEVBQUksSUFDcEJ6RyxHQUFFQSxFQUNqQixDQUNELE1BQU8sQ0FBQ0YsR0FBSSxFQUFHQyxHQUFJLEVBQUdDLEdBQUksRUFDNUIsRUFPYTBHLEdBQVUsU0FBQ0MsR0FHdEIsTUFBTyxDQUFDN0csRUFGRW5FLEVBQVdsbkMsUUFBUWt5QyxFQUFLLElBRXZCNUcsRUFERG5FLEVBQVdubkMsUUFBUStJLFNBQVNtcEMsRUFBS0MsT0FBTyxHQUFJLElBRXhELEVBUWFDLEdBQVksU0FBQ3ZGLEVBQVUzZ0MsR0FDbEMsUUFEa0MsSUFBQUEsSUFBQUEsRUFBVSxHQUM3QixJQUFYQSxFQUFjLE9BQU8yZ0MsRUFDekIsSUFBTXdGLEVBQU05Z0IsUUFBTXNiLEdBQ1p5RixFQUFZbEwsRUFBWXBuQyxRQUFRNnNDLEVBQUksSUFBTTNnQyxFQUNoRCxPQUFPbW1DLEVBQUlGLE9BQU8sRUFBRyxHQUFLL0ssRUFBWWtMLEdBQWFELEVBQUlGLE9BQU8sRUFDaEUsRUFzRmFJLEdBQWUsU0FBQ0wsRUFBY00sRUFBUUMsR0FDakQsUUFEeUMsSUFBQUQsSUFBQUEsRUFBTSxRQUFFLElBQUFDLElBQUFBLEVBQU0sR0FDMUMsU0FBVFAsRUFBaUIsT0FBT0EsRUFFNUIsSUFBTVEsRUFBTXhMLEVBQVdsbkMsUUFBUWt5QyxFQUFLLElBQU1NLEVBQ3BDRyxFQUFNeEwsRUFBV25uQyxRQUFRK0ksU0FBU21wQyxFQUFLQyxPQUFPLEdBQUksSUFBTU0sRUFFOUQsTUFBTyxHQUFBLzFDLE9BQUd3cUMsRUFBV3dMLElBQU9oMkMsT0FBQXlxQyxFQUFXd0wsR0FDekMsRUFnQmFDLEdBQW9CLFNBQy9CQyxFQUNBQyxFQUNBakQsRUFDQTE3QixHQUVBLFFBSEEsSUFBQTA3QixJQUFBQSxFQUFTLFFBQ1QsSUFBQTE3QixJQUFBQSxHQUFlLElBRVYwK0IsSUFBYUMsRUFBVSxNQUFPLEdBQ25DLElBQUlDLEVBQVFDLEdBQWNILEVBQVVDLEdBQ2hDMytCLElBQVM0K0IsR0FBU0EsR0FDdEIsSUFBTUUsRUFBYUYsRUFBTWpELFFBQVFELEdBRWpDLE9BQU9rRCxFQUFRLEVBQUksSUFBQXIyQyxPQUFJdTJDLEdBQWUsR0FBR3YyQyxPQUFBdTJDLEVBQzNDLEVBZ0JhRCxHQUFnQixTQUMzQkgsRUFDQUMsR0FFQSxJQUFNSSxFQUFrQyxNQUEzQkwsRUFBU00sY0FBd0IsR0FBSyxFQUluRCxPQUZFemlDLEtBQUs2cEIsT0FBT3VZLEVBQVNNLFVBQVlQLEVBQVNPLFdBQWFGLEVBQU8sS0FBUSxHQUcxRSxFQUVhRyxHQUFrQixTQUM3QlIsRUFDQUMsR0FFQSxJQUFNSSxFQUFrQyxNQUEzQkwsRUFBU00sY0FBd0IsR0FBSyxFQUtuRCxPQUhFemlDLEtBQUs2cEIsT0FBT3VZLEVBQVNRLFFBQVVULEVBQVNTLFNBQVdKLEVBQU8sSUFBTyxLQUNqRSxHQUdKLEVBRWFLLEdBQXlCLFNBQ3BDVixFQUNBVyxHQUVPLElBQUFDLEVBQWdCRCxFQUFRQyxNQUFqQkMsRUFBU0YsRUFBUUUsTUFDekJYLEVBQVFDLEdBQWNILEVBQVVXLEdBZ0J0QyxPQWJFQyxHQUFTLElBQ1JBLEdBQVMsSUFBT0MsRUFBUSxHQUFLWCxHQUFTLElBQzdCLElBQVZXLEdBQ0FYLEdBQVMsRUFFSXBLLEVBQ0g4SyxFQUFRLEtBQVFWLEdBQVMsSUFBU1UsRUFBUSxLQUFRVixHQUFTLEdBQ3hEbkssRUFDSjZLLEVBQVEsS0FBUVYsR0FBUyxFQUNyQmxLLEVBRUFDLENBR2pCLEVBNkNhNkssR0FBZSxTQUFDN0UsRUFBYXYxQixHQUN4QyxNQUFPLENBQ0xpUCxHQUFJc21CLEVBQ0p0dUIsS0FBTXN1QixFQUNOdjFCLE9BQVFBLEdBQVUsRUFDbEIyMUIsVUFBVyxHQUNYRixVQUFXLEdBQ1hDLFdBQVksR0FDWkUsWUFBYSxHQUNiQyxjQUFlLEdBQ2ZDLG9CQUFxQixHQUNyQkMsb0JBQXFCLEdBQ3JCQyxZQUFhLEdBRWpCLEVBaURhcUUsR0FBZ0IsU0FDM0IxQixFQUNBdEUsRUFDQTUvQixHQUVBLElBQU0wL0IsRUFBa0IsSUFBSTF2QyxFQUN0QjYxQyxFQUFXOUosRUFBU3p0QyxLQUFLNDFDLEdBQ3pCcEQsRUFBTUMsR0FBUW5CLEVBQVksQ0FBQ2lHLElBQzdCdDZCLEVBQVMsRUFDVHEwQixJQUFZcjBCLEVBQVNpMkIsR0FBYzVCLEdBQWMsR0FDckQsSUFBTWtHLEVBQVdILEdBQWE3RSxFQUFLdjFCLEdBU25DLE9BUkF1NkIsRUFBUzlFLFVBQVksQ0FBQzZFLEdBSVRuRyxFQUFLanVDLGFBQ2JxMEMsR0FDQTlsQyxHQUdQLEVBdUNhK2xDLEdBQVEsU0FBQy9rQyxHQUNwQixPQUFBLElBQUkvVSxNQUFNK1UsRUFBSyxJQUFJd3NCLEtBQUssR0FBR3pzQixLQUFJLFdBQU0sT0FBQSxJQUFJOVUsTUFBTStVLEVBQUssSUFBSXdzQixLQUFLLEVBQUUsR0FBL0QsRUFFV3dZLEdBQVEsU0FBQ2hsQyxHQUNwQixPQUFBLElBQUkvVSxNQUFNK1UsRUFBSyxJQUFJd3NCLEtBQUssSUFBSXpzQixLQUFJLFdBQU0sT0FBQSxJQUFJOVUsTUFBTStVLEVBQUssSUFBSXdzQixLQUFLLEdBQUcsR0FBakUsRUFFV3lZLEdBQVcsU0FBQzlJLEVBQWlCN0QsUUFBQSxJQUFBQSxJQUFBQSxFQUFjLElBS3RELElBSkEsSUFBSTRNLEVBQW1CNU0sRUFBWSxFQUMvQjZNLEVBQVksRUFDWkMsRUFBa0I5TSxFQUFZLEVBQzlCK00sRUFBYSxFQUNScDVDLEVBQUksRUFBR0EsRUFBSWt3QyxFQUFJL3ZDLE9BQVFILElBQzlCLElBQUssSUFBSTB3QyxFQUFJLEVBQUdBLEVBQUlSLEVBQUlsd0MsR0FBR0csT0FBUXV3QyxJQUFLLENBRXhCLElBREFSLEVBQUlsd0MsR0FBRzB3QyxLQUVmdUksRUFBV2o1QyxJQUFHaTVDLEVBQVdqNUMsR0FDekJrNUMsRUFBWWw1QyxJQUFHazVDLEVBQVlsNUMsR0FDM0JtNUMsRUFBVXpJLElBQUd5SSxFQUFVekksR0FDdkIwSSxFQUFhMUksSUFBRzBJLEVBQWExSSxHQUVwQyxDQUVILE1BQU8sQ0FBQ3VJLFNBQVFBLEVBQUVDLFVBQVNBLEVBQUVDLFFBQU9BLEVBQUVDLFdBQVVBLEVBQ2xELEVBRWFDLEdBQWEsU0FBQ25KLEVBQWlCN0QsUUFBQSxJQUFBQSxJQUFBQSxFQUFjLElBQ2xELElBQUFXLEVBQTZDZ00sR0FBUzlJLEVBQUs3RCxHQUExRDRNLGFBQVVDLGNBQ1hJLFlBQWdCak4sRUFBWSxlQUM1QmtOLEVBQU9OLEVBQVc1TSxFQUFZLEVBQUk2TSxFQUN4QyxPQUFJSSxHQUFPQyxFQUFhNU4sRUFBQUEsT0FBTzZOLFNBQzFCRixHQUFPQyxFQUFhNU4sRUFBQUEsT0FBTzhOLFdBQzVCSCxJQUFRQyxFQUFhNU4sRUFBQUEsT0FBTytOLFNBQzNCSixHQUFRQyxFQUNONU4sRUFBQUEsT0FBT0EsT0FEWUEsRUFBQUEsT0FBT2dPLFdBRW5DLEVBRWFDLEdBQWdCLFNBQzNCMUosRUFDQTdELEVBQ0FFLFFBREEsSUFBQUYsSUFBQUEsRUFBYyxTQUNkLElBQUFFLElBQUFBLEVBQVUsR0FFVixJQUFNbHFDLEVBQVMsQ0FBQyxHQUFJLElBQ2R3M0MsRUFBU1IsR0FBV25KLEdBQ3BCbEQsRUFBNkNnTSxHQUFTOUksRUFBSzdELEdBQTFENE0sYUFBVUMsY0FBV0MsWUFBU0MsZUFvQnJDLE9BbkJJUyxJQUFXbE8sRUFBTUEsT0FBQzZOLFVBQ3BCbjNDLEVBQU8sR0FBSzYyQyxFQUFZM00sRUFBUyxFQUNqQ2xxQyxFQUFPLEdBQUsrMkMsRUFBYTdNLEVBQVMsR0FFaENzTixJQUFXbE8sRUFBTUEsT0FBQytOLFdBQ3BCcjNDLEVBQU8sR0FBS2dxQyxFQUFZNE0sRUFBVzFNLEVBQ25DbHFDLEVBQU8sR0FBSysyQyxFQUFhN00sRUFBUyxHQUVoQ3NOLElBQVdsTyxFQUFNQSxPQUFDOE4sYUFDcEJwM0MsRUFBTyxHQUFLNjJDLEVBQVkzTSxFQUFTLEVBQ2pDbHFDLEVBQU8sR0FBS2dxQyxFQUFZOE0sRUFBVTVNLEdBRWhDc04sSUFBV2xPLEVBQU1BLE9BQUNnTyxjQUNwQnQzQyxFQUFPLEdBQUtncUMsRUFBWTRNLEVBQVcxTSxFQUNuQ2xxQyxFQUFPLEdBQUtncUMsRUFBWThNLEVBQVU1TSxHQUVwQ2xxQyxFQUFPLEdBQUtvVCxLQUFLbUQsSUFBSXZXLEVBQU8sR0FBSWdxQyxHQUNoQ2hxQyxFQUFPLEdBQUtvVCxLQUFLbUQsSUFBSXZXLEVBQU8sR0FBSWdxQyxHQUV6QmhxQyxDQUNULEVBRWF5M0MsR0FBa0IsU0FDN0I1SixFQUNBM0QsRUFDQUYsUUFEQSxJQUFBRSxJQUFBQSxFQUFVLFFBQ1YsSUFBQUYsSUFBQUEsRUFBYyxJQUVSLElBQUFXLEVBQTZDZ00sR0FBUzlJLEdBQXJEK0ksRUFBUWpNLEVBQUFpTSxTQUFFQyxjQUFXQyxZQUFTQyxlQUUvQnJsQyxFQUFPczRCLEVBQVksRUFNekIsTUFBTyxDQUNMLENBTlM0TSxFQUFXMU0sRUFBUyxFQUFJLEVBQUkwTSxFQUFXMU0sRUFDdkM0TSxFQUFVNU0sRUFBUyxFQUFJLEVBQUk0TSxFQUFVNU0sR0FNOUMsQ0FMUzJNLEVBQVkzTSxFQUFTeDRCLEVBQU9BLEVBQU9tbEMsRUFBWTNNLEVBQy9DNk0sRUFBYTdNLEVBQVN4NEIsRUFBT0EsRUFBT3FsQyxFQUFhN00sR0FNOUQsRUEyTWF3TixHQUFnQixTQUMzQjdKLEVBQ0E4SixFQUNBQyxFQUNBNU4sUUFGQSxJQUFBMk4sSUFBQUEsRUFBTyxTQUNQLElBQUFDLElBQUFBLEVBQU8sU0FDUCxJQUFBNU4sSUFBQUEsRUFBYyxJQUVkLElBQU1rTCxFQUFLbEwsRUFBWTJOLEVBQ2pCeEMsRUFBS25MLEVBQVk0TixFQUduQkMsRUFBTTNDLEVBQ040QyxFQUFNM0MsRUFDVixPQUplNkIsR0FBV25KLElBS3hCLEtBQUt2RSxFQUFBQSxPQUFPNk4sUUFDVlUsRUFBTSxFQUNOQyxHQUFPM0MsRUFDUCxNQUVGLEtBQUs3TCxFQUFBQSxPQUFPK04sU0FDVlEsRUFBTTNDLEVBQ040QyxHQUFPM0MsRUFDUCxNQUVGLEtBQUs3TCxFQUFBQSxPQUFPOE4sV0FDVlMsRUFBTSxFQUNOQyxFQUFNLEVBQ04sTUFFRixLQUFLeE8sRUFBQUEsT0FBT2dPLFlBQ1ZPLEVBQU0zQyxFQUNONEMsRUFBTSxFQUlWLE1BQU8sQ0FBQy9KLEVBQUc4SixFQUFLN0osRUFBRzhKLEVBQ3JCLFdBRWdCQyxHQUNkbEssRUFDQTNELEVBQ0E4TixRQUZBLElBQUFuSyxJQUFBQSxFQUFrQjRJLEdBQU0sQ0FBQyxHQUFJLFdBRTdCLElBQUF1QixJQUFBQSxHQUFzQixHQVN0QixJQVBBLElBQUlDLEVBQVNwSyxFQUFJL3ZDLE9BQ2JvNkMsRUFBUyxFQUNUQyxFQUFTdEssRUFBSSxHQUFHL3ZDLE9BQ2hCczZDLEVBQVMsRUFFVDFCLEdBQVEsRUFFSC80QyxFQUFJLEVBQUdBLEVBQUlrd0MsRUFBSS92QyxPQUFRSCxJQUM5QixJQUFLLElBQUkwd0MsRUFBSSxFQUFHQSxFQUFJUixFQUFJLEdBQUcvdkMsT0FBUXV3QyxJQUNmLElBQWRSLEVBQUlsd0MsR0FBRzB3QyxLQUNUcUksR0FBUSxFQUNSdUIsRUFBUzdrQyxLQUFLbUQsSUFBSTBoQyxFQUFRdDZDLEdBQzFCdTZDLEVBQVM5a0MsS0FBS2lELElBQUk2aEMsRUFBUXY2QyxHQUMxQnc2QyxFQUFTL2tDLEtBQUttRCxJQUFJNGhDLEVBQVE5SixHQUMxQitKLEVBQVNobEMsS0FBS2lELElBQUkraEMsRUFBUS9KLElBS2hDLEdBQUlxSSxFQUNGLE1BQU8sQ0FDTCxDQUFDLEVBQUc3SSxFQUFJL3ZDLE9BQVMsR0FDakIsQ0FBQyxFQUFHK3ZDLEVBQUksR0FBRy92QyxPQUFTLElBSXhCLEdBQUtrNkMsRUEwQkhDLEVBQVM3a0MsS0FBS2lELElBQUksRUFBRzRoQyxFQUFTL04sR0FDOUJnTyxFQUFTOWtDLEtBQUttRCxJQUFJczNCLEVBQUkvdkMsT0FBUyxFQUFHbzZDLEVBQVNoTyxHQUMzQ2lPLEVBQVMva0MsS0FBS2lELElBQUksRUFBRzhoQyxFQUFTak8sR0FDOUJrTyxFQUFTaGxDLEtBQUttRCxJQUFJczNCLEVBQUksR0FBRy92QyxPQUFTLEVBQUdzNkMsRUFBU2xPLE9BN0IzQixDQUNuQixJQUFNbU8sRUFBbUJqbEMsS0FBS2lELElBQUk0aEMsRUFBUy9OLEVBQVEsR0FDN0NvTyxFQUFtQmxsQyxLQUFLbUQsSUFBSTJoQyxFQUFTaE8sRUFBUTJELEVBQUkvdkMsT0FBUyxHQUMxRHk2QyxFQUFtQm5sQyxLQUFLaUQsSUFBSThoQyxFQUFTak8sRUFBUSxHQUM3Q3NPLEVBQW1CcGxDLEtBQUttRCxJQUFJNmhDLEVBQVNsTyxFQUFRMkQsRUFBSSxHQUFHL3ZDLE9BQVMsR0FFN0QyNkMsRUFBV3JsQyxLQUFLaUQsSUFDcEJpaUMsRUFBbUJELEVBQ25CRyxFQUFtQkQsSUFJckJMLEdBREFELEVBQVNJLEdBQ1NJLElBRUo1SyxFQUFJL3ZDLFNBRWhCbTZDLEdBREFDLEVBQVNySyxFQUFJL3ZDLE9BQVMsR0FDSjI2QyxJQUlwQkwsR0FEQUQsRUFBU0ksR0FDU0UsSUFDSjVLLEVBQUksR0FBRy92QyxTQUVuQnE2QyxHQURBQyxFQUFTdkssRUFBSSxHQUFHL3ZDLE9BQVMsR0FDUDI2QyxFQUVyQixDQU9ELE1BQU8sQ0FDTCxDQUFDUixFQUFRQyxHQUNULENBQUNDLEVBQVFDLEdBRWIsQ0FFTSxTQUFVeEQsR0FBSy9HLEVBQWlCbHdDLEVBQVcwd0MsRUFBV0osR0FDMUQsR0FBSXR3QyxFQUFJLEdBQUswd0MsRUFBSSxFQUFHLE9BQU9SLEVBQzNCLElBQU02SyxFQUFTN1csWUFBVWdNLEdBRXpCLE9BREE2SyxFQUFPLzZDLEdBQUcwd0MsR0FBS0osRUFDUkcsR0FBWXNLLEVBQVEvNkMsRUFBRzB3QyxHQUFJSixFQUNwQyxDQWtDTyxJQW1DTTBLLEdBQTRCLFNBQ3ZDdEksRUFDQS94QyxHQUVhK3hDLEVBQVkxdEMsVUFDcEJnUCxTQUFRLFNBQUE1USxHQUNKLElBQUE0d0MsRUFBYzV3QyxFQUFLSyxpQkFDdEJ1d0MsRUFBV3ZULFFBQU8sU0FBQzFnQyxHQUFpQixPQUFBQSxFQUFFWSxRQUFVQSxLQUFPUixPQUFTLEVBQ2xFaUQsRUFBS0ssTUFBTXV3QyxXQUFhQSxFQUFXdlQsUUFBTyxTQUFDMWdDLEdBQVcsT0FBQUEsRUFBRVksUUFBVUEsQ0FBSyxJQUV2RXF6QyxFQUFXaGdDLFNBQVEsU0FBQ2pVLEdBQ2xCQSxFQUFFaVIsT0FBU2pSLEVBQUVpUixPQUFPeXZCLFFBQU8sU0FBQW9PLEdBQUssT0FBQUEsSUFBTWx1QyxDQUFLLElBQ25CLElBQXBCWixFQUFFaVIsT0FBTzdRLFNBQ1hpRCxFQUFLSyxNQUFNdXdDLFdBQWE1d0MsRUFBS0ssTUFBTXV3QyxXQUFXdlQsUUFDNUMsU0FBQ3hoQyxHQUFpQixPQUFBQSxFQUFFd3ZDLFFBQVUxdUMsRUFBRTB1QyxLQUFLLElBRzNDLEdBRUosR0FDRixFQW1PYXdNLEdBQW1CLFNBQzlCdkksRUFDQXdJLFFBQUEsSUFBQUEsSUFBQUEsRUFBcUIsSUFFckIsSUFHSUMsRUFBSUMsRUFIRm4yQyxFQUFPeXRDLEVBQVkxdEMsVUFDbkJtSixFQUFPbEosRUFBSyxHQUdkbzJDLEVBQWEsRUFDWHRuQyxFQUFPdW5DLEdBQWlCNUksRUFBYXdJLEdBQ3ZDaEwsRUFBTTRJLEdBQU0sQ0FBQy9rQyxFQUFNQSxJQUNqQnduQyxFQUFpQnpDLEdBQU0sQ0FBQy9rQyxFQUFNQSxJQUM5QnluQyxFQUFTekMsR0FBTSxDQUFDaGxDLEVBQU1BLElBQ3RCMG5DLEVBQVkxQyxHQUFNLENBQUNobEMsRUFBTUEsSUF1SC9CLE9BckhBOU8sRUFBSytPLFNBQVEsU0FBQzVRLEVBQU1VLEdBQ1osSUFBQWtwQyxFQUFxQzVwQyxFQUFLSyxNQUF6Q3N3QyxFQUFTL0csRUFBQStHLFVBQUVDLEVBQVVoSCxFQUFBZ0gsdUJBQ3hCQSxFQUFXN3pDLE9BQVMsSUFBR2s3QyxHQUFjLEdBRXpDckgsRUFBV2hnQyxTQUFRLFNBQUMwbkMsR0FDbEJBLEVBQU0xcUMsT0FBT2dELFNBQVEsU0FBQ3JULEdBQ3BCLElBQU1YLEVBQUltc0MsRUFBWXBuQyxRQUFRcEUsRUFBTSxJQUM5Qit2QyxFQUFJdkUsRUFBWXBuQyxRQUFRcEUsRUFBTSxJQUNoQ1gsRUFBSSxHQUFLMHdDLEVBQUksR0FDYjF3QyxFQUFJK1QsR0FBUTI4QixFQUFJMzhCLElBQ2xCb25DLEVBQUtuN0MsRUFDTG83QyxFQUFLMUssRUFDTFIsRUFBSWx3QyxHQUFHMHdDLEdBQXFCLE9BQWhCZ0wsRUFBTWpOLE1BQWlCLEdBQUssRUFDcEIsT0FBaEJpTixFQUFNak4sUUFBZ0J5QixFQUFJbHdDLEdBQUcwd0MsR0FBSyxHQUUxQyxHQUNGLElBRUFxRCxFQUFVLy9CLFNBQVEsU0FBQ3ZULEdBQ2pCLElBQU1ULEVBQUltc0MsRUFBWXBuQyxRQUFRdEUsRUFBRUUsTUFBTSxJQUNoQyt2QyxFQUFJdkUsRUFBWXBuQyxRQUFRdEUsRUFBRUUsTUFBTSxJQUNsQ1gsRUFBSSxHQUFLMHdDLEVBQUksR0FDYjF3QyxFQUFJK1QsR0FBUTI4QixFQUFJMzhCLElBQ2xCb25DLEVBQUtuN0MsRUFDTG83QyxFQUFLMUssRUFDTFIsRUFBTStHLEdBQUsvRyxFQUFLbHdDLEVBQUcwd0MsRUFBZSxNQUFaandDLEVBQUVndUMsTUFBZ0JqRCxFQUFBQSxHQUFHbVEsTUFBUW5RLEVBQUVBLEdBQUNvUSxZQUUzQzUzQyxJQUFQbTNDLFFBQTJCbjNDLElBQVBvM0MsR0FBb0JELEdBQU0sR0FBS0MsR0FBTSxJQUMzREssRUFBVU4sR0FBSUMsSUFDWmg0QyxFQUFLSyxNQUFNNmEsUUFBVXhhLEVBQVF1M0MsR0FDN0J0bEMsWUFHQWpTLElBQVVtQixFQUFLOUUsT0FBUyxJQUMxQnE3QyxFQUFPTCxHQUFJQyxHQUFNcFAsRUFBQUEsT0FBTzZQLFNBRzlCLElBR0EsSUFBSyxJQUFJNzdDLEVBQUksRUFBR0EsRUFBSStULEVBQU0vVCxJQUN4QixJQUFLLElBQUkwd0MsRUFBSSxFQUFHQSxFQUFJMzhCLEVBQU0yOEIsSUFDTixJQUFkUixFQUFJbHdDLEdBQUcwd0MsS0FBVStLLEVBQVV6N0MsR0FBRzB3QyxHQUFLLEdBRzdDLElBR0l2aUMsR0FDRkEsRUFBS25JLEtBQUksU0FBQzVDLEdBQ0YsSUFBQTRwQyxFQUFxQzVwQyxFQUFLSyxNQUF6Q3N3QyxFQUFTL0csRUFBQStHLFVBQUVDLEVBQVVoSCxFQUFBZ0gsV0FxQjVCLG1CQXBCSUEsRUFBVzd6QyxPQUFTLElBQUdrN0MsR0FBYyxHQUN6Q3JILEVBQVdoZ0MsU0FBUSxTQUFDMG5DLEdBQ2xCQSxFQUFNMXFDLE9BQU9nRCxTQUFRLFNBQUNyVCxHQUNwQixJQUFNWCxFQUFJbXNDLEVBQVlwbkMsUUFBUXBFLEVBQU0sSUFDOUIrdkMsRUFBSXZFLEVBQVlwbkMsUUFBUXBFLEVBQU0sSUFDaENYLEdBQUssR0FBSzB3QyxHQUFLLEdBQUsxd0MsRUFBSStULEdBQVEyOEIsRUFBSTM4QixJQUN0Q3duQyxFQUFldjdDLEdBQUcwd0MsR0FBS2xGLEVBQUFBLEdBQUdtUSxNQUNOLE9BQWhCRCxFQUFNak4sUUFBZ0I4TSxFQUFldjdDLEdBQUcwd0MsR0FBSyxHQUVyRCxHQUNGLElBRUFxRCxFQUFVLy9CLFNBQVEsU0FBQ3ZULEdBQ2pCLElBQU1ULEVBQUltc0MsRUFBWXBuQyxRQUFRdEUsRUFBRUUsTUFBTSxJQUNoQyt2QyxFQUFJdkUsRUFBWXBuQyxRQUFRdEUsRUFBRUUsTUFBTSxJQUNsQ1gsR0FBSyxHQUFLMHdDLEdBQUssR0FBSzF3QyxFQUFJK1QsR0FBUTI4QixFQUFJMzhCLElBQ3RDd25DLEVBQWV2N0MsR0FBRzB3QyxHQUFLbEYsRUFBQUEsR0FBR21RLE1BRTlCLEtBRU8sQ0FDVCxJQUdrQmpKLEVBQVlqdkMsTUFBTXl3QyxZQUMxQmxnQyxTQUFRLFNBQUN2VCxHQUNuQixJQUFNZ3VDLEVBQVFodUMsRUFBRWd1QyxNQUNEaHVDLEVBQUV1USxPQUNWZ0QsU0FBUSxTQUFBclQsR0FDYixJQUFNWCxFQUFJbXNDLEVBQVlwbkMsUUFBUXBFLEVBQU0sSUFDOUIrdkMsRUFBSXZFLEVBQVlwbkMsUUFBUXBFLEVBQU0sSUFDcEMsS0FBSVgsRUFBSSxHQUFLMHdDLEVBQUksSUFDYjF3QyxFQUFJK1QsR0FBUTI4QixFQUFJMzhCLEVBQU0sQ0FDeEIsSUFBSStuQyxTQUNKLE9BQVFyTixHQUNOLElBQUssS0FDSHFOLEVBQU85UCxFQUFNQSxPQUFDK1AsT0FDZCxNQUNGLElBQUssS0FDSEQsRUFBTzlQLEVBQU1BLE9BQUNnUSxPQUNkLE1BQ0YsSUFBSyxLQUNIRixFQUFPOVAsRUFBTUEsT0FBQ2lRLFNBQ2QsTUFDRixJQUFLLEtBQ0hILEVBQU85UCxFQUFNQSxPQUFDa1EsTUFDZCxNQUNGLFFBQ0VKLEVBQU9uN0MsRUFBTW9VLE1BQU0sS0FBSyxHQUc1QnltQyxFQUFPeDdDLEdBQUcwd0MsR0FBS29MLENBQ2hCLENBQ0gsR0FDRixJQVlPLENBQUM1TCxJQUFHQSxFQUFFcUwsZUFBY0EsRUFBRUMsT0FBTUEsRUFBRUMsVUFBU0EsRUFDaEQsRUFRYVUsR0FBVyxTQUFDLzRDLEVBQStCcXJDLEdBQ3RELEdBQUtyckMsRUFDTCxPQUFJMHFDLEVBQWU3c0IsU0FBU3d0QixHQUNuQnJyQyxFQUFLSyxNQUFNc3dDLFVBQVUzYixNQUFLLFNBQUNuNUIsR0FBZ0IsT0FBQUEsRUFBRXd2QyxRQUFVQSxDQUFLLElBRWpFVCxFQUEwQi9zQixTQUFTd3RCLEdBQzlCcnJDLEVBQUtLLE1BQU0yd0Msb0JBQW9CaGMsTUFDcEMsU0FBQ241QixHQUEwQixPQUFBQSxFQUFFd3ZDLFFBQVVBLENBQUssSUFHNUNSLEVBQTBCaHRCLFNBQVN3dEIsR0FDOUJyckMsRUFBS0ssTUFBTTR3QyxvQkFBb0JqYyxNQUNwQyxTQUFDbjVCLEdBQTBCLE9BQUFBLEVBQUV3dkMsUUFBVUEsQ0FBSyxJQUc1Q04sRUFBZWx0QixTQUFTd3RCLEdBQ25CcnJDLEVBQUtLLE1BQU13d0MsVUFBVTdiLE1BQUssU0FBQ241QixHQUFnQixPQUFBQSxFQUFFd3ZDLFFBQVVBLENBQUssSUFFakVWLEVBQWdCOXNCLFNBQVN3dEIsR0FDcEJyckMsRUFBS0ssTUFBTXV3QyxXQUFXNWIsTUFBSyxTQUFDbjVCLEdBQWlCLE9BQUFBLEVBQUV3dkMsUUFBVUEsQ0FBSyxJQUVuRVAsRUFBaUJqdEIsU0FBU3d0QixHQUNyQnJyQyxFQUFLSyxNQUFNeXdDLFlBQVk5YixNQUFLLFNBQUNuNUIsR0FBa0IsT0FBQUEsRUFBRXd2QyxRQUFVQSxDQUFLLElBRXJFTCxFQUFvQm50QixTQUFTd3RCLEdBQ3hCcnJDLEVBQUtLLE1BQU0wd0MsY0FBYy9iLE1BQzlCLFNBQUNuNUIsR0FBb0IsT0FBQUEsRUFBRXd2QyxRQUFVQSxDQUFLLElBR25DLElBQ1QsRUFrR2E2TSxHQUFtQixTQUM5Qmw0QyxFQUNBODNDLGNBQUEsSUFBQUEsSUFBQUEsRUFBcUIsSUFFckIsSUFBTS9zQyxFQUFPL0ssRUFBSzRCLFVBQVUsR0FLNUIsT0FKYXlRLEtBQUttRCxJQUNoQjlLLFVBQTZCLFFBQXBCay9CLEVBQUFtUCxHQUFTaHVDLEVBQU0sYUFBSyxJQUFBNitCLE9BQUEsRUFBQUEsRUFBRXJzQyxRQUFTdTZDLEdMOTBEZCxHS2sxRDlCLEVBRWFrQixHQUE4QixTQUN6Q2p1QyxFQUNBa3VDLEdBRUEsUUFGQSxJQUFBQSxJQUFBQSxFQUF1QjdRLEVBQUFBLEdBQUdtUSxPQUV0Qnh0QyxFQUFNLENBQ1IsSUFBTW11QyxFQUFZbnVDLEVBQUtsSSxPQUFNLFNBQUFoRyxHQUFLLE9BQUFnMUMsR0FBWWgxQyxFQUFaLElBQ2xDLEdBQUlxOEMsRUFBVyxDQUNiLElBQU1DLEVBQWdCRCxFQUFVcjJDLE9BQU0sU0FBQWhHLEdBQUssT0FBQSswQyxHQUFXLzBDLEVBQVgsSUFDM0MsT0FBS3M4QyxFQUNFQyxHQUFhRCxHQURPRixDQUU1QixDQUNGLENBRUQsT0FEQUksUUFBUUMsS0FBSyw4QkFBK0JMLEdBQ3JDQSxDQUNULEVBYWFHLEdBQWUsU0FDMUJwNUMsRUFDQWk1QyxnQkFBQSxJQUFBQSxJQUFBQSxFQUF1QjdRLEVBQUFBLEdBQUdtUSxPQUUxQixJQUFNL0MsRUFBZ0MsUUFBckI5SCxFQUFVLFFBQVY5RCxFQUFBNXBDLEVBQUtLLGFBQUssSUFBQXVwQyxPQUFBLEVBQUFBLEVBQUUrRyxpQkFBUyxJQUFBakQsT0FBQSxFQUFBQSxFQUFHLEdBQ3pDLE9BQVE4SCxhQUFRLEVBQVJBLEVBQVVuSyxPQUNoQixJQUFLLElBQ0gsT0FBT2pELEVBQUFBLEdBQUdvUSxNQUNaLElBQUssSUFDSCxPQUFPcFEsRUFBQUEsR0FBR21RLE1BQ1osUUFFRSxPQUFPVSxFQUViLEVDbDREQU0sR0FBQSxXQUlFLFNBQUFBLEVBQ1lyNEMsRUFDQThyQyxFQUNBQyxFQUNBQyxHQUhBN3dDLEtBQUc2RSxJQUFIQSxFQUNBN0UsS0FBQzJ3QyxFQUFEQSxFQUNBM3dDLEtBQUM0d0MsRUFBREEsRUFDQTV3QyxLQUFFNndDLEdBQUZBLEVBUEY3d0MsS0FBV205QyxZQUFHLEVBQ2RuOUMsS0FBSXNVLEtBQUcsQ0FPYixDQVlOLE9BWEU0b0MsRUFBQXo5QyxVQUFBMjlDLEtBQUEsV0FDRUosUUFBUUssSUFBSSxRQUdkSCxFQUFjejlDLFVBQUE2OUMsZUFBZCxTQUFlQyxHQUNidjlDLEtBQUttOUMsWUFBY0ksR0FHckJMLEVBQU96OUMsVUFBQSs5QyxRQUFQLFNBQVFscEMsR0FDTnRVLEtBQUtzVSxLQUFPQSxHQUVmNG9DLENBQUQsSUNuQkFPLEdBQUEsU0FBQW5PLEdBQ0UsU0FBQW1PLEVBQVk1NEMsRUFBK0I4ckMsRUFBV0MsRUFBV0MsR0FDL0QsT0FBQXZCLEVBQU0zdkMsS0FBQUssS0FBQTZFLEVBQUs4ckMsRUFBR0MsRUFBR0MsSUFBSTd3QyxJQUN0QixDQW9CSCxPQXZCZ0NKLEVBQUs2OUMsRUFBQW5PLEdBS25DbU8sRUFBQWgrQyxVQUFBMjlDLEtBQUEsV0FDUSxJQUFBN1AsRUFBcUN2dEMsS0FBcEM2RSxRQUFLOHJDLE1BQUdDLE1BQUd0OEIsU0FBTXU4QixPQUFJc00sZ0JBQ3hCN29DLEdBQVEsSUFDWnpQLEVBQUk2NEMsT0FDSjc0QyxFQUFJODRDLFlBQ0o5NEMsRUFBSXM0QyxZQUFjQSxFQUNsQnQ0QyxFQUFJKzRDLElBQUlqTixFQUFHQyxFQUFHdDhCLEVBQU8sRUFBRyxFQUFHLEVBQUkwQixLQUFLNm5DLElBQUksR0FDeENoNUMsRUFBSWk1QyxVQUFZLEVBQ2hCajVDLEVBQUlrNUMsWUFBYyxPQUNQLElBQVBsTixFQUNGaHNDLEVBQUltNUMsVUFBWSxRQUNDLElBQVJuTixJQUNUaHNDLEVBQUltNUMsVUFBWSxRQUVsQm41QyxFQUFJaThCLE9BQ0pqOEIsRUFBSW81QyxTQUNKcDVDLEVBQUlxNUMsWUFFUFQsQ0FBRCxDQXZCQSxDQUFnQ1AsSUNBaENpQixHQUFBLFNBQUE3TyxHQUNFLFNBQUE2TyxFQUNFdDVDLEVBQ0E4ckMsRUFDQUMsRUFDQUMsRUFDUXVOLEVBQ0EzUSxFQUNBQyxHQUVSLElBQUE2QixFQUFBRCxFQUFNM3ZDLEtBQUFLLEtBQUE2RSxFQUFLOHJDLEVBQUdDLEVBQUdDLElBQUk3d0MsWUFKYnV2QyxFQUFHNk8sSUFBSEEsRUFDQTdPLEVBQU05QixPQUFOQSxFQUNBOEIsRUFBTTdCLE9BQU5BLEdBR1QsQ0FlSCxPQTFCZ0M5dEMsRUFBS3UrQyxFQUFBN08sR0FhbkM2TyxFQUFBMStDLFVBQUEyOUMsS0FBQSxXQUNRLElBRUZpQixFQUZFOVEsRUFBNkN2dEMsS0FBNUM2RSxFQUFHMG9DLEVBQUExb0MsSUFBRThyQyxFQUFDcEQsRUFBQW9ELEVBQUVDLEVBQUNyRCxFQUFBcUQsRUFBRXQ4QixTQUFNdThCLEVBQUV0RCxFQUFBc0QsR0FBRXBELEVBQU1GLEVBQUFFLE9BQUVDLEVBQU1ILEVBQUFHLE9BQUUwUSxFQUFHN1EsRUFBQTZRLElBQzNDOXBDLEdBQVEsSUFHVitwQyxFQURTLElBQVB4TixFQUNJcEQsRUFBTzJRLEVBQU0zUSxFQUFPL3NDLFFBRXBCZ3RDLEVBQU8wUSxFQUFNMVEsRUFBT2h0QyxVQUcxQm1FLEVBQUl5NUMsVUFBVUQsRUFBSzFOLEVBQUlyOEIsRUFBTyxFQUFHczhCLEVBQUl0OEIsRUFBTyxFQUFHQSxFQUFNQSxJQUcxRDZwQyxDQUFELENBMUJBLENBQWdDakIsSUNhaENxQixHQUFBLFdBQ0UsU0FBQUEsRUFDVTE1QyxFQUNBOHJDLEVBQ0FDLEVBQ0F2dkMsRUFDQTgyQyxFQUNBVyxFQUNBN0wsRUFDQXVSLFFBREEsSUFBQXZSLElBQUFBLEVBQTRCaEIsRUFBQUEsbUJBQW1Cd1MsU0FQekQsSUFTSWxQLEVBQUF2dkMsS0FSTUEsS0FBRzZFLElBQUhBLEVBQ0E3RSxLQUFDMndDLEVBQURBLEVBQ0Ezd0MsS0FBQzR3QyxFQUFEQSxFQUNBNXdDLEtBQUNxQixFQUFEQSxFQUNBckIsS0FBUW00QyxTQUFSQSxFQUNBbjRDLEtBQVE4NEMsU0FBUkEsRUFDQTk0QyxLQUFLaXRDLE1BQUxBLEVBQ0FqdEMsS0FBWXcrQyxhQUFaQSxFQXVCRngrQyxLQUFBMCtDLHlCQUEyQixXQUMzQixJQUFBblIsRUFBbURnQyxFQUFsRDFxQyxRQUFLOHJDLEVBQUNwRCxFQUFBb0QsRUFBRUMsRUFBQ3JELEVBQUFxRCxFQUFFdnZDLEVBQUNrc0MsRUFBQWxzQyxFQUFFODJDLEVBQVE1SyxFQUFBNEssU0FBRVcsRUFBUXZMLEVBQUF1TCxTQUFFMEYsRUFBWWpSLEVBQUFpUixhQUM5Q3hGLEVBQVNGLEVBQVFFLE1BRXBCMkYsRUFBUzlGLEdBQXVCVixFQUFVVyxHQUU5QyxHQUFJRSxFQUFRLEVBQUcsQ0FDYm4wQyxFQUFJODRDLFlBQ0o5NEMsRUFBSSs0QyxJQUFJak4sRUFBR0MsRUFBR3Z2QyxFQUFHLEVBQUcsRUFBSTJVLEtBQUs2bkMsSUFBSSxHQUNqQ2g1QyxFQUFJaTVDLFVBQVksRUFDaEJqNUMsRUFBSWs1QyxZQUFjLHNCQUNsQixJQUFNYSxFQUFXLzVDLEVBQUlnNkMscUJBQXFCbE8sRUFBR0MsRUFBTyxHQUFKdnZDLEVBQVNzdkMsRUFBR0MsRUFBR3Z2QyxHQUMvRHU5QyxFQUFTRSxhQUFhLEVBQUdILEdBQ3pCQyxFQUFTRSxhQUFhLEdBQUsseUJBQzNCajZDLEVBQUltNUMsVUFBWVksRUFDaEIvNUMsRUFBSWk4QixPQUNBMGQsSUFDRjM1QyxFQUFJODRDLFlBQ0o5NEMsRUFBSSs0QyxJQUFJak4sRUFBR0MsRUFBR3Z2QyxFQUFHLEVBQUcsRUFBSTJVLEtBQUs2bkMsSUFBSSxHQUNqQ2g1QyxFQUFJaTVDLFVBQVksRUFDaEJqNUMsRUFBSWs1QyxZQUFjUyxFQUNsQjM1QyxFQUFJbzVDLFVBR04sSUFBTWMsRUFBVzE5QyxFQUFJLElBRXJCd0QsRUFBSW02QyxLQUFPLEdBQUFoOUMsT0FBYyxHQUFYKzhDLGVBQ2RsNkMsRUFBSW01QyxVQUFZLFFBQ2hCbjVDLEVBQUlvNkMsVUFBWSxTQUVoQnA2QyxFQUFJbTZDLEtBQU8sR0FBR2g5QyxPQUFBKzhDLGVBQ2QsSUFBTUcsRUFBWWhILEdBQWtCQyxFQUFVVyxHQUM5Q2owQyxFQUFJczZDLFNBQVNELEVBQVd2TyxFQUFHQyxHQUUzQi9yQyxFQUFJbTZDLEtBQU8sR0FBQWg5QyxPQUFjLEdBQVgrOEMsZUFDZGw2QyxFQUFJbTVDLFVBQVksUUFDaEJuNUMsRUFBSW82QyxVQUFZLFNBQ2hCcDZDLEVBQUlzNkMsU0FBU2pJLEdBQVc0QixFQUFTc0csUUFBU3pPLEVBQUdDLEVBQUl2dkMsRUFBSSxFQUFJMDlDLEVBQVcsRUFDckUsTUFDQ3hQLEVBQUs4UCxvQkFFVCxFQUVRci9DLEtBQUFzL0MseUJBQTJCLFdBQzNCLElBQUEvUixFQUFxQ2dDLEVBQXBDMXFDLFFBQUs4ckMsTUFBR0MsTUFBR3Z2QyxNQUFHODJDLGFBQVVXLGFBQ3hCRSxFQUFTRixFQUFRRSxNQUVwQjJGLEVBQVM5RixHQUF1QlYsRUFBVVcsR0FFOUMsR0FBSUUsRUFBUSxFQUFHLENBQ2JuMEMsRUFBSTg0QyxZQUNKOTRDLEVBQUkrNEMsSUFBSWpOLEVBQUdDLEVBQUd2dkMsRUFBRyxFQUFHLEVBQUkyVSxLQUFLNm5DLElBQUksR0FDakNoNUMsRUFBSWk1QyxVQUFZLEVBQ2hCajVDLEVBQUlrNUMsWUFBYyxzQkFDbEIsSUFBTWEsRUFBVy81QyxFQUFJZzZDLHFCQUFxQmxPLEVBQUdDLEVBQU8sR0FBSnZ2QyxFQUFTc3ZDLEVBQUdDLEVBQUd2dkMsR0FDL0R1OUMsRUFBU0UsYUFBYSxFQUFHSCxHQUN6QkMsRUFBU0UsYUFBYSxHQUFLLHlCQUMzQmo2QyxFQUFJbTVDLFVBQVlZLEVBQ2hCLzVDLEVBQUlpOEIsT0FFSixJQUFNaWUsRUFBVzE5QyxFQUFJLElBRXJCd0QsRUFBSW02QyxLQUFPLEdBQUFoOUMsT0FBYyxHQUFYKzhDLGVBQ2RsNkMsRUFBSW01QyxVQUFZLFFBQ2hCbjVDLEVBQUlvNkMsVUFBWSxTQUVoQixJQUFNckcsRUFDdUIsTUFBM0JULEVBQVNNLGNBQ0xLLEVBQVNGLFFBQ1QsRUFBSUUsRUFBU0YsUUFFbkIvekMsRUFBSXM2QyxTQUFTbEssR0FBTzJELEVBQVMsSUFBSyxHQUFJakksRUFBR0MsRUFBSXZ2QyxFQUFJLEVBQUkwOUMsRUFBVyxHQUVoRWw2QyxFQUFJbTZDLEtBQU8sR0FBR2g5QyxPQUFBKzhDLGVBQ2QsSUFBTUcsRUFBWWhILEdBQWtCQyxFQUFVVyxHQUM5Q2owQyxFQUFJczZDLFNBQVNELEVBQVd2TyxFQUFHQyxFQUFJbU8sRUFBVyxHQUUxQ2w2QyxFQUFJbTZDLEtBQU8sR0FBQWg5QyxPQUFjLEdBQVgrOEMsZUFDZGw2QyxFQUFJbTVDLFVBQVksUUFDaEJuNUMsRUFBSW82QyxVQUFZLFNBQ2hCcDZDLEVBQUlzNkMsU0FBU2pJLEdBQVc0QixFQUFTc0csUUFBU3pPLEVBQUdDLEVBQUl2dkMsRUFBSSxFQUFJMDlDLEVBQVcsR0FFcEUsSUFBTVEsRUFBUXpHLEVBQVNFLE1BQ3ZCbjBDLEVBQUlzNkMsVUFBVUksRUFBUSxHQUFHanBDLFdBQVlxNkIsRUFBSXR2QyxFQUFHdXZDLEVBQUl2dkMsRUFBSSxFQUNyRCxNQUNDa3VDLEVBQUs4UCxvQkFFVCxFQUVRci9DLEtBQUFxL0MsbUJBQXFCLFdBQ3JCLElBQUE5UixFQUFxQ2dDLEVBQXBDMXFDLFFBQUs4ckMsTUFBR0MsTUFBR3Z2QyxNQUFHODJDLGFBQVVXLGFBQ3pCNkYsRUFBUzlGLEdBQXVCVixFQUFVVyxHQUNoRGowQyxFQUFJODRDLFlBQ0o5NEMsRUFBSSs0QyxJQUFJak4sRUFBR0MsRUFBTyxHQUFKdnZDLEVBQVMsRUFBRyxFQUFJMlUsS0FBSzZuQyxJQUFJLEdBQ3ZDaDVDLEVBQUlpNUMsVUFBWSxFQUNoQmo1QyxFQUFJazVDLFlBQWMsc0JBQ2xCLElBQU1hLEVBQVcvNUMsRUFBSWc2QyxxQkFBcUJsTyxFQUFHQyxFQUFPLEdBQUp2dkMsRUFBU3N2QyxFQUFHQyxFQUFHdnZDLEdBQy9EdTlDLEVBQVNFLGFBQWEsRUFBR0gsR0FDekJDLEVBQVNFLGFBQWEsSUFBTSx5QkFDNUJqNkMsRUFBSW01QyxVQUFZWSxFQUNoQi81QyxFQUFJaThCLE9BQ0pqOEIsRUFBSW81QyxRQUNOLENBNUhJLENBNkhOLE9BM0hFTSxFQUFBOStDLFVBQUEyOUMsS0FBQSxXQUNRLElBQUE3UCxFQUE0Q3Z0QyxLQUEzQzZFLFFBQU0wb0MsRUFBQW9ELEVBQUdwRCxFQUFBcUQsTUFBRXZ2QyxFQUFDa3NDLEVBQUFsc0MsRUFBVWtzQyxFQUFBNEssU0FBVTVLLEVBQUF1TCxTQUFBLElBQUU3TCxFQUFLTSxFQUFBTixNQUMxQzVyQyxFQUFJLElBRVJ3RCxFQUFJNjRDLE9BQ0o3NEMsRUFBSTI2QyxjQUFnQixFQUNwQjM2QyxFQUFJNDZDLGNBQWdCLEVBQ3BCNTZDLEVBQUk2NkMsWUFBYyxPQUNsQjc2QyxFQUFJODZDLFdBQWEsRUFHYjFTLElBQVVoQixFQUFrQkEsbUJBQUN3UyxRQUMvQnorQyxLQUFLcy9DLDJCQUNJclMsSUFBVWhCLEVBQWtCQSxtQkFBQzJULFNBQ3RDNS9DLEtBQUswK0MsMkJBR1A3NUMsRUFBSXE1QyxZQTBHUEssQ0FBRCxJQ3RKQWhTLEdBQUEsV0FJRSxTQUNZQSxFQUFBMW5DLEVBQ0E4ckMsRUFDQUMsRUFDQXR3QyxFQUNBdXdDLEVBQ0FnUCxRQUFBLElBQUFBLElBQUFBLEVBQXlCLElBTHpCNy9DLEtBQUc2RSxJQUFIQSxFQUNBN0UsS0FBQzJ3QyxFQUFEQSxFQUNBM3dDLEtBQUM0d0MsRUFBREEsRUFDQTV3QyxLQUFDTSxFQUFEQSxFQUNBTixLQUFFNndDLEdBQUZBLEVBQ0E3d0MsS0FBRzYvQyxJQUFIQSxFQVRGNy9DLEtBQVdtOUMsWUFBRyxFQUNkbjlDLEtBQUs4L0MsTUFBRyxFQVNkLENBYU4sT0FYRXZULEVBQUE5c0MsVUFBQTI5QyxLQUFBLFdBQ0VKLFFBQVFLLElBQUksUUFHZDlRLEVBQWM5c0MsVUFBQTY5QyxlQUFkLFNBQWVDLEdBQ2J2OUMsS0FBS205QyxZQUFjSSxHQUdyQmhSLEVBQVE5c0MsVUFBQXNnRCxTQUFSLFNBQVNELEdBQ1A5L0MsS0FBSzgvQyxNQUFRQSxHQUVoQnZULENBQUQsSUN0QkF5VCxHQUFBLFNBQUExUSxHQUFBLFNBQUEwUSxrREF1QkMsQ0FBRCxPQXZCa0NwZ0QsRUFBTW9nRCxFQUFBMVEsR0FDdEMwUSxFQUFBdmdELFVBQUEyOUMsS0FBQSxXQUNRLElBQUE3UCxFQUF5Q3Z0QyxLQUF4QzZFLFFBQUs4ckMsRUFBQ3BELEVBQUFvRCxFQUFFQyxFQUFDckQsRUFBQXFELEVBQUV0d0MsRUFBQ2l0QyxFQUFBanRDLEVBQUV1d0MsRUFBRXRELEVBQUFzRCxHQUFFc00sRUFBVzVQLEVBQUE0UCxZQUFFMkMsRUFBS3ZTLEVBQUF1UyxNQUV2Q3hyQyxFQUFnQixLQURELEdBQUpoVSxHQUVmdUUsRUFBSTY0QyxPQUNKNzRDLEVBQUk4NEMsWUFDSjk0QyxFQUFJczRDLFlBQWNBLEVBQ2xCdDRDLEVBQUlpNUMsVUFBWSxFQUNMLElBQVBqTixFQUNGaHNDLEVBQUlrNUMsWUFBYyxRQUNELElBQVJsTixFQUNUaHNDLEVBQUlrNUMsWUFBYyxPQUVsQmw1QyxFQUFJaTVDLFVBQVksRUFFZGdDLElBQU9qN0MsRUFBSWs1QyxZQUFjK0IsR0FDekJ4ckMsRUFBTyxJQUNUelAsRUFBSSs0QyxJQUFJak4sRUFBR0MsRUFBR3Q4QixFQUFNLEVBQUcsRUFBSTBCLEtBQUs2bkMsSUFBSSxHQUNwQ2g1QyxFQUFJbzVDLFVBRU5wNUMsRUFBSXE1QyxXQUVQOEIsQ0FBRCxDQXZCQSxDQUFrQ3pULElDQWxDMFQsR0FBQSxTQUFBM1EsR0FBQSxTQUFBMlEsa0RBeUJDLENBQUQsT0F6QmlDcmdELEVBQU1xZ0QsRUFBQTNRLEdBQ3JDMlEsRUFBQXhnRCxVQUFBMjlDLEtBQUEsV0FDUSxJQUFBN1AsRUFBa0N2dEMsS0FBakM2RSxRQUFLOHJDLE1BQUdDLE1BQUd0d0MsTUFBR3V3QyxPQUFJc00sZ0JBQ25CK0MsRUFBYSxHQUFKNS9DLEVBQ1hnVSxFQUFnQixHQUFUNHJDLEVBQ1hyN0MsRUFBSTY0QyxPQUNKNzRDLEVBQUk4NEMsWUFDSjk0QyxFQUFJaTVDLFVBQVksRUFDaEJqNUMsRUFBSXM0QyxZQUFjQSxFQUNQLElBQVB0TSxFQUNGaHNDLEVBQUlrNUMsWUFBYyxRQUNELElBQVJsTixFQUNUaHNDLEVBQUlrNUMsWUFBYyxPQUVsQnpwQyxFQUFnQixJQUFUNHJDLEVBRVRyN0MsRUFBSXM3QyxPQUFPeFAsRUFBSXI4QixFQUFNczhCLEVBQUl0OEIsR0FDekJ6UCxFQUFJdTdDLE9BQU96UCxFQUFJcjhCLEVBQU1zOEIsRUFBSXQ4QixHQUN6QnpQLEVBQUlzN0MsT0FBT3hQLEVBQUlyOEIsRUFBTXM4QixFQUFJdDhCLEdBQ3pCelAsRUFBSXU3QyxPQUFPelAsRUFBSXI4QixFQUFNczhCLEVBQUl0OEIsR0FFekJ6UCxFQUFJdzdDLFlBQ0p4N0MsRUFBSW81QyxTQUNKcDVDLEVBQUlxNUMsV0FFUCtCLENBQUQsQ0F6QkEsQ0FBaUMxVCxJQ0FqQytULEdBQUEsU0FBQWhSLEdBQUEsU0FBQWdSLGtEQTZCQyxDQUFELE9BN0JnQzFnRCxFQUFNMGdELEVBQUFoUixHQUNwQ2dSLEVBQUE3Z0QsVUFBQTI5QyxLQUFBLFdBQ1EsSUFBQTdQLEVBQXVDdnRDLEtBQXRDNkUsUUFBSzhyQyxFQUFDcEQsRUFBQW9ELEVBQUVDLEVBQUNyRCxFQUFBcUQsRUFBRXR3QyxFQUFDaXRDLEVBQUFqdEMsRUFBRXV3QyxFQUFFdEQsRUFBQXNELEdBQUVnUCxFQUFHdFMsRUFBQXNTLElBQUUxQyxFQUFXNVAsRUFBQTRQLFlBQ25DN29DLEVBQVcsR0FBSmhVLEVBQ1R5K0MsRUFBV3pxQyxFQUFPLElBQ3RCelAsRUFBSTY0QyxPQUNKNzRDLEVBQUlzNEMsWUFBY0EsRUFFUCxJQUFQdE0sRUFDRmhzQyxFQUFJbTVDLFVBQVksUUFDQyxJQUFSbk4sSUFDVGhzQyxFQUFJbTVDLFVBQVksUUFNaEJlLEVBRDRCLElBQTFCYyxFQUFJdnBDLFdBQVc1VixPQUNONFQsRUFBTyxJQUNpQixJQUExQnVyQyxFQUFJdnBDLFdBQVc1VixPQUNiNFQsRUFBTyxJQUVQQSxFQUFPLEVBRXBCelAsRUFBSW02QyxLQUFPLFFBQVFoOUMsT0FBQSs4QyxlQUNuQmw2QyxFQUFJbzZDLFVBQVksU0FDaEJwNkMsRUFBSTA3QyxhQUFlLFNBQ25CMTdDLEVBQUlzNkMsU0FBU1UsRUFBSXZwQyxXQUFZcTZCLEVBQUdDLEVBQUksR0FDcEMvckMsRUFBSXE1QyxXQUVQb0MsQ0FBRCxDQTdCQSxDQUFnQy9ULElDQWhDaVUsR0FBQSxTQUFBbFIsR0FBQSxTQUFBa1Isa0RBb0JDLENBQUQsT0FwQmtDNWdELEVBQU00Z0QsRUFBQWxSLEdBQ3RDa1IsRUFBQS9nRCxVQUFBMjlDLEtBQUEsV0FDUSxJQUFBN1AsRUFBa0N2dEMsS0FBakM2RSxRQUFLOHJDLE1BQUdDLE1BQUd0d0MsTUFBR3V3QyxPQUFJc00sZ0JBQ3pCdDRDLEVBQUk2NEMsT0FDSjc0QyxFQUFJODRDLFlBQ0o5NEMsRUFBSWk1QyxVQUFZLEVBQ2hCajVDLEVBQUlzNEMsWUFBY0EsRUFDbEIsSUFBSTdvQyxFQUFXLElBQUpoVSxFQUNBLElBQVB1d0MsRUFDRmhzQyxFQUFJazVDLFlBQWMsUUFDRCxJQUFSbE4sRUFDVGhzQyxFQUFJazVDLFlBQWMsUUFFbEJsNUMsRUFBSWs1QyxZQUFjLE9BQ2xCbDVDLEVBQUlpNUMsVUFBWSxHQUVsQmo1QyxFQUFJNDdDLEtBQUs5UCxFQUFJcjhCLEVBQU8sRUFBR3M4QixFQUFJdDhCLEVBQU8sRUFBR0EsRUFBTUEsR0FDM0N6UCxFQUFJbzVDLFNBQ0pwNUMsRUFBSXE1QyxXQUVQc0MsQ0FBRCxDQXBCQSxDQUFrQ2pVLElDQWxDbVUsR0FBQSxTQUFBcFIsR0FBQSxTQUFBb1Isa0RBeUJDLENBQUQsT0F6Qm9DOWdELEVBQU04Z0QsRUFBQXBSLEdBQ3hDb1IsRUFBQWpoRCxVQUFBMjlDLEtBQUEsV0FDUSxJQUFBN1AsRUFBa0N2dEMsS0FBakM2RSxRQUFLOHJDLE1BQUdDLE1BQUd0d0MsTUFBR3V3QyxPQUFJc00sZ0JBQ25CK0MsRUFBYSxHQUFKNS9DLEVBQ1hnVSxFQUFnQixJQUFUNHJDLEVBQ1hyN0MsRUFBSTY0QyxPQUNKNzRDLEVBQUk4NEMsWUFDSjk0QyxFQUFJczRDLFlBQWNBLEVBQ2xCdDRDLEVBQUlzN0MsT0FBT3hQLEVBQUdDLEVBQUl0OEIsR0FDbEJ6UCxFQUFJdTdDLE9BQU96UCxFQUFJcjhCLEVBQU8wQixLQUFLMnFDLElBQUksTUFBUS9QLEVBQUl0OEIsRUFBTzBCLEtBQUs0cUMsSUFBSSxPQUMzRC83QyxFQUFJdTdDLE9BQU96UCxFQUFJcjhCLEVBQU8wQixLQUFLMnFDLElBQUksTUFBUS9QLEVBQUl0OEIsRUFBTzBCLEtBQUs0cUMsSUFBSSxPQUUzRC83QyxFQUFJaTVDLFVBQVksRUFDTCxJQUFQak4sRUFDRmhzQyxFQUFJazVDLFlBQWMsUUFDRCxJQUFSbE4sRUFDVGhzQyxFQUFJazVDLFlBQWMsUUFFbEJsNUMsRUFBSWk1QyxVQUFZLEVBQ2hCeHBDLEVBQWdCLEdBQVQ0ckMsR0FFVHI3QyxFQUFJdzdDLFlBQ0p4N0MsRUFBSW81QyxTQUNKcDVDLEVBQUlxNUMsV0FFUHdDLENBQUQsQ0F6QkEsQ0FBb0NuVSxJQ0FwQ3NVLEdBQUEsU0FBQXZSLEdBQUEsU0FBQXVSLGtEQWdCQyxDQUFELE9BaEJnQ2poRCxFQUFNaWhELEVBQUF2UixHQUNwQ3VSLEVBQUFwaEQsVUFBQTI5QyxLQUFBLFdBQ1EsSUFBQTdQLEVBQXlDdnRDLEtBQXhDNkUsUUFBSzhyQyxFQUFDcEQsRUFBQW9ELEVBQUVDLEVBQUNyRCxFQUFBcUQsRUFBRXR3QyxFQUFDaXRDLEVBQUFqdEMsRUFBSWl0QyxFQUFBc0QsT0FBRWlQLEVBQUt2UyxFQUFBdVMsTUFBRTNDLEVBQVc1UCxFQUFBNFAsWUFFdkM3b0MsRUFBZ0IsSUFERCxHQUFKaFUsR0FFZnVFLEVBQUk2NEMsT0FDSjc0QyxFQUFJODRDLFlBQ0o5NEMsRUFBSXM0QyxZQUFjQSxFQUNsQnQ0QyxFQUFJaTVDLFVBQVksRUFDaEJqNUMsRUFBSWs1QyxZQUFjK0IsRUFDZHhyQyxFQUFPLElBQ1R6UCxFQUFJKzRDLElBQUlqTixFQUFHQyxFQUFHdDhCLEVBQU0sRUFBRyxFQUFJMEIsS0FBSzZuQyxJQUFJLEdBQ3BDaDVDLEVBQUlvNUMsVUFFTnA1QyxFQUFJcTVDLFdBRVAyQyxDQUFELENBaEJBLENBQWdDdFUsSUNBaEN1VSxHQUFBLFNBQUF4UixHQUFBLFNBQUF3UixrREEwQkMsQ0FBRCxPQTFCd0NsaEQsRUFBTWtoRCxFQUFBeFIsR0FDNUN3UixFQUFBcmhELFVBQUEyOUMsS0FBQSxXQUNRLElBQUE3UCxFQUF5Q3Z0QyxLQUF4QzZFLFFBQUs4ckMsRUFBQ3BELEVBQUFvRCxFQUFFQyxFQUFDckQsRUFBQXFELEVBQUV0d0MsRUFBQ2l0QyxFQUFBanRDLEVBQUlpdEMsRUFBQXNELE9BQUVpUCxFQUFLdlMsRUFBQXVTLE1BQUUzQyxFQUFXNVAsRUFBQTRQLFlBRXZDN29DLEVBQWdCLElBREQsR0FBSmhVLEdBRWZ1RSxFQUFJNjRDLE9BQ0o3NEMsRUFBSTg0QyxZQUNKOTRDLEVBQUlzNEMsWUFBY0EsRUFDbEJ0NEMsRUFBSWk1QyxVQUFZLEVBQ2hCajVDLEVBQUlrNUMsWUFBYytCLEVBQ2xCajdDLEVBQUltNUMsVUFBWThCLEVBQ1p4ckMsRUFBTyxJQUNUelAsRUFBSSs0QyxJQUFJak4sRUFBR0MsRUFBR3Q4QixFQUFNLEVBQUcsRUFBSTBCLEtBQUs2bkMsSUFBSSxHQUNwQ2g1QyxFQUFJbzVDLFVBRU5wNUMsRUFBSXE1QyxVQUVKcjVDLEVBQUk2NEMsT0FDSjc0QyxFQUFJODRDLFlBQ0o5NEMsRUFBSW01QyxVQUFZOEIsRUFDWnhyQyxFQUFPLElBQ1R6UCxFQUFJKzRDLElBQUlqTixFQUFHQyxFQUFVLEdBQVB0OEIsRUFBWSxFQUFHLEVBQUkwQixLQUFLNm5DLElBQUksR0FDMUNoNUMsRUFBSWk4QixRQUVOajhCLEVBQUlxNUMsV0FFUDRDLENBQUQsQ0ExQkEsQ0FBd0N2VSxJQ0F4Q3dVLEdBQUEsU0FBQXpSLEdBQUEsU0FBQXlSLGtEQXVCQyxDQUFELE9BdkJ1Q25oRCxFQUFNbWhELEVBQUF6UixHQUMzQ3lSLEVBQUF0aEQsVUFBQTI5QyxLQUFBLFdBQ1EsSUFBQTdQLEVBQXlDdnRDLEtBQXhDNkUsUUFBSzhyQyxFQUFDcEQsRUFBQW9ELEVBQUVDLEVBQUNyRCxFQUFBcUQsRUFBRXR3QyxFQUFDaXRDLEVBQUFqdEMsRUFBRXV3QyxFQUFFdEQsRUFBQXNELEdBQUVzTSxFQUFXNVAsRUFBQTRQLFlBQUUyQyxFQUFLdlMsRUFBQXVTLE1BRXZDeHJDLEVBQWdCLEtBREQsSUFBSmhVLEdBRWZ1RSxFQUFJNjRDLE9BQ0o3NEMsRUFBSTg0QyxZQUNKOTRDLEVBQUlzNEMsWUFBY0EsRUFDbEJ0NEMsRUFBSWk1QyxVQUFZLEVBQ0wsSUFBUGpOLEVBQ0Zoc0MsRUFBSW01QyxVQUFZLFFBQ0MsSUFBUm5OLEVBQ1Roc0MsRUFBSW01QyxVQUFZLE9BRWhCbjVDLEVBQUlpNUMsVUFBWSxFQUVkZ0MsSUFBT2o3QyxFQUFJbTVDLFVBQVk4QixHQUN2QnhyQyxFQUFPLElBQ1R6UCxFQUFJKzRDLElBQUlqTixFQUFHQyxFQUFHdDhCLEVBQU0sRUFBRyxFQUFJMEIsS0FBSzZuQyxJQUFJLEdBQ3BDaDVDLEVBQUlpOEIsUUFFTmo4QixFQUFJcTVDLFdBRVA2QyxDQUFELENBdkJBLENBQXVDeFUsSUNGdkN5VSxHQUFBLFdBSUUsU0FDWUEsRUFBQW44QyxFQUNBOHJDLEVBQ0FDLEVBQ0F0OEIsRUFDQXU4QixHQUpBN3dDLEtBQUc2RSxJQUFIQSxFQUNBN0UsS0FBQzJ3QyxFQUFEQSxFQUNBM3dDLEtBQUM0d0MsRUFBREEsRUFDQTV3QyxLQUFJc1UsS0FBSkEsRUFDQXRVLEtBQUU2d0MsR0FBRkEsRUFSRjd3QyxLQUFXbTlDLFlBQUcsRUFDZG45QyxLQUFLOC9DLE1BQUcsRUFRZCxDQUtOLE9BSEVrQixFQUFBdmhELFVBQUF3aEQsS0FBQSxXQUNFakUsUUFBUUssSUFBSSxRQUVmMkQsQ0FBRCxJQ0NNRSxHQUErQixtQkFBWGxxQyxPQUNTLG1CQUFoQm1xQyxhQUE2QixJQUFJQSxZQUNwRCxJQUlRQyxHQUpGQyxHQUE2QixtQkFBaEJDLFlBQTZCLElBQUlBLGlCQUFnQi84QyxFQUU5RGc5QyxHQUFTaGlELE1BQU1FLFVBQVVzQyxNQUFNcEMsS0FEdkIscUVBR055aEQsR0FBTSxDQUFBLEVBR1hHLEdBRkdodEMsU0FBUSxTQUFDbS9CLEVBQUduekMsR0FBQyxPQUFLNmdELEdBQUkxTixHQUFLbnpDLEtBSWpDLElBQU1paEQsR0FBVTFoRCxPQUFPMmhELGFBQWFyb0IsS0FBS3Q1QixRQUNHLG1CQUFwQm1YLFdBQVdyVixNQUM3QnFWLFdBQVdyVixLQUFLdzNCLEtBQUtuaUIsWUFFM0IsSUE0Qk15cUMsR0FBd0IsbUJBQVRDLEtBQXNCLFNBQUNDLEdBQUcsT0FBS0QsS0FBS0MsRUFBSSxFQUN2RFYsR0FBYSxTQUFDVSxHQUFHLE9BQUs1cUMsT0FBT3BWLEtBQUtnZ0QsRUFBSyxVQUFVdHJDLFNBQVMsU0FBUyxFQXZCcEQsU0FBQ3NyQyxHQUlsQixJQUZBLElBQUlDLEVBQUtDLEVBQUlDLEVBQUlDLEVBQUlDLEVBQU0sR0FDckI1YSxFQUFNdWEsRUFBSWxoRCxPQUFTLEVBQ2hCSCxFQUFJLEVBQUdBLEVBQUlxaEQsRUFBSWxoRCxRQUFTLENBQzdCLElBQUtvaEQsRUFBS0YsRUFBSWxyQixXQUFXbjJCLE1BQVEsTUFDNUJ3aEQsRUFBS0gsRUFBSWxyQixXQUFXbjJCLE1BQVEsTUFDNUJ5aEQsRUFBS0osRUFBSWxyQixXQUFXbjJCLE1BQVEsSUFDN0IsTUFBTSxJQUFJVixVQUFVLDJCQUV4Qm9pRCxHQUFPVixJQURQTSxFQUFPQyxHQUFNLEdBQU9DLEdBQU0sRUFBS0MsSUFDVixHQUFLLElBQ3BCVCxHQUFPTSxHQUFPLEdBQUssSUFDbkJOLEdBQU9NLEdBQU8sRUFBSSxJQUNsQk4sR0FBYSxHQUFOTSxFQUNqQixDQUNBLE9BQU94YSxFQUFNNGEsRUFBSWxnRCxNQUFNLEVBQUdzbEMsRUFBTSxHQUFLLE1BQU0yQyxVQUFVM0MsR0FBTzRhLENBQ2hFLEVBU01DLEdBQWtCaEIsR0FDbEIsU0FBQ2lCLEdBQUcsT0FBS25yQyxPQUFPcFYsS0FBS3VnRCxHQUFLN3JDLFNBQVMsU0FBUyxFQUM1QyxTQUFDNnJDLEdBSUMsSUFGQSxJQUNJQyxFQUFPLEdBQ0Y3aEQsRUFBSSxFQUFHdUIsRUFBSXFnRCxFQUFJemhELE9BQVFILEVBQUl1QixFQUFHdkIsR0FGdkIsS0FHWjZoRCxFQUFLNWdELEtBQUtnZ0QsR0FBUTdnRCxNQUFNLEtBQU13aEQsRUFBSUUsU0FBUzloRCxFQUFHQSxFQUhsQyxRQUtoQixPQUFPbWhELEdBQU1VLEVBQUtoMUMsS0FBSyxJQUMzQixFQVVFazFDLEdBQVUsU0FBQzVPLEdBQ2IsR0FBSUEsRUFBRWh6QyxPQUFTLEVBRVgsT0FESTZoRCxFQUFLN08sRUFBRWhkLFdBQVcsSUFDVixJQUFPZ2QsRUFDYjZPLEVBQUssS0FBU2YsR0FBUSxJQUFRZSxJQUFPLEdBQ2pDZixHQUFRLElBQWEsR0FBTGUsR0FDZmYsR0FBUSxJQUFTZSxJQUFPLEdBQU0sSUFDM0JmLEdBQVEsSUFBU2UsSUFBTyxFQUFLLElBQzdCZixHQUFRLElBQWEsR0FBTGUsR0FHOUIsSUFBSUEsRUFBSyxNQUMwQixNQUE1QjdPLEVBQUVoZCxXQUFXLEdBQUssUUFDbEJnZCxFQUFFaGQsV0FBVyxHQUFLLE9BQ3pCLE9BQVE4cUIsR0FBUSxJQUFTZSxJQUFPLEdBQU0sR0FDaENmLEdBQVEsSUFBU2UsSUFBTyxHQUFNLElBQzlCZixHQUFRLElBQVNlLElBQU8sRUFBSyxJQUM3QmYsR0FBUSxJQUFhLEdBQUxlLEVBRTlCLEVBQ01DLEdBQVUsZ0RBUVZDLEdBQVV2QixHQUNWLFNBQUM1Z0QsR0FBQyxPQUFLMFcsT0FBT3BWLEtBQUt0QixFQUFHLFFBQVFnVyxTQUFTLFNBQVMsRUFDaEQrcUMsR0FDSSxTQUFDL2dELEdBQUMsT0FBSzRoRCxHQUFnQmIsR0FBSXFCLE9BQU9waUQsR0FBRyxFQUNyQyxTQUFDQSxHQUFDLE9BQUtvaEQsR0FBV3BoRCxFQU5ONlMsUUFBUXF2QyxHQUFTRixJQU1SLEVDL0d6QkssR0FBUyxpU0FJZkMsR0FBQSxTQUFBdFQsR0FVRSxTQUNZc1QsRUFBQS85QyxFQUNBOHJDLEVBQ0FDLEVBQ0F0OEIsRUFDQXU4QixHQUVWLElBQUF0QixFQUFBRCxFQUFLM3ZDLEtBQUFLLEtBQUM2RSxFQUFLOHJDLEVBQUdDLEVBQUd0OEIsRUFBTXU4QixJQUFJN3dDLEtBTmpCdXZDLEVBQUcxcUMsSUFBSEEsRUFDQTBxQyxFQUFDb0IsRUFBREEsRUFDQXBCLEVBQUNxQixFQUFEQSxFQUNBckIsRUFBSWo3QixLQUFKQSxFQUNBaTdCLEVBQUVzQixHQUFGQSxFQWRKdEIsRUFBQThPLElBQU0sSUFBSXdFLE1BQ1Z0VCxFQUFLZ08sTUFBRyxFQUNSaE8sRUFBY3VULGVBQUcsSUFDakJ2VCxFQUFld1QsZ0JBQUcsSUFDbEJ4VCxFQUFZeVQsYUFBRyxJQUNmelQsRUFBQTBULFVBQVlDLFlBQVlqckMsTUFFeEJzM0IsRUFBVzRULGFBQUcsRUFvQnRCNVQsRUFBQTBSLEtBQU8sV0FDTCxHQUFLMVIsRUFBSzhPLElBQUkrRSxTQUFkLENBSU0sSUFBQTdWLEVBQTBEZ0MsRUFBekQxcUMsUUFBSzhyQyxFQUFDcEQsRUFBQW9ELEVBQUVDLEVBQUNyRCxFQUFBcUQsRUFBRXQ4QixFQUFJaTVCLEVBQUFqNUIsS0FBRStwQyxFQUFHOVEsRUFBQThRLElBQUV5RSxFQUFjdlYsRUFBQXVWLGVBQUVDLEVBQWV4VixFQUFBd1YsZ0JBRXREOXFDLEVBQU1pckMsWUFBWWpyQyxNQUVuQnMzQixFQUFLMFQsWUFDUjFULEVBQUswVCxVQUFZaHJDLEdBR25CcFQsRUFBSXcrQyxVQUFVMVMsRUFBSXI4QixFQUFPLEVBQUdzOEIsRUFBSXQ4QixFQUFPLEVBQUdBLEVBQU1BLEdBQ2hEelAsRUFBSXM0QyxZQUFjNU4sRUFBS2dPLE1BQ3ZCMTRDLEVBQUl5NUMsVUFBVUQsRUFBSzFOLEVBQUlyOEIsRUFBTyxFQUFHczhCLEVBQUl0OEIsRUFBTyxFQUFHQSxFQUFNQSxHQUNyRHpQLEVBQUlzNEMsWUFBYyxFQUVsQixJQUFNbUcsRUFBVXJyQyxFQUFNczNCLEVBQUswVCxVQUUzQixHQUFLMVQsRUFBSzRULFlBU0gsQ0FDTCxJQUFNSSxFQUFjdHJDLEVBQU1zM0IsRUFBSzBULFVBRS9CLEdBREExVCxFQUFLZ08sTUFBUXZuQyxLQUFLaUQsSUFBSSxFQUFJc3FDLEVBQWNSLEVBQWlCLEdBQ3JEUSxHQUFlUixFQUdqQixPQUZBeFQsRUFBS2dPLE1BQVEsT0FDYjE0QyxFQUFJdytDLFVBQVUxUyxFQUFJcjhCLEVBQU8sRUFBR3M4QixFQUFJdDhCLEVBQU8sRUFBR0EsRUFBTUEsRUFHbkQsTUFoQkNpN0IsRUFBS2dPLE1BQVF2bkMsS0FBS21ELElBQUltcUMsRUFBVVIsRUFBZ0IsR0FDNUNRLEdBQVdSLElBQ2J2VCxFQUFLZ08sTUFBUSxFQUNicGxDLFlBQVcsV0FDVG8zQixFQUFLNFQsYUFBYyxFQUNuQjVULEVBQUswVCxVQUFZQyxZQUFZanJDLEtBQy9CLEdBQUdzM0IsRUFBS3lULGVBWVpRLHNCQUFzQmpVLEVBQUswUixLQXBDMUIsQ0FxQ0gsRUFoRGtCLElBQUl3QyxLQUFLLENBQUNkLElBQVMsQ0FBQzF0QixLQUFNLGtCQUUxQyxJQUFNeXVCLEVBQWEsNkJBQTZCMWhELE9EMkZyQyxTQUFDMmhELEdBQW9CLE9BQVJsakQsVUFBQUMsT0FBQSxRQUFBNkQsSUFBQTlELFVBQUEsSUFBQUEsVUFBQSxHQXpGVCxTQUFDa2pELEdBQUcsT0FBS0EsRUFDdkJ4d0MsUUFBUSxLQUFNLElBQUlBLFFBQVEsVUFBVSxTQUFDeXdDLEdBQUUsTUFBVyxLQUFOQSxFQUFZLElBQU0sTUFBSSxDQXlGakVDLENBQVdwQixHQUFRa0IsSUFDbkJsQixHQUFRa0IsRUFBSSxDQzdGa0NqQixDQUFPQyxZQUV2RHBULEVBQUs4TyxJQUFNLElBQUl3RSxNQUNmdFQsRUFBSzhPLElBQUlzRixJQUFNRCxHQUNoQixDQTJDSCxPQXJFK0I5akQsRUFBVWdqRCxFQUFBdFQsR0FxRXhDc1QsQ0FBRCxDQXJFQSxDQUErQjVCLElDeUN6QjhDLEdBRUYsQ0FBQSxFQUVKLFNBQVNDLEtBQ1AsTUFBTyxnRUFBZ0U1dkMsS0FDckU2dkMsVUFBVUMsVUFFZCxDQXdCQSxJQUFJQyxHQUFNLEVBRVksb0JBQVhDLFNBQ1RELEdBQU1DLE9BQU9DLGtCQUFvQixHQUduQyxJQUFBQyxHQUFBLFdBc0RFLFNBQUFBLEVBQVl6L0MsUUFBQSxJQUFBQSxJQUFBQSxFQUFtQyxDQUFBLEdBQS9DLElBb0JDMnFDLEVBQUF2dkMsS0F6RURBLEtBQUFza0QsZUFBa0MsQ0FDaEMxWCxVQUFXLEdBQ1gyWCxnQkFBZ0IsRUFDaEIxWCxRQUFTLEdBQ1RDLE9BQVEsRUFDUkMsYUFBYSxFQUNiQyxZQUFZLEVBQ1pDLE1BQU9qQixFQUFLQSxNQUFDd0IsY0FDYmdYLG1CQUFvQnZZLEVBQWtCQSxtQkFBQ3dTLFFBQ3ZDdFIsWUFBWSxFQUNaRSxjQUFjLEVBQ2RvWCxtQkFBbUIsRUFDbkJDLG1CQUFvQixFQUNwQkMsZUFBZ0IsRUFDaEJDLGdCQUFpQixHQUNqQkMsb0JBQXFCLFVBQ3JCQyxrQkFBbUIsVUFDbkJDLGtCQUFtQixVQUNuQkMsaUJBQWtCLFVBQ2xCQyxpQkFBa0IsVUFDbEJDLGVBQWdCNVgsRUFDaEI2WCxXQUFXLEVBQ1hDLGtCQUFrQixFQUNsQkMsU0FBVSxHQVlKcmxELEtBQUFzbEQsT0FBaUJsWixFQUFNQSxPQUFDbVosS0FDeEJ2bEQsS0FBV3dsRCxZQUFXLEdBQ3RCeGxELEtBQVd5bEQsYUFBRyxFQUNkemxELEtBQUEwbEQsZ0JBQTRCLElBQUlDLFNBR2pDM2xELEtBQUE0bEQsWUFBd0IsSUFBSUQsU0FDNUIzbEQsS0FBQTZsRCxrQkFBOEIsSUFBSUYsU0E0SnpDM2xELEtBQUE4bEQsb0JBQXNCLFNBQUNDLEVBQW9CQyxnQkFBQSxJQUFBQSxJQUFBQSxFQUFXLEdBRTdDLElBQUFuWixFQUFXMEMsRUFBSzNxQyxnQkFDaEJxaEQsRUFBUzFXLEVBQUsyVyw0QkFDZkMsRUFBUTVXLEVBQUs2VyxTQUFTQyxVQUFVQyxlQUFlUCxHQUMvQ1EsRUFBTXZ3QyxLQUFLNnBCLE9BQU9zbUIsRUFBTXhWLEVBQUk5RCxFQUFVb1osRUFBUSxHQUFLQSxHQUNuRE8sRUFBTXh3QyxLQUFLNnBCLE9BQU9zbUIsRUFBTXZWLEVBQUkvRCxFQUFVb1osRUFBUSxHQUFLQSxHQUFTRCxFQUc1RFMsRUFBZ0IsSUFBSWQsU0FGZlksRUFBTU4sRUFDTk8sRUFBTVAsR0FFWHptRCxFQUFJK3ZDLEVBQUs2VyxTQUFTRSxlQUFlRyxHQUl2QyxHQUhBbFgsRUFBS3NXLGtCQUFvQnJtRCxFQUN6Qit2QyxFQUFLbVgscUJBQXVCLENBQUNILEVBQU0sRUFBR0MsRUFBTSxHQUVNLEtBQWhCLFFBQTlCblYsVUFBQTlELEVBQUFnQyxFQUFLb1gscUNBQWlCSixFQUFNLFVBQUUsSUFBQWxWLE9BQUEsRUFBQUEsRUFBR21WLEVBQU0sSUFJekMsT0FIQWpYLEVBQUtxWCxlQUFpQixFQUFFLEdBQUksR0FDNUJyWCxFQUFLcVcsWUFBYyxJQUFJRCxjQUN2QnBXLEVBQUtzWCxhQVNQdFgsRUFBS3FXLFlBQWNwbUQsRUFDbkIrdkMsRUFBS3FYLGVBQWlCLENBQUNMLEVBQU0sRUFBR0MsRUFBTSxHQUN0Q2pYLEVBQUtzWCxhQUVEOUMsTUFBa0J4VSxFQUFLdVgsV0FDN0IsRUFFUTltRCxLQUFXK21ELFlBQUcsU0FBQ3psRCxHQUVyQixHQURlaXVDLEVBQUt5WCxhQUNwQixDQUVBMWxELEVBQUUybEQsaUJBQ0YsSUFBTWQsRUFBUSxJQUFJUixTQUFTcmtELEVBQUU0bEQsUUFBVWhELEdBQUs1aUQsRUFBRTBrRCxRQUFVOUIsSUFDeEQzVSxFQUFLdVcsb0JBQW9CSyxFQUpMLENBS3RCLEVBRVFubUQsS0FBY21uRCxlQUFHLFNBQUM3bEQsR0FDeEIsSUFBSTZrRCxFQUFRLElBQUlSLFNBQ1Z5QixFQUFTN1gsRUFBS3lYLGFBQ3BCLElBQUtJLEVBQVEsT0FBT2pCLEVBQ3BCLElBQU0xRixFQUFPMkcsRUFBT0Msd0JBQ2RDLEVBQVVobUQsRUFBRWltRCxlQUtsQixPQUpBcEIsRUFBUSxJQUFJUixVQUNUMkIsRUFBUSxHQUFHRSxRQUFVL0csRUFBSzNHLE1BQVFvSyxJQUNsQ29ELEVBQVEsR0FBR0csUUFBVWhILEVBQUs1RyxLQUFPcUssR0FHdEMsRUFFUWxrRCxLQUFZMG5ELGFBQUcsU0FBQ3BtRCxHQUV0QixHQURlaXVDLEVBQUt5WCxhQUNwQixDQUVBMWxELEVBQUUybEQsaUJBQ0YxWCxFQUFLa1csYUFBYyxFQUNuQixJQUFNVSxFQUFRNVcsRUFBSzRYLGVBQWU3bEQsR0FDbENpdUMsRUFBS21XLGdCQUFrQlMsRUFDdkI1VyxFQUFLdVcsb0JBQW9CSyxFQU5MLENBT3RCLEVBRVFubUQsS0FBVzJuRCxZQUFHLFNBQUNybUQsR0FFckIsR0FEZWl1QyxFQUFLeVgsYUFDcEIsQ0FFQTFsRCxFQUFFMmxELGlCQUNGMVgsRUFBS2tXLGFBQWMsRUFDbkIsSUFBTVUsRUFBUTVXLEVBQUs0WCxlQUFlN2xELEdBQzlCa1EsRUFBUyxHQUdYd0UsS0FBSzR4QyxJQUFJekIsRUFBTXhWLEVBQUlwQixFQUFLbVcsZ0JBQWdCL1UsR0FGM0IsSUFHYjM2QixLQUFLNHhDLElBQUl6QixFQUFNdlYsRUFBSXJCLEVBQUttVyxnQkFBZ0I5VSxHQUgzQixNQUticC9CLEdBQVUsR0FFWis5QixFQUFLdVcsb0JBQW9CSyxFQUFPMzBDLEVBYlosQ0FjdEIsRUFFUXhSLEtBQUE2bkQsV0FBYSxXQUNuQnRZLEVBQUtrVyxhQUFjLENBQ3JCLEVBa0RBemxELEtBQUE0NUMsV0FBYSxXQUNKLElBQUFrTyxFQUFldlksRUFBSXVZLFlBQ25CbGIsRUFBYTJDLEVBQUszcUMsa0JBRXpCLE9BQ3lCLElBQXRCa2pELEVBQVksR0FBRyxJQUFZQSxFQUFZLEdBQUcsS0FBT2xiLEVBQVksR0FDdkMsSUFBdEJrYixFQUFZLEdBQUcsSUFBWUEsRUFBWSxHQUFHLEtBQU9sYixFQUFZLEVBRXZEVixFQUFBQSxPQUFPQSxPQUdVLElBQXRCNGIsRUFBWSxHQUFHLEdBQ1MsSUFBdEJBLEVBQVksR0FBRyxHQUFpQjViLEVBQUFBLE9BQU82TixRQUNsQytOLEVBQVksR0FBRyxLQUFPbGIsRUFBWSxFQUFVVixFQUFBQSxPQUFPOE4sV0FDaEQ5TixFQUFBQSxPQUFPNmIsS0FDVkQsRUFBWSxHQUFHLEtBQU9sYixFQUFZLEVBQ2pCLElBQXRCa2IsRUFBWSxHQUFHLEdBQWlCNWIsRUFBQUEsT0FBTytOLFNBQ2xDNk4sRUFBWSxHQUFHLEtBQU9sYixFQUFZLEVBQVVWLEVBQUFBLE9BQU9nTyxZQUNoRGhPLEVBQUFBLE9BQU84YixNQUVPLElBQXRCRixFQUFZLEdBQUcsR0FBaUI1YixFQUFBQSxPQUFPK2IsSUFDbENILEVBQVksR0FBRyxLQUFPbGIsRUFBWSxFQUFVVixFQUFBQSxPQUFPZ2MsT0FDaERoYyxFQUFBQSxPQUFPQSxNQUV2QixFQXNMQWxzQyxLQUFBbW9ELGVBQWlCLFdBQ2Y1WSxFQUFLNlksWUFBWTdZLEVBQUszQixPQUN0QjJCLEVBQUs2WSxjQUNMN1ksRUFBSzZZLFlBQVk3WSxFQUFLOFksY0FDdEI5WSxFQUFLNlksWUFBWTdZLEVBQUsrWSxjQUN0Qi9ZLEVBQUtnWixvQkFDTGhaLEVBQUtpWixxQkFDUCxFQUVBeG9ELEtBQUF5b0QsV0FBYSxXQUNYLEdBQUtsWixFQUFLM0IsTUFBVixDQUNBLElBQU0vb0MsRUFBTTBxQyxFQUFLM0IsTUFBTThhLFdBQVcsTUFDOUI3akQsSUFDRkEsRUFBSTY0QyxPQUNKNzRDLEVBQUk4akQsYUFBYSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FFaEM5akQsRUFBSXcrQyxVQUFVLEVBQUcsRUFBR3grQyxFQUFJdWlELE9BQU93QixNQUFPL2pELEVBQUl1aUQsT0FBT3lCLFFBQ2pEaGtELEVBQUlxNUMsVUFQa0IsQ0FTMUIsRUFFQWwrQyxLQUFXb29ELFlBQUcsU0FBQ2hCLEdBQ2IsUUFEYSxJQUFBQSxJQUFBQSxFQUFTN1gsRUFBSzZYLFFBQ3RCQSxFQUFMLENBQ0EsSUFBTXZpRCxFQUFNdWlELEVBQU9zQixXQUFXLE1BQzFCN2pELElBQ0ZBLEVBQUk2NEMsT0FDSjc0QyxFQUFJOGpELGFBQWEsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ2hDOWpELEVBQUl3K0MsVUFBVSxFQUFHLEVBQUcrRCxFQUFPd0IsTUFBT3hCLEVBQU95QixRQUN6Q2hrRCxFQUFJcTVDLFVBTmMsQ0FRdEIsRUFFQWwrQyxLQUFBOG9ELGtCQUFvQixXQUNsQixHQUFLdlosRUFBSzhZLGFBQVYsQ0FDQSxJQUFNeGpELEVBQU0wcUMsRUFBSzhZLGFBQWFLLFdBQVcsTUFDckM3akQsSUFDRkEsRUFBSTY0QyxPQUNKNzRDLEVBQUk4akQsYUFBYSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDaEM5akQsRUFBSXcrQyxVQUFVLEVBQUcsRUFBRzlULEVBQUs4WSxhQUFhTyxNQUFPclosRUFBSzhZLGFBQWFRLFFBQy9EaGtELEVBQUlxNUMsVUFOeUIsQ0FRakMsRUFFQWwrQyxLQUFBdW9ELGtCQUFvQixXQUNsQixHQUFLaFosRUFBS3lYLGFBQVYsQ0FDYXpYLEVBQUszcUMsUUFBUWdvQyxVQUMxQixJQUFNL25DLEVBQU0wcUMsRUFBS3lYLGFBQWEwQixXQUFXLE1BQ3JDN2pELElBQ0ZBLEVBQUk2NEMsT0FDSjc0QyxFQUFJOGpELGFBQWEsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQ2hDOWpELEVBQUl3K0MsVUFBVSxFQUFHLEVBQUc5VCxFQUFLeVgsYUFBYTRCLE1BQU9yWixFQUFLeVgsYUFBYTZCLFFBQy9EaGtELEVBQUlxNUMsVUFQeUIsQ0FTakMsRUFFQWwrQyxLQUFBd29ELG9CQUFzQixXQUNwQixHQUFLalosRUFBS3daLGVBQVYsQ0FDQSxJQUFNbGtELEVBQU0wcUMsRUFBS3daLGVBQWVMLFdBQVcsTUFDdkM3akQsSUFDRkEsRUFBSTY0QyxPQUNKNzRDLEVBQUk4akQsYUFBYSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FDaEM5akQsRUFBSXcrQyxVQUNGLEVBQ0EsRUFDQTlULEVBQUt3WixlQUFlSCxNQUNwQnJaLEVBQUt3WixlQUFlRixRQUV0QmhrRCxFQUFJcTVDLFVBWDJCLENBYW5DLEVBRUFsK0MsS0FBWWdwRCxhQUFHLFNBQUNDLFFBQUEsSUFBQUEsSUFBQUEsRUFBVzFaLEVBQUswWixVQUM5QixJQUFNN0IsRUFBUzdYLEVBQUt3WixlQUNkeGIsRUFLRmdDLEVBQUszcUMsUUFKUHlzQyxFQUEyQjlELEVBQUFOLE1BQTNCQSxPQUFLLElBQUFvRSxFQUFHckYsUUFBTXdCLGNBQWE2RCxFQUMzQm1ULEVBQWtCalgsRUFBQWlYLG1CQUNsQjVYLEVBQVNXLEVBQUFYLFVBQ2FXLEVBQUEyYix1QkFFbEIsSUFBQTFYLEVBQWdCakMsRUFBZmtCLFFBQUtzTCxXQUNaLEdBQUtxTCxHQUFXNkIsRUFBaEIsQ0FDQSxJQUFNcGtELEVBQU11aUQsRUFBT3NCLFdBQVcsTUFDOUIsR0FBSzdqRCxFQUFMLENBQ0EwcUMsRUFBS2laLHNCQUNFLElBQUFyUSxFQUFZOFEsRUFBUTlRLFNBRTNCOFEsRUFBU0UsVUFBVTUwQyxTQUFRLFNBQUF2VCxHQUN6QixHQUFlLFNBQVhBLEVBQUV3MkMsS0FBTixDQUNBLElBQU00UixFQUFRQyxLQUFLdGtELE1BQU1ra0QsRUFBU243QixJQU05Qnc3QixFQUFvQjFjLEVBQ2xCMmMsRUFBZTFSLEdBQ25CNzJDLEVBQUV3MkMsS0FDRixFQUNBOFIsRUFBb0JGLEVBQU01TyxJQUV4QmpOLEVBQWVnSyxHQUFRZ1MsR0FBbkJocEQsRUFBQ2d0QyxFQUFBb0QsRUFBS00sRUFBQzFELEVBQUFxRCxFQUNmLEdBQWtCLElBQWRILEVBQUlsd0MsR0FBRzB3QyxHQUFYLENBQ00sSUFxQkZ1TixFQXJCRW5OLEVBQXlCOUIsRUFBSzJXLHNCQUE3QkQsRUFBSzVVLEVBQUE0VSxNQUFFdUQsRUFBYW5ZLEVBQUFtWSxjQUNyQjdZLEVBQUk2WSxFQUFnQmpwRCxFQUFJMGxELEVBQ3hCclYsRUFBSTRZLEVBQWdCdlksRUFBSWdWLEVBRTlCcGhELEVBQUk2NEMsT0FFRnpRLElBQVVqQixFQUFBQSxNQUFNMkIsU0FDaEJWLElBQVVqQixFQUFLQSxNQUFDd0IsZUFDaEJQLElBQVVqQixFQUFLQSxNQUFDa0IsTUFFaEJyb0MsRUFBSTI2QyxjQUFnQixFQUNwQjM2QyxFQUFJNDZDLGNBQWdCLEVBQ3BCNTZDLEVBQUk2NkMsWUFBYyxPQUNsQjc2QyxFQUFJODZDLFdBQWEsSUFFakI5NkMsRUFBSTI2QyxjQUFnQixFQUNwQjM2QyxFQUFJNDZDLGNBQWdCLEVBQ3BCNTZDLEVBQUk2NkMsWUFBYyxPQUNsQjc2QyxFQUFJODZDLFdBQWEsR0FJZjVELEVBQU94N0MsR0FBRzB3QyxHQUFHenZCLFNBQVMrcUIsRUFBQUEsT0FBT2tkLGdCQUMvQmpMLEVBQWVqUCxFQUFLM3FDLFFBQVFrZ0QsbUJBRzFCL0ksRUFBT3g3QyxHQUFHMHdDLEdBQUd6dkIsU0FBUytxQixFQUFBQSxPQUFPbWQsZ0JBQy9CbEwsRUFBZWpQLEVBQUszcUMsUUFBUW1nRCxtQkFHMUJoSixFQUFPeDdDLEdBQUcwd0MsR0FBR3p2QixTQUFTK3FCLEVBQUFBLE9BQU9vZCxlQUMvQm5MLEVBQWVqUCxFQUFLM3FDLFFBQVFvZ0Qsa0JBR2hCLElBQUl6RyxHQUNoQjE1QyxFQUNBOHJDLEVBQ0FDLEVBbENZLElBbUNacVYsRUFDQTlOLEVBQ0FuM0MsRUFDQXdqRCxFQUNBaEcsR0FFSXBCLE9BQ052NEMsRUFBSXE1QyxTQTlDd0IsQ0FkRSxDQTZEaEMsR0FsRWlCLENBRmdCLENBcUVuQyxFQUVBbCtDLEtBQVU0cEQsV0FBRyxTQUNYblosRUFDQXNMLEVBQ0FzTSxFQUNBbHNDLFFBSEEsSUFBQXMwQixJQUFBQSxFQUFNbEIsRUFBS2tCLFVBQ1gsSUFBQXNMLElBQUFBLEVBQVN4TSxFQUFLd00sYUFDZCxJQUFBc00sSUFBQUEsRUFBZTlZLEVBQUs4WSxtQkFDcEIsSUFBQWxzQyxJQUFBQSxHQUFZLEdBRVosSUFBTWlyQyxFQUFTaUIsRUFDZixHQUFJakIsRUFBUSxDQUNOanJDLEdBQU9vekIsRUFBSzZZLFlBQVloQixHQUM1QixtQkFBUzdtRCxHQUNQLG1CQUFTMHdDLEdBQ1AsSUFBTTEvQixFQUFTd3FDLEVBQU94N0MsR0FBRzB3QyxHQUN6QjEvQixTQUFBQSxFQUFRK0QsTUFBTSxLQUFLZixTQUFRLFNBQUFyVCxHQUN6QixHQUFjLE9BQVZBLEdBQTRCLEtBQVZBLEVBQWMsQ0FDNUIsSUFJRjJvRCxFQUpFdGMsRUFBeUJnQyxFQUFLMlcsc0JBQTdCRCxFQUFLMVksRUFBQTBZLE1BQUV1RCxFQUFhamMsRUFBQWljLGNBQ3JCN1ksRUFBSTZZLEVBQWdCanBELEVBQUkwbEQsRUFDeEJyVixFQUFJNFksRUFBZ0J2WSxFQUFJZ1YsRUFDeEJwVixFQUFLSixFQUFJbHdDLEdBQUcwd0MsR0FFWnBzQyxFQUFNdWlELEVBQU9zQixXQUFXLE1BRTlCLEdBQUk3akQsRUFBSyxDQUNQLE9BQVEzRCxHQUNOLEtBQUtxckMsRUFBQUEsT0FBTytQLE9BQ1Z1TixFQUFTLElBQUk3SixHQUFhbjdDLEVBQUs4ckMsRUFBR0MsRUFBR3FWLEVBQU9wVixHQUM1QyxNQUVGLEtBQUt0RSxFQUFBQSxPQUFPNlAsUUFDVnlOLEVBQVMsSUFBSTlJLEdBQWtCbDhDLEVBQUs4ckMsRUFBR0MsRUFBR3FWLEVBQU9wVixHQUNqRCxNQUVGLEtBQUt0RSxFQUFBQSxPQUFPa2QsY0FDVkksRUFBUyxJQUFJL0ksR0FDWGo4QyxFQUNBOHJDLEVBQ0FDLEVBQ0FxVixFQUNBcFYsRUFDQXRFLFNBQU8rUCxTQUVGeUQsU0FBU3hRLEVBQUszcUMsUUFBUWtnRCxtQkFDN0IsTUFFRixLQUFLdlksRUFBQUEsT0FBT21kLGFBQ1osS0FBS25kLEVBQUFBLE9BQU9vZCxZQUNaLEtBQUtwZCxFQUFBQSxPQUFPeG9DLEtBQ1YsSUFBSSs3QyxFQUFRdlEsRUFBSzNxQyxRQUFRcWdELGlCQUNyQi9qRCxJQUFVcXJDLEVBQU1BLE9BQUNtZCxhQUNuQjVKLEVBQVF2USxFQUFLM3FDLFFBQVFtZ0Qsa0JBQ1o3akQsSUFBVXFyQyxFQUFNQSxPQUFDb2QsY0FDMUI3SixFQUFRdlEsRUFBSzNxQyxRQUFRb2dELG1CQUd2QjZFLEVBQVMsSUFBSWhKLEdBQ1hoOEMsRUFDQThyQyxFQUNBQyxFQUNBcVYsRUFDQXBWLEVBQ0F0RSxTQUFPK1AsU0FFRnlELFNBQVNELEdBQ2hCLE1BRUYsS0FBS3ZULEVBQUFBLE9BQU9nUSxPQUNWc04sRUFBUyxJQUFJckosR0FBYTM3QyxFQUFLOHJDLEVBQUdDLEVBQUdxVixFQUFPcFYsR0FDNUMsTUFFRixLQUFLdEUsRUFBQUEsT0FBT2lRLFNBQ1ZxTixFQUFTLElBQUluSixHQUFlNzdDLEVBQUs4ckMsRUFBR0MsRUFBR3FWLEVBQU9wVixHQUM5QyxNQUVGLEtBQUt0RSxFQUFBQSxPQUFPa1EsTUFDVm9OLEVBQVMsSUFBSTVKLEdBQVlwN0MsRUFBSzhyQyxFQUFHQyxFQUFHcVYsRUFBT3BWLEdBQzNDLE1BRUYsUUFDZ0IsS0FBVjN2QyxJQUNGMm9ELEVBQVMsSUFBSXZKLEdBQVd6N0MsRUFBSzhyQyxFQUFHQyxFQUFHcVYsRUFBT3BWLEVBQUkzdkMsSUFLcEQyb0QsU0FBQUEsRUFBUXpNLE1BQ1QsQ0FDRixDQUNILEtBNUVPbk0sRUFBSSxFQUFHQSxFQUFJOEssRUFBT3g3QyxHQUFHRyxPQUFRdXdDLE1BQTdCQSxJQURGMXdDLEVBQUksRUFBR0EsRUFBSXc3QyxFQUFPcjdDLE9BQVFILE1BQTFCQSxFQWdGVixDQUNILEVBRUFQLEtBQUE4bUQsVUFBWSxTQUFDbFosRUFBb0J6eEIsUUFBcEIsSUFBQXl4QixJQUFBQSxFQUFRMkIsRUFBSzNCLFlBQU8sSUFBQXp4QixJQUFBQSxHQUFZLEdBQ3ZDQSxHQUFPb3pCLEVBQUs2WSxZQUFZeGEsR0FDNUIyQixFQUFLdWEsUUFBUWxjLEdBQ2IyQixFQUFLd2EsY0FBY25jLEdBQ25CMkIsRUFBS3lhLFVBQVVwYyxHQUNYMkIsRUFBSzNxQyxRQUFRb29DLFlBQ2Z1QyxFQUFLMGEsZ0JBRVQsRUFFQWpxRCxLQUFPOHBELFFBQUcsU0FBQ2xjLFFBQUEsSUFBQUEsSUFBQUEsRUFBUTJCLEVBQUszQixPQUNoQixJQUFBTCxFQUFtQ2dDLEVBQUszcUMsUUFBdkNxb0MsRUFBS00sRUFBQU4sTUFBRWlZLEVBQWMzWCxFQUFBMlgsZUFBRXJZLFlBQzlCLEdBQUllLEVBQU8sQ0FDVEEsRUFBTXNjLE1BQU1DLGFBQWUsTUFDM0IsSUFBTXRsRCxFQUFNK29DLEVBQU04YSxXQUFXLE1BQzdCLEdBQUk3akQsRUFDRixHQUFJb29DLElBQVVqQixFQUFLQSxNQUFDd0IsY0FDbEJJLEVBQU1zYyxNQUFNRSxVQUFZLHNCQUN4QnZsRCxFQUFJbTVDLFVBQVksVUFDaEJuNUMsRUFBSXdsRCxVQUNEeGQsR0FDQUEsRUFDRGUsRUFBTWdiLE1BQVEvYixFQUNkZSxFQUFNaWIsT0FBU2hjLFFBRVosR0FBSUksSUFBVWpCLEVBQUtBLE1BQUNrQixLQUN6QnJvQyxFQUFJbTVDLFVBQVl6TyxFQUFLM3FDLFFBQVFpZ0Qsb0JBQzdCaGdELEVBQUl3bEQsVUFDRHhkLEdBQ0FBLEVBQ0RlLEVBQU1nYixNQUFRL2IsRUFDZGUsRUFBTWliLE9BQVNoYyxRQUVaLEdBQ0xJLElBQVVqQixFQUFBQSxNQUFNK0IsYUFDZ0J4cEMsSUFBaEMyZ0QsRUFBZWpZLEdBQU9XLE1BQ3RCLENBQ0EsSUFBTTBjLEVBQVdwRixFQUFlalksR0FBT1csT0FBUyxHQUMxQzJjLEVBQVd6RyxHQUFPd0csR0FDcEJDLEdBQ0YxbEQsRUFBSXk1QyxVQUNGaU0sR0FDQzFkLEdBQ0FBLEVBQ0RlLEVBQU1nYixNQUFRL2IsRUFDZGUsRUFBTWliLE9BQVNoYyxFQUdwQixLQUFNLENBQ0N5ZCxFQUFXcEYsRUFBZWpZLEdBQU9XLE9BQVMsR0FBaEQsSUFDTTRjLEVBQVExRyxHQUFPd0csR0FDckIsR0FBSUUsRUFBTyxDQUNULElBQU1yc0IsRUFBVXQ1QixFQUFJNGxELGNBQWNELEVBQU8sVUFDckNyc0IsSUFDRnQ1QixFQUFJbTVDLFVBQVk3ZixFQUNoQnQ1QixFQUFJd2xELFNBQVMsRUFBRyxFQUFHemMsRUFBTWdiLE1BQU9oYixFQUFNaWIsUUFFekMsQ0FDRixDQUVKLENBQ0gsRUFFQTdvRCxLQUFhK3BELGNBQUcsU0FBQ25jLEdBQ2YsUUFEZSxJQUFBQSxJQUFBQSxFQUFRMkIsRUFBSzNCLE9BQ3ZCQSxFQUFMLENBQ00sSUFBQUwsRUFBeUJnQyxFQUF4QnVZLGdCQUFhbGpELFlBRWxCd29DLEVBTUV4b0MsRUFBT3dvQyxLQUxUUixFQUtFaG9DLEVBTE9nb0MsVUFDVCtYLEVBSUUvL0MsRUFBTysvQyxlQUhURCxFQUdFOS9DLEVBSGdCOC9DLG1CQUNsQkUsRUFFRWhnRCxFQUFPZ2dELGdCQURUSCxFQUNFNy9DLG9CQUNFQyxFQUFNK29DLEVBQU04YSxXQUFXLE1BQzdCLEdBQUk3akQsRUFBSyxDQUNELElBQUF3c0MsRUFBeUI5QixFQUFLMlcsc0JBQTdCRCxFQUFLNVUsRUFBQTRVLE1BQUV1RCxFQUFhblksRUFBQW1ZLGNBRXJCa0IsRUFBY3RkLEVBQU93WCxFQUFrQnFCLEVBQVEsRUFFckRwaEQsRUFBSW01QyxVQUFZLFVBaUJoQixJQWZBLElBQUkyTSxFQUFnQmxHLEVBQ0YsS0FBZDdXLEVBQU1nYixNQUNObEUsRUFNQTVHLEVBQVkyRyxFQUFrQyxLQUFkN1csRUFBTWdiLE1BQWdCakUsRUFPakRwa0QsRUFBSXVuRCxFQUFZLEdBQUcsR0FBSXZuRCxHQUFLdW5ELEVBQVksR0FBRyxHQUFJdm5ELElBQUssQ0FDM0RzRSxFQUFJODRDLFlBRXFCLElBQXRCbUssRUFBWSxHQUFHLElBQWtCLElBQU52bkQsR0FDM0J1bkQsRUFBWSxHQUFHLEtBQU9sYixFQUFZLEdBQUtyc0MsSUFBTXFzQyxFQUFZLEVBRTFEL25DLEVBQUlpNUMsVUFBWTZNLEVBRWhCOWxELEVBQUlpNUMsVUFBWUEsRUFHaEJpRyxNQUNBeGpELElBQU1ndkMsRUFBS3FYLGVBQWUsSUFDMUJyWCxFQUFLa1csY0FFTDVnRCxFQUFJaTVDLFVBQTRCLEVBQWhCajVDLEVBQUlpNUMsV0FFdEIsSUFBSThNLEVBQ0ksSUFBTnJxRCxHQUFXQSxJQUFNcXNDLEVBQVksRUFDekI0YyxFQUFnQjFCLEVBQVksR0FBRyxHQUFLN0IsRUFBUTBFLEVBQWdCLEVBQzVEbkIsRUFBZ0IxQixFQUFZLEdBQUcsR0FBSzdCLEVBQ3RDbEMsT0FDRjZHLEdBQWUxRyxHQUFNLEdBRXZCLElBQUkyRyxFQUNJLElBQU50cUQsR0FBV0EsSUFBTXFzQyxFQUFZLEVBQ3pCcVosRUFBUTZCLEVBQVksR0FBRyxHQUFLMEIsRUFBZ0JtQixFQUFnQixFQUM1RDFFLEVBQVE2QixFQUFZLEdBQUcsR0FBSzBCLEVBQzlCekYsT0FDRjhHLEdBQWEzRyxHQUFNLEdBRWpCNEQsRUFBWSxHQUFHLEdBQUssSUFBRzhDLEdBQWVGLEdBQ3RDNUMsRUFBWSxHQUFHLEdBQUtsYixFQUFZLElBQUdpZSxHQUFhSCxHQUNwRDdsRCxFQUFJczdDLE9BQU81L0MsRUFBSTBsRCxFQUFRdUQsRUFBZW9CLEdBQ3RDL2xELEVBQUl1N0MsT0FBTzcvQyxFQUFJMGxELEVBQVF1RCxFQUFlcUIsR0FDdENobUQsRUFBSW81QyxRQUNMLENBR0QsSUFBUzE5QyxFQUFJdW5ELEVBQVksR0FBRyxHQUFJdm5ELEdBQUt1bkQsRUFBWSxHQUFHLEdBQUl2bkQsSUFBSyxDQUMzRHNFLEVBQUk4NEMsWUFFcUIsSUFBdEJtSyxFQUFZLEdBQUcsSUFBa0IsSUFBTnZuRCxHQUMzQnVuRCxFQUFZLEdBQUcsS0FBT2xiLEVBQVksR0FBS3JzQyxJQUFNcXNDLEVBQVksRUFFMUQvbkMsRUFBSWk1QyxVQUFZNk0sRUFFaEI5bEQsRUFBSWk1QyxVQUFZQSxFQUdoQmlHLE1BQ0F4akQsSUFBTWd2QyxFQUFLcVgsZUFBZSxJQUMxQnJYLEVBQUtrVyxjQUVMNWdELEVBQUlpNUMsVUFBNEIsRUFBaEJqNUMsRUFBSWk1QyxXQUV0QixJQUFJZ04sRUFDSSxJQUFOdnFELEdBQVdBLElBQU1xc0MsRUFBWSxFQUN6QjRjLEVBQWdCMUIsRUFBWSxHQUFHLEdBQUs3QixFQUFRMEUsRUFBZ0IsRUFDNURuQixFQUFnQjFCLEVBQVksR0FBRyxHQUFLN0IsRUFDdEM4RSxFQUNJLElBQU54cUQsR0FBV0EsSUFBTXFzQyxFQUFZLEVBQ3pCcVosRUFBUTZCLEVBQVksR0FBRyxHQUFLMEIsRUFBZ0JtQixFQUFnQixFQUM1RDFFLEVBQVE2QixFQUFZLEdBQUcsR0FBSzBCLEVBQzlCekYsT0FDRitHLEdBQWU1RyxHQUFNLEdBRW5CSCxPQUNGZ0gsR0FBYTdHLEdBQU0sR0FHakI0RCxFQUFZLEdBQUcsR0FBSyxJQUFHZ0QsR0FBZUosR0FDdEM1QyxFQUFZLEdBQUcsR0FBS2xiLEVBQVksSUFBR21lLEdBQWFMLEdBQ3BEN2xELEVBQUlzN0MsT0FBTzJLLEVBQWF2cUQsRUFBSTBsRCxFQUFRdUQsR0FDcEMza0QsRUFBSXU3QyxPQUFPMkssRUFBV3hxRCxFQUFJMGxELEVBQVF1RCxHQUNsQzNrRCxFQUFJbzVDLFFBQ0wsQ0FDRixDQTlHa0IsQ0ErR3JCLEVBRUFqK0MsS0FBU2dxRCxVQUFHLFNBQUNwYyxHQUNYLFFBRFcsSUFBQUEsSUFBQUEsRUFBUTJCLEVBQUszQixPQUNuQkEsR0FDMEIsS0FBM0IyQixFQUFLM3FDLFFBQVFnb0MsVUFBakIsQ0FFSSxJQUFBVyxFQUFnRGdDLEVBQUszcUMsUUFBMUNvbUQsRUFBZXpkLEVBQUE4WCxTQUFFRCxFQUFnQjdYLEVBQUE2WCxpQkFFMUMwQyxFQUFjdlksRUFBS3VZLFlBQ25CampELEVBQU0rb0MsRUFBTThhLFdBQVcsTUFDekJyRCxFQUFXRCxFQUFpQyxNQUFkeFgsRUFBTWdiLE1BQWlCb0MsRUFJekQsR0FBSW5tRCxFQUFLLENBQ0QsSUFBQXdzQyxFQUF5QjlCLEVBQUsyVyxzQkFBN0IrRSxFQUFLNVosRUFBQTRVLE1BQUVpRixFQUFhN1osRUFBQW1ZLGNBRTNCM2tELEVBQUlvNUMsU0FDSixDQUFDLEVBQUcsRUFBRyxJQUFJMXBDLFNBQVEsU0FBQWhVLEdBQ2pCLENBQUMsRUFBRyxFQUFHLElBQUlnVSxTQUFRLFNBQUEwOEIsR0FFZjF3QyxHQUFLdW5ELEVBQVksR0FBRyxJQUNwQnZuRCxHQUFLdW5ELEVBQVksR0FBRyxJQUNwQjdXLEdBQUs2VyxFQUFZLEdBQUcsSUFDcEI3VyxHQUFLNlcsRUFBWSxHQUFHLEtBRXBCampELEVBQUk4NEMsWUFDSjk0QyxFQUFJKzRDLElBQ0ZyOUMsRUFBSTBxRCxFQUFRQyxFQUNaamEsRUFBSWdhLEVBQVFDLEVBQ1o3RixFQUNBLEVBQ0EsRUFBSXJ2QyxLQUFLNm5DLElBQ1QsR0FFRmg1QyxFQUFJbTVDLFVBQVksUUFDaEJuNUMsRUFBSWk4QixPQUVSLEdBQ0YsR0FDRCxDQXBDeUMsQ0FxQzVDLEVBRUE5Z0MsS0FBQWlxRCxlQUFpQixXQUNULElBQUExYyxFQUFnQ2dDLEVBQS9CM0IsRUFBS0wsRUFBQUssTUFBRWhwQyxFQUFPMm9DLEVBQUEzb0MsUUFBRWtqRCxFQUFXdmEsRUFBQXVhLFlBQ2xDLEdBQUtsYSxFQUFMLENBQ08sSUFBQWhCLEVBQTZDaG9DLFlBQUFBLEVBQU93b0MsU0FBbkNQLEVBQTRCam9DLEVBQXJCaW9DLFFBQUUrWCxFQUFtQmhnRCxrQkFDaER1bUQsRUFBa0JyRCxFQUFZLEdBQUcsR0FBS0EsRUFBWSxHQUFHLEdBQUssRUFDeERqakQsRUFBTStvQyxFQUFNOGEsV0FBVyxNQUN2QnJYLEVBQXlCOUIsRUFBSzJXLHNCQUE3QkQsRUFBSzVVLEVBQUE0VSxNQUFFdUQsRUFBYW5ZLEVBQUFtWSxjQUMzQixHQUFJM2tELEVBQUssQ0FDUEEsRUFBSTA3QyxhQUFlLFNBQ25CMTdDLEVBQUlvNkMsVUFBWSxTQUNoQnA2QyxFQUFJbTVDLFVBQVksVUFDaEJuNUMsRUFBSW02QyxLQUFPLFFBQUFoOUMsT0FBUWlrRCxFQUFRLGtCQUUzQixJQUFNbUYsRUFBUzdiLEVBQUtxSyxhQUNoQnlSLEVBQVNwRixFQUFRLElBR25CbUYsSUFBV2xmLEVBQUFBLE9BQU9BLFFBQ0ksSUFBdEI0YixFQUFZLEdBQUcsSUFDZkEsRUFBWSxHQUFHLEtBQU9sYixFQUFZLElBRWxDeWUsR0FBVTdCLEVBQWdCLEdBRzVCaGQsRUFBV2o0QixTQUFRLFNBQUN6UyxFQUFHdUMsR0FDckIsSUFBTXNzQyxFQUFJc1YsRUFBUTVoRCxFQUFRbWxELEVBQ3RCOEIsRUFBWUQsRUFDWkUsRUFBZUYsRUFFakJELElBQVdsZixFQUFBQSxPQUFPNk4sU0FDbEJxUixJQUFXbGYsRUFBTUEsT0FBQytOLFVBQ2xCbVIsSUFBV2xmLEVBQU1BLE9BQUMrYixNQUVsQnFELEdBQWFyRixFQUFRckIsR0FHckJ3RyxJQUFXbGYsRUFBQUEsT0FBTzhOLFlBQ2xCb1IsSUFBV2xmLEVBQU1BLE9BQUNnTyxhQUNsQmtSLElBQVdsZixFQUFNQSxPQUFDZ2MsU0FFbEJxRCxHQUFpQnRGLEVBQVFyQixFQUFtQixHQUU5QyxJQUFJNEcsRUFBSzFELEVBQVksR0FBRyxHQUFLN0IsRUFBUXBaLEVBQVV5ZSxFQUMzQ0csRUFBS0QsRUFBS0wsRUFBa0JsRixFQUF1QixFQUFmc0YsRUFDcENsbkQsR0FBU3lqRCxFQUFZLEdBQUcsSUFBTXpqRCxHQUFTeWpELEVBQVksR0FBRyxLQUV0RHNELElBQVdsZixFQUFBQSxPQUFPOE4sWUFDbEJvUixJQUFXbGYsRUFBTUEsT0FBQ2dPLGFBQ2xCa1IsSUFBV2xmLEVBQU1BLE9BQUNnYyxRQUVsQnJqRCxFQUFJczZDLFNBQVNyOUMsRUFBRzZ1QyxFQUFHNmEsR0FJbkJKLElBQVdsZixFQUFBQSxPQUFPNk4sU0FDbEJxUixJQUFXbGYsRUFBTUEsT0FBQytOLFVBQ2xCbVIsSUFBV2xmLEVBQU1BLE9BQUMrYixLQUVsQnBqRCxFQUFJczZDLFNBQVNyOUMsRUFBRzZ1QyxFQUFHOGEsR0FHekIsSUFFQWhmLEVBQVcxcUMsT0FBT3d0QyxFQUFLM3FDLFFBQVFnb0MsV0FBV3I0QixTQUFRLFNBQUN6UyxFQUFXdUMsR0FDNUQsSUFBTXVzQyxFQUFJcVYsRUFBUTVoRCxFQUFRbWxELEVBQ3RCa0MsRUFBYUwsRUFDYk0sRUFBY04sRUFFaEJELElBQVdsZixFQUFBQSxPQUFPNk4sU0FDbEJxUixJQUFXbGYsRUFBTUEsT0FBQzhOLFlBQ2xCb1IsSUFBV2xmLEVBQU1BLE9BQUM2YixPQUVsQjJELEdBQWN6RixFQUFRckIsR0FHdEJ3RyxJQUFXbGYsRUFBQUEsT0FBTytOLFVBQ2xCbVIsSUFBV2xmLEVBQU1BLE9BQUNnTyxhQUNsQmtSLElBQVdsZixFQUFNQSxPQUFDOGIsUUFFbEIyRCxHQUFnQjFGLEVBQVFyQixFQUFtQixHQUU3QyxJQUFJZ0gsRUFBSzlELEVBQVksR0FBRyxHQUFLN0IsRUFBUXBaLEVBQVU2ZSxFQUMzQ0csRUFBS0QsRUFBS1QsRUFBa0JsRixFQUFRLEVBQUkwRixFQUN4Q3RuRCxHQUFTeWpELEVBQVksR0FBRyxJQUFNempELEdBQVN5akQsRUFBWSxHQUFHLEtBRXREc0QsSUFBV2xmLEVBQUFBLE9BQU8rTixVQUNsQm1SLElBQVdsZixFQUFNQSxPQUFDZ08sYUFDbEJrUixJQUFXbGYsRUFBTUEsT0FBQzhiLE9BRWxCbmpELEVBQUlzNkMsU0FBU3I5QyxFQUFFd1UsV0FBWXMxQyxFQUFJaGIsR0FHL0J3YSxJQUFXbGYsRUFBQUEsT0FBTzZOLFNBQ2xCcVIsSUFBV2xmLEVBQU1BLE9BQUM4TixZQUNsQm9SLElBQVdsZixFQUFNQSxPQUFDNmIsTUFFbEJsakQsRUFBSXM2QyxTQUFTcjlDLEVBQUV3VSxXQUFZdTFDLEVBQUlqYixHQUdyQyxHQUNELENBbEdrQixDQW1HckIsRUFFQTV3QyxLQUFtQmttRCxvQkFBRyxTQUFDa0IsUUFBQSxJQUFBQSxJQUFBQSxFQUFTN1gsRUFBSzZYLFFBQ25DLElBQUluQixFQUFRLEVBQ1J1RCxFQUFnQixFQUNoQnNDLEVBQW9CLEVBQ3hCLEdBQUkxRSxFQUFRLENBQ0osSUFBQTdaLEVBQThDZ0MsRUFBSzNxQyxRQUFsRGlvQyxFQUFPVSxFQUFBVixRQUFFRCxFQUFTVyxFQUFBWCxVQUFFZ1ksRUFBZXJYLEVBQUFxWCxnQkFBRXhYLFNBQ3JDMGEsRUFBZXZZLEVBQUl1WSxhQUdELElBQXRCQSxFQUFZLEdBQUcsSUFBWUEsRUFBWSxHQUFHLEtBQU9sYixFQUFZLEdBQ3ZDLElBQXRCa2IsRUFBWSxHQUFHLElBQVlBLEVBQVksR0FBRyxLQUFPbGIsRUFBWSxLQUU5RGtmLEVBQW9CbEgsSUFHRyxJQUF0QmtELEVBQVksR0FBRyxJQUFZQSxFQUFZLEdBQUcsS0FBT2xiLEVBQVksR0FDdkMsSUFBdEJrYixFQUFZLEdBQUcsSUFBWUEsRUFBWSxHQUFHLEtBQU9sYixFQUFZLEtBRTlEa2YsRUFBc0MsRUFBbEJsSCxHQUd0QixJQUFNbmxCLEVBQVUyTixFQUFPUixFQUFZa2YsRUFBb0JsZixFQUd2RDRjLEVBQWdCM2MsR0FEaEJvWixHQUFTbUIsRUFBT3dCLE1BQWtCLEVBQVYvYixHQUFlNzJCLEtBQUtxQyxLQUFLb25CLElBQ2YsQ0FDbkMsQ0FDRCxNQUFPLENBQUN3bUIsTUFBS0EsRUFBRXVELGdCQUFlc0Msa0JBQWlCQSxFQUNqRCxFQUVBOXJELEtBQUErckQsV0FBYSxTQUFDdGIsRUFBZ0J1YixFQUE0Qjd2QyxRQUE1QyxJQUFBczBCLElBQUFBLEVBQU1sQixFQUFLa0IsVUFBSyxJQUFBdWIsSUFBQUEsRUFBWXpjLEVBQUt5YyxnQkFBVyxJQUFBN3ZDLElBQUFBLEdBQVksR0FDcEUsSUFBTWlyQyxFQUFTN1gsRUFBSytZLGFBRXBCLEdBQUlsQixFQUFRLENBQ05qckMsR0FBT296QixFQUFLNlksWUFBWWhCLEdBQzVCLElBQUssSUFBSTdtRCxFQUFJLEVBQUdBLEVBQUl5ckQsRUFBVXRyRCxPQUFRSCxJQUNwQyxJQUFLLElBQUkwd0MsRUFBSSxFQUFHQSxFQUFJK2EsRUFBVXpyRCxHQUFHRyxPQUFRdXdDLElBQUssQ0FDNUMsSUFBTS92QyxFQUFROHFELEVBQVV6ckQsR0FBRzB3QyxHQUNyQjFELEVBQXlCZ0MsRUFBSzJXLHNCQUE3QkQsRUFBSzFZLEVBQUEwWSxNQUFFdUQsRUFBYWpjLEVBQUFpYyxjQUNyQjdZLEVBQUk2WSxFQUFnQmpwRCxFQUFJMGxELEVBQ3hCclYsRUFBSTRZLEVBQWdCdlksRUFBSWdWLEVBQ3hCcFYsRUFBS0osRUFBSWx3QyxHQUFHMHdDLEdBRVpwc0MsRUFBTXVpRCxFQUFPc0IsV0FBVyxNQUU5QixHQUFJN2pELEVBQUssQ0FDUCxHQUFRM0QsSUFDRGlyQyxFQUFBQSxPQUFPOGYsSUFDRCxJQUFJckosR0FBVS85QyxFQUFLOHJDLEVBQUdDLEVBQUdxVixFQUFPcFYsR0FDbENvUSxPQUlYK0ssRUFBVXpyRCxHQUFHMHdDLEdBQUs5RSxFQUFBQSxPQUFPb1osSUFDMUIsQ0FDRixDQUVJLElBQUEzWSxFQUFhMkMsRUFBSzNxQyxrQkFDekIycUMsRUFBSzJjLGFBQWE1UyxHQUFNLENBQUMxTSxFQUFXQSxJQUNyQyxDQUNILEVBRUE1c0MsS0FBQTZtRCxXQUFhLG1CQUNMTyxFQUFTN1gsRUFBS3lYLGFBQ3BCLEdBQUlJLEVBQVEsQ0FFVixHQURBN1gsRUFBS2daLG9CQUNEaFosRUFBSytWLFNBQVdsWixFQUFBQSxPQUFPbVosS0FBTSxPQUNqQyxHQUFJeEIsT0FBcUJ4VSxFQUFLa1csWUFBYSxPQUVwQyxJQUFBNVksRUFBVzBDLEVBQUszcUMsZ0JBQ2pCQyxFQUFNdWlELEVBQU9zQixXQUFXLE1BQ3ZCekMsRUFBUzFXLEVBQUsyVyw0QkFDZjFVLEVBQXFDakMsRUFBcEN1WSxFQUFXdFcsRUFBQXNXLFlBQUV4QyxFQUFNOVQsRUFBQThULE9BQUVFLEVBQVdoVSxFQUFBZ1UsWUFFakM3VCxFQUFBdndDLEVBQWFtdUMsRUFBS3FYLGVBQWMsR0FBL0JMLEVBQUc1VSxFQUFBLEdBQUU2VSxFQUFHN1UsRUFBQSxHQUNmLEdBQUk0VSxFQUFNdUIsRUFBWSxHQUFHLElBQU12QixFQUFNdUIsRUFBWSxHQUFHLEdBQUksT0FDeEQsR0FBSXRCLEVBQU1zQixFQUFZLEdBQUcsSUFBTXRCLEVBQU1zQixFQUFZLEdBQUcsR0FBSSxPQUN4RCxJQUFNblgsRUFBSTRWLEVBQU1OLEVBQVFBLEVBQVEsRUFBSXBaLEVBQzlCK0QsRUFBSTRWLEVBQU1QLEVBQVFBLEVBQVEsRUFBSXBaLEVBQzlCZ0UsYUFBYSxRQUFSdEQsRUFBQWdDLEVBQUtrQixXQUFHLElBQUFsRCxPQUFBLEVBQUFBLEVBQUdnWix5QkFBT0MsS0FBUXphLEVBQUFBLEdBQUdvZ0IsTUFFeEMsR0FBSXRuRCxFQUFLLENBQ1AsSUFBSXVuRCxTQUNFOTNDLEVBQWUsR0FBUjJ4QyxFQUNUWCxJQUFXbFosRUFBTUEsT0FBQ2tRLFFBQ3BCOFAsRUFBTSxJQUFJcE0sR0FBYW43QyxFQUFLOHJDLEVBQUdDLEVBQUdxVixFQUFPcFYsSUFDckN5TSxlQUFlLElBQ1ZnSSxJQUFXbFosRUFBTUEsT0FBQ21RLFFBQzNCNlAsRUFBTSxJQUFJNUwsR0FBYTM3QyxFQUFLOHJDLEVBQUdDLEVBQUdxVixFQUFPcFYsSUFDckN5TSxlQUFlLElBQ1ZnSSxJQUFXbFosRUFBTUEsT0FBQ29RLFVBQzNCNFAsRUFBTSxJQUFJMUwsR0FBZTc3QyxFQUFLOHJDLEVBQUdDLEVBQUdxVixFQUFPcFYsSUFDdkN5TSxlQUFlLElBQ1ZnSSxJQUFXbFosRUFBTUEsT0FBQ3FRLE9BQzNCMlAsRUFBTSxJQUFJbk0sR0FBWXA3QyxFQUFLOHJDLEVBQUdDLEVBQUdxVixFQUFPcFYsSUFDcEN5TSxlQUFlLElBQ1ZnSSxJQUFXbFosRUFBTUEsT0FBQ2lnQixNQUMzQkQsRUFBTSxJQUFJOUwsR0FBV3o3QyxFQUFLOHJDLEVBQUdDLEVBQUdxVixFQUFPcFYsRUFBSTJVLElBQ3ZDbEksZUFBZSxJQUNWek0sSUFBTzlFLEVBQUFBLEdBQUdvZ0IsT0FBUzdHLElBQVdsWixFQUFBQSxPQUFPa2dCLGFBQzlDRixFQUFNLElBQUkzTyxHQUFXNTRDLEVBQUs4ckMsRUFBR0MsRUFBRzdFLEVBQUFBLEdBQUdtUSxRQUMvQnNCLFFBQVFscEMsR0FDWjgzQyxFQUFJOU8sZUFBZSxLQUNWek0sSUFBTzlFLEVBQUFBLEdBQUdvZ0IsT0FBUzdHLElBQVdsWixFQUFBQSxPQUFPbWdCLGFBQzlDSCxFQUFNLElBQUkzTyxHQUFXNTRDLEVBQUs4ckMsRUFBR0MsRUFBRzdFLEVBQUFBLEdBQUdvUSxRQUMvQnFCLFFBQVFscEMsR0FDWjgzQyxFQUFJOU8sZUFBZSxLQUNWZ0ksSUFBV2xaLEVBQU1BLE9BQUNvZ0IsUUFDM0JKLEVBQU0sSUFBSTNPLEdBQVc1NEMsRUFBSzhyQyxFQUFHQyxFQUFHN0UsRUFBQUEsR0FBR29nQixRQUMvQjNPLFFBQVFscEMsR0FFZDgzQyxTQUFBQSxFQUFLaFAsTUFDTixDQUNGLENBQ0gsRUFFQXA5QyxLQUFBeXNELFdBQWEsU0FDWGhjLEVBQ0EyVyxFQUNBanJDLFFBRkEsSUFBQXMwQixJQUFBQSxFQUFrQmxCLEVBQUtrQixVQUN2QixJQUFBMlcsSUFBQUEsRUFBUzdYLEVBQUs2WCxhQUNkLElBQUFqckMsSUFBQUEsR0FBWSxHQUVOLElBQUFveEIsRUFBZ0RnQyxFQUFLM3FDLFFBQXBEeXNDLFVBQUFwRSxPQUFRLElBQUFvRSxFQUFBckYsRUFBQUEsTUFBTXdCLGNBQWE2RCxFQUFFNlQsbUJBRXBDLEdBREkvb0MsR0FBT296QixFQUFLNlksY0FDWmhCLEVBQ0YsSUFBSyxJQUFJN21ELEVBQUksRUFBR0EsRUFBSWt3QyxFQUFJL3ZDLE9BQVFILElBQzlCLElBQUssSUFBSTB3QyxFQUFJLEVBQUdBLEVBQUlSLEVBQUlsd0MsR0FBR0csT0FBUXV3QyxJQUFLLENBQ3RDLElBQU0vdkMsRUFBUXV2QyxFQUFJbHdDLEdBQUcwd0MsR0FDckIsR0FBYyxJQUFWL3ZDLEVBQWEsQ0FDZixJQUFNMkQsRUFBTXVpRCxFQUFPc0IsV0FBVyxNQUM5QixHQUFJN2pELEVBQUssQ0FDRCxJQUFBMnNDLEVBQXlCakMsRUFBSzJXLHNCQUE3QkQsRUFBS3pVLEVBQUF5VSxNQUFFdUQsRUFBYWhZLEVBQUFnWSxjQUNyQjdZLEVBQUk2WSxFQUFnQmpwRCxFQUFJMGxELEVBQ3hCclYsRUFBSTRZLEVBQWdCdlksRUFBSWdWLEVBRzlCcGhELEVBQUk2NEMsT0FFRnpRLElBQVVqQixFQUFBQSxNQUFNMkIsU0FDaEJWLElBQVVqQixFQUFLQSxNQUFDd0IsZUFDaEJQLElBQVVqQixFQUFLQSxNQUFDa0IsTUFFaEJyb0MsRUFBSTI2QyxjQUFnQixFQUNwQjM2QyxFQUFJNDZDLGNBQWdCLEVBQ3BCNTZDLEVBQUk2NkMsWUFBYyxPQUNsQjc2QyxFQUFJODZDLFdBQWEsSUFFakI5NkMsRUFBSTI2QyxjQUFnQixFQUNwQjM2QyxFQUFJNDZDLGNBQWdCLEVBQ3BCNTZDLEVBQUk4NkMsV0FBYSxHQUVuQixJQUFJK00sU0FDSixPQUFRemYsR0FDTixLQUFLakIsRUFBQUEsTUFBTXdCLGNBQ1gsS0FBS3hCLEVBQUFBLE1BQU1rQixNQUNUd2YsRUFBUSxJQUFJalAsR0FBVzU0QyxFQUFLOHJDLEVBQUdDLEVBQUcxdkMsSUFDNUJzOEMsUUFyQkksSUFxQkl5SSxFQUFnQixHQUM5QixNQUVGLFFBQ0UsSUFBTXhZLEVBQVN5WCxFQUFlalksR0FBT1EsT0FBT3A1QixLQUMxQyxTQUFBOVQsR0FBSyxPQUFBdWpELEdBQU92akQsRUFBRSxJQUVWbXRDLEVBQVN3WCxFQUFlalksR0FBT1MsT0FBT3I1QixLQUMxQyxTQUFBOVQsR0FBSyxPQUFBdWpELEdBQU92akQsRUFBRSxLQUdoQm1zRCxFQUFRLElBQUl2TyxHQUFXdDVDLEVBQUs4ckMsRUFBR0MsRUFBRzF2QyxFQUR0QlgsRUFBSSxHQUFLMHdDLEVBQ3lCeEQsRUFBUUMsSUFDaEQ4UCxRQWpDSSxJQWlDSXlJLEVBQWdCLEdBR2xDeUcsRUFBTXRQLE9BQ052NEMsRUFBSXE1QyxTQUNMLENBQ0YsQ0FDRixDQUdQLEVBMXNDRWwrQyxLQUFLNEUsUUFDQXpFLEVBQUFBLEVBQUEsQ0FBQSxFQUFBSCxLQUFLc2tELGdCQUNMMS9DLEdBRUwsSUFBTTBQLEVBQU90VSxLQUFLNEUsUUFBUWdvQyxVQUMxQjVzQyxLQUFLeXdDLElBQU00SSxHQUFNLENBQUMva0MsRUFBTUEsSUFDeEJ0VSxLQUFLMm1ELGVBQWlCdE4sR0FBTSxDQUFDL2tDLEVBQU1BLElBQ25DdFUsS0FBSys3QyxPQUFTekMsR0FBTSxDQUFDaGxDLEVBQU1BLElBQzNCdFUsS0FBS2dzRCxVQUFZMVMsR0FBTSxDQUFDaGxDLEVBQU1BLElBQzlCdFUsS0FBSzJzRCxLQUFPNWdCLEVBQUVBLEdBQUNtUSxNQUNmbDhDLEtBQUs0bUQsZUFBaUIsRUFBRSxHQUFJLEdBQzVCNW1ELEtBQUswbUQscUJBQXVCLEVBQUUsR0FBSSxHQUNsQzFtRCxLQUFLNHNELE1BQVF0NEMsRUFDYnRVLEtBQUtvbUQsU0FBVyxJQUFJeUcsVUFDcEI3c0QsS0FBS2lwRCxTQUFXLEtBQ2hCanBELEtBQUs4bkQsWUFBYyxDQUNqQixDQUFDLEVBQUd4ekMsRUFBTyxHQUNYLENBQUMsRUFBR0EsRUFBTyxHQUVkLENBd3JDSCxPQXRyQ0UrdkMsRUFBTzVrRCxVQUFBcXRELFFBQVAsU0FBUUgsR0FDTjNzRCxLQUFLMnNELEtBQU9BLEdBR2R0SSxFQUFZNWtELFVBQUFzdEQsYUFBWixTQUFhejRDLEdBQ1h0VSxLQUFLNEUsUUFBUWdvQyxVQUFZNTJCLEtBQUttRCxJQUFJN0UsRXRCbEtSLEtzQnFLNUIrdkMsRUFBQTVrRCxVQUFBdXRELE9BQUEsV0FDRSxHQUNHaHRELEtBQUtvbkQsUUFDTHBuRCxLQUFLZ25ELGNBQ0xobkQsS0FBS2l0RCxLQUNManRELEtBQUs0dEMsT0FDTDV0QyxLQUFLcW9ELGNBQ0xyb0QsS0FBSytvRCxnQkFDTC9vRCxLQUFLc29ELGFBUFIsQ0FXQSxJQUFNNEUsRUFBVyxDQUNmbHRELEtBQUs0dEMsTUFDTDV0QyxLQUFLb25ELE9BQ0xwbkQsS0FBS3FvRCxhQUNMcm9ELEtBQUtnbkQsYUFDTGhuRCxLQUFLK29ELGVBQ0wvb0QsS0FBS3NvRCxjQUdBaDBDLEVBQVF0VSxLQUFLNEUsYUFDYnVvRCxFQUFlbnRELEtBQUtpdEQsZ0JBRTNCQyxFQUFTMzRDLFNBQVEsU0FBQTZ5QyxHQUNYOXlDLEdBQ0Y4eUMsRUFBT3dCLE1BQVF0MEMsRUFBTzR2QyxHQUN0QmtELEVBQU95QixPQUFTdjBDLEVBQU80dkMsS0FFdkJrRCxFQUFPOEMsTUFBTXRCLE1BQVF1RSxFQUFjLEtBQ25DL0YsRUFBTzhDLE1BQU1yQixPQUFTc0UsRUFBYyxLQUNwQy9GLEVBQU93QixNQUFRNXlDLEtBQUt1QyxNQUFNNDBDLEVBQWNqSixJQUN4Q2tELEVBQU95QixPQUFTN3lDLEtBQUt1QyxNQUFNNDBDLEVBQWNqSixJQUU3QyxJQUVBbGtELEtBQUtvdEQsUUExQkksR0E0QkgvSSxFQUFBNWtELFVBQUE0dEQsYUFBUixTQUFxQnYvQixFQUFZdy9CLFFBQUEsSUFBQUEsSUFBQUEsR0FBb0IsR0FDbkQsSUFBTWxHLEVBQVNtRyxTQUFTQyxjQUFjLFVBTXRDLE9BTEFwRyxFQUFPOEMsTUFBTWxsQixTQUFXLFdBQ3hCb2lCLEVBQU90NUIsR0FBS0EsRUFDUHcvQixJQUNIbEcsRUFBTzhDLE1BQU1vRCxjQUFnQixRQUV4QmxHLEdBR1QvQyxFQUFJNWtELFVBQUFndUQsS0FBSixTQUFLUixHQUFMLElBOEJDMWQsRUFBQXZ2QyxLQTdCT3NVLEVBQU90VSxLQUFLNEUsUUFBUWdvQyxVQUMxQjVzQyxLQUFLeXdDLElBQU00SSxHQUFNLENBQUMva0MsRUFBTUEsSUFDeEJ0VSxLQUFLKzdDLE9BQVN6QyxHQUFNLENBQUNobEMsRUFBTUEsSUFDM0J0VSxLQUFLb21ELFNBQVcsSUFBSXlHLFVBRXBCN3NELEtBQUs0dEMsTUFBUTV0QyxLQUFLcXRELGFBQWEsa0JBQy9CcnRELEtBQUtvbkQsT0FBU3BuRCxLQUFLcXRELGFBQWEsbUJBQ2hDcnRELEtBQUtxb0QsYUFBZXJvRCxLQUFLcXRELGFBQWEsbUJBQW1CLEdBQ3pEcnRELEtBQUtnbkQsYUFBZWhuRCxLQUFLcXRELGFBQWEsbUJBQ3RDcnRELEtBQUsrb0QsZUFBaUIvb0QsS0FBS3F0RCxhQUFhLHFCQUFxQixHQUM3RHJ0RCxLQUFLc29ELGFBQWV0b0QsS0FBS3F0RCxhQUFhLG1CQUFtQixHQUV6RHJ0RCxLQUFLaXRELElBQU1BLEVBQ1hBLEVBQUlTLFVBQVksR0FDaEJULEVBQUlVLFlBQVkzdEQsS0FBSzR0QyxPQUNyQnFmLEVBQUlVLFlBQVkzdEQsS0FBS29uRCxRQUNyQjZGLEVBQUlVLFlBQVkzdEQsS0FBS3FvRCxjQUNyQjRFLEVBQUlVLFlBQVkzdEQsS0FBSytvRCxnQkFDckJrRSxFQUFJVSxZQUFZM3RELEtBQUtnbkQsY0FDckJpRyxFQUFJVSxZQUFZM3RELEtBQUtzb0QsY0FFckJ0b0QsS0FBS2d0RCxTQUNMaHRELEtBQUs0dEQsb0JBRWlCLG9CQUFYekosUUFDVEEsT0FBTzBKLGlCQUFpQixVQUFVLFdBQ2hDdGUsRUFBS3lkLFFBQ1AsS0FJSjNJLEVBQVU1a0QsVUFBQXF1RCxXQUFWLFNBQVdscEQsR0FDVDVFLEtBQUs0RSxRQUFjekUsRUFBQUEsRUFBQSxDQUFBLEVBQUFILEtBQUs0RSxTQUFZQSxHQUVwQzVFLEtBQUs0dEQsb0JBQ0w1dEQsS0FBS290RCxVQUdQL0ksRUFBTTVrRCxVQUFBc3VELE9BQU4sU0FBT3RkLEdBQ0x6d0MsS0FBS3l3QyxJQUFNQSxFQUNOendDLEtBQUs4N0MsaUJBQ1I5N0MsS0FBSzg3QyxlQUFpQnJMLElBSTFCNFQsRUFBaUI1a0QsVUFBQXV1RCxrQkFBakIsU0FBa0J2ZCxHQUNoQnp3QyxLQUFLODdDLGVBQWlCckwsR0FHeEI0VCxFQUFpQjVrRCxVQUFBd3VELGtCQUFqQixTQUFrQnhkLEdBQ2hCendDLEtBQUsybUQsZUFBaUJsVyxHQUd4QjRULEVBQVk1a0QsVUFBQXlzRCxhQUFaLFNBQWF6YixHQUNYendDLEtBQUtnc0QsVUFBWXZiLEdBR25CNFQsRUFBUzVrRCxVQUFBeXVELFVBQVQsU0FBVW5TLEdBQ1IvN0MsS0FBSys3QyxPQUFTQSxHQUdoQnNJLEVBQUE1a0QsVUFBQTB1RCxVQUFBLFNBQVU3SSxFQUFnQnBrRCxRQUFBLElBQUFBLElBQUFBLEVBQVUsSUFDbENsQixLQUFLc2xELE9BQVNBLEVBQ2R0bEQsS0FBS3dsRCxZQUFjdGtELEdBMkZyQm1qRCxFQUFBNWtELFVBQUFtdUQsa0JBQUEsV0FDRSxJQUFNeEcsRUFBU3BuRCxLQUFLZ25ELGFBQ2ZJLElBRUxBLEVBQU9nSCxvQkFBb0IsWUFBYXB1RCxLQUFLK21ELGFBQzdDSyxFQUFPZ0gsb0JBQW9CLFdBQVlwdUQsS0FBSyttRCxhQUM1Q0ssRUFBT2dILG9CQUFvQixhQUFjcHVELEtBQUswbkQsY0FDOUNOLEVBQU9nSCxvQkFBb0IsWUFBYXB1RCxLQUFLMm5ELGFBQzdDUCxFQUFPZ0gsb0JBQW9CLFdBQVlwdUQsS0FBSzZuRCxZQUV4QzduRCxLQUFLNEUsUUFBUW1vQyxjQUNmcWEsRUFBT3lHLGlCQUFpQixZQUFhN3RELEtBQUsrbUQsYUFDMUNLLEVBQU95RyxpQkFBaUIsV0FBWTd0RCxLQUFLK21ELGFBQ3pDSyxFQUFPeUcsaUJBQWlCLGFBQWM3dEQsS0FBSzBuRCxjQUMzQ04sRUFBT3lHLGlCQUFpQixZQUFhN3RELEtBQUsybkQsYUFDMUNQLEVBQU95RyxpQkFBaUIsV0FBWTd0RCxLQUFLNm5ELGFBRzNDN25ELEtBQUt1b0Qsc0JBR1BsRSxFQUFXNWtELFVBQUE0dUQsWUFBWCxTQUFZcEYsR0FDVmpwRCxLQUFLaXBELFNBQVdBLEVBQ1hBLEVBSURqcEQsS0FBSzRFLFFBQVF5b0MsY0FBY3J0QyxLQUFLZ3BELGFBQWFDLEdBSC9DanBELEtBQUt3b0QsdUJBTVRuRSxFQUFBNWtELFVBQUE2dUQsU0FBQSxTQUFTcmhCLEVBQWNyb0MsR0FBdkIsSUFnQkMycUMsRUFBQXZ2QyxVQWhCc0IsSUFBQTRFLElBQUFBLEVBQVksQ0FBQSxHQUMxQixJQUFBc2dELEVBQWtCbGxELEtBQUs0RSx1QkFDOUIsR0FBS3NnRCxFQUFlalksR0FBcEIsQ0FDTSxJQUFBTSxFQUEwQjJYLEVBQWVqWSxHQUF4Q1csRUFBS0wsRUFBQUssTUFBRUgsRUFBTUYsRUFBQUUsT0FBRUMsV0FDdEIxdEMsS0FBSzRFLFFBQVFxb0MsTUFBUUEsRUFDckJqdEMsS0FBSzRFLFFBQ0F6RSxFQUFBQSxFQUFBQSxFQUFBLENBQUEsRUFBQUgsS0FBSzRFLFNBQ1IsQ0FBQXFvQyxNQUFLQSxJQUNGcm9DLEdBaldULFNBQWlCMnBELEVBQWdCcHRELEdBUS9CLElBUEEsSUFBSXF0RCxFQUFTLEVBQ1BDLEVBQWMsYUFDbEJELElBQ2VELEVBQUs3dEQsUUFDbEJTLEdBRUosRUFDU1osRUFBSSxFQUFHQSxFQUFJZ3VELEVBQUs3dEQsT0FBUUgsSUFDMUJ1akQsR0FBT3lLLEVBQUtodUQsTUFDZnVqRCxHQUFPeUssRUFBS2h1RCxJQUFNLElBQUlzaUQsTUFDdEJpQixHQUFPeUssRUFBS2h1RCxJQUFJb2pELElBQU00SyxFQUFLaHVELEdBQzNCdWpELEdBQU95SyxFQUFLaHVELElBQUltdUQsT0FBUyxXQUN2QkQsR0FDRixFQUNBM0ssR0FBT3lLLEVBQUtodUQsSUFBSW91RCxRQUFVLFdBQ3hCRixHQUNGLEVBR04sQ0ErVUlHLENBQVF4dUIsRUFBT0EsUUFBRTErQixFQUFBQSxFQUFBLENBQUFrc0MsS0FBVUgsSUFBTSxHQUFBcnNDLEVBQUtzc0MsSUFBTSxLQUFJLFdBQzlDNkIsRUFBS3VYLFlBQ0x2WCxFQUFLNmQsUUFDUCxJQUNBcHRELEtBQUs4bUQsWUFDTDltRCxLQUFLb3RELFFBYjhCLEdBMENyQy9JLEVBQWtCNWtELFVBQUFvdkQsbUJBQWxCLFNBQW1CQyxHQUNWLElBQUE5aEIsRUFBY2h0QyxLQUFLNEUsbUJBa0JuQndpRCxFQUFVcG5ELEtBQUlvbkQsT0FDckIsR0FBS0EsRUFBTCxDQUNBLElBQU12YSxFQUFVdWEsRUFBT3dCLE9BQVNrRyxFQUFrQixHQUFLLEVBQ2pEQyxFQUEyQjNILEVBQU93QixPQUFTa0csRUFBa0IsR0FBSyxFQUV4RTl1RCxLQUFLNEUsUUFBUWlvQyxRQUFVRyxFQUFhSCxFQUFVa2lCLENBSjFCLEdBUXRCMUssRUFBUzVrRCxVQUFBdXZELFVBQVQsU0FBVTVoQixRQUFBLElBQUFBLElBQUFBLEdBQVksR0FDZCxJQUFBRyxFQU9GdnRDLEtBTkZvbkQsV0FDQTJCLG1CQUNBbmIsVUFDQW9aLGlCQUNBcUIsaUJBQ0FDLGlCQUVGLEdBQUtsQixFQUFMLENBQ00sSUFBQS9WLEVBQ0pyeEMsS0FBSzRFLFFBREFnb0MsY0FBV0UsV0FBUThYLG9CQUFpQi9YLFlBQVMwWCxtQkFFOUMwSyxFQUFvQnRVLEdBQ3hCMzZDLEtBQUs4N0MsZUFDTGhQLEdBQ0EsR0FFSWpvQyxFQUFNdWlELGFBQU0sRUFBTkEsRUFBUXNCLFdBQVcsTUFDekJ3RyxFQUFXdGhCLGFBQUssRUFBTEEsRUFBTzhhLFdBQVcsTUFDN0J5RyxFQUFZbkksYUFBWSxFQUFaQSxFQUFjMEIsV0FBVyxNQUNyQzBHLEVBQVkvRyxhQUFZLEVBQVpBLEVBQWNLLFdBQVcsTUFDckMyRyxFQUFjdEcsYUFBYyxFQUFkQSxFQUFnQkwsV0FBVyxNQUN6QzRHLEVBQVloSCxhQUFZLEVBQVpBLEVBQWNJLFdBQVcsTUFDckNaLEVBQWMxYSxFQUNoQjZoQixFQUNBLENBQ0UsQ0FBQyxFQUFHcmlCLEVBQVksR0FDaEIsQ0FBQyxFQUFHQSxFQUFZLElBR3RCNXNDLEtBQUs4bkQsWUFBY0EsRUFDbkIsSUFBTWdILEVBQWtCOTRDLEtBQUtpRCxJQUMzQjZ1QyxFQUFZLEdBQUcsR0FBS0EsRUFBWSxHQUFHLEdBQ25DQSxFQUFZLEdBQUcsR0FBS0EsRUFBWSxHQUFHLElBU3JDLEdBTkl2RCxFQUNGdmtELEtBQUs2dUQsbUJBQW1CQyxHQUV4Qjl1RCxLQUFLNEUsUUFBUWlvQyxRQUFVRixFQUFnQkUsUUFHckNPLEVBQU0sQ0FDRCxJQUFBNlksRUFBU2ptRCxLQUFLa21ELDRCQUNmOUwsRUFBU3A2QyxLQUFLNDVDLGFBRWhCMkssRUFDRnZrRCxLQUFLNnVELG1CQUFtQkMsR0FFeEI5dUQsS0FBSzRFLFFBQVFpb0MsUUFBVUYsRUFBZ0JFLFFBR3pDLElBQUkwaUIsRUFBcUMsRUFBbEIzSyxFQUFzQixFQUczQ3hLLElBQVdsTyxFQUFBQSxPQUFPK04sVUFDbEJHLElBQVdsTyxFQUFNQSxPQUFDNk4sU0FDbEJLLElBQVdsTyxFQUFNQSxPQUFDZ08sYUFDbEJFLElBQVdsTyxFQUFNQSxPQUFDOE4sYUFFbEJ1VixFQUFtQjNLLEVBQWtCLElBRXZDLElBQUl1RyxFQUFrQjJELEVBQWtCUyxFQUV4QyxHQUFJcEUsRUFBa0J2ZSxFQUFXLENBQy9CLElBQUlzSSxHQUFTa1MsRUFBT3dCLE1BQWtCLEVBQVYvYixJQUFnQnNlLEVBQWtCbEYsR0FFMURpQixFQUNGWSxFQUFZLEdBQUcsR0FBSzdCLEVBQVEvUSxFQUU1QnJJLEVBQVVxSSxFQUNWckksRUFFQ29aLEVBQVFzSixFQUFtQnJhLEVBQVMsRUFDcEMrUSxFQUFRL1EsRUFBUyxFQUVoQjhRLEVBQ0Y4QixFQUFZLEdBQUcsR0FBSzdCLEVBQVEvUSxFQUU1QnJJLEVBQVVxSSxFQUNWckksRUFFQ29aLEVBQVFzSixFQUFtQnJhLEVBQVMsRUFDcEMrUSxFQUFRL1EsRUFBUyxFQUVwQmwxQyxLQUFLb21ELFNBQVcsSUFBSXlHLFVBQ3BCN3NELEtBQUtvbUQsU0FBU29KLGVBQWV0SSxHQUFVbEIsR0FDdkNobUQsS0FBS29tRCxTQUFTcUosVUFBVXZhLEVBQU9BLEdBQy9CcndDLFNBQUFBLEVBQUs4akQsYUFBYTNvRCxLQUFLb21ELFVBQ3ZCOEksU0FBQUEsRUFBVXZHLGFBQWEzb0QsS0FBS29tRCxVQUM1QmlKLFNBQUFBLEVBQWExRyxhQUFhM29ELEtBQUtvbUQsVUFDL0IrSSxTQUFBQSxFQUFXeEcsYUFBYTNvRCxLQUFLb21ELFVBQzdCZ0osU0FBQUEsRUFBV3pHLGFBQWEzb0QsS0FBS29tRCxVQUM3QmtKLFNBQUFBLEVBQVczRyxhQUFhM29ELEtBQUtvbUQsU0FDOUIsTUFDQ3BtRCxLQUFLMHZELGdCQUVSLE1BQ0MxdkQsS0FBSzB2RCxnQkF6RmEsR0E2RnRCckwsRUFBb0I1a0QsVUFBQWt3RCxxQkFBcEIsU0FBcUJ2aUIsR0FDbkJwdEMsS0FBS2d2RCxVQUFVaHZELEtBQUs0RSxRQUFRd29DLE9BRzlCaVgsRUFBQTVrRCxVQUFBaXdELGVBQUEsV0FDUSxJQUFBbmlCLEVBT0Z2dEMsS0FORm9uRCxXQUNBMkIsbUJBQ0FuYixVQUNBb1osaUJBQ0FxQixpQkFDQUMsaUJBRUl6akQsRUFBTXVpRCxhQUFNLEVBQU5BLEVBQVFzQixXQUFXLE1BQ3pCd0csRUFBV3RoQixhQUFLLEVBQUxBLEVBQU84YSxXQUFXLE1BQzdCeUcsRUFBWW5JLGFBQVksRUFBWkEsRUFBYzBCLFdBQVcsTUFDckMwRyxFQUFZL0csYUFBWSxFQUFaQSxFQUFjSyxXQUFXLE1BQ3JDMkcsRUFBY3RHLGFBQWMsRUFBZEEsRUFBZ0JMLFdBQVcsTUFDekM0RyxFQUFZaEgsYUFBWSxFQUFaQSxFQUFjSSxXQUFXLE1BQzNDMW9ELEtBQUtvbUQsU0FBVyxJQUFJeUcsVUFDcEJob0QsU0FBQUEsRUFBSzZxRCxpQkFDTFIsU0FBQUEsRUFBVVEsaUJBQ1ZMLFNBQUFBLEVBQWFLLGlCQUNiUCxTQUFBQSxFQUFXTyxpQkFDWE4sU0FBQUEsRUFBV00saUJBQ1hKLFNBQUFBLEVBQVdJLGtCQUdickwsRUFBQTVrRCxVQUFBMnRELE9BQUEsV0FDUyxJQUFBM2MsRUFBT3p3QyxLQUFJeXdDLElBQ2R6d0MsS0FBS3l3QyxLQUFPQSxFQUFJLEtBQUl6d0MsS0FBSzRFLFFBQVFnb0MsVUFBWTZELEVBQUksR0FBRy92QyxRQUd4RFYsS0FBS2d2RCxVQUFVaHZELEtBQUs0RSxRQUFRd29DLE1BQzVCcHRDLEtBQUtndkQsVUFBVWh2RCxLQUFLNEUsUUFBUXdvQyxNQUM1QnB0QyxLQUFLbW9ELGlCQUNMbm9ELEtBQUs4bUQsWUFDTDltRCxLQUFLeXNELGFBQ0x6c0QsS0FBSzRwRCxhQUNMNXBELEtBQUs2bUQsYUFDRDdtRCxLQUFLNEUsUUFBUXlvQyxjQUFjcnRDLEtBQUtncEQsZ0JBR3RDM0UsRUFBaUI1a0QsVUFBQW13RCxrQkFBakIsU0FBa0J4SSxRQUFBLElBQUFBLElBQUFBLEVBQVNwbkQsS0FBS29uRCxRQUM5QnBuRCxLQUFLbW9ELGlCQUNMbm9ELEtBQUs4bUQsVUFBVU0sR0FBUSxHQUN2QnBuRCxLQUFLeXNELFdBQVd6c0QsS0FBS3l3QyxJQUFLMlcsR0FBUSxHQUNsQ3BuRCxLQUFLNHBELFdBQVc1cEQsS0FBS3l3QyxJQUFLendDLEtBQUsrN0MsT0FBUXFMLEdBQVEsSUF3dUJsRC9DLENBQUQsOEN0QjV6Q2lDLENBQy9CLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLGlHQXpDZ0Msa0NBb0VWLGFBQ0EsYUFDQSxtTEF2RU0sNkJDbUVTLENBQUMsS0FBTSxLQUFNLHNNREt2QixzSkNORyxDQUFDLEtBQU0sS0FBTSxLQUFNLDRESTZVZixTQUNsQzFnRCxFQUNBMndDLEVBQ0FDLFFBREEsSUFBQUQsSUFBQUEsRUFBbUIsU0FDbkIsSUFBQUMsSUFBQUEsRUFBb0IsSUFFcEIsSUFBSXpsQyxFQUFXLElBQ1h3bEMsRUFBVTV6QyxPQUFTLElBQUdvTyxFQUFXLEtBQ2pDeWxDLEVBQVc3ekMsT0FBUyxJQUFHb08sRUFBVyxLQUV0QyxJQUFJdE8sRUFBSSxHQUFHd0IsT0FBQThNLEdBQ1B3bEMsRUFBVTV6QyxPQUFTLElBQUdGLEdBQUssR0FBR3dCLE9BQUFzeUMsRUFBVSxHQUFHdEYsT0FBUWh0QyxPQUFBc3lDLEVBQVUsR0FBR3B6QyxRQUVwRSxJQUFJKzFDLEVBQVd6MkMsRUFZZixPQVhJbUQsSUFDRnN6QyxFQUNFdHpDLEVBQ0c0QixVQUNBOE8sS0FBSSxTQUFDN1QsR0FBK0IsT0FBQUEsRUFBRXdELE1BQU04cEIsTUFDNUMxZ0IsS0FBSyxNQUNSLEtBQ0E1TSxHQUdRdzBDLEdBQU9pQyxHQUFVM2dDLFdBQVd2VSxNQUFNLEVBQUcsRUFFbkQsY0FrR3lCLFNBQUN5MUMsRUFBYzVLLEdBR3RDLFlBSHNDLElBQUFBLElBQUFBLEVBQWMsSUFDMUNKLEVBQVdsbkMsUUFBUWt5QyxFQUFLLElBRXZCNUssRUFEREgsRUFBV25uQyxRQUFRK0ksU0FBU21wQyxFQUFLQyxPQUFPLEdBQUksR0FFeEQseUJBU3VCLFNBQUNqSSxFQUFVdmEsRUFBWWl5QixFQUFhbEIsR0FDekQsUUFEZ0MsSUFBQS93QixJQUFBQSxFQUFVLFVBQUUsSUFBQWl5QixJQUFBQSxFQUFXLFFBQUUsSUFBQWxCLElBQUFBLEVBQVcsR0FDeEQsU0FBUnhXLEVBQWdCLE1BQU8sR0FBQXh0QyxPQUFHaXpCLEVBQUksTUFDbEMsSUFBTStpQixFQUFNeEwsRUFBV2xuQyxRQUFRa3FDLEVBQUksSUFBTTBYLEVBQ25DalAsRUFBTXhMLEVBQVdubkMsUUFBUStJLFNBQVNtaEMsRUFBSWlJLE9BQU8sR0FBSSxJQUFNdU8sRUFFN0QsTUFEWSxHQUFHaGtELE9BQUFpekIsY0FBUXlYLEVBQVlzTCxXQUFPdEwsRUFBWXVMLE9BRXhELHlCQTgyQm9DLFNBQ2xDaEYsRUFDQXhDLEVBQ0Fsd0MsRUFDQTB3QyxFQUNBSixHQUVBLEdBQUlBLElBQU85RSxFQUFBQSxHQUFHb2dCLE1BQWQsQ0FDQSxJQUFJeG9ELEVBQ0osR0FBSXN1QyxHQUFReEIsRUFBS2x3QyxFQUFHMHdDLEVBQUdKLEdBQUssQ0FDMUIsSUFBTTN2QyxFQUFRd3JDLEVBQVluc0MsR0FBS21zQyxFQUFZdUUsR0FDckNqQyxFQUFRNkIsSUFBTzlFLEVBQUFBLEdBQUdtUSxNQUFRLElBQU0sSUFDaEMyVCxFQUFNeGIsR0FBUXBCLEVBQWEsQ0FBQzVELEVBQVN6dEMsS0FBSyxHQUFBSSxPQUFHZ3RDLEVBQVMsS0FBQWh0QyxPQUFBZCxVQUN0RDR1RCxFQUFXN2MsRUFBWW52QyxTQUFTazlCLFFBQ3BDLFNBQUN4Z0MsR0FBVyxPQUFBQSxFQUFFd0QsTUFBTThwQixLQUFPK2hDLENBQUcsSUFFNUJDLEVBQVNwdkQsT0FBUyxFQUNwQmlELEVBQU9tc0QsRUFBUyxJQUVoQm5zRCxFQUFPdTFDLEdBQWMsR0FBR2wzQyxPQUFBZ3RDLEVBQVMsS0FBQWh0QyxPQUFBZCxFQUFRLEtBQUUreEMsR0FDM0NBLEVBQVkvdUMsU0FBU1AsR0FFeEIsQ0FDRCxPQUFPQSxDQWhCcUIsQ0FpQjlCLDBCQS9EcUMsU0FDbkNzdkMsRUFDQXhDLEVBQ0Fsd0MsRUFDQTB3QyxFQUNBSixHQUVBLElBQU0zdkMsRUFBUXdyQyxFQUFZbnNDLEdBQUttc0MsRUFBWXVFLEdBQ3JDakMsRUFBUTZCLElBQU85RSxFQUFBQSxHQUFHb1EsTUFBUSxLQUFPLEtBQ2pDL2UsRUFBT3NmLEdBQVN6SixFQUFhakUsR0FDL0Jwc0MsR0FBUyxFQWNiLE9BYkk2dEMsRUFBSWx3QyxHQUFHMHdDLEtBQU9sRixFQUFBQSxHQUFHb2dCLE1BQ25CNVEsR0FBMEJ0SSxFQUFhL3hDLElBRW5DazhCLEVBQ0ZBLEVBQUs3ckIsT0FBYTdQLEVBQUFBLEVBQUEsR0FBQU4sRUFBQWc4QixFQUFLN3JCLFNBQU0sR0FBQSxDQUFFclEsSUFBSyxHQUVwQyt4QyxFQUFZanZDLE1BQU11d0Msb0JBQ2J0QixFQUFZanZDLE1BQU11d0MsYUFBVSxHQUFBLENBQy9CLElBQUk5RSxFQUFVVCxFQUFPOXRDLFFBR3pCMEIsR0FBUyxHQUVKQSxDQUNULG9GQXRiZ0QsU0FDOUNtdEQsRUFDQW5qQixvQkFBQSxJQUFBQSxJQUFBQSxFQUFjLElBRWQsSUFBTWhxQyxFQUFtQixHQUVuQjR1QyxFQUFBcHdDLEVBQXVCMnVELEVBQVcsR0FBakNwZSxFQUFBdndDLEVBQUFvd0MsRUFBQSxHQUFBLEdBQUNvYSxFQUFFamEsRUFBQSxHQUFFNlosRUFBRTdaLEVBQUEsR0FBR3FlLEVBQUE1dUQsRUFBUW93QyxFQUFBLEdBQUEsR0FBUHFhLEVBQUVtRSxFQUFBLEdBQUV2RSxFQUFFdUUsRUFBQSxPQUV4QixJQUFrQixJQUFBQyxFQUFBcnZELEVBQUE0ckMsRUFBV3pxQyxNQUFNLEVBQUc2cUMsSUFBVXNqQixFQUFBRCxFQUFBaHZELDBCQUFFLENBQTdDLElBQU1rdkQsRUFBR0QsRUFBQWh2RCxVQUNaLElBQWtCLElBQUFrdkQsR0FBQUMsT0FBQSxFQUFBenZELEVBQUE2ckMsRUFBVzFxQyxPQUFPNnFDLEtBQVUwakIsRUFBQUYsRUFBQW52RCwwQkFBRSxDQUEzQyxJQUFNc3ZELEVBQUdELEVBQUFwdkQsTUFDTnl2QyxFQUFJbkUsRUFBV2xuQyxRQUFRNnFELEdBQ3ZCdmYsRUFBSW5FLEVBQVdubkMsUUFBUWlyRCxJQUV6QjVmLEVBQUlpYixHQUFNamIsRUFBSWtiLEdBQU1qYixFQUFJNGEsR0FBTTVhLEVBQUk2YSxJQUNwQzdvRCxFQUFPcEIsS0FBSyxHQUFBUSxPQUFHbXVELEdBQU1udUQsT0FBQXV1RCxHQUV4QixtR0FDRixtR0FFRCxPQUFPM3RELENBQ1QsdUVBMzVCK0MsU0FBQzR0RCxHQUU5QyxPQUFJQSxHQUFhLEdBQ1IsQ0FDTEMsS0FBTSxDQUFDQyxhQUFjLEVBQUUsR0FBSSxLQUFPQyxXQUFZLEVBQUUsS0FBTSxJQUN0REMsSUFBSyxDQUFDRixhQUFjLEVBQUUsS0FBTyxJQUFNQyxXQUFZLEVBQUUsR0FBSSxJQUNyREUsS0FBTSxDQUFDSCxhQUFjLEVBQUUsSUFBTSxLQUFPQyxXQUFZLEVBQUUsR0FBSSxJQUN0REcsR0FBSSxDQUFDSixhQUFjLEVBQUUsS0FBTyxLQUFPQyxXQUFZLEVBQUUsR0FBSSxLQUNyREksS0FBTSxDQUFDTCxhQUFjLEVBQUUsSUFBTSxHQUFJQyxXQUFZLENBQUMsRUFBRyxNQUNqREssTUFBTyxDQUFDTixhQUFjLENBQUMsRUFBRyxHQUFJQyxXQUFZLENBQUMsRUFBRyxPQUk5Q0gsR0FBYSxJQUFNQSxFQUFZLEdBQzFCLENBQ0xDLEtBQU0sQ0FBQ0MsYUFBYyxFQUFFLEdBQUksSUFBTUMsV0FBWSxFQUFFLEtBQU0sSUFDckRDLElBQUssQ0FBQ0YsYUFBYyxFQUFFLElBQU0sS0FBT0MsV0FBWSxFQUFFLEdBQUksSUFDckRFLEtBQU0sQ0FBQ0gsYUFBYyxFQUFFLEtBQU8sS0FBT0MsV0FBWSxFQUFFLEdBQUksSUFDdkRHLEdBQUksQ0FBQ0osYUFBYyxFQUFFLEtBQU8sS0FBT0MsV0FBWSxFQUFFLEdBQUksSUFDckRJLEtBQU0sQ0FBQ0wsYUFBYyxFQUFFLElBQU0sR0FBSUMsV0FBWSxDQUFDLEVBQUcsTUFDakRLLE1BQU8sQ0FBQ04sYUFBYyxDQUFDLEVBQUcsR0FBSUMsV0FBWSxDQUFDLEVBQUcsT0FLOUNILEdBQWEsSUFBTUEsRUFBWSxHQUMxQixDQUNMQyxLQUFNLENBQUNDLGFBQWMsRUFBRSxHQUFJLEtBQU9DLFdBQVksRUFBRSxLQUFNLEtBQ3REQyxJQUFLLENBQUNGLGFBQWMsRUFBRSxLQUFPLElBQU1DLFdBQVksRUFBRSxJQUFLLElBQ3RERSxLQUFNLENBQUNILGFBQWMsRUFBRSxJQUFNLEtBQU9DLFdBQVksRUFBRSxHQUFJLElBQ3RERyxHQUFJLENBQUNKLGFBQWMsRUFBRSxLQUFPLEtBQU9DLFdBQVksRUFBRSxHQUFJLElBQ3JESSxLQUFNLENBQUNMLGFBQWMsRUFBRSxJQUFNLEdBQUlDLFdBQVksQ0FBQyxFQUFHLE1BQ2pESyxNQUFPLENBQUNOLGFBQWMsQ0FBQyxFQUFHLEdBQUlDLFdBQVksQ0FBQyxFQUFHLE9BSTlDSCxHQUFhLElBQU1BLEVBQVksR0FDMUIsQ0FDTEMsS0FBTSxDQUFDQyxhQUFjLEVBQUUsR0FBSSxJQUFNQyxXQUFZLEVBQUUsS0FBTSxLQUNyREMsSUFBSyxDQUFDRixhQUFjLEVBQUUsSUFBTSxJQUFNQyxXQUFZLEVBQUUsSUFBSyxJQUNyREUsS0FBTSxDQUFDSCxhQUFjLEVBQUUsSUFBTSxLQUFPQyxXQUFZLEVBQUUsR0FBSSxJQUN0REcsR0FBSSxDQUFDSixhQUFjLEVBQUUsS0FBTyxLQUFPQyxXQUFZLEVBQUUsR0FBSSxJQUNyREksS0FBTSxDQUFDTCxhQUFjLEVBQUUsSUFBTSxHQUFJQyxXQUFZLENBQUMsRUFBRyxNQUNqREssTUFBTyxDQUFDTixhQUFjLENBQUMsRUFBRyxHQUFJQyxXQUFZLENBQUMsRUFBRyxPQUk5Q0gsR0FBYSxJQUFNQSxFQUFZLEdBQzFCLENBQ0xDLEtBQU0sQ0FBQ0MsYUFBYyxFQUFFLEdBQUksS0FBT0MsV0FBWSxFQUFFLEtBQU0sS0FDdERDLElBQUssQ0FBQ0YsYUFBYyxFQUFFLEtBQU8sS0FBT0MsV0FBWSxFQUFFLElBQUssS0FDdkRFLEtBQU0sQ0FBQ0gsYUFBYyxFQUFFLEtBQU8sS0FBT0MsV0FBWSxFQUFFLElBQUssSUFDeERHLEdBQUksQ0FBQ0osYUFBYyxFQUFFLEtBQU8sS0FBT0MsV0FBWSxFQUFFLEdBQUksSUFDckRJLEtBQU0sQ0FBQ0wsYUFBYyxFQUFFLElBQU0sR0FBSUMsV0FBWSxDQUFDLEVBQUcsTUFDakRLLE1BQU8sQ0FBQ04sYUFBYyxDQUFDLEVBQUcsR0FBSUMsV0FBWSxDQUFDLEVBQUcsT0FJOUNILEdBQWEsR0FBS0EsRUFBWSxHQUN6QixDQUNMQyxLQUFNLENBQUNDLGFBQWMsRUFBRSxHQUFJLElBQU1DLFdBQVksRUFBRSxLQUFNLEtBQ3JEQyxJQUFLLENBQUNGLGFBQWMsRUFBRSxJQUFNLEtBQU9DLFdBQVksRUFBRSxJQUFLLEtBQ3RERSxLQUFNLENBQUNILGFBQWMsRUFBRSxLQUFPLElBQU1DLFdBQVksRUFBRSxJQUFLLElBQ3ZERyxHQUFJLENBQUNKLGFBQWMsRUFBRSxJQUFNLEtBQU9DLFdBQVksRUFBRSxHQUFJLElBQ3BESSxLQUFNLENBQUNMLGFBQWMsRUFBRSxJQUFNLEdBQUlDLFdBQVksQ0FBQyxFQUFHLE1BQ2pESyxNQUFPLENBQUNOLGFBQWMsQ0FBQyxFQUFHLEdBQUlDLFdBQVksQ0FBQyxFQUFHLE9BSTlDSCxHQUFhLEdBQUtBLEVBQVksRUFDekIsQ0FDTEMsS0FBTSxDQUFDQyxhQUFjLEVBQUUsR0FBSSxLQUFPQyxXQUFZLEVBQUUsS0FBTSxLQUN0REMsSUFBSyxDQUFDRixhQUFjLEVBQUUsS0FBTyxJQUFNQyxXQUFZLEVBQUUsSUFBSyxLQUN0REUsS0FBTSxDQUFDSCxhQUFjLEVBQUUsSUFBTSxJQUFNQyxXQUFZLEVBQUUsSUFBSyxLQUN0REcsR0FBSSxDQUFDSixhQUFjLEVBQUUsSUFBTSxLQUFPQyxXQUFZLEVBQUUsSUFBSyxJQUNyREksS0FBTSxDQUFDTCxhQUFjLEVBQUUsSUFBTSxHQUFJQyxXQUFZLENBQUMsRUFBRyxNQUNqREssTUFBTyxDQUFDTixhQUFjLENBQUMsRUFBRyxHQUFJQyxXQUFZLENBQUMsRUFBRyxPQUczQyxDQUNMRixLQUFNLENBQUNDLGFBQWMsRUFBRSxHQUFJLElBQU1DLFdBQVksRUFBRSxLQUFNLEtBQ3JEQyxJQUFLLENBQUNGLGFBQWMsRUFBRSxJQUFNLElBQU1DLFdBQVksRUFBRSxJQUFLLEtBQ3JERSxLQUFNLENBQUNILGFBQWMsRUFBRSxJQUFNLElBQU1DLFdBQVksRUFBRSxJQUFLLEtBQ3RERyxHQUFJLENBQUNKLGFBQWMsRUFBRSxJQUFNLEtBQU9DLFdBQVksRUFBRSxJQUFLLElBQ3JESSxLQUFNLENBQUNMLGFBQWMsRUFBRSxJQUFNLEdBQUlDLFdBQVksQ0FBQyxFQUFHLE1BQ2pESyxNQUFPLENBQUNOLGFBQWMsQ0FBQyxFQUFHLEdBQUlDLFdBQVksQ0FBQyxFQUFHLE1BRWxELG1EQXc5QjBCLFNBQUNsZ0IsR0FDekIsSUFBTTdELEVBQVl1TixHQUFjMUosR0FDMUJxSCxFQUFLLEdBQUtsTCxFQUFVLEdBQ3BCbUwsRUFBSyxHQUFLbkwsRUFBVSxHQUd0QjZOLEVBQU0zQyxFQUNONEMsRUFBTTNDLEVBQ1YsT0FKZTZCLEdBQVduSixJQUt4QixLQUFLdkUsRUFBQUEsT0FBTzZOLFFBQ1ZVLEVBQU0sRUFDTkMsRUFBTTNDLEVBQ04sTUFFRixLQUFLN0wsRUFBQUEsT0FBTytOLFNBQ1ZRLEdBQU8zQyxFQUNQNEMsRUFBTTNDLEVBQ04sTUFFRixLQUFLN0wsRUFBQUEsT0FBTzhOLFdBQ1ZTLEVBQU0sRUFDTkMsRUFBTSxFQUNOLE1BRUYsS0FBS3hPLEVBQUFBLE9BQU9nTyxZQUNWTyxHQUFPM0MsRUFDUDRDLEVBQU0sRUFJVixNQUFPLENBQUMvSixFQUFHOEosRUFBSzdKLEVBQUc4SixFQUNyQiw0Q0E4U2tDLFNBQ2hDLzJDLEVBQ0E4M0MsR0FFQSxRQUZBLElBQUFBLElBQUFBLEVBQXFCLEtBRWhCOTNDLEVBQU0sT0FBTzAxQyxHQUFNLENBQUNvQyxFQUFrQkEsSUFDM0MsSUFBTW5uQyxFQUFPdW5DLEdBQWlCbDRDLEVBQU04M0MsR0FDOUJrTCxFQUFpQnROLEdBQU0sQ0FBQy9rQyxFQUFNQSxJQUVoQzI4QyxFQUFtQixHQWdDdkIsT0EvQkl0dEQsRUFBS3VCLGdCQUNQK3JELEVBQW1CdHRELEVBQUtHLFNBQVNrOUIsUUFBTyxTQUFDeGdDLEdBQ3ZDLE9BQUFvMUMsR0FBa0JwMUMsRUFBbEIsS0FJQW0xQyxHQUFZaHlDLEtBQ2RnakQsRUFBZXB5QyxTQUFRLFNBQUFnOEMsR0FBTyxPQUFBQSxFQUFJenZCLEtBQUssRUFBVCxJQUMxQm45QixFQUFLdUIsZUFDUHZCLEVBQUtHLFNBQVN5USxTQUFRLFNBQUMvVCxHQUNyQkEsRUFBRXdELE1BQU1zd0MsVUFBVS8vQixTQUFRLFNBQUN2VCxHQUN6QixJQUFNVCxFQUFJbXNDLEVBQVlwbkMsUUFBUXRFLEVBQUVFLE1BQU0sSUFDaEMrdkMsRUFBSXZFLEVBQVlwbkMsUUFBUXRFLEVBQUVFLE1BQU0sSUFDbENYLEdBQUssR0FBSzB3QyxHQUFLLEdBQUsxd0MsRUFBSStULEdBQVEyOEIsRUFBSTM4QixJQUN0Q3F5QyxFQUFlcG1ELEdBQUcwd0MsR0FBSyxFQUUzQixHQUNGLElBR0ZnZ0IsRUFBaUIxOEMsU0FBUSxTQUFDL1QsR0FDeEJBLEVBQUV3RCxNQUFNc3dDLFVBQVUvL0IsU0FBUSxTQUFDdlQsR0FDekIsSUFBTVQsRUFBSW1zQyxFQUFZcG5DLFFBQVF0RSxFQUFFRSxNQUFNLElBQ2hDK3ZDLEVBQUl2RSxFQUFZcG5DLFFBQVF0RSxFQUFFRSxNQUFNLElBQ2xDWCxHQUFLLEdBQUswd0MsR0FBSyxHQUFLMXdDLEVBQUkrVCxHQUFRMjhCLEVBQUkzOEIsSUFDdENxeUMsRUFBZXBtRCxHQUFHMHdDLEdBQUssRUFFM0IsR0FDRixLQUdLMFYsQ0FDVCxxQ0FoRWdELFNBQzlDaGpELEVBQ0E4M0MsR0FFQSxRQUZBLElBQUFBLElBQUFBLEVBQXFCLEtBRWhCOTNDLEVBQU0sT0FBTzAxQyxHQUFNLENBQUNvQyxFQUFrQkEsSUFDM0MsSUFBTW5uQyxFQUFPdW5DLEdBQWlCbDRDLEVBQU04M0MsR0FDOUJrTCxFQUFpQnROLEdBQU0sQ0FBQy9rQyxFQUFNQSxJQWNwQyxPQVpBcXlDLEVBQWVweUMsU0FBUSxTQUFBZzhDLEdBQU8sT0FBQUEsRUFBSXp2QixLQUFLLEVBQVQsSUFDMUJuOUIsRUFBS3VCLGVBQ1B2QixFQUFLRyxTQUFTeVEsU0FBUSxTQUFDL1QsR0FDckJBLEVBQUV3RCxNQUFNc3dDLFVBQVUvL0IsU0FBUSxTQUFDdlQsR0FDekIsSUFBTVQsRUFBSW1zQyxFQUFZcG5DLFFBQVF0RSxFQUFFRSxNQUFNLElBQ2hDK3ZDLEVBQUl2RSxFQUFZcG5DLFFBQVF0RSxFQUFFRSxNQUFNLElBQ2xDWCxHQUFLLEdBQUswd0MsR0FBSyxHQUFLMXdDLEVBQUkrVCxHQUFRMjhCLEVBQUkzOEIsSUFDdENxeUMsRUFBZXBtRCxHQUFHMHdDLEdBQUssRUFFM0IsR0FDRixJQUVLMFYsQ0FDVCw0RUE3ZGdDLFNBQzlCbFcsRUFDQTNELEVBQ0FGLEVBQ0Fza0IsRUFDQXZFLEVBQ0F3RSxRQUhBLElBQUF2a0IsSUFBQUEsRUFBYyxTQUNkLElBQUFza0IsSUFBQUEsRUFBVSxVQUNWLElBQUF2RSxJQUFBQSxFQUFXNWdCLEVBQUFBLEdBQUdtUSxPQUdkLElBQU10NUMsRUFBUzZoQyxZQUFVZ00sR0FDbkJzZixFQUFjMVYsR0FBZ0I1SixFQUFLM0QsRUFBUUYsR0FDM0N3TixFQUFTUixHQUFXbkosR0FxSTFCLE9BcElrQixTQUFDQSxHQUdqQixJQUZNLElBQUFsRCxFQUFBbnNDLEVBQVcydUQsRUFBWSxHQUFFLEdBQXhCbkUsRUFBRXJlLEVBQUEsR0FBRWllLE9BQ0xuYSxFQUFBandDLEVBQVcydUQsRUFBWSxHQUFFLEdBQXhCbEUsRUFBRXhhLEVBQUEsR0FBRW9hLE9BQ0ZsckQsRUFBSXFyRCxFQUFJcnJELEdBQUtzckQsRUFBSXRyRCxJQUN4QixJQUFLLElBQUkwd0MsRUFBSXVhLEVBQUl2YSxHQUFLd2EsRUFBSXhhLEtBRXRCbUosSUFBV2xPLEVBQUFBLE9BQU82TixVQUNoQng1QyxJQUFNc3JELEdBQU10ckQsRUFBSXFzQyxFQUFZLEdBQzNCcUUsSUFBTXdhLEdBQU14YSxFQUFJckUsRUFBWSxHQUM1QnJzQyxJQUFNcXJELEdBQU1yckQsRUFBSSxHQUNoQjB3QyxJQUFNdWEsR0FBTXZhLEVBQUksSUFJbkJtSixJQUFXbE8sRUFBQUEsT0FBTytOLFdBQ2hCMTVDLElBQU1xckQsR0FBTXJyRCxFQUFJLEdBQ2Ywd0MsSUFBTXdhLEdBQU14YSxFQUFJckUsRUFBWSxHQUM1QnJzQyxJQUFNc3JELEdBQU10ckQsRUFBSXFzQyxFQUFZLEdBQzVCcUUsSUFBTXVhLEdBQU12YSxFQUFJLElBSW5CbUosSUFBV2xPLEVBQUFBLE9BQU84TixhQUNoQno1QyxJQUFNc3JELEdBQU10ckQsRUFBSXFzQyxFQUFZLEdBQzNCcUUsSUFBTXVhLEdBQU12YSxFQUFJLEdBQ2hCMXdDLElBQU1xckQsR0FBTXJyRCxFQUFJLEdBQ2hCMHdDLElBQU13YSxHQUFNeGEsRUFBSXJFLEVBQVksSUFJL0J3TixJQUFXbE8sRUFBQUEsT0FBT2dPLGNBQ2hCMzVDLElBQU1xckQsR0FBTXJyRCxFQUFJLEdBQ2Ywd0MsSUFBTXVhLEdBQU12YSxFQUFJLEdBQ2hCMXdDLElBQU1zckQsR0FBTXRyRCxFQUFJcXNDLEVBQVksR0FDNUJxRSxJQUFNd2EsR0FBTXhhLEVBQUlyRSxFQUFZLElBR3RCd04sSUFBV2xPLEVBQU1BLE9BQUNBLFVBekIzQnVFLEVBQUlsd0MsR0FBRzB3QyxHQUFLMGIsRUE4QnBCLENBK0NBeUUsQ0FBVXh1RCxHQTlDUyxTQUFDNnRDLEdBcUJsQixJQXBCQSxJQUNNNGdCLEVBQWMxRSxFQUFPdUUsRUFDckIzakIsRUFBQW5zQyxFQUFXMnVELEVBQVksR0FBRSxHQUF4Qm5FLEVBQUVyZSxFQUFBLEdBQUVpZSxPQUNMbmEsRUFBQWp3QyxFQUFXMnVELEVBQVksR0FBRSxHQUF4QmxFLEVBQUV4YSxFQUFBLEdBQUVvYSxPQUdMNkYsRUFBZ0IzRSxJQUFTNWdCLEVBQUVBLEdBQUNtUSxNQUM1QnFWLEVBQVExRixFQUFLRCxFQUNiNEYsRUFBUS9GLEVBQUtELEVBS2JpRyxFQUNKejdDLEtBQUt1QyxPQUFPLElBQU1nNUMsRUFBUUMsR0FBUyxHQUFLSCxFQWRyQixHQW1CakJsN0IsRUFBUSxFQUNINTFCLEVBQUksRUFBR0EsRUFBSXFzQyxFQUFXcnNDLElBQzdCLElBQUssSUFBSTB3QyxFQUFJLEVBQUdBLEVBQUlyRSxFQUFXcUUsSUFDN0IsR0FBSTF3QyxFQUFJcXJELEdBQU1yckQsRUFBSXNyRCxHQUFNNWEsRUFBSXVhLEdBQU12YSxFQUFJd2EsRUFBSSxDQUN4Q3QxQixJQUNBLElBQUkwYSxFQUFLOUUsRUFBRUEsR0FBQ29nQixNQUNSL1IsSUFBV2xPLEVBQUFBLE9BQU82TixTQUFXSyxJQUFXbE8sRUFBQUEsT0FBTzhOLFdBQ2pEbkosRUFBS3lnQixJQUFrQm43QixHQUFTczdCLEVBQWMxbEIsRUFBQUEsR0FBR29RLE1BQVFwUSxFQUFFQSxHQUFDbVEsTUFFNUQ5QixJQUFXbE8sRUFBQUEsT0FBTytOLFVBQ2xCRyxJQUFXbE8sRUFBTUEsT0FBQ2dPLGNBRWxCckosRUFBS3lnQixJQUFrQm43QixHQUFTczdCLEVBQWMxbEIsRUFBQUEsR0FBR21RLE1BQVFuUSxFQUFFQSxHQUFDb1EsUUFFekQ1N0MsRUFBSTB3QyxHQUFLLEdBQU0sR0FBS2o3QixLQUFLNHhDLElBQUl6eEIsRUFBUXM3QixHQUFlN2tCLElBQ3ZEaUUsRUFBSzlFLEVBQUVBLEdBQUNvZ0IsT0FHVjFiLEVBQUlsd0MsR0FBRzB3QyxHQUFLSixDQUNiLENBR1AsQ0FLQTZnQixDQUFXOXVELEdBMENKQSxDQUNULHlCQWlZb0MsU0FDbENlLEVBQ0FndUQsRUFDQWxXLFFBREEsSUFBQWtXLElBQUFBLEVBQW1ELGVBQ25ELElBQUFsVyxJQUFBQSxFQUFxQixJQUVyQixJQUFNOUQsRUFBTTZELEdBQWlCNzNDLEdBQ3RCOHNDLEVBQWVrSCxFQUFHbEgsSUFBYnNMLEVBQVVwRSxFQUFHb0UsT0FDbkJ6bkMsRUFBT3VuQyxHQUFpQmw0QyxFQUFNODNDLEdBOEJwQyxPQTVCSTkzQyxFQUFLdUIsZUFDUHZCLEVBQUtHLFNBQVN5USxTQUFRLFNBQUMvVCxHQUNyQkEsRUFBRXdELE1BQU1zd0MsVUFBVS8vQixTQUFRLFNBQUN2VCxHQUN6QixJQUFNVCxFQUFJbXNDLEVBQVlwbkMsUUFBUXRFLEVBQUVFLE1BQU0sSUFDaEMrdkMsRUFBSXZFLEVBQVlwbkMsUUFBUXRFLEVBQUVFLE1BQU0sSUFDdEMsS0FBSVgsRUFBSSxHQUFLMHdDLEVBQUksSUFDYjF3QyxFQUFJK1QsR0FBUTI4QixFQUFJMzhCLEVBQU0sQ0FDeEIsSUFBSStuQyxFQUFPOVAsRUFBTUEsT0FBQ29kLFlBR2xCLEdBRkk1UyxHQUFZdjJDLEtBQUk2N0MsRUFBTzlQLEVBQU1BLE9BQUNtZCxjQUM5Qi9TLEdBQVluMkMsS0FBSTY3QyxFQUFPOVAsRUFBTUEsT0FBQ2tkLGNBQzlCaFosRUFBSWx3QyxHQUFHMHdDLEtBQU9sRixFQUFBQSxHQUFHb2dCLE1BQ25CLE9BQVF3RixHQUNOLElBQUssVUFDSDVWLEVBQU94N0MsR0FBRzB3QyxHQUFLb0wsRUFBTyxJQUFNTixFQUFPeDdDLEdBQUcwd0MsR0FDdEMsTUFDRixJQUFLLFVBQ0g4SyxFQUFPeDdDLEdBQUcwd0MsR0FBS29MLEVBQ2YsTUFFRixRQUNFTixFQUFPeDdDLEdBQUcwd0MsSUFBTSxJQUFNb0wsRUFHN0IsQ0FDSCxHQUNGLElBR0tOLENBQ1Qsa0VBcDRCbUMsU0FDakM1RCxFQUNBQyxFQUNBakQsRUFDQTE3QixHQUVBLFFBSEEsSUFBQTA3QixJQUFBQSxFQUFTLFFBQ1QsSUFBQTE3QixJQUFBQSxHQUFlLElBRVYwK0IsSUFBYUMsRUFBVSxNQUFPLEdBQ25DLElBQUlRLEVBQVVELEdBQWdCUixFQUFVQyxHQUNwQzMrQixJQUFTbS9CLEdBQVdBLEdBQ3hCLElBQU1nWixFQUFlaFosRUFBUXhELFFBQVFELEdBRXJDLE9BQU95RCxHQUFXLEVBQUksSUFBQTUyQyxPQUFJNHZELEVBQVksS0FBTSxHQUFHNXZELE9BQUE0dkQsTUFDakQsa0VBeEVpQyxTQUFDQyxFQUFZcmdELFFBQUEsSUFBQUEsSUFBQUEsRUFBVSxHQUN0RCxJQUFJbW1DLEVBQU05Z0IsUUFBTWc3QixHQUNoQmxhLEVBQU1BLEVBQUl0akMsS0FBSSxTQUFDL1QsR0FBVyxPQUFBbzNDLEdBQVVwM0MsRUFBR2tSLEVBQWIsSUFDMUIsSUFBTXNnRCxFQUFTLGtCQUFBOXZELE9BQ2IsR0FBS3dQLGlJQUVIMmtCLEVBQVEsRUFDUjQ3QixFQUFPLEdBYVgsT0FaQUYsRUFBTXQ5QyxTQUFRLFNBQUN5ZSxFQUFXM3VCLEdBQ3BCMnVCLEVBQUssS0FBTysrQixFQUFLLEtBQ0gsTUFBWi8rQixFQUFLLElBQ1Aya0IsRUFBSXJ6QyxPQUFPRCxFQUFROHhCLEVBQU8sRUFBRyxTQUM3QkEsR0FBUyxJQUVUd2hCLEVBQUlyekMsT0FBT0QsRUFBUTh4QixFQUFPLEVBQUcsU0FDN0JBLEdBQVMsSUFHYjQ3QixFQUFPLytCLENBQ1QsSUFDTyxHQUFBaHhCLE9BQUc4dkQsR0FBTTl2RCxPQUFHMjFDLEVBQUl2cUMsS0FBSyxLQUFJLElBQ2xDLDZCQXZCd0MsU0FBQzZuQixHQUFjLE9BQVUsSUFBVEEsRUFBYSxJQUFNLEdBQUssaUJBcVFwRCxTQUMxQnZtQixFQUNBc2pELEdBR0EsSUFEQSxJQUFJcnVELEVBQU84Z0MsWUFBVS8xQixHQUNkL0ssR0FBUUEsRUFBS3VCLGVBQWlELElBQWhDdkIsRUFBS0ssTUFBTXN3QyxVQUFVNXpDLFNBQ3hEaUQsRUFBT0EsRUFBS0csU0FBUyxJQUNoQkEsU0FBVyxHQUdsQixHQUFJa3VELEVBQ0YsS0FBT3J1RCxHQUFRQSxFQUFLRSxTQUFXRixFQUFLc0IsVUFDbEN0QixFQUFPQSxFQUFLRSxPQUloQixPQUFPRixDQUNULGFBOHFCd0IsU0FBQ0EsR0FFdkIsSUFDTXN1RCxFQURPdHVELEVBQUs0QixVQUFVLEdBQ1J2QixNQUFNd3dDLFVBQVU3YixNQUFLLFNBQUNuNUIsR0FBZ0IsTUFBWSxPQUFaQSxFQUFFd3ZDLEtBQWMsSUFDdEVrakIsR0FBdUIsRUFDdkJDLEdBQXFCLEVBQ3JCQyxHQUFxQixFQUVuQkMsR0FBS0osYUFBQSxFQUFBQSxFQUFRL3dELFFBQVMsSUFvQjVCLE9BbkJJbXhELElBQ1MsTUFBUEEsR0FDRkQsR0FBcUIsRUFDckJELEdBQXFCLEVBQ3JCRCxHQUF1QixHQUNQLE1BQVBHLEdBQ1RELEdBQXFCLEVBQ3JCRCxHQUFxQixFQUNyQkQsR0FBdUIsR0FDUCxNQUFQRyxHQUNURCxHQUFxQixFQUNyQkQsR0FBcUIsRUFDckJELEdBQXVCLEdBQ1AsTUFBUEcsSUFDVEQsR0FBcUIsRUFDckJELEdBQXFCLEVBQ3JCRCxHQUF1QixJQUdwQixDQUFDQSxxQkFBb0JBLEVBQUVDLHFCQUFvQkMsbUJBQWtCQSxFQUN0RSxrREExMEJpQyxTQUMvQjV4RCxHQUVBLElBQU04eEQsRUFBTTl4RCxFQUFFd0QsTUFBTTZ3QyxZQUFZbGMsTUFBSyxTQUFDbjVCLEdBQWtCLE1BQVksUUFBWkEsRUFBRXd2QyxLQUFlLElBQ3pFLE9BQU9zakIsZUFBQUEsRUFBS3B4RCxLQUNkLHFDQWIwQixTQUFDVixHQUN6QixJQUFNK3hELEVBQU0veEQsRUFBRXdELE1BQU02d0MsWUFBWWxjLE1BQUssU0FBQ241QixHQUFrQixNQUFZLFFBQVpBLEVBQUV3dkMsS0FBZSxJQUN6RSxHQUFLdWpCLEVBR0wsT0FGYWxKLEtBQUt0a0QsTUFBTXd0RCxFQUFJcnhELE1BRzlCLGNBU3lCLFNBQUNWLEdBQ3hCLElBQU1neUQsRUFBS2h5RCxFQUFFd0QsTUFBTTZ3QyxZQUFZbGMsTUFBSyxTQUFDbjVCLEdBQWtCLE1BQVksT0FBWkEsRUFBRXd2QyxLQUFjLElBQ3ZFLEdBQUt3akIsRUFHTCxPQUZhbkosS0FBS3RrRCxNQUFNeXRELEVBQUd0eEQsTUFHN0IsNEJBdy9CeUIsU0FBQ3lDLEVBQStCcXJDLEdBQ3ZELE9BQUlYLEVBQWU3c0IsU0FBU3d0QixHQUNuQnJyQyxFQUFLSyxNQUFNc3dDLFVBQVV0VCxRQUFPLFNBQUN4aEMsR0FBZ0IsT0FBQUEsRUFBRXd2QyxRQUFVQSxDQUFLLElBRW5FVCxFQUEwQi9zQixTQUFTd3RCLEdBQzlCcnJDLEVBQUtLLE1BQU0yd0Msb0JBQW9CM1QsUUFDcEMsU0FBQ3hoQyxHQUEwQixPQUFBQSxFQUFFd3ZDLFFBQVVBLENBQUssSUFHNUNSLEVBQTBCaHRCLFNBQVN3dEIsR0FDOUJyckMsRUFBS0ssTUFBTTR3QyxvQkFBb0I1VCxRQUNwQyxTQUFDeGhDLEdBQTBCLE9BQUFBLEVBQUV3dkMsUUFBVUEsQ0FBSyxJQUc1Q04sRUFBZWx0QixTQUFTd3RCLEdBQ25CcnJDLEVBQUtLLE1BQU13d0MsVUFBVXhULFFBQU8sU0FBQ3hoQyxHQUFnQixPQUFBQSxFQUFFd3ZDLFFBQVVBLENBQUssSUFFbkVWLEVBQWdCOXNCLFNBQVN3dEIsR0FDcEJyckMsRUFBS0ssTUFBTXV3QyxXQUFXdlQsUUFBTyxTQUFDeGhDLEdBQWlCLE9BQUFBLEVBQUV3dkMsUUFBVUEsQ0FBSyxJQUVyRVAsRUFBaUJqdEIsU0FBU3d0QixHQUNyQnJyQyxFQUFLSyxNQUFNeXdDLFlBQVl6VCxRQUFPLFNBQUN4aEMsR0FBa0IsT0FBQUEsRUFBRXd2QyxRQUFVQSxDQUFLLElBRXZFTCxFQUFvQm50QixTQUFTd3RCLEdBQ3hCcnJDLEVBQUtLLE1BQU0wd0MsY0FBYzFULFFBQzlCLFNBQUN4aEMsR0FBb0IsT0FBQUEsRUFBRXd2QyxRQUFVQSxDQUFLLElBR25DLEVBQ1QsWUFFdUIsU0FDckJyckMsRUFDQTh1RCxFQUNBQyxFQUNBQyxFQUNBQyxHQUVBLElBQUlDLEVBQ0V0dEQsRUFBVSxTQUFDNUIsR0FDZixJQUFNbXZELEVBQVUxeUIsRUFBT0EsUUFDckJ6OEIsRUFBSzRCLFVBQVU4TyxLQUFJLFNBQUE3VCxHQUFLLElBQUErc0MsRUFBQSxPQUFvQixVQUFwQi9zQyxFQUFFd0QsTUFBTXN3QyxVQUFVLFVBQUUsSUFBQS9HLE9BQUEsRUFBQUEsRUFBRWozQixVQUFVLEtBQ3hEbEosS0FBSyxLQUNQLE9BQU8wbEQsQ0FDVCxFQUVNQyxFQUFjLFNBQUNwdkQsR0FDbkIsSUFBSUEsRUFBS3VCLGNBQVQsQ0FFQSxJQUFNTSxFQUFPRCxFQUFRNUIsR0FDakJreUMsR0FBWWx5QyxHQUNWOHVELEdBQVNBLEVBQVFqdEQsR0FDWnd3QyxHQUFjcnlDLEdBQ25CZ3ZELEdBQVdBLEVBQVVudEQsR0FFckJrdEQsR0FBU0EsRUFBUWx0RCxFQVJRLENBVWpDLEVBRUEsR0FBSTdCLEVBQUt1QixjQUFlLENBQ3RCLElBQU04dEQsRUFBYXJ2RCxFQUFLRyxTQUFTazlCLFFBQU8sU0FBQ3hnQyxHQUN2QyxPQUFBbTJDLEdBQVluMkMsRUFBWixJQUVJeXlELEVBQWF0dkQsRUFBS0csU0FBU2s5QixRQUFPLFNBQUN4Z0MsR0FDdkMsT0FBQXUyQyxHQUFZdjJDLEVBQVosSUFFSTB5RCxFQUFldnZELEVBQUtHLFNBQVNrOUIsUUFBTyxTQUFDeGdDLEdBQ3pDLE9BQUFzMkMsR0FBY3QyQyxFQUFkLElBR0ZxeUQsRUFBV2x2RCxFQUVQZ3pDLEdBQVloekMsSUFBU3F2RCxFQUFXdHlELE9BQVMsRUFDM0NteUQsRUFBVzlxQixFQUFBQSxPQUFPaXJCLEdBQ1RqYyxHQUFZcHpDLElBQVNzdkQsRUFBV3Z5RCxPQUFTLEVBQ2xEbXlELEVBQVc5cUIsRUFBQUEsT0FBT2tyQixHQUNUbmMsR0FBY29jLElBQWlCQSxFQUFheHlELE9BQVMsRUFDOURteUQsRUFBVzlxQixFQUFBQSxPQUFPbXJCLEdBQ1RyZCxHQUFZbHlDLEdBQ3JCOHVELEVBQVFsdEQsRUFBUXN0RCxJQUVoQkgsRUFBUW50RCxFQUFRc3RELElBRWxCRSxFQUFZRixFQUNiLE1BQ0NFLEVBQVlwdkQsR0FFZCxPQUFPa3ZELENBQ1QsMEZBOEIwQyxTQUN4QzFnQixFQUNBeUssUUFBQSxJQUFBQSxJQUFBQSxFQUF1QjdRLEVBQUFBLEdBQUdtUSxPQUUxQixJQUFNaVgsRUFBWSxJQUFJNWdCLEdBQUlKLEdBSTFCLE9BSElnaEIsRUFBVXprRCxNQUNaaXVDLEdBQTRCd1csRUFBVXprRCxLQUFNa3VDLEdBQzlDSSxRQUFRQyxLQUFLLDhCQUErQkwsR0FDckNBLENBQ1QseUJBcjRDb0MsU0FBQ3dXLEdBQ25DLE1BQUksVUFBVWovQyxLQUFLaS9DLEVBQUV0bEMsSUFDWnU3QixLQUFLdGtELE1BQU1xdUQsRUFBRXRsQyxJQUFJdkQsUUFBUSxHQUUzQixFQUNULGlCQWdXNEIsU0FBQzdiLEdBQzNCLElBQUkya0QsRUFBVzNrRCxFQU1mLE9BTEFBLEVBQUs5SSxNQUFLLFNBQUFqQyxHQUdSLE9BREEwdkQsRUFBVzF2RCxHQUNKLENBQ1QsSUFDTzB2RCxFQUFTcnZELE1BQU1LLEtBQ3hCLGlEQXFCdUIsU0FBQ1YsR0FFdEIsSUFEQSxJQUFJK0ssRUFBTy9LLEVBQ0orSyxHQUFRQSxFQUFLN0ssU0FBVzZLLEVBQUt6SixVQUNsQ3lKLEVBQU9BLEVBQUs3SyxPQUVkLE9BQU82SyxDQUNULGVBaWIwQixTQUN4QitoQyxFQUNBbHdDLEVBQ0Ewd0MsRUFDQTBiLEVBQ0ExWixFQUNBcWdCLEdBRUEsR0FBSTNHLElBQVM1Z0IsRUFBQUEsR0FBR29nQixNQUNoQixHQUFJbGEsR0FBUXhCLEVBQUtsd0MsRUFBRzB3QyxFQUFHMGIsR0FBTyxDQUU1QixJQUFNenJELEVBQVF3ckMsRUFBWW5zQyxHQUFLbXNDLEVBQVl1RSxHQUNyQ2pDLEVBQVEyZCxJQUFTNWdCLEVBQUFBLEdBQUdtUSxNQUFRLElBQU0sSUFDbENxWCxFQUFNbGYsR0FBUXBCLEVBQWEsQ0FBQzVELEVBQVN6dEMsS0FBSyxHQUFBSSxPQUFHZ3RDLEVBQVMsS0FBQWh0QyxPQUFBZCxVQUN0RDR1RCxFQUFXN2MsRUFBWW52QyxTQUFTazlCLFFBQ3BDLFNBQUN4Z0MsR0FBVyxPQUFBQSxFQUFFd0QsTUFBTThwQixLQUFPeWxDLENBQUcsSUFFNUI1dkQsU0FDQW1zRCxFQUFTcHZELE9BQVMsRUFDcEJpRCxFQUFPbXNELEVBQVMsSUFFaEJuc0QsRUFBT3UxQyxHQUFjLEdBQUdsM0MsT0FBQWd0QyxFQUFTLEtBQUFodEMsT0FBQWQsRUFBUSxLQUFFK3hDLEdBQzNDQSxFQUFZL3VDLFNBQVNQLElBRW5CMnZELEdBQWFBLEVBQVkzdkQsR0FBTSxFQUNwQyxNQUNLMnZELEdBQWFBLEVBQVlyZ0IsR0FBYSxFQUU5Qyw2Q0F6Z0NzQyxTQUNwQ3R2QyxFQUNBbUIsRUFDQXN4QyxFQUNBQyxHQUVBLFFBSkEsSUFBQXZ4QyxJQUFBQSxFQUFrQ3duQyxFQUFBQSxzQkFBc0JtSyxNQUluREUsR0FBWWh6QyxHQUFPLE9BQU8sRUFFL0IsSUFBTTZCLEVBQU80d0MsUUFBQUEsRUFBWXp5QyxFQUFLNEIsVUFDeEJneEMsRUFBaUJGLFFBQUFBLEVBQWExeUMsRUFBSzRDLEtBQUksV0FBTSxPQUFBLENBQUksSUFFbkQzRCxFQUFTLEdBQ2IsT0FBUWtDLEdBQ04sS0FBS3duQyxFQUFxQkEsc0JBQUNnSyxLQUN6QjF6QyxFQUFTMnpDLEVBQWV2VixRQUFPLFNBQUF4Z0MsR0FBSyxPQUFBQSxFQUFFbUYsV0FBYSxDQUFmLElBQ3BDLE1BQ0YsS0FBSzJtQyxFQUFxQkEsc0JBQUNtSyxJQUN6Qjd6QyxFQUFTNEMsRUFBS3c3QixRQUFPLFNBQUF4Z0MsR0FBSyxPQUFBQSxFQUFFbUYsV0FBYSxDQUFmLElBQzFCLE1BQ0YsS0FBSzJtQyxFQUFxQkEsc0JBQUNvSyxLQUN6Qjl6QyxFQUFTNEMsRUFBS3hELE9BQU91MEMsR0FBZ0J2VixRQUFPLFNBQUF4Z0MsR0FBSyxPQUFBQSxFQUFFbUYsV0FBYSxDQUFDLElBSXJFLE9BQXlCLElBQWxCL0MsRUFBT2xDLE1BQ2hCLHFCQWxDZ0MsU0FDOUJpRCxFQUNBbUIsRUFDQXN4QyxFQUNBQyxHQUVBLFlBSkEsSUFBQXZ4QyxJQUFBQSxFQUFrQ3duQyxFQUFBQSxzQkFBc0JnSyxNQUlqREosR0FBT3Z5QyxFQUFNbXlDLEdBQWtCaHhDLEVBQVVzeEMsRUFBVUMsRUFDNUQseUhBNGQrQixTQUM3QjdCLEdBNkJBLFlBN0JBLElBQUFBLElBQUFBLEVBQUEsQ0FDRSxRQUNBLFFBQ0EsWUFDQSxvQkFDQSxTQUNBLFdBR3NCLElBQUlseEMsR0FDVnlCLE1BQU0sQ0FFdEIrb0IsR0FBSSxTQUNKaEksS0FBTSxFQUNOemhCLE1BQU8sRUFDUHdhLE9BQVEsRUFDUjIxQixVQUFXQSxFQUFVbmdDLEtBQUksU0FBQTdVLEdBQUssT0FBQXl3QyxFQUFTcnVDLEtBQUtwQyxNQUM1QzgwQyxVQUFXLEdBQ1hDLFdBQVksR0FDWkUsWUFBYSxHQUNiQyxjQUFlLEdBQ2ZDLG9CQUFxQixHQUNyQkMsb0JBQXFCLEdBQ3JCQyxZQUFhLElBT2pCLGlCQW5uQjRCLFNBQUNyMEMsRUFBNEJnekQsU0FDakRsQixFQUF5QixRQUFuQi9rQixFQUFBL3NDLEVBQUV3RCxNQUFNNndDLG1CQUFXLElBQUF0SCxPQUFBLEVBQUFBLEVBQUU1VSxNQUFLLFNBQUNuNUIsR0FBa0IsTUFBWSxRQUFaQSxFQUFFd3ZDLEtBQWUsSUFDMUUsT0FBT3NqQixhQUFHLEVBQUhBLEVBQUtweEQsU0FBVXN5RCxDQUN4QiwrRkFrVDBCLFNBQUM3dkQsR0FDekIsT0FBc0QsSUFBL0M2a0MsRUFBR0EsSUFBQzdrQyxFQUFLNEIsVUFBVThPLEtBQUksU0FBQTdULEdBQUssT0FBQUEsRUFBRW1GLFVBQVUsSUFDakQsdUVBL1QwQixTQUFDbkYsR0FDekIsT0FBT0EsRUFBRXdELE1BQU13d0MsVUFBVTl6QyxPQUFTLEdBQUtGLEVBQUV5RSxRQUMzQyw2RkEwWWlDLFNBQy9Cd3JDLEVBQ0FnakIsRUFDQUMsUUFEQSxJQUFBRCxJQUFBQSxFQUFXLFFBQ1gsSUFBQUMsSUFBQUEsRUFBVyxHQUdYLElBREEsSUFBTUMsRUFBVSxHQUNQcHpELEVBQUksRUFBR0EsRUFBSWt3QyxFQUFJL3ZDLE9BQVFILElBQzlCLElBQUssSUFBSTB3QyxFQUFJLEVBQUdBLEVBQUlSLEVBQUlsd0MsR0FBR0csT0FBUXV3QyxJQUFLLENBQ3RDLElBQU0vdkMsRUFBUXV2QyxFQUFJbHdDLEdBQUcwd0MsR0FDckIsR0FBYyxJQUFWL3ZDLEVBQWEsQ0FDZixJQUFNeXZDLEVBQUluRSxFQUFXanNDLEVBQUlrekQsR0FDbkI3aUIsRUFBSW5FLEVBQVd3RSxFQUFJeWlCLEdBQ25CNVQsRUFBa0IsSUFBVjUrQyxFQUFjLElBQU0sSUFDbEN5eUQsRUFBUW55RCxLQUFLLENBQUNzK0MsRUFBT25QLEVBQUlDLEdBQzFCLENBQ0YsQ0FFSCxPQUFPK2lCLENBQ1Qsa0JBeEM2QixTQUMzQmxqQixFQUNBZ2pCLEVBQ0FDLEdBRUEsSUFBSTl3RCxFQUFTLEdBQ2I2d0QsRUFBVUEsUUFBQUEsRUFBVyxFQUNyQkMsRUFBVUEsUUFBQUEsRUw5aUJzQixHSzhpQlVqakIsRUFBSS92QyxPQUM5QyxJQUFLLElBQUlILEVBQUksRUFBR0EsRUFBSWt3QyxFQUFJL3ZDLE9BQVFILElBQzlCLElBQUssSUFBSTB3QyxFQUFJLEVBQUdBLEVBQUlSLEVBQUlsd0MsR0FBR0csT0FBUXV3QyxJQUFLLENBQ3RDLElBQU0vdkMsRUFBUXV2QyxFQUFJbHdDLEdBQUcwd0MsR0FDckIsR0FBYyxJQUFWL3ZDLEVBQWEsQ0FDZixJQUFNeXZDLEVBQUluRSxFQUFXanNDLEVBQUlrekQsR0FDbkI3aUIsRUFBSW5FLEVBQVd3RSxFQUFJeWlCLEdBRXpCOXdELEdBQVUsVUFEYyxJQUFWMUIsRUFBYyxJQUFNLElBQ2hCLEtBQUFjLE9BQUkydUMsR0FBSTN1QyxPQUFBNHVDLE1BQzNCLENBQ0YsQ0FFSCxPQUFPaHVDLENBQ1QsOERBcEc2QixTQUMzQjRDLEVBQ0FpdUQsRUFDQUMsR0FVQSxZQVhBLElBQUFELElBQUFBLEVBQVcsUUFDWCxJQUFBQyxJQUFBQSxFQUFXLEdBRUdsdUQsRUFDWHc3QixRQUFPLFNBQUF4Z0MsR0FBSyxPQUFBQSxFQUFFd0QsTUFBTXN3QyxVQUFVNXpDLE9BQVMsS0FDdkMyVCxLQUFJLFNBQUE3VCxHQUNILElBQU00OEIsRUFBTzU4QixFQUFFd0QsTUFBTXN3QyxVQUFVLEdBQ3pCOGUsRUFBSTVtQixFQUFXRSxFQUFZcG5DLFFBQVE4M0IsRUFBS2w4QixNQUFNLElBQU11eUQsR0FDcER0MEQsRUFBSXN0QyxFQUFXQyxFQUFZcG5DLFFBQVE4M0IsRUFBS2w4QixNQUFNLElBQU13eUQsR0FDMUQsTUFBTyxDQUFDdDJCLEVBQUs0UixNQUFPb2tCLEVBQUlqMEQsRUFDMUIsR0FFSixrQkF0QzZCLFNBQUNxRyxHQUM1QixPQUFPQSxFQUFLNk8sS0FBSSxTQUFBN1QsR0FBSyxPQUFBQSxFQUFFd0QsTUFBTThwQixFQUFSLEdBQ3ZCLHdCQUVtQyxTQUNqQ3RvQixFQUNBaXVELEVBQ0FDLFFBREEsSUFBQUQsSUFBQUEsRUFBVyxRQUNYLElBQUFDLElBQUFBLEVBQVcsR0FFWCxJQUFNRSxFQUFRcHVELEVBQ1h3N0IsUUFBTyxTQUFBeGdDLEdBQUssT0FBQUEsRUFBRXdELE1BQU11d0MsV0FBVzd6QyxPQUFTLEtBQ3hDMlQsS0FBSSxTQUFBN1QsR0FDSCxPQUFPQSxFQUFFd0QsTUFBTXV3QyxXQUFXbGdDLEtBQUksU0FBQzRuQyxHQUM3QixPQUFPQSxFQUFNMXFDLE9BQU84QyxLQUFJLFNBQUMrNkIsR0FDdkIsSUFBTWdrQixFQUFJNW1CLEVBQVdFLEVBQVlwbkMsUUFBUThwQyxFQUFFLElBQU1xa0IsR0FDM0N0MEQsRUFBSXN0QyxFQUFXQyxFQUFZcG5DLFFBQVE4cEMsRUFBRSxJQUFNc2tCLEdBRWpELE1BQU8sQ0FEdUIsT0FBaEJ6WCxFQUFNak4sTUFBaUIsSUFBTSxJQUM1Qm9rQixFQUFJajBELEVBQ3JCLEdBQ0YsR0FDRixJQUNGLE9BQU9raUMsRUFBWUEsYUFBQ3V5QixFQUFNLEdBQUksRUFDaEMsYUF5RXdCLFNBQUNqakIsRUFBV0MsRUFBV0MsR0FDN0MsSUFBTWdqQixFQUFLbm5CLEVBQVlpRSxHQUNqQm1qQixFQUFLcG5CLEVBQVlrRSxHQUN2QixPQUFXLElBQVBDLEVBQWlCLEdBQ1YsSUFBUEEsRUFBaUIsS0FBSzd1QyxPQUFBNnhELEdBQUs3eEQsT0FBQTh4RCxRQUNuQixJQUFSampCLEVBQWtCLEtBQUs3dUMsT0FBQTZ4RCxHQUFLN3hELE9BQUE4eEQsT0FDekIsRUFDVCwyQ0E4RW1DLFNBQ2pDdGMsRUFDQS9HLEVBQ0F3WSxFQUNBcmMsR0FFQSxRQUZBLElBQUFBLElBQUFBLEVBQWMsSUFFRCxTQUFUNEssRUFBaUIsT0FBT0EsRUFDNUIsSUFBTTRSLEVBQVFDLEtBQUt0a0QsTUFBTWtrRCxFQUFTbjdCLElBQzVCeWYsRUFBUytNLEdBQWM3SixFQUFLMlksRUFBTTdPLEdBQUk2TyxFQUFNNU8sR0FBSTVOLEdBQS9DK0QsRUFBQ3BELEVBQUFvRCxFQUFFQyxFQUFDckQsRUFBQXFELEVBQ0xvSCxFQUFNeEwsRUFBV2xuQyxRQUFRa3lDLEVBQUssSUFBTTdHLEVBQ3BDc0gsRUFBTXhMLEVBQVdubkMsUUFBUStJLFNBQVNtcEMsRUFBS0MsT0FBTyxHQUFJLElBQU03RyxFQUM5RCxNQUFPLEdBQUE1dUMsT0FBR3dxQyxFQUFXd0wsSUFBT2gyQyxPQUFBeXFDLEVBQVd3TCxHQUN6QyxXQXZlc0IsU0FBQzdJLEVBQVc4RixFQUFXQyxHQUMzQyxZQURnQyxJQUFBRCxJQUFBQSxFQUFTLFFBQUUsSUFBQUMsSUFBQUEsRUFBUyxJQUMzQ24vQixLQUFLNnBCLE1BQVUsSUFBSnVQLEdBQVcsSUFBTzhGLEdBQU9FLFFBQVFELEVBQ3ZELHVDQW9XdUIsU0FBQzNGLEdBQ2hCLElBQUFqQyxFQUFTNkosR0FBUzVILEdBQWpCbUIsRUFBQ3BELEVBQUFvRCxFQUFFQyxFQUFDckQsRUFBQXFELEVBQ1gsT0FBT3BFLEVBQVdtRSxHQUFLbEUsRUFBV21FLEVBQ3BDLGtDQSt2QnVCSCxFQUFpQm9oQixFQUFpQmtDLFFBQUEsSUFBQUEsSUFBQUEsR0FBaUIsR0FDeEUsSUFBSXpZLEVBQVM3VyxZQUFVZ00sR0FDbkJ1akIsR0FBVyxFQXVCZixPQXRCQW5DLEVBQU10OUMsU0FBUSxTQUFBaTdCLEdBQ04sSUFBQWpDLEVBUUY2SixHQUFTNUgsR0FQWG1CLEVBQUNwRCxFQUFBb0QsRUFDREMsRUFBQ3JELEVBQUFxRCxFQUNEQyxPQU1Fa2pCLEVBQ0U5aEIsR0FBUXFKLEVBQVEzSyxFQUFHQyxFQUFHQyxLQUN4QnlLLEVBQU8zSyxHQUFHQyxHQUFLQyxFQUNmeUssRUFBU3RLLEdBQVlzSyxFQUFRM0ssRUFBR0MsR0FBSUMsR0FDcENtakIsR0FBVyxJQUdiMVksRUFBTzNLLEdBQUdDLEdBQUtDLEVBQ2ZtakIsR0FBVyxFQUVmLElBRU8sQ0FDTEMsWUFBYTNZLEVBQ2IwWSxTQUFRQSxFQUVaIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzAsMSwyLDMsNCwyNl19
