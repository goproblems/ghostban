/**
   * @license
   * author: BAI TIANLIANG
   * ghostban.js v3.0.0-alpha.138
   * Released under the MIT license.
   */
var ghostban=function(t){"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(t)}var n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},n(t,e)};function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}var o=function(){return o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},o.apply(this,arguments)};function i(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function a(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function u(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))}function l(t,e){var n=e.length;if(n>=2){var r=e.slice(0,n/2),o=e.slice(n/2,n);return function(t,e,n){var r=[],o=e.length,i=n.length;for(;o>0&&i>0;)t(e[0],n[0])<=0?(r.push(e.shift()),o--):(r.push(n.shift()),i--);o>0?r.push.apply(r,u([],a(e),!1)):r.push.apply(r,u([],a(n),!1));return r}(t,l(t,r),l(t,o))}return e.slice()}"function"==typeof SuppressedError&&SuppressedError;var s=function(){function t(t,e){this.children=[],this.config=t,this.model=e}return t.prototype.isRoot=function(){return void 0===this.parent},t.prototype.hasChildren=function(){return this.children.length>0},t.prototype.addChild=function(t){return c(this,t)},t.prototype.addChildAtIndex=function(t,e){if(this.config.modelComparatorFn)throw new Error("Cannot add child at index when using a comparator function.");var n=this.config.childrenPropertyName||"children";this.model[n]||(this.model[n]=[]);var r=this.model[n];if(e<0||e>this.children.length)throw new Error("Invalid index.");return t.parent=this,r.splice(e,0,t.model),this.children.splice(e,0,t),t},t.prototype.getPath=function(){for(var t=[],e=this;e;)t.unshift(e),e=e.parent;return t},t.prototype.getIndex=function(){return this.isRoot()?0:this.parent.children.indexOf(this)},t.prototype.setIndex=function(t){if(this.config.modelComparatorFn)throw new Error("Cannot set node index when using a comparator function.");if(this.isRoot()){if(0===t)return this;throw new Error("Invalid index.")}if(!this.parent)throw new Error("Node has no parent.");var e=this.parent.children,n=this.parent.model[this.config.childrenPropertyName||"children"],r=e.indexOf(this);if(t<0||t>=e.length)throw new Error("Invalid index.");return e.splice(t,0,e.splice(r,1)[0]),n.splice(t,0,n.splice(r,1)[0]),this},t.prototype.walk=function(t){var e=function(n){var r,o;if(!1===t(n))return!1;try{for(var a=i(n.children),u=a.next();!u.done;u=a.next()){var l=u.value;if(!1===e(l))return!1}}catch(t){r={error:t}}finally{try{u&&!u.done&&(o=a.return)&&o.call(a)}finally{if(r)throw r.error}}return!0};e(this)},t.prototype.first=function(t){var e;return this.walk((function(n){if(t(n))return e=n,!1})),e},t.prototype.all=function(t){var e=[];return this.walk((function(n){t(n)&&e.push(n)})),e},t.prototype.drop=function(){if(this.parent){var t=this.parent.children.indexOf(this);if(t>=0){this.parent.children.splice(t,1);var e=this.config.childrenPropertyName||"children";this.parent.model[e].splice(t,1)}this.parent=void 0}return this},t}();function c(t,e){var n=t.config.childrenPropertyName||"children";t.model[n]||(t.model[n]=[]);var r=t.model[n];if(e.parent=t,t.config.modelComparatorFn){var o=function(t,e,n){var r,o=e.length;for(r=0;r<o&&!(t(e[r],n)>0);r++);return r}(t.config.modelComparatorFn,r,e.model);r.splice(o,0,e.model),t.children.splice(o,0,e)}else r.push(e.model),t.children.push(e);return e}var f=function(){function t(t){void 0===t&&(t={}),this.config={childrenPropertyName:t.childrenPropertyName||"children",modelComparatorFn:t.modelComparatorFn}}return t.prototype.parse=function(t){var e,n;if("object"!=typeof t||null===t)throw new TypeError("Model must be of type object.");var r=new s(this.config,t),o=this.config.childrenPropertyName,a=t[o];if(Array.isArray(a)){this.config.modelComparatorFn&&(t[o]=l(this.config.modelComparatorFn,a));try{for(var u=i(t[o]),f=u.next();!f.done;f=u.next()){var h=f.value;c(r,this.parse(h))}}catch(t){e={error:t}}finally{try{f&&!f.done&&(n=u.return)&&n.call(u)}finally{if(e)throw e.error}}}return r},t}(),h="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},d={exports:{}};!function(t,n){(function(){var r,o="Expected a function",i="__lodash_hash_undefined__",a="__lodash_placeholder__",u=16,l=32,s=64,c=128,f=256,d=1/0,p=9007199254740991,v=NaN,g=4294967295,y=[["ary",c],["bind",1],["bindKey",2],["curry",8],["curryRight",u],["flip",512],["partial",l],["partialRight",s],["rearg",f]],m="[object Arguments]",_="[object Array]",b="[object Boolean]",C="[object Date]",P="[object Error]",w="[object Function]",k="[object GeneratorFunction]",T="[object Map]",A="[object Number]",x="[object Object]",S="[object Promise]",M="[object RegExp]",N="[object Set]",R="[object String]",D="[object Symbol]",B="[object WeakMap]",O="[object ArrayBuffer]",E="[object DataView]",W="[object Float32Array]",I="[object Float64Array]",L="[object Int8Array]",j="[object Int16Array]",F="[object Int32Array]",z="[object Uint8Array]",K="[object Uint8ClampedArray]",G="[object Uint16Array]",U="[object Uint32Array]",H=/\b__p \+= '';/g,q=/\b(__p \+=) '' \+/g,V=/(__e\(.*?\)|\b__t\)) \+\n'';/g,$=/&(?:amp|lt|gt|quot|#39);/g,Z=/[&<>"']/g,Y=RegExp($.source),J=RegExp(Z.source),X=/<%-([\s\S]+?)%>/g,Q=/<%([\s\S]+?)%>/g,tt=/<%=([\s\S]+?)%>/g,et=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,nt=/^\w*$/,rt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ot=/[\\^$.*+?()[\]{}|]/g,it=RegExp(ot.source),at=/^\s+/,ut=/\s/,lt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,st=/\{\n\/\* \[wrapped with (.+)\] \*/,ct=/,? & /,ft=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ht=/[()=,{}\[\]\/\s]/,dt=/\\(\\)?/g,pt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,vt=/\w*$/,gt=/^[-+]0x[0-9a-f]+$/i,yt=/^0b[01]+$/i,mt=/^\[object .+?Constructor\]$/,_t=/^0o[0-7]+$/i,bt=/^(?:0|[1-9]\d*)$/,Ct=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Pt=/($^)/,wt=/['\n\r\u2028\u2029\\]/g,kt="\\ud800-\\udfff",Tt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",At="\\u2700-\\u27bf",xt="a-z\\xdf-\\xf6\\xf8-\\xff",St="A-Z\\xc0-\\xd6\\xd8-\\xde",Mt="\\ufe0e\\ufe0f",Nt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Rt="['’]",Dt="["+kt+"]",Bt="["+Nt+"]",Ot="["+Tt+"]",Et="\\d+",Wt="["+At+"]",It="["+xt+"]",Lt="[^"+kt+Nt+Et+At+xt+St+"]",jt="\\ud83c[\\udffb-\\udfff]",Ft="[^"+kt+"]",zt="(?:\\ud83c[\\udde6-\\uddff]){2}",Kt="[\\ud800-\\udbff][\\udc00-\\udfff]",Gt="["+St+"]",Ut="\\u200d",Ht="(?:"+It+"|"+Lt+")",qt="(?:"+Gt+"|"+Lt+")",Vt="(?:['’](?:d|ll|m|re|s|t|ve))?",$t="(?:['’](?:D|LL|M|RE|S|T|VE))?",Zt="(?:"+Ot+"|"+jt+")"+"?",Yt="["+Mt+"]?",Jt=Yt+Zt+("(?:"+Ut+"(?:"+[Ft,zt,Kt].join("|")+")"+Yt+Zt+")*"),Xt="(?:"+[Wt,zt,Kt].join("|")+")"+Jt,Qt="(?:"+[Ft+Ot+"?",Ot,zt,Kt,Dt].join("|")+")",te=RegExp(Rt,"g"),ee=RegExp(Ot,"g"),ne=RegExp(jt+"(?="+jt+")|"+Qt+Jt,"g"),re=RegExp([Gt+"?"+It+"+"+Vt+"(?="+[Bt,Gt,"$"].join("|")+")",qt+"+"+$t+"(?="+[Bt,Gt+Ht,"$"].join("|")+")",Gt+"?"+Ht+"+"+Vt,Gt+"+"+$t,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Et,Xt].join("|"),"g"),oe=RegExp("["+Ut+kt+Tt+Mt+"]"),ie=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,ae=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],ue=-1,le={};le[W]=le[I]=le[L]=le[j]=le[F]=le[z]=le[K]=le[G]=le[U]=!0,le[m]=le[_]=le[O]=le[b]=le[E]=le[C]=le[P]=le[w]=le[T]=le[A]=le[x]=le[M]=le[N]=le[R]=le[B]=!1;var se={};se[m]=se[_]=se[O]=se[E]=se[b]=se[C]=se[W]=se[I]=se[L]=se[j]=se[F]=se[T]=se[A]=se[x]=se[M]=se[N]=se[R]=se[D]=se[z]=se[K]=se[G]=se[U]=!0,se[P]=se[w]=se[B]=!1;var ce={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},fe=parseFloat,he=parseInt,de="object"==e(h)&&h&&h.Object===Object&&h,pe="object"==("undefined"==typeof self?"undefined":e(self))&&self&&self.Object===Object&&self,ve=de||pe||Function("return this")(),ge=n&&!n.nodeType&&n,ye=ge&&t&&!t.nodeType&&t,me=ye&&ye.exports===ge,_e=me&&de.process,be=function(){try{var t=ye&&ye.require&&ye.require("util").types;return t||_e&&_e.binding&&_e.binding("util")}catch(t){}}(),Ce=be&&be.isArrayBuffer,Pe=be&&be.isDate,we=be&&be.isMap,ke=be&&be.isRegExp,Te=be&&be.isSet,Ae=be&&be.isTypedArray;function xe(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function Se(t,e,n,r){for(var o=-1,i=null==t?0:t.length;++o<i;){var a=t[o];e(r,a,n(a),t)}return r}function Me(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function Ne(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function Re(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function De(t,e){for(var n=-1,r=null==t?0:t.length,o=0,i=[];++n<r;){var a=t[n];e(a,n,t)&&(i[o++]=a)}return i}function Be(t,e){return!!(null==t?0:t.length)&&Ge(t,e,0)>-1}function Oe(t,e,n){for(var r=-1,o=null==t?0:t.length;++r<o;)if(n(e,t[r]))return!0;return!1}function Ee(t,e){for(var n=-1,r=null==t?0:t.length,o=Array(r);++n<r;)o[n]=e(t[n],n,t);return o}function We(t,e){for(var n=-1,r=e.length,o=t.length;++n<r;)t[o+n]=e[n];return t}function Ie(t,e,n,r){var o=-1,i=null==t?0:t.length;for(r&&i&&(n=t[++o]);++o<i;)n=e(n,t[o],o,t);return n}function Le(t,e,n,r){var o=null==t?0:t.length;for(r&&o&&(n=t[--o]);o--;)n=e(n,t[o],o,t);return n}function je(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var Fe=Ve("length");function ze(t,e,n){var r;return n(t,(function(t,n,o){if(e(t,n,o))return r=n,!1})),r}function Ke(t,e,n,r){for(var o=t.length,i=n+(r?1:-1);r?i--:++i<o;)if(e(t[i],i,t))return i;return-1}function Ge(t,e,n){return e==e?function(t,e,n){var r=n-1,o=t.length;for(;++r<o;)if(t[r]===e)return r;return-1}(t,e,n):Ke(t,He,n)}function Ue(t,e,n,r){for(var o=n-1,i=t.length;++o<i;)if(r(t[o],e))return o;return-1}function He(t){return t!=t}function qe(t,e){var n=null==t?0:t.length;return n?Ye(t,e)/n:v}function Ve(t){return function(e){return null==e?r:e[t]}}function $e(t){return function(e){return null==t?r:t[e]}}function Ze(t,e,n,r,o){return o(t,(function(t,o,i){n=r?(r=!1,t):e(n,t,o,i)})),n}function Ye(t,e){for(var n,o=-1,i=t.length;++o<i;){var a=e(t[o]);a!==r&&(n=n===r?a:n+a)}return n}function Je(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function Xe(t){return t?t.slice(0,gn(t)+1).replace(at,""):t}function Qe(t){return function(e){return t(e)}}function tn(t,e){return Ee(e,(function(e){return t[e]}))}function en(t,e){return t.has(e)}function nn(t,e){for(var n=-1,r=t.length;++n<r&&Ge(e,t[n],0)>-1;);return n}function rn(t,e){for(var n=t.length;n--&&Ge(e,t[n],0)>-1;);return n}var on=$e({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),an=$e({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function un(t){return"\\"+ce[t]}function ln(t){return oe.test(t)}function sn(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}function cn(t,e){return function(n){return t(e(n))}}function fn(t,e){for(var n=-1,r=t.length,o=0,i=[];++n<r;){var u=t[n];u!==e&&u!==a||(t[n]=a,i[o++]=n)}return i}function hn(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}function dn(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=[t,t]})),n}function pn(t){return ln(t)?function(t){var e=ne.lastIndex=0;for(;ne.test(t);)++e;return e}(t):Fe(t)}function vn(t){return ln(t)?function(t){return t.match(ne)||[]}(t):function(t){return t.split("")}(t)}function gn(t){for(var e=t.length;e--&&ut.test(t.charAt(e)););return e}var yn=$e({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var mn=function t(n){var h,ut=(n=null==n?ve:mn.defaults(ve.Object(),n,mn.pick(ve,ae))).Array,kt=n.Date,Tt=n.Error,At=n.Function,xt=n.Math,St=n.Object,Mt=n.RegExp,Nt=n.String,Rt=n.TypeError,Dt=ut.prototype,Bt=At.prototype,Ot=St.prototype,Et=n["__core-js_shared__"],Wt=Bt.toString,It=Ot.hasOwnProperty,Lt=0,jt=(h=/[^.]+$/.exec(Et&&Et.keys&&Et.keys.IE_PROTO||""))?"Symbol(src)_1."+h:"",Ft=Ot.toString,zt=Wt.call(St),Kt=ve._,Gt=Mt("^"+Wt.call(It).replace(ot,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ut=me?n.Buffer:r,Ht=n.Symbol,qt=n.Uint8Array,Vt=Ut?Ut.allocUnsafe:r,$t=cn(St.getPrototypeOf,St),Zt=St.create,Yt=Ot.propertyIsEnumerable,Jt=Dt.splice,Xt=Ht?Ht.isConcatSpreadable:r,Qt=Ht?Ht.iterator:r,ne=Ht?Ht.toStringTag:r,oe=function(){try{var t=pi(St,"defineProperty");return t({},"",{}),t}catch(t){}}(),ce=n.clearTimeout!==ve.clearTimeout&&n.clearTimeout,de=kt&&kt.now!==ve.Date.now&&kt.now,pe=n.setTimeout!==ve.setTimeout&&n.setTimeout,ge=xt.ceil,ye=xt.floor,_e=St.getOwnPropertySymbols,be=Ut?Ut.isBuffer:r,Fe=n.isFinite,$e=Dt.join,_n=cn(St.keys,St),bn=xt.max,Cn=xt.min,Pn=kt.now,wn=n.parseInt,kn=xt.random,Tn=Dt.reverse,An=pi(n,"DataView"),xn=pi(n,"Map"),Sn=pi(n,"Promise"),Mn=pi(n,"Set"),Nn=pi(n,"WeakMap"),Rn=pi(St,"create"),Dn=Nn&&new Nn,Bn={},On=Fi(An),En=Fi(xn),Wn=Fi(Sn),In=Fi(Mn),Ln=Fi(Nn),jn=Ht?Ht.prototype:r,Fn=jn?jn.valueOf:r,zn=jn?jn.toString:r;function Kn(t){if(ru(t)&&!qa(t)&&!(t instanceof qn)){if(t instanceof Hn)return t;if(It.call(t,"__wrapped__"))return zi(t)}return new Hn(t)}var Gn=function(){function t(){}return function(e){if(!nu(e))return{};if(Zt)return Zt(e);t.prototype=e;var n=new t;return t.prototype=r,n}}();function Un(){}function Hn(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=r}function qn(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=g,this.__views__=[]}function Vn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function $n(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Zn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Yn(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new Zn;++e<n;)this.add(t[e])}function Jn(t){var e=this.__data__=new $n(t);this.size=e.size}function Xn(t,e){var n=qa(t),r=!n&&Ha(t),o=!n&&!r&&Ya(t),i=!n&&!r&&!o&&fu(t),a=n||r||o||i,u=a?Je(t.length,Nt):[],l=u.length;for(var s in t)!e&&!It.call(t,s)||a&&("length"==s||o&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||Ci(s,l))||u.push(s);return u}function Qn(t){var e=t.length;return e?t[Yr(0,e-1)]:r}function tr(t,e){return Ii(Do(t),sr(e,0,t.length))}function er(t){return Ii(Do(t))}function nr(t,e,n){(n!==r&&!Ka(t[e],n)||n===r&&!(e in t))&&ur(t,e,n)}function rr(t,e,n){var o=t[e];It.call(t,e)&&Ka(o,n)&&(n!==r||e in t)||ur(t,e,n)}function or(t,e){for(var n=t.length;n--;)if(Ka(t[n][0],e))return n;return-1}function ir(t,e,n,r){return pr(t,(function(t,o,i){e(r,t,n(t),i)})),r}function ar(t,e){return t&&Bo(e,Bu(e),t)}function ur(t,e,n){"__proto__"==e&&oe?oe(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function lr(t,e){for(var n=-1,o=e.length,i=ut(o),a=null==t;++n<o;)i[n]=a?r:Su(t,e[n]);return i}function sr(t,e,n){return t==t&&(n!==r&&(t=t<=n?t:n),e!==r&&(t=t>=e?t:e)),t}function cr(t,e,n,o,i,a){var u,l=1&e,s=2&e,c=4&e;if(n&&(u=i?n(t,o,i,a):n(t)),u!==r)return u;if(!nu(t))return t;var f=qa(t);if(f){if(u=function(t){var e=t.length,n=new t.constructor(e);e&&"string"==typeof t[0]&&It.call(t,"index")&&(n.index=t.index,n.input=t.input);return n}(t),!l)return Do(t,u)}else{var h=yi(t),d=h==w||h==k;if(Ya(t))return Ao(t,l);if(h==x||h==m||d&&!i){if(u=s||d?{}:_i(t),!l)return s?function(t,e){return Bo(t,gi(t),e)}(t,function(t,e){return t&&Bo(e,Ou(e),t)}(u,t)):function(t,e){return Bo(t,vi(t),e)}(t,ar(u,t))}else{if(!se[h])return i?t:{};u=function(t,e,n){var r=t.constructor;switch(e){case O:return xo(t);case b:case C:return new r(+t);case E:return function(t,e){var n=e?xo(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case W:case I:case L:case j:case F:case z:case K:case G:case U:return So(t,n);case T:return new r;case A:case R:return new r(t);case M:return function(t){var e=new t.constructor(t.source,vt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case N:return new r;case D:return o=t,Fn?St(Fn.call(o)):{}}var o}(t,h,l)}}a||(a=new Jn);var p=a.get(t);if(p)return p;a.set(t,u),lu(t)?t.forEach((function(r){u.add(cr(r,e,n,r,t,a))})):ou(t)&&t.forEach((function(r,o){u.set(o,cr(r,e,n,o,t,a))}));var v=f?r:(c?s?ui:ai:s?Ou:Bu)(t);return Me(v||t,(function(r,o){v&&(r=t[o=r]),rr(u,o,cr(r,e,n,o,t,a))})),u}function fr(t,e,n){var o=n.length;if(null==t)return!o;for(t=St(t);o--;){var i=n[o],a=e[i],u=t[i];if(u===r&&!(i in t)||!a(u))return!1}return!0}function hr(t,e,n){if("function"!=typeof t)throw new Rt(o);return Bi((function(){t.apply(r,n)}),e)}function dr(t,e,n,r){var o=-1,i=Be,a=!0,u=t.length,l=[],s=e.length;if(!u)return l;n&&(e=Ee(e,Qe(n))),r?(i=Oe,a=!1):e.length>=200&&(i=en,a=!1,e=new Yn(e));t:for(;++o<u;){var c=t[o],f=null==n?c:n(c);if(c=r||0!==c?c:0,a&&f==f){for(var h=s;h--;)if(e[h]===f)continue t;l.push(c)}else i(e,f,r)||l.push(c)}return l}Kn.templateSettings={escape:X,evaluate:Q,interpolate:tt,variable:"",imports:{_:Kn}},Kn.prototype=Un.prototype,Kn.prototype.constructor=Kn,Hn.prototype=Gn(Un.prototype),Hn.prototype.constructor=Hn,qn.prototype=Gn(Un.prototype),qn.prototype.constructor=qn,Vn.prototype.clear=function(){this.__data__=Rn?Rn(null):{},this.size=0},Vn.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Vn.prototype.get=function(t){var e=this.__data__;if(Rn){var n=e[t];return n===i?r:n}return It.call(e,t)?e[t]:r},Vn.prototype.has=function(t){var e=this.__data__;return Rn?e[t]!==r:It.call(e,t)},Vn.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=Rn&&e===r?i:e,this},$n.prototype.clear=function(){this.__data__=[],this.size=0},$n.prototype.delete=function(t){var e=this.__data__,n=or(e,t);return!(n<0)&&(n==e.length-1?e.pop():Jt.call(e,n,1),--this.size,!0)},$n.prototype.get=function(t){var e=this.__data__,n=or(e,t);return n<0?r:e[n][1]},$n.prototype.has=function(t){return or(this.__data__,t)>-1},$n.prototype.set=function(t,e){var n=this.__data__,r=or(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},Zn.prototype.clear=function(){this.size=0,this.__data__={hash:new Vn,map:new(xn||$n),string:new Vn}},Zn.prototype.delete=function(t){var e=hi(this,t).delete(t);return this.size-=e?1:0,e},Zn.prototype.get=function(t){return hi(this,t).get(t)},Zn.prototype.has=function(t){return hi(this,t).has(t)},Zn.prototype.set=function(t,e){var n=hi(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},Yn.prototype.add=Yn.prototype.push=function(t){return this.__data__.set(t,i),this},Yn.prototype.has=function(t){return this.__data__.has(t)},Jn.prototype.clear=function(){this.__data__=new $n,this.size=0},Jn.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Jn.prototype.get=function(t){return this.__data__.get(t)},Jn.prototype.has=function(t){return this.__data__.has(t)},Jn.prototype.set=function(t,e){var n=this.__data__;if(n instanceof $n){var r=n.__data__;if(!xn||r.length<199)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new Zn(r)}return n.set(t,e),this.size=n.size,this};var pr=Wo(Pr),vr=Wo(wr,!0);function gr(t,e){var n=!0;return pr(t,(function(t,r,o){return n=!!e(t,r,o)})),n}function yr(t,e,n){for(var o=-1,i=t.length;++o<i;){var a=t[o],u=e(a);if(null!=u&&(l===r?u==u&&!cu(u):n(u,l)))var l=u,s=a}return s}function mr(t,e){var n=[];return pr(t,(function(t,r,o){e(t,r,o)&&n.push(t)})),n}function _r(t,e,n,r,o){var i=-1,a=t.length;for(n||(n=bi),o||(o=[]);++i<a;){var u=t[i];e>0&&n(u)?e>1?_r(u,e-1,n,r,o):We(o,u):r||(o[o.length]=u)}return o}var br=Io(),Cr=Io(!0);function Pr(t,e){return t&&br(t,e,Bu)}function wr(t,e){return t&&Cr(t,e,Bu)}function kr(t,e){return De(e,(function(e){return Qa(t[e])}))}function Tr(t,e){for(var n=0,o=(e=Po(e,t)).length;null!=t&&n<o;)t=t[ji(e[n++])];return n&&n==o?t:r}function Ar(t,e,n){var r=e(t);return qa(t)?r:We(r,n(t))}function xr(t){return null==t?t===r?"[object Undefined]":"[object Null]":ne&&ne in St(t)?function(t){var e=It.call(t,ne),n=t[ne];try{t[ne]=r;var o=!0}catch(t){}var i=Ft.call(t);o&&(e?t[ne]=n:delete t[ne]);return i}(t):function(t){return Ft.call(t)}(t)}function Sr(t,e){return t>e}function Mr(t,e){return null!=t&&It.call(t,e)}function Nr(t,e){return null!=t&&e in St(t)}function Rr(t,e,n){for(var o=n?Oe:Be,i=t[0].length,a=t.length,u=a,l=ut(a),s=1/0,c=[];u--;){var f=t[u];u&&e&&(f=Ee(f,Qe(e))),s=Cn(f.length,s),l[u]=!n&&(e||i>=120&&f.length>=120)?new Yn(u&&f):r}f=t[0];var h=-1,d=l[0];t:for(;++h<i&&c.length<s;){var p=f[h],v=e?e(p):p;if(p=n||0!==p?p:0,!(d?en(d,v):o(c,v,n))){for(u=a;--u;){var g=l[u];if(!(g?en(g,v):o(t[u],v,n)))continue t}d&&d.push(v),c.push(p)}}return c}function Dr(t,e,n){var o=null==(t=Ni(t,e=Po(e,t)))?t:t[ji(Xi(e))];return null==o?r:xe(o,t,n)}function Br(t){return ru(t)&&xr(t)==m}function Or(t,e,n,o,i){return t===e||(null==t||null==e||!ru(t)&&!ru(e)?t!=t&&e!=e:function(t,e,n,o,i,a){var u=qa(t),l=qa(e),s=u?_:yi(t),c=l?_:yi(e),f=(s=s==m?x:s)==x,h=(c=c==m?x:c)==x,d=s==c;if(d&&Ya(t)){if(!Ya(e))return!1;u=!0,f=!1}if(d&&!f)return a||(a=new Jn),u||fu(t)?oi(t,e,n,o,i,a):function(t,e,n,r,o,i,a){switch(n){case E:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case O:return!(t.byteLength!=e.byteLength||!i(new qt(t),new qt(e)));case b:case C:case A:return Ka(+t,+e);case P:return t.name==e.name&&t.message==e.message;case M:case R:return t==e+"";case T:var u=sn;case N:var l=1&r;if(u||(u=hn),t.size!=e.size&&!l)return!1;var s=a.get(t);if(s)return s==e;r|=2,a.set(t,e);var c=oi(u(t),u(e),r,o,i,a);return a.delete(t),c;case D:if(Fn)return Fn.call(t)==Fn.call(e)}return!1}(t,e,s,n,o,i,a);if(!(1&n)){var p=f&&It.call(t,"__wrapped__"),v=h&&It.call(e,"__wrapped__");if(p||v){var g=p?t.value():t,y=v?e.value():e;return a||(a=new Jn),i(g,y,n,o,a)}}if(!d)return!1;return a||(a=new Jn),function(t,e,n,o,i,a){var u=1&n,l=ai(t),s=l.length,c=ai(e),f=c.length;if(s!=f&&!u)return!1;var h=s;for(;h--;){var d=l[h];if(!(u?d in e:It.call(e,d)))return!1}var p=a.get(t),v=a.get(e);if(p&&v)return p==e&&v==t;var g=!0;a.set(t,e),a.set(e,t);var y=u;for(;++h<s;){var m=t[d=l[h]],_=e[d];if(o)var b=u?o(_,m,d,e,t,a):o(m,_,d,t,e,a);if(!(b===r?m===_||i(m,_,n,o,a):b)){g=!1;break}y||(y="constructor"==d)}if(g&&!y){var C=t.constructor,P=e.constructor;C==P||!("constructor"in t)||!("constructor"in e)||"function"==typeof C&&C instanceof C&&"function"==typeof P&&P instanceof P||(g=!1)}return a.delete(t),a.delete(e),g}(t,e,n,o,i,a)}(t,e,n,o,Or,i))}function Er(t,e,n,o){var i=n.length,a=i,u=!o;if(null==t)return!a;for(t=St(t);i--;){var l=n[i];if(u&&l[2]?l[1]!==t[l[0]]:!(l[0]in t))return!1}for(;++i<a;){var s=(l=n[i])[0],c=t[s],f=l[1];if(u&&l[2]){if(c===r&&!(s in t))return!1}else{var h=new Jn;if(o)var d=o(c,f,s,t,e,h);if(!(d===r?Or(f,c,3,o,h):d))return!1}}return!0}function Wr(t){return!(!nu(t)||(e=t,jt&&jt in e))&&(Qa(t)?Gt:mt).test(Fi(t));var e}function Ir(t){return"function"==typeof t?t:null==t?il:"object"==e(t)?qa(t)?Gr(t[0],t[1]):Kr(t):pl(t)}function Lr(t){if(!Ai(t))return _n(t);var e=[];for(var n in St(t))It.call(t,n)&&"constructor"!=n&&e.push(n);return e}function jr(t){if(!nu(t))return function(t){var e=[];if(null!=t)for(var n in St(t))e.push(n);return e}(t);var e=Ai(t),n=[];for(var r in t)("constructor"!=r||!e&&It.call(t,r))&&n.push(r);return n}function Fr(t,e){return t<e}function zr(t,e){var n=-1,r=$a(t)?ut(t.length):[];return pr(t,(function(t,o,i){r[++n]=e(t,o,i)})),r}function Kr(t){var e=di(t);return 1==e.length&&e[0][2]?Si(e[0][0],e[0][1]):function(n){return n===t||Er(n,t,e)}}function Gr(t,e){return wi(t)&&xi(e)?Si(ji(t),e):function(n){var o=Su(n,t);return o===r&&o===e?Mu(n,t):Or(e,o,3)}}function Ur(t,e,n,o,i){t!==e&&br(e,(function(a,u){if(i||(i=new Jn),nu(a))!function(t,e,n,o,i,a,u){var l=Ri(t,n),s=Ri(e,n),c=u.get(s);if(c)return void nr(t,n,c);var f=a?a(l,s,n+"",t,e,u):r,h=f===r;if(h){var d=qa(s),p=!d&&Ya(s),v=!d&&!p&&fu(s);f=s,d||p||v?qa(l)?f=l:Za(l)?f=Do(l):p?(h=!1,f=Ao(s,!0)):v?(h=!1,f=So(s,!0)):f=[]:au(s)||Ha(s)?(f=l,Ha(l)?f=_u(l):nu(l)&&!Qa(l)||(f=_i(s))):h=!1}h&&(u.set(s,f),i(f,s,o,a,u),u.delete(s));nr(t,n,f)}(t,e,u,n,Ur,o,i);else{var l=o?o(Ri(t,u),a,u+"",t,e,i):r;l===r&&(l=a),nr(t,u,l)}}),Ou)}function Hr(t,e){var n=t.length;if(n)return Ci(e+=e<0?n:0,n)?t[e]:r}function qr(t,e,n){e=e.length?Ee(e,(function(t){return qa(t)?function(e){return Tr(e,1===t.length?t[0]:t)}:t})):[il];var r=-1;e=Ee(e,Qe(fi()));var o=zr(t,(function(t,n,o){var i=Ee(e,(function(e){return e(t)}));return{criteria:i,index:++r,value:t}}));return function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(o,(function(t,e){return function(t,e,n){var r=-1,o=t.criteria,i=e.criteria,a=o.length,u=n.length;for(;++r<a;){var l=Mo(o[r],i[r]);if(l)return r>=u?l:l*("desc"==n[r]?-1:1)}return t.index-e.index}(t,e,n)}))}function Vr(t,e,n){for(var r=-1,o=e.length,i={};++r<o;){var a=e[r],u=Tr(t,a);n(u,a)&&eo(i,Po(a,t),u)}return i}function $r(t,e,n,r){var o=r?Ue:Ge,i=-1,a=e.length,u=t;for(t===e&&(e=Do(e)),n&&(u=Ee(t,Qe(n)));++i<a;)for(var l=0,s=e[i],c=n?n(s):s;(l=o(u,c,l,r))>-1;)u!==t&&Jt.call(u,l,1),Jt.call(t,l,1);return t}function Zr(t,e){for(var n=t?e.length:0,r=n-1;n--;){var o=e[n];if(n==r||o!==i){var i=o;Ci(o)?Jt.call(t,o,1):po(t,o)}}return t}function Yr(t,e){return t+ye(kn()*(e-t+1))}function Jr(t,e){var n="";if(!t||e<1||e>p)return n;do{e%2&&(n+=t),(e=ye(e/2))&&(t+=t)}while(e);return n}function Xr(t,e){return Oi(Mi(t,e,il),t+"")}function Qr(t){return Qn(Ku(t))}function to(t,e){var n=Ku(t);return Ii(n,sr(e,0,n.length))}function eo(t,e,n,o){if(!nu(t))return t;for(var i=-1,a=(e=Po(e,t)).length,u=a-1,l=t;null!=l&&++i<a;){var s=ji(e[i]),c=n;if("__proto__"===s||"constructor"===s||"prototype"===s)return t;if(i!=u){var f=l[s];(c=o?o(f,s,l):r)===r&&(c=nu(f)?f:Ci(e[i+1])?[]:{})}rr(l,s,c),l=l[s]}return t}var no=Dn?function(t,e){return Dn.set(t,e),t}:il,ro=oe?function(t,e){return oe(t,"toString",{configurable:!0,enumerable:!1,value:nl(e),writable:!0})}:il;function oo(t){return Ii(Ku(t))}function io(t,e,n){var r=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(n=n>o?o:n)<0&&(n+=o),o=e>n?0:n-e>>>0,e>>>=0;for(var i=ut(o);++r<o;)i[r]=t[r+e];return i}function ao(t,e){var n;return pr(t,(function(t,r,o){return!(n=e(t,r,o))})),!!n}function uo(t,e,n){var r=0,o=null==t?r:t.length;if("number"==typeof e&&e==e&&o<=2147483647){for(;r<o;){var i=r+o>>>1,a=t[i];null!==a&&!cu(a)&&(n?a<=e:a<e)?r=i+1:o=i}return o}return lo(t,e,il,n)}function lo(t,e,n,o){var i=0,a=null==t?0:t.length;if(0===a)return 0;for(var u=(e=n(e))!=e,l=null===e,s=cu(e),c=e===r;i<a;){var f=ye((i+a)/2),h=n(t[f]),d=h!==r,p=null===h,v=h==h,g=cu(h);if(u)var y=o||v;else y=c?v&&(o||d):l?v&&d&&(o||!p):s?v&&d&&!p&&(o||!g):!p&&!g&&(o?h<=e:h<e);y?i=f+1:a=f}return Cn(a,4294967294)}function so(t,e){for(var n=-1,r=t.length,o=0,i=[];++n<r;){var a=t[n],u=e?e(a):a;if(!n||!Ka(u,l)){var l=u;i[o++]=0===a?0:a}}return i}function co(t){return"number"==typeof t?t:cu(t)?v:+t}function fo(t){if("string"==typeof t)return t;if(qa(t))return Ee(t,fo)+"";if(cu(t))return zn?zn.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function ho(t,e,n){var r=-1,o=Be,i=t.length,a=!0,u=[],l=u;if(n)a=!1,o=Oe;else if(i>=200){var s=e?null:Xo(t);if(s)return hn(s);a=!1,o=en,l=new Yn}else l=e?[]:u;t:for(;++r<i;){var c=t[r],f=e?e(c):c;if(c=n||0!==c?c:0,a&&f==f){for(var h=l.length;h--;)if(l[h]===f)continue t;e&&l.push(f),u.push(c)}else o(l,f,n)||(l!==u&&l.push(f),u.push(c))}return u}function po(t,e){return null==(t=Ni(t,e=Po(e,t)))||delete t[ji(Xi(e))]}function vo(t,e,n,r){return eo(t,e,n(Tr(t,e)),r)}function go(t,e,n,r){for(var o=t.length,i=r?o:-1;(r?i--:++i<o)&&e(t[i],i,t););return n?io(t,r?0:i,r?i+1:o):io(t,r?i+1:0,r?o:i)}function yo(t,e){var n=t;return n instanceof qn&&(n=n.value()),Ie(e,(function(t,e){return e.func.apply(e.thisArg,We([t],e.args))}),n)}function mo(t,e,n){var r=t.length;if(r<2)return r?ho(t[0]):[];for(var o=-1,i=ut(r);++o<r;)for(var a=t[o],u=-1;++u<r;)u!=o&&(i[o]=dr(i[o]||a,t[u],e,n));return ho(_r(i,1),e,n)}function _o(t,e,n){for(var o=-1,i=t.length,a=e.length,u={};++o<i;){var l=o<a?e[o]:r;n(u,t[o],l)}return u}function bo(t){return Za(t)?t:[]}function Co(t){return"function"==typeof t?t:il}function Po(t,e){return qa(t)?t:wi(t,e)?[t]:Li(bu(t))}var wo=Xr;function ko(t,e,n){var o=t.length;return n=n===r?o:n,!e&&n>=o?t:io(t,e,n)}var To=ce||function(t){return ve.clearTimeout(t)};function Ao(t,e){if(e)return t.slice();var n=t.length,r=Vt?Vt(n):new t.constructor(n);return t.copy(r),r}function xo(t){var e=new t.constructor(t.byteLength);return new qt(e).set(new qt(t)),e}function So(t,e){var n=e?xo(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function Mo(t,e){if(t!==e){var n=t!==r,o=null===t,i=t==t,a=cu(t),u=e!==r,l=null===e,s=e==e,c=cu(e);if(!l&&!c&&!a&&t>e||a&&u&&s&&!l&&!c||o&&u&&s||!n&&s||!i)return 1;if(!o&&!a&&!c&&t<e||c&&n&&i&&!o&&!a||l&&n&&i||!u&&i||!s)return-1}return 0}function No(t,e,n,r){for(var o=-1,i=t.length,a=n.length,u=-1,l=e.length,s=bn(i-a,0),c=ut(l+s),f=!r;++u<l;)c[u]=e[u];for(;++o<a;)(f||o<i)&&(c[n[o]]=t[o]);for(;s--;)c[u++]=t[o++];return c}function Ro(t,e,n,r){for(var o=-1,i=t.length,a=-1,u=n.length,l=-1,s=e.length,c=bn(i-u,0),f=ut(c+s),h=!r;++o<c;)f[o]=t[o];for(var d=o;++l<s;)f[d+l]=e[l];for(;++a<u;)(h||o<i)&&(f[d+n[a]]=t[o++]);return f}function Do(t,e){var n=-1,r=t.length;for(e||(e=ut(r));++n<r;)e[n]=t[n];return e}function Bo(t,e,n,o){var i=!n;n||(n={});for(var a=-1,u=e.length;++a<u;){var l=e[a],s=o?o(n[l],t[l],l,n,t):r;s===r&&(s=t[l]),i?ur(n,l,s):rr(n,l,s)}return n}function Oo(t,e){return function(n,r){var o=qa(n)?Se:ir,i=e?e():{};return o(n,t,fi(r,2),i)}}function Eo(t){return Xr((function(e,n){var o=-1,i=n.length,a=i>1?n[i-1]:r,u=i>2?n[2]:r;for(a=t.length>3&&"function"==typeof a?(i--,a):r,u&&Pi(n[0],n[1],u)&&(a=i<3?r:a,i=1),e=St(e);++o<i;){var l=n[o];l&&t(e,l,o,a)}return e}))}function Wo(t,e){return function(n,r){if(null==n)return n;if(!$a(n))return t(n,r);for(var o=n.length,i=e?o:-1,a=St(n);(e?i--:++i<o)&&!1!==r(a[i],i,a););return n}}function Io(t){return function(e,n,r){for(var o=-1,i=St(e),a=r(e),u=a.length;u--;){var l=a[t?u:++o];if(!1===n(i[l],l,i))break}return e}}function Lo(t){return function(e){var n=ln(e=bu(e))?vn(e):r,o=n?n[0]:e.charAt(0),i=n?ko(n,1).join(""):e.slice(1);return o[t]()+i}}function jo(t){return function(e){return Ie(Qu(Hu(e).replace(te,"")),t,"")}}function Fo(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=Gn(t.prototype),r=t.apply(n,e);return nu(r)?r:n}}function zo(t){return function(e,n,o){var i=St(e);if(!$a(e)){var a=fi(n,3);e=Bu(e),n=function(t){return a(i[t],t,i)}}var u=t(e,n,o);return u>-1?i[a?e[u]:u]:r}}function Ko(t){return ii((function(e){var n=e.length,i=n,a=Hn.prototype.thru;for(t&&e.reverse();i--;){var u=e[i];if("function"!=typeof u)throw new Rt(o);if(a&&!l&&"wrapper"==si(u))var l=new Hn([],!0)}for(i=l?i:n;++i<n;){var s=si(u=e[i]),c="wrapper"==s?li(u):r;l=c&&ki(c[0])&&424==c[1]&&!c[4].length&&1==c[9]?l[si(c[0])].apply(l,c[3]):1==u.length&&ki(u)?l[s]():l.thru(u)}return function(){var t=arguments,r=t[0];if(l&&1==t.length&&qa(r))return l.plant(r).value();for(var o=0,i=n?e[o].apply(this,t):r;++o<n;)i=e[o].call(this,i);return i}}))}function Go(t,e,n,o,i,a,u,l,s,f){var h=e&c,d=1&e,p=2&e,v=24&e,g=512&e,y=p?r:Fo(t);return function c(){for(var m=arguments.length,_=ut(m),b=m;b--;)_[b]=arguments[b];if(v)var C=ci(c),P=function(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}(_,C);if(o&&(_=No(_,o,i,v)),a&&(_=Ro(_,a,u,v)),m-=P,v&&m<f){var w=fn(_,C);return Yo(t,e,Go,c.placeholder,n,_,w,l,s,f-m)}var k=d?n:this,T=p?k[t]:t;return m=_.length,l?_=function(t,e){var n=t.length,o=Cn(e.length,n),i=Do(t);for(;o--;){var a=e[o];t[o]=Ci(a,n)?i[a]:r}return t}(_,l):g&&m>1&&_.reverse(),h&&s<m&&(_.length=s),this&&this!==ve&&this instanceof c&&(T=y||Fo(T)),T.apply(k,_)}}function Uo(t,e){return function(n,r){return function(t,e,n,r){return Pr(t,(function(t,o,i){e(r,n(t),o,i)})),r}(n,t,e(r),{})}}function Ho(t,e){return function(n,o){var i;if(n===r&&o===r)return e;if(n!==r&&(i=n),o!==r){if(i===r)return o;"string"==typeof n||"string"==typeof o?(n=fo(n),o=fo(o)):(n=co(n),o=co(o)),i=t(n,o)}return i}}function qo(t){return ii((function(e){return e=Ee(e,Qe(fi())),Xr((function(n){var r=this;return t(e,(function(t){return xe(t,r,n)}))}))}))}function Vo(t,e){var n=(e=e===r?" ":fo(e)).length;if(n<2)return n?Jr(e,t):e;var o=Jr(e,ge(t/pn(e)));return ln(e)?ko(vn(o),0,t).join(""):o.slice(0,t)}function $o(t){return function(e,n,o){return o&&"number"!=typeof o&&Pi(e,n,o)&&(n=o=r),e=vu(e),n===r?(n=e,e=0):n=vu(n),function(t,e,n,r){for(var o=-1,i=bn(ge((e-t)/(n||1)),0),a=ut(i);i--;)a[r?i:++o]=t,t+=n;return a}(e,n,o=o===r?e<n?1:-1:vu(o),t)}}function Zo(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=mu(e),n=mu(n)),t(e,n)}}function Yo(t,e,n,o,i,a,u,c,f,h){var d=8&e;e|=d?l:s,4&(e&=~(d?s:l))||(e&=-4);var p=[t,e,i,d?a:r,d?u:r,d?r:a,d?r:u,c,f,h],v=n.apply(r,p);return ki(t)&&Di(v,p),v.placeholder=o,Ei(v,t,e)}function Jo(t){var e=xt[t];return function(t,n){if(t=mu(t),(n=null==n?0:Cn(gu(n),292))&&Fe(t)){var r=(bu(t)+"e").split("e");return+((r=(bu(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var Xo=Mn&&1/hn(new Mn([,-0]))[1]==d?function(t){return new Mn(t)}:cl;function Qo(t){return function(e){var n=yi(e);return n==T?sn(e):n==N?dn(e):function(t,e){return Ee(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function ti(t,e,n,i,h,d,p,v){var g=2&e;if(!g&&"function"!=typeof t)throw new Rt(o);var y=i?i.length:0;if(y||(e&=-97,i=h=r),p=p===r?p:bn(gu(p),0),v=v===r?v:gu(v),y-=h?h.length:0,e&s){var m=i,_=h;i=h=r}var b=g?r:li(t),C=[t,e,n,i,h,m,_,d,p,v];if(b&&function(t,e){var n=t[1],r=e[1],o=n|r,i=o<131,u=r==c&&8==n||r==c&&n==f&&t[7].length<=e[8]||384==r&&e[7].length<=e[8]&&8==n;if(!i&&!u)return t;1&r&&(t[2]=e[2],o|=1&n?0:4);var l=e[3];if(l){var s=t[3];t[3]=s?No(s,l,e[4]):l,t[4]=s?fn(t[3],a):e[4]}(l=e[5])&&(s=t[5],t[5]=s?Ro(s,l,e[6]):l,t[6]=s?fn(t[5],a):e[6]);(l=e[7])&&(t[7]=l);r&c&&(t[8]=null==t[8]?e[8]:Cn(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=o}(C,b),t=C[0],e=C[1],n=C[2],i=C[3],h=C[4],!(v=C[9]=C[9]===r?g?0:t.length:bn(C[9]-y,0))&&24&e&&(e&=-25),e&&1!=e)P=8==e||e==u?function(t,e,n){var o=Fo(t);return function i(){for(var a=arguments.length,u=ut(a),l=a,s=ci(i);l--;)u[l]=arguments[l];var c=a<3&&u[0]!==s&&u[a-1]!==s?[]:fn(u,s);return(a-=c.length)<n?Yo(t,e,Go,i.placeholder,r,u,c,r,r,n-a):xe(this&&this!==ve&&this instanceof i?o:t,this,u)}}(t,e,v):e!=l&&33!=e||h.length?Go.apply(r,C):function(t,e,n,r){var o=1&e,i=Fo(t);return function e(){for(var a=-1,u=arguments.length,l=-1,s=r.length,c=ut(s+u),f=this&&this!==ve&&this instanceof e?i:t;++l<s;)c[l]=r[l];for(;u--;)c[l++]=arguments[++a];return xe(f,o?n:this,c)}}(t,e,n,i);else var P=function(t,e,n){var r=1&e,o=Fo(t);return function e(){return(this&&this!==ve&&this instanceof e?o:t).apply(r?n:this,arguments)}}(t,e,n);return Ei((b?no:Di)(P,C),t,e)}function ei(t,e,n,o){return t===r||Ka(t,Ot[n])&&!It.call(o,n)?e:t}function ni(t,e,n,o,i,a){return nu(t)&&nu(e)&&(a.set(e,t),Ur(t,e,r,ni,a),a.delete(e)),t}function ri(t){return au(t)?r:t}function oi(t,e,n,o,i,a){var u=1&n,l=t.length,s=e.length;if(l!=s&&!(u&&s>l))return!1;var c=a.get(t),f=a.get(e);if(c&&f)return c==e&&f==t;var h=-1,d=!0,p=2&n?new Yn:r;for(a.set(t,e),a.set(e,t);++h<l;){var v=t[h],g=e[h];if(o)var y=u?o(g,v,h,e,t,a):o(v,g,h,t,e,a);if(y!==r){if(y)continue;d=!1;break}if(p){if(!je(e,(function(t,e){if(!en(p,e)&&(v===t||i(v,t,n,o,a)))return p.push(e)}))){d=!1;break}}else if(v!==g&&!i(v,g,n,o,a)){d=!1;break}}return a.delete(t),a.delete(e),d}function ii(t){return Oi(Mi(t,r,Vi),t+"")}function ai(t){return Ar(t,Bu,vi)}function ui(t){return Ar(t,Ou,gi)}var li=Dn?function(t){return Dn.get(t)}:cl;function si(t){for(var e=t.name+"",n=Bn[e],r=It.call(Bn,e)?n.length:0;r--;){var o=n[r],i=o.func;if(null==i||i==t)return o.name}return e}function ci(t){return(It.call(Kn,"placeholder")?Kn:t).placeholder}function fi(){var t=Kn.iteratee||al;return t=t===al?Ir:t,arguments.length?t(arguments[0],arguments[1]):t}function hi(t,n){var r,o,i=t.__data__;return("string"==(o=e(r=n))||"number"==o||"symbol"==o||"boolean"==o?"__proto__"!==r:null===r)?i["string"==typeof n?"string":"hash"]:i.map}function di(t){for(var e=Bu(t),n=e.length;n--;){var r=e[n],o=t[r];e[n]=[r,o,xi(o)]}return e}function pi(t,e){var n=function(t,e){return null==t?r:t[e]}(t,e);return Wr(n)?n:r}var vi=_e?function(t){return null==t?[]:(t=St(t),De(_e(t),(function(e){return Yt.call(t,e)})))}:yl,gi=_e?function(t){for(var e=[];t;)We(e,vi(t)),t=$t(t);return e}:yl,yi=xr;function mi(t,e,n){for(var r=-1,o=(e=Po(e,t)).length,i=!1;++r<o;){var a=ji(e[r]);if(!(i=null!=t&&n(t,a)))break;t=t[a]}return i||++r!=o?i:!!(o=null==t?0:t.length)&&eu(o)&&Ci(a,o)&&(qa(t)||Ha(t))}function _i(t){return"function"!=typeof t.constructor||Ai(t)?{}:Gn($t(t))}function bi(t){return qa(t)||Ha(t)||!!(Xt&&t&&t[Xt])}function Ci(t,n){var r=e(t);return!!(n=null==n?p:n)&&("number"==r||"symbol"!=r&&bt.test(t))&&t>-1&&t%1==0&&t<n}function Pi(t,n,r){if(!nu(r))return!1;var o=e(n);return!!("number"==o?$a(r)&&Ci(n,r.length):"string"==o&&n in r)&&Ka(r[n],t)}function wi(t,n){if(qa(t))return!1;var r=e(t);return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!cu(t))||(nt.test(t)||!et.test(t)||null!=n&&t in St(n))}function ki(t){var e=si(t),n=Kn[e];if("function"!=typeof n||!(e in qn.prototype))return!1;if(t===n)return!0;var r=li(n);return!!r&&t===r[0]}(An&&yi(new An(new ArrayBuffer(1)))!=E||xn&&yi(new xn)!=T||Sn&&yi(Sn.resolve())!=S||Mn&&yi(new Mn)!=N||Nn&&yi(new Nn)!=B)&&(yi=function(t){var e=xr(t),n=e==x?t.constructor:r,o=n?Fi(n):"";if(o)switch(o){case On:return E;case En:return T;case Wn:return S;case In:return N;case Ln:return B}return e});var Ti=Et?Qa:ml;function Ai(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Ot)}function xi(t){return t==t&&!nu(t)}function Si(t,e){return function(n){return null!=n&&(n[t]===e&&(e!==r||t in St(n)))}}function Mi(t,e,n){return e=bn(e===r?t.length-1:e,0),function(){for(var r=arguments,o=-1,i=bn(r.length-e,0),a=ut(i);++o<i;)a[o]=r[e+o];o=-1;for(var u=ut(e+1);++o<e;)u[o]=r[o];return u[e]=n(a),xe(t,this,u)}}function Ni(t,e){return e.length<2?t:Tr(t,io(e,0,-1))}function Ri(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var Di=Wi(no),Bi=pe||function(t,e){return ve.setTimeout(t,e)},Oi=Wi(ro);function Ei(t,e,n){var r=e+"";return Oi(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(lt,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return Me(y,(function(n){var r="_."+n[0];e&n[1]&&!Be(t,r)&&t.push(r)})),t.sort()}(function(t){var e=t.match(st);return e?e[1].split(ct):[]}(r),n)))}function Wi(t){var e=0,n=0;return function(){var o=Pn(),i=16-(o-n);if(n=o,i>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(r,arguments)}}function Ii(t,e){var n=-1,o=t.length,i=o-1;for(e=e===r?o:e;++n<e;){var a=Yr(n,i),u=t[a];t[a]=t[n],t[n]=u}return t.length=e,t}var Li=function(t){var e=Wa(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(rt,(function(t,n,r,o){e.push(r?o.replace(dt,"$1"):n||t)})),e}));function ji(t){if("string"==typeof t||cu(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Fi(t){if(null!=t){try{return Wt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function zi(t){if(t instanceof qn)return t.clone();var e=new Hn(t.__wrapped__,t.__chain__);return e.__actions__=Do(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Ki=Xr((function(t,e){return Za(t)?dr(t,_r(e,1,Za,!0)):[]})),Gi=Xr((function(t,e){var n=Xi(e);return Za(n)&&(n=r),Za(t)?dr(t,_r(e,1,Za,!0),fi(n,2)):[]})),Ui=Xr((function(t,e){var n=Xi(e);return Za(n)&&(n=r),Za(t)?dr(t,_r(e,1,Za,!0),r,n):[]}));function Hi(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=null==n?0:gu(n);return o<0&&(o=bn(r+o,0)),Ke(t,fi(e,3),o)}function qi(t,e,n){var o=null==t?0:t.length;if(!o)return-1;var i=o-1;return n!==r&&(i=gu(n),i=n<0?bn(o+i,0):Cn(i,o-1)),Ke(t,fi(e,3),i,!0)}function Vi(t){return(null==t?0:t.length)?_r(t,1):[]}function $i(t){return t&&t.length?t[0]:r}var Zi=Xr((function(t){var e=Ee(t,bo);return e.length&&e[0]===t[0]?Rr(e):[]})),Yi=Xr((function(t){var e=Xi(t),n=Ee(t,bo);return e===Xi(n)?e=r:n.pop(),n.length&&n[0]===t[0]?Rr(n,fi(e,2)):[]})),Ji=Xr((function(t){var e=Xi(t),n=Ee(t,bo);return(e="function"==typeof e?e:r)&&n.pop(),n.length&&n[0]===t[0]?Rr(n,r,e):[]}));function Xi(t){var e=null==t?0:t.length;return e?t[e-1]:r}var Qi=Xr(ta);function ta(t,e){return t&&t.length&&e&&e.length?$r(t,e):t}var ea=ii((function(t,e){var n=null==t?0:t.length,r=lr(t,e);return Zr(t,Ee(e,(function(t){return Ci(t,n)?+t:t})).sort(Mo)),r}));function na(t){return null==t?t:Tn.call(t)}var ra=Xr((function(t){return ho(_r(t,1,Za,!0))})),oa=Xr((function(t){var e=Xi(t);return Za(e)&&(e=r),ho(_r(t,1,Za,!0),fi(e,2))})),ia=Xr((function(t){var e=Xi(t);return e="function"==typeof e?e:r,ho(_r(t,1,Za,!0),r,e)}));function aa(t){if(!t||!t.length)return[];var e=0;return t=De(t,(function(t){if(Za(t))return e=bn(t.length,e),!0})),Je(e,(function(e){return Ee(t,Ve(e))}))}function ua(t,e){if(!t||!t.length)return[];var n=aa(t);return null==e?n:Ee(n,(function(t){return xe(e,r,t)}))}var la=Xr((function(t,e){return Za(t)?dr(t,e):[]})),sa=Xr((function(t){return mo(De(t,Za))})),ca=Xr((function(t){var e=Xi(t);return Za(e)&&(e=r),mo(De(t,Za),fi(e,2))})),fa=Xr((function(t){var e=Xi(t);return e="function"==typeof e?e:r,mo(De(t,Za),r,e)})),ha=Xr(aa);var da=Xr((function(t){var e=t.length,n=e>1?t[e-1]:r;return n="function"==typeof n?(t.pop(),n):r,ua(t,n)}));function pa(t){var e=Kn(t);return e.__chain__=!0,e}function va(t,e){return e(t)}var ga=ii((function(t){var e=t.length,n=e?t[0]:0,o=this.__wrapped__,i=function(e){return lr(e,t)};return!(e>1||this.__actions__.length)&&o instanceof qn&&Ci(n)?((o=o.slice(n,+n+(e?1:0))).__actions__.push({func:va,args:[i],thisArg:r}),new Hn(o,this.__chain__).thru((function(t){return e&&!t.length&&t.push(r),t}))):this.thru(i)}));var ya=Oo((function(t,e,n){It.call(t,n)?++t[n]:ur(t,n,1)}));var ma=zo(Hi),_a=zo(qi);function ba(t,e){return(qa(t)?Me:pr)(t,fi(e,3))}function Ca(t,e){return(qa(t)?Ne:vr)(t,fi(e,3))}var Pa=Oo((function(t,e,n){It.call(t,n)?t[n].push(e):ur(t,n,[e])}));var wa=Xr((function(t,e,n){var r=-1,o="function"==typeof e,i=$a(t)?ut(t.length):[];return pr(t,(function(t){i[++r]=o?xe(e,t,n):Dr(t,e,n)})),i})),ka=Oo((function(t,e,n){ur(t,n,e)}));function Ta(t,e){return(qa(t)?Ee:zr)(t,fi(e,3))}var Aa=Oo((function(t,e,n){t[n?0:1].push(e)}),(function(){return[[],[]]}));var xa=Xr((function(t,e){if(null==t)return[];var n=e.length;return n>1&&Pi(t,e[0],e[1])?e=[]:n>2&&Pi(e[0],e[1],e[2])&&(e=[e[0]]),qr(t,_r(e,1),[])})),Sa=de||function(){return ve.Date.now()};function Ma(t,e,n){return e=n?r:e,e=t&&null==e?t.length:e,ti(t,c,r,r,r,r,e)}function Na(t,e){var n;if("function"!=typeof e)throw new Rt(o);return t=gu(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=r),n}}var Ra=Xr((function(t,e,n){var r=1;if(n.length){var o=fn(n,ci(Ra));r|=l}return ti(t,r,e,n,o)})),Da=Xr((function(t,e,n){var r=3;if(n.length){var o=fn(n,ci(Da));r|=l}return ti(e,r,t,n,o)}));function Ba(t,e,n){var i,a,u,l,s,c,f=0,h=!1,d=!1,p=!0;if("function"!=typeof t)throw new Rt(o);function v(e){var n=i,o=a;return i=a=r,f=e,l=t.apply(o,n)}function g(t){var n=t-c;return c===r||n>=e||n<0||d&&t-f>=u}function y(){var t=Sa();if(g(t))return m(t);s=Bi(y,function(t){var n=e-(t-c);return d?Cn(n,u-(t-f)):n}(t))}function m(t){return s=r,p&&i?v(t):(i=a=r,l)}function _(){var t=Sa(),n=g(t);if(i=arguments,a=this,c=t,n){if(s===r)return function(t){return f=t,s=Bi(y,e),h?v(t):l}(c);if(d)return To(s),s=Bi(y,e),v(c)}return s===r&&(s=Bi(y,e)),l}return e=mu(e)||0,nu(n)&&(h=!!n.leading,u=(d="maxWait"in n)?bn(mu(n.maxWait)||0,e):u,p="trailing"in n?!!n.trailing:p),_.cancel=function(){s!==r&&To(s),f=0,i=c=a=s=r},_.flush=function(){return s===r?l:m(Sa())},_}var Oa=Xr((function(t,e){return hr(t,1,e)})),Ea=Xr((function(t,e,n){return hr(t,mu(e)||0,n)}));function Wa(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new Rt(o);var n=function n(){var r=arguments,o=e?e.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var a=t.apply(this,r);return n.cache=i.set(o,a)||i,a};return n.cache=new(Wa.Cache||Zn),n}function Ia(t){if("function"!=typeof t)throw new Rt(o);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}Wa.Cache=Zn;var La=wo((function(t,e){var n=(e=1==e.length&&qa(e[0])?Ee(e[0],Qe(fi())):Ee(_r(e,1),Qe(fi()))).length;return Xr((function(r){for(var o=-1,i=Cn(r.length,n);++o<i;)r[o]=e[o].call(this,r[o]);return xe(t,this,r)}))})),ja=Xr((function(t,e){var n=fn(e,ci(ja));return ti(t,l,r,e,n)})),Fa=Xr((function(t,e){var n=fn(e,ci(Fa));return ti(t,s,r,e,n)})),za=ii((function(t,e){return ti(t,f,r,r,r,e)}));function Ka(t,e){return t===e||t!=t&&e!=e}var Ga=Zo(Sr),Ua=Zo((function(t,e){return t>=e})),Ha=Br(function(){return arguments}())?Br:function(t){return ru(t)&&It.call(t,"callee")&&!Yt.call(t,"callee")},qa=ut.isArray,Va=Ce?Qe(Ce):function(t){return ru(t)&&xr(t)==O};function $a(t){return null!=t&&eu(t.length)&&!Qa(t)}function Za(t){return ru(t)&&$a(t)}var Ya=be||ml,Ja=Pe?Qe(Pe):function(t){return ru(t)&&xr(t)==C};function Xa(t){if(!ru(t))return!1;var e=xr(t);return e==P||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!au(t)}function Qa(t){if(!nu(t))return!1;var e=xr(t);return e==w||e==k||"[object AsyncFunction]"==e||"[object Proxy]"==e}function tu(t){return"number"==typeof t&&t==gu(t)}function eu(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=p}function nu(t){var n=e(t);return null!=t&&("object"==n||"function"==n)}function ru(t){return null!=t&&"object"==e(t)}var ou=we?Qe(we):function(t){return ru(t)&&yi(t)==T};function iu(t){return"number"==typeof t||ru(t)&&xr(t)==A}function au(t){if(!ru(t)||xr(t)!=x)return!1;var e=$t(t);if(null===e)return!0;var n=It.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&Wt.call(n)==zt}var uu=ke?Qe(ke):function(t){return ru(t)&&xr(t)==M};var lu=Te?Qe(Te):function(t){return ru(t)&&yi(t)==N};function su(t){return"string"==typeof t||!qa(t)&&ru(t)&&xr(t)==R}function cu(t){return"symbol"==e(t)||ru(t)&&xr(t)==D}var fu=Ae?Qe(Ae):function(t){return ru(t)&&eu(t.length)&&!!le[xr(t)]};var hu=Zo(Fr),du=Zo((function(t,e){return t<=e}));function pu(t){if(!t)return[];if($a(t))return su(t)?vn(t):Do(t);if(Qt&&t[Qt])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[Qt]());var e=yi(t);return(e==T?sn:e==N?hn:Ku)(t)}function vu(t){return t?(t=mu(t))===d||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function gu(t){var e=vu(t),n=e%1;return e==e?n?e-n:e:0}function yu(t){return t?sr(gu(t),0,g):0}function mu(t){if("number"==typeof t)return t;if(cu(t))return v;if(nu(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=nu(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=Xe(t);var n=yt.test(t);return n||_t.test(t)?he(t.slice(2),n?2:8):gt.test(t)?v:+t}function _u(t){return Bo(t,Ou(t))}function bu(t){return null==t?"":fo(t)}var Cu=Eo((function(t,e){if(Ai(e)||$a(e))Bo(e,Bu(e),t);else for(var n in e)It.call(e,n)&&rr(t,n,e[n])})),Pu=Eo((function(t,e){Bo(e,Ou(e),t)})),wu=Eo((function(t,e,n,r){Bo(e,Ou(e),t,r)})),ku=Eo((function(t,e,n,r){Bo(e,Bu(e),t,r)})),Tu=ii(lr);var Au=Xr((function(t,e){t=St(t);var n=-1,o=e.length,i=o>2?e[2]:r;for(i&&Pi(e[0],e[1],i)&&(o=1);++n<o;)for(var a=e[n],u=Ou(a),l=-1,s=u.length;++l<s;){var c=u[l],f=t[c];(f===r||Ka(f,Ot[c])&&!It.call(t,c))&&(t[c]=a[c])}return t})),xu=Xr((function(t){return t.push(r,ni),xe(Wu,r,t)}));function Su(t,e,n){var o=null==t?r:Tr(t,e);return o===r?n:o}function Mu(t,e){return null!=t&&mi(t,e,Nr)}var Nu=Uo((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Ft.call(e)),t[e]=n}),nl(il)),Ru=Uo((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Ft.call(e)),It.call(t,e)?t[e].push(n):t[e]=[n]}),fi),Du=Xr(Dr);function Bu(t){return $a(t)?Xn(t):Lr(t)}function Ou(t){return $a(t)?Xn(t,!0):jr(t)}var Eu=Eo((function(t,e,n){Ur(t,e,n)})),Wu=Eo((function(t,e,n,r){Ur(t,e,n,r)})),Iu=ii((function(t,e){var n={};if(null==t)return n;var r=!1;e=Ee(e,(function(e){return e=Po(e,t),r||(r=e.length>1),e})),Bo(t,ui(t),n),r&&(n=cr(n,7,ri));for(var o=e.length;o--;)po(n,e[o]);return n}));var Lu=ii((function(t,e){return null==t?{}:function(t,e){return Vr(t,e,(function(e,n){return Mu(t,n)}))}(t,e)}));function ju(t,e){if(null==t)return{};var n=Ee(ui(t),(function(t){return[t]}));return e=fi(e),Vr(t,n,(function(t,n){return e(t,n[0])}))}var Fu=Qo(Bu),zu=Qo(Ou);function Ku(t){return null==t?[]:tn(t,Bu(t))}var Gu=jo((function(t,e,n){return e=e.toLowerCase(),t+(n?Uu(e):e)}));function Uu(t){return Xu(bu(t).toLowerCase())}function Hu(t){return(t=bu(t))&&t.replace(Ct,on).replace(ee,"")}var qu=jo((function(t,e,n){return t+(n?"-":"")+e.toLowerCase()})),Vu=jo((function(t,e,n){return t+(n?" ":"")+e.toLowerCase()})),$u=Lo("toLowerCase");var Zu=jo((function(t,e,n){return t+(n?"_":"")+e.toLowerCase()}));var Yu=jo((function(t,e,n){return t+(n?" ":"")+Xu(e)}));var Ju=jo((function(t,e,n){return t+(n?" ":"")+e.toUpperCase()})),Xu=Lo("toUpperCase");function Qu(t,e,n){return t=bu(t),(e=n?r:e)===r?function(t){return ie.test(t)}(t)?function(t){return t.match(re)||[]}(t):function(t){return t.match(ft)||[]}(t):t.match(e)||[]}var tl=Xr((function(t,e){try{return xe(t,r,e)}catch(t){return Xa(t)?t:new Tt(t)}})),el=ii((function(t,e){return Me(e,(function(e){e=ji(e),ur(t,e,Ra(t[e],t))})),t}));function nl(t){return function(){return t}}var rl=Ko(),ol=Ko(!0);function il(t){return t}function al(t){return Ir("function"==typeof t?t:cr(t,1))}var ul=Xr((function(t,e){return function(n){return Dr(n,t,e)}})),ll=Xr((function(t,e){return function(n){return Dr(t,n,e)}}));function sl(t,e,n){var r=Bu(e),o=kr(e,r);null!=n||nu(e)&&(o.length||!r.length)||(n=e,e=t,t=this,o=kr(e,Bu(e)));var i=!(nu(n)&&"chain"in n&&!n.chain),a=Qa(t);return Me(o,(function(n){var r=e[n];t[n]=r,a&&(t.prototype[n]=function(){var e=this.__chain__;if(i||e){var n=t(this.__wrapped__);return(n.__actions__=Do(this.__actions__)).push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,We([this.value()],arguments))})})),t}function cl(){}var fl=qo(Ee),hl=qo(Re),dl=qo(je);function pl(t){return wi(t)?Ve(ji(t)):function(t){return function(e){return Tr(e,t)}}(t)}var vl=$o(),gl=$o(!0);function yl(){return[]}function ml(){return!1}var _l=Ho((function(t,e){return t+e}),0),bl=Jo("ceil"),Cl=Ho((function(t,e){return t/e}),1),Pl=Jo("floor");var wl,kl=Ho((function(t,e){return t*e}),1),Tl=Jo("round"),Al=Ho((function(t,e){return t-e}),0);return Kn.after=function(t,e){if("function"!=typeof e)throw new Rt(o);return t=gu(t),function(){if(--t<1)return e.apply(this,arguments)}},Kn.ary=Ma,Kn.assign=Cu,Kn.assignIn=Pu,Kn.assignInWith=wu,Kn.assignWith=ku,Kn.at=Tu,Kn.before=Na,Kn.bind=Ra,Kn.bindAll=el,Kn.bindKey=Da,Kn.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return qa(t)?t:[t]},Kn.chain=pa,Kn.chunk=function(t,e,n){e=(n?Pi(t,e,n):e===r)?1:bn(gu(e),0);var o=null==t?0:t.length;if(!o||e<1)return[];for(var i=0,a=0,u=ut(ge(o/e));i<o;)u[a++]=io(t,i,i+=e);return u},Kn.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,o=[];++e<n;){var i=t[e];i&&(o[r++]=i)}return o},Kn.concat=function(){var t=arguments.length;if(!t)return[];for(var e=ut(t-1),n=arguments[0],r=t;r--;)e[r-1]=arguments[r];return We(qa(n)?Do(n):[n],_r(e,1))},Kn.cond=function(t){var e=null==t?0:t.length,n=fi();return t=e?Ee(t,(function(t){if("function"!=typeof t[1])throw new Rt(o);return[n(t[0]),t[1]]})):[],Xr((function(n){for(var r=-1;++r<e;){var o=t[r];if(xe(o[0],this,n))return xe(o[1],this,n)}}))},Kn.conforms=function(t){return function(t){var e=Bu(t);return function(n){return fr(n,t,e)}}(cr(t,1))},Kn.constant=nl,Kn.countBy=ya,Kn.create=function(t,e){var n=Gn(t);return null==e?n:ar(n,e)},Kn.curry=function t(e,n,o){var i=ti(e,8,r,r,r,r,r,n=o?r:n);return i.placeholder=t.placeholder,i},Kn.curryRight=function t(e,n,o){var i=ti(e,u,r,r,r,r,r,n=o?r:n);return i.placeholder=t.placeholder,i},Kn.debounce=Ba,Kn.defaults=Au,Kn.defaultsDeep=xu,Kn.defer=Oa,Kn.delay=Ea,Kn.difference=Ki,Kn.differenceBy=Gi,Kn.differenceWith=Ui,Kn.drop=function(t,e,n){var o=null==t?0:t.length;return o?io(t,(e=n||e===r?1:gu(e))<0?0:e,o):[]},Kn.dropRight=function(t,e,n){var o=null==t?0:t.length;return o?io(t,0,(e=o-(e=n||e===r?1:gu(e)))<0?0:e):[]},Kn.dropRightWhile=function(t,e){return t&&t.length?go(t,fi(e,3),!0,!0):[]},Kn.dropWhile=function(t,e){return t&&t.length?go(t,fi(e,3),!0):[]},Kn.fill=function(t,e,n,o){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&Pi(t,e,n)&&(n=0,o=i),function(t,e,n,o){var i=t.length;for((n=gu(n))<0&&(n=-n>i?0:i+n),(o=o===r||o>i?i:gu(o))<0&&(o+=i),o=n>o?0:yu(o);n<o;)t[n++]=e;return t}(t,e,n,o)):[]},Kn.filter=function(t,e){return(qa(t)?De:mr)(t,fi(e,3))},Kn.flatMap=function(t,e){return _r(Ta(t,e),1)},Kn.flatMapDeep=function(t,e){return _r(Ta(t,e),d)},Kn.flatMapDepth=function(t,e,n){return n=n===r?1:gu(n),_r(Ta(t,e),n)},Kn.flatten=Vi,Kn.flattenDeep=function(t){return(null==t?0:t.length)?_r(t,d):[]},Kn.flattenDepth=function(t,e){return(null==t?0:t.length)?_r(t,e=e===r?1:gu(e)):[]},Kn.flip=function(t){return ti(t,512)},Kn.flow=rl,Kn.flowRight=ol,Kn.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var o=t[e];r[o[0]]=o[1]}return r},Kn.functions=function(t){return null==t?[]:kr(t,Bu(t))},Kn.functionsIn=function(t){return null==t?[]:kr(t,Ou(t))},Kn.groupBy=Pa,Kn.initial=function(t){return(null==t?0:t.length)?io(t,0,-1):[]},Kn.intersection=Zi,Kn.intersectionBy=Yi,Kn.intersectionWith=Ji,Kn.invert=Nu,Kn.invertBy=Ru,Kn.invokeMap=wa,Kn.iteratee=al,Kn.keyBy=ka,Kn.keys=Bu,Kn.keysIn=Ou,Kn.map=Ta,Kn.mapKeys=function(t,e){var n={};return e=fi(e,3),Pr(t,(function(t,r,o){ur(n,e(t,r,o),t)})),n},Kn.mapValues=function(t,e){var n={};return e=fi(e,3),Pr(t,(function(t,r,o){ur(n,r,e(t,r,o))})),n},Kn.matches=function(t){return Kr(cr(t,1))},Kn.matchesProperty=function(t,e){return Gr(t,cr(e,1))},Kn.memoize=Wa,Kn.merge=Eu,Kn.mergeWith=Wu,Kn.method=ul,Kn.methodOf=ll,Kn.mixin=sl,Kn.negate=Ia,Kn.nthArg=function(t){return t=gu(t),Xr((function(e){return Hr(e,t)}))},Kn.omit=Iu,Kn.omitBy=function(t,e){return ju(t,Ia(fi(e)))},Kn.once=function(t){return Na(2,t)},Kn.orderBy=function(t,e,n,o){return null==t?[]:(qa(e)||(e=null==e?[]:[e]),qa(n=o?r:n)||(n=null==n?[]:[n]),qr(t,e,n))},Kn.over=fl,Kn.overArgs=La,Kn.overEvery=hl,Kn.overSome=dl,Kn.partial=ja,Kn.partialRight=Fa,Kn.partition=Aa,Kn.pick=Lu,Kn.pickBy=ju,Kn.property=pl,Kn.propertyOf=function(t){return function(e){return null==t?r:Tr(t,e)}},Kn.pull=Qi,Kn.pullAll=ta,Kn.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?$r(t,e,fi(n,2)):t},Kn.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?$r(t,e,r,n):t},Kn.pullAt=ea,Kn.range=vl,Kn.rangeRight=gl,Kn.rearg=za,Kn.reject=function(t,e){return(qa(t)?De:mr)(t,Ia(fi(e,3)))},Kn.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,o=[],i=t.length;for(e=fi(e,3);++r<i;){var a=t[r];e(a,r,t)&&(n.push(a),o.push(r))}return Zr(t,o),n},Kn.rest=function(t,e){if("function"!=typeof t)throw new Rt(o);return Xr(t,e=e===r?e:gu(e))},Kn.reverse=na,Kn.sampleSize=function(t,e,n){return e=(n?Pi(t,e,n):e===r)?1:gu(e),(qa(t)?tr:to)(t,e)},Kn.set=function(t,e,n){return null==t?t:eo(t,e,n)},Kn.setWith=function(t,e,n,o){return o="function"==typeof o?o:r,null==t?t:eo(t,e,n,o)},Kn.shuffle=function(t){return(qa(t)?er:oo)(t)},Kn.slice=function(t,e,n){var o=null==t?0:t.length;return o?(n&&"number"!=typeof n&&Pi(t,e,n)?(e=0,n=o):(e=null==e?0:gu(e),n=n===r?o:gu(n)),io(t,e,n)):[]},Kn.sortBy=xa,Kn.sortedUniq=function(t){return t&&t.length?so(t):[]},Kn.sortedUniqBy=function(t,e){return t&&t.length?so(t,fi(e,2)):[]},Kn.split=function(t,e,n){return n&&"number"!=typeof n&&Pi(t,e,n)&&(e=n=r),(n=n===r?g:n>>>0)?(t=bu(t))&&("string"==typeof e||null!=e&&!uu(e))&&!(e=fo(e))&&ln(t)?ko(vn(t),0,n):t.split(e,n):[]},Kn.spread=function(t,e){if("function"!=typeof t)throw new Rt(o);return e=null==e?0:bn(gu(e),0),Xr((function(n){var r=n[e],o=ko(n,0,e);return r&&We(o,r),xe(t,this,o)}))},Kn.tail=function(t){var e=null==t?0:t.length;return e?io(t,1,e):[]},Kn.take=function(t,e,n){return t&&t.length?io(t,0,(e=n||e===r?1:gu(e))<0?0:e):[]},Kn.takeRight=function(t,e,n){var o=null==t?0:t.length;return o?io(t,(e=o-(e=n||e===r?1:gu(e)))<0?0:e,o):[]},Kn.takeRightWhile=function(t,e){return t&&t.length?go(t,fi(e,3),!1,!0):[]},Kn.takeWhile=function(t,e){return t&&t.length?go(t,fi(e,3)):[]},Kn.tap=function(t,e){return e(t),t},Kn.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new Rt(o);return nu(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),Ba(t,e,{leading:r,maxWait:e,trailing:i})},Kn.thru=va,Kn.toArray=pu,Kn.toPairs=Fu,Kn.toPairsIn=zu,Kn.toPath=function(t){return qa(t)?Ee(t,ji):cu(t)?[t]:Do(Li(bu(t)))},Kn.toPlainObject=_u,Kn.transform=function(t,e,n){var r=qa(t),o=r||Ya(t)||fu(t);if(e=fi(e,4),null==n){var i=t&&t.constructor;n=o?r?new i:[]:nu(t)&&Qa(i)?Gn($t(t)):{}}return(o?Me:Pr)(t,(function(t,r,o){return e(n,t,r,o)})),n},Kn.unary=function(t){return Ma(t,1)},Kn.union=ra,Kn.unionBy=oa,Kn.unionWith=ia,Kn.uniq=function(t){return t&&t.length?ho(t):[]},Kn.uniqBy=function(t,e){return t&&t.length?ho(t,fi(e,2)):[]},Kn.uniqWith=function(t,e){return e="function"==typeof e?e:r,t&&t.length?ho(t,r,e):[]},Kn.unset=function(t,e){return null==t||po(t,e)},Kn.unzip=aa,Kn.unzipWith=ua,Kn.update=function(t,e,n){return null==t?t:vo(t,e,Co(n))},Kn.updateWith=function(t,e,n,o){return o="function"==typeof o?o:r,null==t?t:vo(t,e,Co(n),o)},Kn.values=Ku,Kn.valuesIn=function(t){return null==t?[]:tn(t,Ou(t))},Kn.without=la,Kn.words=Qu,Kn.wrap=function(t,e){return ja(Co(e),t)},Kn.xor=sa,Kn.xorBy=ca,Kn.xorWith=fa,Kn.zip=ha,Kn.zipObject=function(t,e){return _o(t||[],e||[],rr)},Kn.zipObjectDeep=function(t,e){return _o(t||[],e||[],eo)},Kn.zipWith=da,Kn.entries=Fu,Kn.entriesIn=zu,Kn.extend=Pu,Kn.extendWith=wu,sl(Kn,Kn),Kn.add=_l,Kn.attempt=tl,Kn.camelCase=Gu,Kn.capitalize=Uu,Kn.ceil=bl,Kn.clamp=function(t,e,n){return n===r&&(n=e,e=r),n!==r&&(n=(n=mu(n))==n?n:0),e!==r&&(e=(e=mu(e))==e?e:0),sr(mu(t),e,n)},Kn.clone=function(t){return cr(t,4)},Kn.cloneDeep=function(t){return cr(t,5)},Kn.cloneDeepWith=function(t,e){return cr(t,5,e="function"==typeof e?e:r)},Kn.cloneWith=function(t,e){return cr(t,4,e="function"==typeof e?e:r)},Kn.conformsTo=function(t,e){return null==e||fr(t,e,Bu(e))},Kn.deburr=Hu,Kn.defaultTo=function(t,e){return null==t||t!=t?e:t},Kn.divide=Cl,Kn.endsWith=function(t,e,n){t=bu(t),e=fo(e);var o=t.length,i=n=n===r?o:sr(gu(n),0,o);return(n-=e.length)>=0&&t.slice(n,i)==e},Kn.eq=Ka,Kn.escape=function(t){return(t=bu(t))&&J.test(t)?t.replace(Z,an):t},Kn.escapeRegExp=function(t){return(t=bu(t))&&it.test(t)?t.replace(ot,"\\$&"):t},Kn.every=function(t,e,n){var o=qa(t)?Re:gr;return n&&Pi(t,e,n)&&(e=r),o(t,fi(e,3))},Kn.find=ma,Kn.findIndex=Hi,Kn.findKey=function(t,e){return ze(t,fi(e,3),Pr)},Kn.findLast=_a,Kn.findLastIndex=qi,Kn.findLastKey=function(t,e){return ze(t,fi(e,3),wr)},Kn.floor=Pl,Kn.forEach=ba,Kn.forEachRight=Ca,Kn.forIn=function(t,e){return null==t?t:br(t,fi(e,3),Ou)},Kn.forInRight=function(t,e){return null==t?t:Cr(t,fi(e,3),Ou)},Kn.forOwn=function(t,e){return t&&Pr(t,fi(e,3))},Kn.forOwnRight=function(t,e){return t&&wr(t,fi(e,3))},Kn.get=Su,Kn.gt=Ga,Kn.gte=Ua,Kn.has=function(t,e){return null!=t&&mi(t,e,Mr)},Kn.hasIn=Mu,Kn.head=$i,Kn.identity=il,Kn.includes=function(t,e,n,r){t=$a(t)?t:Ku(t),n=n&&!r?gu(n):0;var o=t.length;return n<0&&(n=bn(o+n,0)),su(t)?n<=o&&t.indexOf(e,n)>-1:!!o&&Ge(t,e,n)>-1},Kn.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var o=null==n?0:gu(n);return o<0&&(o=bn(r+o,0)),Ge(t,e,o)},Kn.inRange=function(t,e,n){return e=vu(e),n===r?(n=e,e=0):n=vu(n),function(t,e,n){return t>=Cn(e,n)&&t<bn(e,n)}(t=mu(t),e,n)},Kn.invoke=Du,Kn.isArguments=Ha,Kn.isArray=qa,Kn.isArrayBuffer=Va,Kn.isArrayLike=$a,Kn.isArrayLikeObject=Za,Kn.isBoolean=function(t){return!0===t||!1===t||ru(t)&&xr(t)==b},Kn.isBuffer=Ya,Kn.isDate=Ja,Kn.isElement=function(t){return ru(t)&&1===t.nodeType&&!au(t)},Kn.isEmpty=function(t){if(null==t)return!0;if($a(t)&&(qa(t)||"string"==typeof t||"function"==typeof t.splice||Ya(t)||fu(t)||Ha(t)))return!t.length;var e=yi(t);if(e==T||e==N)return!t.size;if(Ai(t))return!Lr(t).length;for(var n in t)if(It.call(t,n))return!1;return!0},Kn.isEqual=function(t,e){return Or(t,e)},Kn.isEqualWith=function(t,e,n){var o=(n="function"==typeof n?n:r)?n(t,e):r;return o===r?Or(t,e,r,n):!!o},Kn.isError=Xa,Kn.isFinite=function(t){return"number"==typeof t&&Fe(t)},Kn.isFunction=Qa,Kn.isInteger=tu,Kn.isLength=eu,Kn.isMap=ou,Kn.isMatch=function(t,e){return t===e||Er(t,e,di(e))},Kn.isMatchWith=function(t,e,n){return n="function"==typeof n?n:r,Er(t,e,di(e),n)},Kn.isNaN=function(t){return iu(t)&&t!=+t},Kn.isNative=function(t){if(Ti(t))throw new Tt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Wr(t)},Kn.isNil=function(t){return null==t},Kn.isNull=function(t){return null===t},Kn.isNumber=iu,Kn.isObject=nu,Kn.isObjectLike=ru,Kn.isPlainObject=au,Kn.isRegExp=uu,Kn.isSafeInteger=function(t){return tu(t)&&t>=-9007199254740991&&t<=p},Kn.isSet=lu,Kn.isString=su,Kn.isSymbol=cu,Kn.isTypedArray=fu,Kn.isUndefined=function(t){return t===r},Kn.isWeakMap=function(t){return ru(t)&&yi(t)==B},Kn.isWeakSet=function(t){return ru(t)&&"[object WeakSet]"==xr(t)},Kn.join=function(t,e){return null==t?"":$e.call(t,e)},Kn.kebabCase=qu,Kn.last=Xi,Kn.lastIndexOf=function(t,e,n){var o=null==t?0:t.length;if(!o)return-1;var i=o;return n!==r&&(i=(i=gu(n))<0?bn(o+i,0):Cn(i,o-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,i):Ke(t,He,i,!0)},Kn.lowerCase=Vu,Kn.lowerFirst=$u,Kn.lt=hu,Kn.lte=du,Kn.max=function(t){return t&&t.length?yr(t,il,Sr):r},Kn.maxBy=function(t,e){return t&&t.length?yr(t,fi(e,2),Sr):r},Kn.mean=function(t){return qe(t,il)},Kn.meanBy=function(t,e){return qe(t,fi(e,2))},Kn.min=function(t){return t&&t.length?yr(t,il,Fr):r},Kn.minBy=function(t,e){return t&&t.length?yr(t,fi(e,2),Fr):r},Kn.stubArray=yl,Kn.stubFalse=ml,Kn.stubObject=function(){return{}},Kn.stubString=function(){return""},Kn.stubTrue=function(){return!0},Kn.multiply=kl,Kn.nth=function(t,e){return t&&t.length?Hr(t,gu(e)):r},Kn.noConflict=function(){return ve._===this&&(ve._=Kt),this},Kn.noop=cl,Kn.now=Sa,Kn.pad=function(t,e,n){t=bu(t);var r=(e=gu(e))?pn(t):0;if(!e||r>=e)return t;var o=(e-r)/2;return Vo(ye(o),n)+t+Vo(ge(o),n)},Kn.padEnd=function(t,e,n){t=bu(t);var r=(e=gu(e))?pn(t):0;return e&&r<e?t+Vo(e-r,n):t},Kn.padStart=function(t,e,n){t=bu(t);var r=(e=gu(e))?pn(t):0;return e&&r<e?Vo(e-r,n)+t:t},Kn.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),wn(bu(t).replace(at,""),e||0)},Kn.random=function(t,e,n){if(n&&"boolean"!=typeof n&&Pi(t,e,n)&&(e=n=r),n===r&&("boolean"==typeof e?(n=e,e=r):"boolean"==typeof t&&(n=t,t=r)),t===r&&e===r?(t=0,e=1):(t=vu(t),e===r?(e=t,t=0):e=vu(e)),t>e){var o=t;t=e,e=o}if(n||t%1||e%1){var i=kn();return Cn(t+i*(e-t+fe("1e-"+((i+"").length-1))),e)}return Yr(t,e)},Kn.reduce=function(t,e,n){var r=qa(t)?Ie:Ze,o=arguments.length<3;return r(t,fi(e,4),n,o,pr)},Kn.reduceRight=function(t,e,n){var r=qa(t)?Le:Ze,o=arguments.length<3;return r(t,fi(e,4),n,o,vr)},Kn.repeat=function(t,e,n){return e=(n?Pi(t,e,n):e===r)?1:gu(e),Jr(bu(t),e)},Kn.replace=function(){var t=arguments,e=bu(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Kn.result=function(t,e,n){var o=-1,i=(e=Po(e,t)).length;for(i||(i=1,t=r);++o<i;){var a=null==t?r:t[ji(e[o])];a===r&&(o=i,a=n),t=Qa(a)?a.call(t):a}return t},Kn.round=Tl,Kn.runInContext=t,Kn.sample=function(t){return(qa(t)?Qn:Qr)(t)},Kn.size=function(t){if(null==t)return 0;if($a(t))return su(t)?pn(t):t.length;var e=yi(t);return e==T||e==N?t.size:Lr(t).length},Kn.snakeCase=Zu,Kn.some=function(t,e,n){var o=qa(t)?je:ao;return n&&Pi(t,e,n)&&(e=r),o(t,fi(e,3))},Kn.sortedIndex=function(t,e){return uo(t,e)},Kn.sortedIndexBy=function(t,e,n){return lo(t,e,fi(n,2))},Kn.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=uo(t,e);if(r<n&&Ka(t[r],e))return r}return-1},Kn.sortedLastIndex=function(t,e){return uo(t,e,!0)},Kn.sortedLastIndexBy=function(t,e,n){return lo(t,e,fi(n,2),!0)},Kn.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var n=uo(t,e,!0)-1;if(Ka(t[n],e))return n}return-1},Kn.startCase=Yu,Kn.startsWith=function(t,e,n){return t=bu(t),n=null==n?0:sr(gu(n),0,t.length),e=fo(e),t.slice(n,n+e.length)==e},Kn.subtract=Al,Kn.sum=function(t){return t&&t.length?Ye(t,il):0},Kn.sumBy=function(t,e){return t&&t.length?Ye(t,fi(e,2)):0},Kn.template=function(t,e,n){var o=Kn.templateSettings;n&&Pi(t,e,n)&&(e=r),t=bu(t),e=wu({},e,o,ei);var i,a,u=wu({},e.imports,o.imports,ei),l=Bu(u),s=tn(u,l),c=0,f=e.interpolate||Pt,h="__p += '",d=Mt((e.escape||Pt).source+"|"+f.source+"|"+(f===tt?pt:Pt).source+"|"+(e.evaluate||Pt).source+"|$","g"),p="//# sourceURL="+(It.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++ue+"]")+"\n";t.replace(d,(function(e,n,r,o,u,l){return r||(r=o),h+=t.slice(c,l).replace(wt,un),n&&(i=!0,h+="' +\n__e("+n+") +\n'"),u&&(a=!0,h+="';\n"+u+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=l+e.length,e})),h+="';\n";var v=It.call(e,"variable")&&e.variable;if(v){if(ht.test(v))throw new Tt("Invalid `variable` option passed into `_.template`")}else h="with (obj) {\n"+h+"\n}\n";h=(a?h.replace(H,""):h).replace(q,"$1").replace(V,"$1;"),h="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var g=tl((function(){return At(l,p+"return "+h).apply(r,s)}));if(g.source=h,Xa(g))throw g;return g},Kn.times=function(t,e){if((t=gu(t))<1||t>p)return[];var n=g,r=Cn(t,g);e=fi(e),t-=g;for(var o=Je(r,e);++n<t;)e(n);return o},Kn.toFinite=vu,Kn.toInteger=gu,Kn.toLength=yu,Kn.toLower=function(t){return bu(t).toLowerCase()},Kn.toNumber=mu,Kn.toSafeInteger=function(t){return t?sr(gu(t),-9007199254740991,p):0===t?t:0},Kn.toString=bu,Kn.toUpper=function(t){return bu(t).toUpperCase()},Kn.trim=function(t,e,n){if((t=bu(t))&&(n||e===r))return Xe(t);if(!t||!(e=fo(e)))return t;var o=vn(t),i=vn(e);return ko(o,nn(o,i),rn(o,i)+1).join("")},Kn.trimEnd=function(t,e,n){if((t=bu(t))&&(n||e===r))return t.slice(0,gn(t)+1);if(!t||!(e=fo(e)))return t;var o=vn(t);return ko(o,0,rn(o,vn(e))+1).join("")},Kn.trimStart=function(t,e,n){if((t=bu(t))&&(n||e===r))return t.replace(at,"");if(!t||!(e=fo(e)))return t;var o=vn(t);return ko(o,nn(o,vn(e))).join("")},Kn.truncate=function(t,e){var n=30,o="...";if(nu(e)){var i="separator"in e?e.separator:i;n="length"in e?gu(e.length):n,o="omission"in e?fo(e.omission):o}var a=(t=bu(t)).length;if(ln(t)){var u=vn(t);a=u.length}if(n>=a)return t;var l=n-pn(o);if(l<1)return o;var s=u?ko(u,0,l).join(""):t.slice(0,l);if(i===r)return s+o;if(u&&(l+=s.length-l),uu(i)){if(t.slice(l).search(i)){var c,f=s;for(i.global||(i=Mt(i.source,bu(vt.exec(i))+"g")),i.lastIndex=0;c=i.exec(f);)var h=c.index;s=s.slice(0,h===r?l:h)}}else if(t.indexOf(fo(i),l)!=l){var d=s.lastIndexOf(i);d>-1&&(s=s.slice(0,d))}return s+o},Kn.unescape=function(t){return(t=bu(t))&&Y.test(t)?t.replace($,yn):t},Kn.uniqueId=function(t){var e=++Lt;return bu(t)+e},Kn.upperCase=Ju,Kn.upperFirst=Xu,Kn.each=ba,Kn.eachRight=Ca,Kn.first=$i,sl(Kn,(wl={},Pr(Kn,(function(t,e){It.call(Kn.prototype,e)||(wl[e]=t)})),wl),{chain:!1}),Kn.VERSION="4.17.21",Me(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Kn[t].placeholder=Kn})),Me(["drop","take"],(function(t,e){qn.prototype[t]=function(n){n=n===r?1:bn(gu(n),0);var o=this.__filtered__&&!e?new qn(this):this.clone();return o.__filtered__?o.__takeCount__=Cn(n,o.__takeCount__):o.__views__.push({size:Cn(n,g),type:t+(o.__dir__<0?"Right":"")}),o},qn.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),Me(["filter","map","takeWhile"],(function(t,e){var n=e+1,r=1==n||3==n;qn.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:fi(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}})),Me(["head","last"],(function(t,e){var n="take"+(e?"Right":"");qn.prototype[t]=function(){return this[n](1).value()[0]}})),Me(["initial","tail"],(function(t,e){var n="drop"+(e?"":"Right");qn.prototype[t]=function(){return this.__filtered__?new qn(this):this[n](1)}})),qn.prototype.compact=function(){return this.filter(il)},qn.prototype.find=function(t){return this.filter(t).head()},qn.prototype.findLast=function(t){return this.reverse().find(t)},qn.prototype.invokeMap=Xr((function(t,e){return"function"==typeof t?new qn(this):this.map((function(n){return Dr(n,t,e)}))})),qn.prototype.reject=function(t){return this.filter(Ia(fi(t)))},qn.prototype.slice=function(t,e){t=gu(t);var n=this;return n.__filtered__&&(t>0||e<0)?new qn(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),e!==r&&(n=(e=gu(e))<0?n.dropRight(-e):n.take(e-t)),n)},qn.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},qn.prototype.toArray=function(){return this.take(g)},Pr(qn.prototype,(function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),o=/^(?:head|last)$/.test(e),i=Kn[o?"take"+("last"==e?"Right":""):e],a=o||/^find/.test(e);i&&(Kn.prototype[e]=function(){var e=this.__wrapped__,u=o?[1]:arguments,l=e instanceof qn,s=u[0],c=l||qa(e),f=function(t){var e=i.apply(Kn,We([t],u));return o&&h?e[0]:e};c&&n&&"function"==typeof s&&1!=s.length&&(l=c=!1);var h=this.__chain__,d=!!this.__actions__.length,p=a&&!h,v=l&&!d;if(!a&&c){e=v?e:new qn(this);var g=t.apply(e,u);return g.__actions__.push({func:va,args:[f],thisArg:r}),new Hn(g,h)}return p&&v?t.apply(this,u):(g=this.thru(f),p?o?g.value()[0]:g.value():g)})})),Me(["pop","push","shift","sort","splice","unshift"],(function(t){var e=Dt[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Kn.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var o=this.value();return e.apply(qa(o)?o:[],t)}return this[n]((function(n){return e.apply(qa(n)?n:[],t)}))}})),Pr(qn.prototype,(function(t,e){var n=Kn[e];if(n){var r=n.name+"";It.call(Bn,r)||(Bn[r]=[]),Bn[r].push({name:e,func:n})}})),Bn[Go(r,2).name]=[{name:"wrapper",func:r}],qn.prototype.clone=function(){var t=new qn(this.__wrapped__);return t.__actions__=Do(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Do(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Do(this.__views__),t},qn.prototype.reverse=function(){if(this.__filtered__){var t=new qn(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},qn.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=qa(t),r=e<0,o=n?t.length:0,i=function(t,e,n){var r=-1,o=n.length;for(;++r<o;){var i=n[r],a=i.size;switch(i.type){case"drop":t+=a;break;case"dropRight":e-=a;break;case"take":e=Cn(e,t+a);break;case"takeRight":t=bn(t,e-a)}}return{start:t,end:e}}(0,o,this.__views__),a=i.start,u=i.end,l=u-a,s=r?u:a-1,c=this.__iteratees__,f=c.length,h=0,d=Cn(l,this.__takeCount__);if(!n||!r&&o==l&&d==l)return yo(t,this.__actions__);var p=[];t:for(;l--&&h<d;){for(var v=-1,g=t[s+=e];++v<f;){var y=c[v],m=y.iteratee,_=y.type,b=m(g);if(2==_)g=b;else if(!b){if(1==_)continue t;break t}}p[h++]=g}return p},Kn.prototype.at=ga,Kn.prototype.chain=function(){return pa(this)},Kn.prototype.commit=function(){return new Hn(this.value(),this.__chain__)},Kn.prototype.next=function(){this.__values__===r&&(this.__values__=pu(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?r:this.__values__[this.__index__++]}},Kn.prototype.plant=function(t){for(var e,n=this;n instanceof Un;){var o=zi(n);o.__index__=0,o.__values__=r,e?i.__wrapped__=o:e=o;var i=o;n=n.__wrapped__}return i.__wrapped__=t,e},Kn.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof qn){var e=t;return this.__actions__.length&&(e=new qn(this)),(e=e.reverse()).__actions__.push({func:va,args:[na],thisArg:r}),new Hn(e,this.__chain__)}return this.thru(na)},Kn.prototype.toJSON=Kn.prototype.valueOf=Kn.prototype.value=function(){return yo(this.__wrapped__,this.__actions__)},Kn.prototype.first=Kn.prototype.head,Qt&&(Kn.prototype[Qt]=function(){return this}),Kn}();ye?((ye.exports=mn)._=mn,ge._=mn):ve._=mn}).call(h)}(d,d.exports);var p=d.exports,v=require("spark-md5"),g=function(t,e){void 0===e&&(e=[]);var n="n";if(e.length>0&&(n+="".concat(e[0].token).concat(e[0].value)),t){var r=t.getPath();r.length>0&&(n=r.map((function(t){return t.model.id})).join("=>")+"=>".concat(n))}return v.hash(n).slice(0,6)};function y(t,e){void 0===e&&(e=["C","TM","GN","PC"]);for(var n,r=[],o=new RegExp("\\b(".concat(e.join("|"),")\\[([^\\]]*)\\]"),"g");null!==(n=o.exec(t));){var i=n.index+n[1].length+1,a=i+n[2].length;r.push([i,a])}return r}function m(t,e){for(var n=0,r=e.length-1;n<=r;){var o=n+r>>1,i=a(e[o],2),u=i[0],l=i[1];if(t<u)r=o-1;else{if(!(t>l))return!0;n=o+1}}return!1}var _,b,C,P,w,k,T,A,x,S,M=function(t){return p.filter(t,(function(e,n){return n===p.findLastIndex(t,(function(t){return e.token===t.token&&e.value===t.value}))}))},N=function(t){return t.model.moveProps.length>0},R=function(t){return t.model.setupProps.length>0},D=function(t,e){var n=t.getPath().filter((function(t){return N(t)})).length;return e&&(n+=e.getPath().filter((function(t){return N(t)})).length),n};t.ThemePropertyKey=void 0,(_=t.ThemePropertyKey||(t.ThemePropertyKey={})).PositiveNodeColor="positiveNodeColor",_.NegativeNodeColor="negativeNodeColor",_.NeutralNodeColor="neutralNodeColor",_.DefaultNodeColor="defaultNodeColor",_.WarningNodeColor="warningNodeColor",_.ShadowColor="shadowColor",_.BoardLineColor="boardLineColor",_.ActiveColor="activeColor",_.InactiveColor="inactiveColor",_.BoardBackgroundColor="boardBackgroundColor",_.FlatBlackColor="flatBlackColor",_.FlatBlackColorAlt="flatBlackColorAlt",_.FlatWhiteColor="flatWhiteColor",_.FlatWhiteColorAlt="flatWhiteColorAlt",_.BoardEdgeLineWidth="boardEdgeLineWidth",_.BoardLineWidth="boardLineWidth",_.BoardLineExtent="boardLineExtent",_.StarSize="starSize",_.MarkupLineWidth="markupLineWidth",_.HighlightColor="highlightColor",t.Ki=void 0,(b=t.Ki||(t.Ki={}))[b.Black=1]="Black",b[b.White=-1]="White",b[b.Empty=0]="Empty",t.Theme=void 0,(C=t.Theme||(t.Theme={})).BlackAndWhite="black_and_white",C.Flat="flat",C.Subdued="subdued",C.ShellStone="shell_stone",C.SlateAndShell="slate_and_shell",C.Walnut="walnut",C.Photorealistic="photorealistic",C.Dark="dark",C.Warm="warm",C.YunziMonkeyDark="yunzi_monkey_dark",C.HighContrast="high_contrast",t.AnalysisPointTheme=void 0,(P=t.AnalysisPointTheme||(t.AnalysisPointTheme={})).Default="default",P.Problem="problem",t.Center=void 0,(w=t.Center||(t.Center={})).Left="l",w.Right="r",w.Top="t",w.Bottom="b",w.TopRight="tr",w.TopLeft="tl",w.BottomLeft="bl",w.BottomRight="br",w.Center="c",t.Effect=void 0,(k=t.Effect||(t.Effect={})).None="",k.Ban="ban",k.Dim="dim",k.Highlight="highlight",t.Markup=void 0,function(t){t.Current="cu",t.Circle="ci",t.CircleSolid="cis",t.Square="sq",t.SquareSolid="sqs",t.Triangle="tri",t.Cross="cr",t.Number="num",t.Letter="le",t.PositiveNode="pos",t.PositiveActiveNode="posa",t.PositiveDashedNode="posda",t.PositiveDottedNode="posdt",t.PositiveDashedActiveNode="posdaa",t.PositiveDottedActiveNode="posdta",t.NegativeNode="neg",t.NegativeActiveNode="nega",t.NegativeDashedNode="negda",t.NegativeDottedNode="negdt",t.NegativeDashedActiveNode="negdaa",t.NegativeDottedActiveNode="negdta",t.NeutralNode="neu",t.NeutralActiveNode="neua",t.NeutralDashedNode="neuda",t.NeutralDottedNode="neudt",t.NeutralDashedActiveNode="neudta",t.NeutralDottedActiveNode="neudaa",t.WarningNode="wa",t.WarningActiveNode="waa",t.WarningDashedNode="wada",t.WarningDottedNode="wadt",t.WarningDashedActiveNode="wadaa",t.WarningDottedActiveNode="wadta",t.DefaultNode="de",t.DefaultActiveNode="dea",t.DefaultDashedNode="deda",t.DefaultDottedNode="dedt",t.DefaultDashedActiveNode="dedaa",t.DefaultDottedActiveNode="dedta",t.Node="node",t.DashedNode="danode",t.DottedNode="dtnode",t.ActiveNode="anode",t.DashedActiveNode="danode",t.Highlight="hl",t.None=""}(t.Markup||(t.Markup={})),t.Cursor=void 0,(T=t.Cursor||(t.Cursor={})).None="",T.BlackStone="b",T.WhiteStone="w",T.Circle="c",T.Square="s",T.Triangle="tri",T.Cross="cr",T.Clear="cl",T.Text="t",t.ProblemAnswerType=void 0,(A=t.ProblemAnswerType||(t.ProblemAnswerType={})).Right="1",A.Wrong="2",A.Variant="3",t.PathDetectionStrategy=void 0,(x=t.PathDetectionStrategy||(t.PathDetectionStrategy={})).Post="post",x.Pre="pre",x.Both="both";var B="https://s.shaowq.com",O={positiveNodeColor:"#4d7c0f",negativeNodeColor:"#b91c1c",neutralNodeColor:"#a16207",defaultNodeColor:"#404040",warningNodeColor:"#ffdf20",shadowColor:"#555555",boardLineColor:"#000000",activeColor:"#000000",inactiveColor:"#666666",boardBackgroundColor:"#FFFFFF",flatBlackColor:"#000000",flatBlackColorAlt:"#000000",flatWhiteColor:"#FFFFFF",flatWhiteColorAlt:"#FFFFFF",boardEdgeLineWidth:2,boardLineWidth:1.2,boardLineExtent:.5,starSize:3,markupLineWidth:2,highlightColor:"#ffeb64"},E=["A","B","C","D","E","F","G","H","J","K","L","M","N","O","P","Q","R","S","T"],W=[19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],I=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s"],L={boardSize:19,padding:15,extent:2,interactive:!1,coordinate:!0,theme:t.Theme.Flat,background:!1,zoom:!1,showAnalysis:!1},j=((S={})[t.Theme.BlackAndWhite]={blacks:[],whites:[]},S[t.Theme.Subdued]={board:"".concat(B,"/assets/theme/subdued/board.png"),blacks:["".concat(B,"/assets/theme/subdued/black.png")],whites:["".concat(B,"/assets/theme/subdued/white.png")]},S[t.Theme.ShellStone]={board:"".concat(B,"/assets/theme/shell-stone/board.png"),blacks:["".concat(B,"/assets/theme/shell-stone/black.png")],whites:["".concat(B,"/assets/theme/shell-stone/white0.png"),"".concat(B,"/assets/theme/shell-stone/white1.png"),"".concat(B,"/assets/theme/shell-stone/white2.png"),"".concat(B,"/assets/theme/shell-stone/white3.png"),"".concat(B,"/assets/theme/shell-stone/white4.png")]},S[t.Theme.SlateAndShell]={board:"".concat(B,"/assets/theme/slate-and-shell/board.png"),blacks:["".concat(B,"/assets/theme/slate-and-shell/slate1.png"),"".concat(B,"/assets/theme/slate-and-shell/slate2.png"),"".concat(B,"/assets/theme/slate-and-shell/slate3.png"),"".concat(B,"/assets/theme/slate-and-shell/slate4.png"),"".concat(B,"/assets/theme/slate-and-shell/slate5.png")],whites:["".concat(B,"/assets/theme/slate-and-shell/shell1.png"),"".concat(B,"/assets/theme/slate-and-shell/shell2.png"),"".concat(B,"/assets/theme/slate-and-shell/shell3.png"),"".concat(B,"/assets/theme/slate-and-shell/shell4.png"),"".concat(B,"/assets/theme/slate-and-shell/shell5.png")]},S[t.Theme.Walnut]={board:"".concat(B,"/assets/theme/walnut/board.jpg"),blacks:["".concat(B,"/assets/theme/walnut/black.png")],whites:["".concat(B,"/assets/theme/walnut/white.png")]},S[t.Theme.Photorealistic]={board:"".concat(B,"/assets/theme/photorealistic/board.png"),blacks:["".concat(B,"/assets/theme/photorealistic/black.png")],whites:["".concat(B,"/assets/theme/photorealistic/white.png")]},S[t.Theme.Flat]={blacks:[],whites:[]},S[t.Theme.Warm]={blacks:[],whites:[]},S[t.Theme.Dark]={blacks:[],whites:[]},S[t.Theme.YunziMonkeyDark]={board:"".concat(B,"/assets/theme/ymd/yunzi-monkey-dark/YMD-Bo-V10_lessborder1920px.png"),blacks:["".concat(B,"/assets/theme/ymd/yunzi-monkey-dark/YMD-B-v14-338px.png")],whites:["".concat(B,"/assets/theme/ymd/yunzi-monkey-dark/YMD-W-v14-338px.png")],lowRes:{board:"".concat(B,"/assets/theme/ymd/yunzi-monkey-dark/YMD-Bo-V10_lessborder-960px.png"),blacks:["".concat(B,"/assets/theme/ymd/yunzi-monkey-dark/YMD-B-v14-135px.png")],whites:["".concat(B,"/assets/theme/ymd/yunzi-monkey-dark/YMD-W-v14-135px.png")]}},S[t.Theme.HighContrast]={blacks:[],whites:[]},S),F="rgba(136, 170, 60, 1)",z="rgba(206, 210, 83, 1)",K="rgba(242, 217, 60, 1)",G="rgba(236, 146, 73, 1)",U=["B","MN","W"],H=["AB","AE","AW"],q=["A","C","DM","GB","GW","HO","N","UC","V"],V=["BM","DO","IT"],$=["AR","CR","LB","LN","MA","SL","SQ","TR"],Z=["AP","CA","FF","GM","ST","SZ"],Y=["TE","KO","AN","BR","BT","CP","DT","EV","GN","GC","ON","OT","PB","PC","PW","RE","RO","RU","SO","TM","US","WR","WT"],J=["PI","PAI","NID","PAT"],X=["AB","AE","AW","MA","SL","SQ","TR"],Q=new RegExp(/([A-Z]*)\[([\s\S]*?)\]/),tt=function(){function t(t,e){this.type="-",this._value="",this._values=[],this.token=t,"string"==typeof e||e instanceof String?this.value=e:Array.isArray(e)&&(this.values=e)}return Object.defineProperty(t.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,X.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),t.prototype.toString=function(){return"".concat(this.token).concat(this._values.map((function(t){return"[".concat(t,"]")})).join(""))},t}(),et=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.type="move",r}return r(e,t),e.from=function(t){var n=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return n?new e(n[1],n[2]):new e("","")},Object.defineProperty(e.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,X.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),e}(tt),nt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.type="setup",r}return r(e,t),e.from=function(t){var n=t.match(Q),r="",o=u([],a(t.matchAll(/\[([\s\S]*?)\]/g)),!1).map((function(t){return t[1]}));return n&&(r=n[1]),new e(r,o)},Object.defineProperty(e.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,X.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),e}(tt),rt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.type="node-annotation",r}return r(e,t),e.from=function(t){var n=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return n?new e(n[1],n[2]):new e("","")},Object.defineProperty(e.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,X.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),e}(tt),ot=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.type="move-annotation",r}return r(e,t),e.from=function(t){var n=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return n?new e(n[1],n[2]):new e("","")},Object.defineProperty(e.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,X.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),e}(tt),it=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(tt),at=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.type="markup",r}return r(e,t),e.from=function(t){var n=t.match(Q),r="",o=u([],a(t.matchAll(/\[([\s\S]*?)\]/g)),!1).map((function(t){return t[1]}));return n&&(r=n[1]),new e(r,o)},Object.defineProperty(e.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,X.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),e}(tt),ut=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.type="root",r}return r(e,t),e.from=function(t){var n=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return n?new e(n[1],n[2]):new e("","")},Object.defineProperty(e.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,X.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),e}(tt),lt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.type="game-info",r}return r(e,t),e.from=function(t){var n=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return n?new e(n[1],n[2]):new e("","")},Object.defineProperty(e.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,X.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),e}(tt),st=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.type="custom",r}return r(e,t),e.from=function(t){var n=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return n?new e(n[1],n[2]):new e("","")},Object.defineProperty(e.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,X.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),e}(tt),ct=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.type="Timing",r}return r(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,X.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),e}(tt),ft=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e}(tt),ht=0,dt=[],pt=function(t){return[t.length,t.length>0?t[0].length:0]},vt=function(t,e,n,r){var o=pt(t);e>=0&&e<o[1]&&n>=0&&n<o[0]&&(t[e][n]!==r||dt.includes("".concat(e,",").concat(n))?0===t[e][n]&&(ht+=1):(dt.push("".concat(e,",").concat(n)),vt(t,e-1,n,r),vt(t,e+1,n,r),vt(t,e,n-1,r),vt(t,e,n+1,r)))},gt=function(t,e,n,r){var o=pt(t);return ht=0,dt=[],e<0||n<0||e>o[1]-1||n>o[0]-1||0===t[e][n]?{liberty:4,recursionPath:[]}:(vt(t,e,n,r),{liberty:ht,recursionPath:dt})},yt=function(t,e,n,r){var o=t,i=gt(t,e,n-1,r),a=i.liberty,u=i.recursionPath,l=gt(t,e,n+1,r),s=l.liberty,c=l.recursionPath,f=gt(t,e-1,n,r),h=f.liberty,d=f.recursionPath,p=gt(t,e+1,n,r),v=p.liberty,g=p.recursionPath;return 0===a&&u.forEach((function(t){var e=t.split(",");o[parseInt(e[0])][parseInt(e[1])]=0})),0===s&&c.forEach((function(t){var e=t.split(",");o[parseInt(e[0])][parseInt(e[1])]=0})),0===h&&d.forEach((function(t){var e=t.split(",");o[parseInt(e[0])][parseInt(e[1])]=0})),0===v&&g.forEach((function(t){var e=t.split(",");o[parseInt(e[0])][parseInt(e[1])]=0})),o},mt=function(t,e,n,r){var o=gt(t,e,n-1,r),i=o.liberty,a=o.recursionPath,u=gt(t,e,n+1,r),l=u.liberty,s=u.recursionPath,c=gt(t,e-1,n,r),f=c.liberty,h=c.recursionPath,d=gt(t,e+1,n,r),p=d.liberty,v=d.recursionPath;return 0===i&&a.length>0||(0===l&&s.length>0||(0===f&&h.length>0||0===p&&v.length>0))},_t=function(t,e,n,r){var o,i,a=p.cloneDeep(t);if(e<0||n<0||e>=t.length||n>=(null!==(i=null===(o=t[0])||void 0===o?void 0:o.length)&&void 0!==i?i:0))return!1;if(0!==t[e][n])return!1;a[e][n]=r;var u=gt(a,e,n,r).liberty;return!!mt(a,e,n,-r)||!mt(a,e,n,r)&&0!==u},bt=function(){function t(t,e){void 0===e&&(e={ignorePropList:[]}),this.content=t,this.parseOptions=e,this.NEW_NODE=";",this.BRANCHING=["(",")"],this.PROPERTY=["[","]"],this.LIST_IDENTITIES=["AW","AB","AE","AR","CR","DD","LB","LN","MA","SL","SQ","TR","VW","TB","TW"],this.NODE_DELIMITERS=[this.NEW_NODE].concat(this.BRANCHING),this.tree=new f,this.root=null,this.node=null,this.currentNode=null,this.parentNode=null,this.nodeProps=new Map,"string"==typeof t?this.parse(t):"object"==typeof t&&this.setRoot(t)}return t.prototype.setRoot=function(t){return this.root=t,this},t.prototype.toSgf=function(){return"(".concat(this.nodeToString(this.root),")")},t.prototype.toSgfWithoutAnalysis=function(){var t="(".concat(this.nodeToString(this.root),")");return p.replace(t,/](A\[.*?\])/g,"]")},t.prototype.parse=function(t){if(t){t=t.replace(/\s+(?![^\[\]]*])/gm,"");for(var e=0,n=0,r=[],o=y(t).sort((function(t,e){return t[0]-e[0]})),i=function(i){var s=t[i],c=m(i,o);if(l.NODE_DELIMITERS.includes(s)&&!c){var f=t.slice(e,i);if(""!==f){var h=[],d=[],p=[],v=[],y=[],_=[],b=[],C=[],P=u([],a(f.matchAll(RegExp(/\w+(\[[^\]]*?\](?:\r?\n?\s[^\]]*?)*){1,}/,"g"))),!1);if(P.forEach((function(t){var e=t[0].match(/([A-Z]+)\[/);if(e){var n=e[1];U.includes(n)&&h.push(et.from(t[0])),H.includes(n)&&d.push(nt.from(t[0])),Z.includes(n)&&p.push(ut.from(t[0])),$.includes(n)&&v.push(at.from(t[0])),Y.includes(n)&&y.push(lt.from(t[0])),q.includes(n)&&_.push(rt.from(t[0])),V.includes(n)&&b.push(ot.from(t[0])),J.includes(n)&&C.push(st.from(t[0]))}})),P.length>0){var w=g(l.currentNode,h),k=l.tree.parse({id:w,name:w,index:n,number:0,moveProps:h,setupProps:d,rootProps:p,markupProps:v,gameInfoProps:y,nodeAnnotationProps:_,moveAnnotationProps:b,customProps:C});l.currentNode?(l.currentNode.addChild(k),k.model.number=D(k)):(l.root=k,l.parentNode=k),l.currentNode=k,n+=1}}}("("===s&&l.currentNode&&!c&&r.push(l.currentNode),")"===s&&!c&&r.length>0)&&((k=r.pop())&&(l.currentNode=k));l.NODE_DELIMITERS.includes(s)&&!c&&(e=i)},l=this,s=0;s<t.length;s++)i(s)}},t.prototype.nodeToString=function(t){var e=this,n="";return t.walk((function(t){var r=t.model,o=r.rootProps,i=r.moveProps,l=r.customProps,s=r.setupProps,c=r.markupProps,f=r.nodeAnnotationProps,h=r.moveAnnotationProps,d=r.gameInfoProps,v=p.compact(u(u(u(u(u(u(u(u([],a(o),!1),a(l),!1),a(i),!1),a(M(s)),!1),a(M(c)),!1),a(d),!1),a(f),!1),a(h),!1));return n+=";",v.forEach((function(t){n+=t.toString()})),t.children.length>1&&t.children.forEach((function(t){n+="(".concat(e.nodeToString(t),")")})),t.children.length<2})),n},t}();require("spark-md5");var Ct=function(t,e,n){return void 0===e&&(e=1),void 0===n&&(n=3),(Math.round(1e3*t)/1e3*e).toFixed(n)},Pt=function(t){var e,n=null===(e=t.model.nodeAnnotationProps)||void 0===e?void 0:e.find((function(t){return"C"===t.token}));return!!(null==n?void 0:n.value.includes("CHOICE"))},wt=Pt,kt=function(t){var e,n=null===(e=t.model.nodeAnnotationProps)||void 0===e?void 0:e.find((function(t){return"C"===t.token}));return null==n?void 0:n.value.includes("FORCE")},Tt=function(t){var e,n=null===(e=t.model.nodeAnnotationProps)||void 0===e?void 0:e.find((function(t){return"C"===t.token}));return null==n?void 0:n.value.includes("NOTTHIS")},At=function(t){var e,n=null===(e=t.model.nodeAnnotationProps)||void 0===e?void 0:e.find((function(t){return"C"===t.token}));return!!(null==n?void 0:n.value.includes("RIGHT"))},xt=function(t){var e=t.getPath()[0].first((function(t){return At(t)}));return(null==e?void 0:e.model.id)===t.model.id},St=function(t){var e,n=null===(e=t.model.nodeAnnotationProps)||void 0===e?void 0:e.find((function(t){return"C"===t.token}));return!!(null==n?void 0:n.value.includes("VARIANT"))},Mt=function(t){var e,n=null===(e=t.model.nodeAnnotationProps)||void 0===e?void 0:e.find((function(t){return"C"===t.token}));return!(null==n?void 0:n.value.includes("VARIANT"))&&!(null==n?void 0:n.value.includes("RIGHT"))||!n},Nt=function(e,n,r,o,i){var a;void 0===r&&(r=t.PathDetectionStrategy.Post);var u=null!=o?o:e.getPath(),l=null!==(a=null==i?void 0:i.filter((function(t){return n(t)})))&&void 0!==a?a:e.all((function(t){return n(t)})),s=u.filter((function(t){return n(t)}));switch(r){case t.PathDetectionStrategy.Post:return l.length>0;case t.PathDetectionStrategy.Pre:return s.length>0;case t.PathDetectionStrategy.Both:return s.length>0||l.length>0;default:return!1}},Rt=function(e,n,r,o){return void 0===n&&(n=t.PathDetectionStrategy.Post),Nt(e,At,n,r,o)},Dt=function(e,n,r,o){return void 0===n&&(n=t.PathDetectionStrategy.Post),Nt(e,Pt,n,r,o)},Bt=Dt,Ot=function(e,n,r,o){return void 0===n&&(n=t.PathDetectionStrategy.Post),Nt(e,St,n,r,o)},Et=function(e,n,r,o){return void 0===n&&(n=t.PathDetectionStrategy.Post),Nt(e,Mt,n,r,o)},Wt=function(t,e){void 0===e&&(e=1);var n=[{value:1,symbol:""},{value:1e3,symbol:"k"},{value:1e6,symbol:"M"},{value:1e9,symbol:"G"},{value:1e12,symbol:"T"},{value:1e15,symbol:"P"},{value:1e18,symbol:"E"}].slice().reverse().find((function(e){return t>=e.value}));return n?(t/n.value).toFixed(e).replace(/\.0+$|(\.[0-9]*[1-9])0+$/,"$1")+n.symbol:"0"},It=function(t){var e="B"===t[0]?1:-1,n=/\[(.*)\]/.exec(t);if(n){var r=n[1];return{x:I.indexOf(r[0]),y:I.indexOf(r[1]),ki:e}}return{x:-1,y:-1,ki:0}},Lt=function(t){return{x:E.indexOf(t[0]),y:W.indexOf(parseInt(t.substr(1),0))}},jt=function(t,e){if(void 0===e&&(e=0),0===e)return t;var n=p.clone(t),r=I.indexOf(t[2])-e;return n.substr(0,2)+I[r]+n.substr(3)},Ft=function(t,e,n){if(void 0===e&&(e=0),void 0===n&&(n=0),"pass"===t)return t;var r=E.indexOf(t[0])+e,o=W.indexOf(parseInt(t.substr(1),0))+n;return"".concat(E[r]).concat(W[o])},zt=function(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r=!1),!t||!e)return"";var o=Kt(t,e);r&&(o=-o);var i=o.toFixed(n);return o>0?"+".concat(i):"".concat(i)},Kt=function(t,e){var n="B"===t.currentPlayer?1:-1;return Math.round((e.scoreLead-t.scoreLead)*n*1e3)/1e3},Gt=function(t,e){var n="B"===t.currentPlayer?1:-1;return Math.round((e.winrate-t.winrate)*n*1e3*100)/1e3},Ut=function(t,e){var n=e.prior,r=e.order,o=Kt(t,e);return n>=.5||n>=.1&&r<3&&o>-.3||0===r||o>=0?F:n>.05&&o>-.5||n>.01&&o>-.1?z:n>.01&&o>-1?K:G},Ht=function(t,e){return{id:t,name:t,number:e||0,rootProps:[],moveProps:[],setupProps:[],markupProps:[],gameInfoProps:[],nodeAnnotationProps:[],moveAnnotationProps:[],customProps:[]}},qt=function(t,e,n){var r=new f,i=et.from(t),a=g(e,[i]),u=1;e&&(u=D(e)+1);var l=Ht(a,u);return l.moveProps=[i],r.parse(o(o({},l),n))},Vt=function(t){return new Array(t[0]).fill(0).map((function(){return new Array(t[1]).fill(0)}))},$t=function(t){return new Array(t[0]).fill("").map((function(){return new Array(t[1]).fill("")}))},Zt=function(t,e){void 0===e&&(e=19);for(var n=e-1,r=0,o=e-1,i=0,a=0;a<t.length;a++)for(var u=0;u<t[a].length;u++){0!==t[a][u]&&(n>a&&(n=a),r<a&&(r=a),o>u&&(o=u),i<u&&(i=u))}return{leftMost:n,rightMost:r,topMost:o,bottomMost:i}},Yt=function(e,n){void 0===n&&(n=19);var r=Zt(e,n),o=r.leftMost,i=r.rightMost,a=r.topMost<n-1-r.bottomMost,u=o<n-1-i;return a&&u?t.Center.TopLeft:!a&&u?t.Center.BottomLeft:a&&!u?t.Center.TopRight:a||u?t.Center.Center:t.Center.BottomRight},Jt=function(e,n,r){void 0===n&&(n=19),void 0===r&&(r=2);var o=[19,19],i=Yt(e),a=Zt(e,n),u=a.leftMost,l=a.rightMost,s=a.topMost,c=a.bottomMost;return i===t.Center.TopLeft&&(o[0]=l+r+1,o[1]=c+r+1),i===t.Center.TopRight&&(o[0]=n-u+r,o[1]=c+r+1),i===t.Center.BottomLeft&&(o[0]=l+r+1,o[1]=n-s+r),i===t.Center.BottomRight&&(o[0]=n-u+r,o[1]=n-s+r),o[0]=Math.min(o[0],n),o[1]=Math.min(o[1],n),o},Xt=function(t,e,n){void 0===e&&(e=2),void 0===n&&(n=19);var r=Zt(t),o=r.leftMost,i=r.rightMost,a=r.topMost,u=r.bottomMost,l=n-1;return[[o-e<0?0:o-e,a-e<0?0:a-e],[i+e>l?l:i+e,u+e>l?l:u+e]]},Qt=function(e,n,r,o){void 0===n&&(n=19),void 0===r&&(r=19),void 0===o&&(o=19);var i=o-n,a=o-r,u=i,l=a;switch(Yt(e)){case t.Center.TopLeft:u=0,l=-a;break;case t.Center.TopRight:u=i,l=-a;break;case t.Center.BottomLeft:u=0,l=0;break;case t.Center.BottomRight:u=i,l=0}return{x:u,y:l}};function te(t,e,n){void 0===t&&(t=Vt([19,19])),void 0===n&&(n=!1);for(var r=t.length,o=0,i=t[0].length,a=0,u=!0,l=0;l<t.length;l++)for(var s=0;s<t[0].length;s++)0!==t[l][s]&&(u=!1,r=Math.min(r,l),o=Math.max(o,l),i=Math.min(i,s),a=Math.max(a,s));if(u)return[[0,t.length-1],[0,t[0].length-1]];if(n)r=Math.max(0,r-e),o=Math.min(t.length-1,o+e),i=Math.max(0,i-e),a=Math.min(t[0].length-1,a+e);else{var c=Math.max(r-e,0),f=Math.min(o+e,t.length-1),h=Math.max(i-e,0),d=Math.min(a+e,t[0].length-1),p=Math.max(f-c,d-h);(o=(r=c)+p)>=t.length&&(r=(o=t.length-1)-p),(a=(i=h)+p)>=t[0].length&&(i=(a=t[0].length-1)-p)}return[[r,o],[i,a]]}function ee(t,e,n,r){if(e<0||n<0)return t;var o=p.cloneDeep(t);return o[e][n]=r,yt(o,e,n,-r)}var ne=function(t,e){t.getPath().forEach((function(t){var n=t.model.setupProps;n.filter((function(t){return t.value===e})).length>0?t.model.setupProps=n.filter((function(t){return t.value!==e})):n.forEach((function(n){n.values=n.values.filter((function(t){return t!==e})),0===n.values.length&&(t.model.setupProps=t.model.setupProps.filter((function(t){return t.token!==n.token})))}))}))},re=function(e,n){void 0===n&&(n=19);var r,o,i=e.getPath(),a=i[0],u=0,l=ie(e,n),s=Vt([l,l]),c=Vt([l,l]),f=$t([l,l]),h=$t([l,l]);return i.forEach((function(n,a){var c=n.model,d=c.moveProps,p=c.setupProps;if(c.rootProps,p.length>0&&(u+=1),d.forEach((function(e){var c=I.indexOf(e.value[0]),d=I.indexOf(e.value[1]);c<0||d<0||c<l&&d<l&&(r=c,o=d,s=ee(s,c,d,"B"===e.token?t.Ki.Black:t.Ki.White),void 0!==r&&void 0!==o&&r>=0&&o>=0&&(h[r][o]=(n.model.number||a-u).toString()),a===i.length-1&&(f[r][o]=t.Markup.Current))})),p.forEach((function(t){t.values.forEach((function(e){var n=I.indexOf(e[0]),i=I.indexOf(e[1]);n<0||i<0||n<l&&i<l&&(r=n,o=i,s[n][i]="AB"===t.token?1:-1,"AE"===t.token&&(s[n][i]=0))}))})),0===p.length&&e.isRoot()){var v=e.children[0];if(v&&R(v)&&!N(v))v.model.setupProps.forEach((function(t){t.values.forEach((function(e){var n=I.indexOf(e[0]),i=I.indexOf(e[1]);n<0||i<0||n<l&&i<l&&(r=n,o=i,s[n][i]="AB"===t.token?1:-1,"AE"===t.token&&(s[n][i]=0))}))}))}for(var g=0;g<l;g++)for(var y=0;y<l;y++)0===s[g][y]&&(h[g][y]="")})),a&&a.all((function(e){var n=e.model,r=n.moveProps,o=n.setupProps;return n.rootProps,o.length>0&&(u+=1),o.forEach((function(e){e.values.forEach((function(n){var r=I.indexOf(n[0]),o=I.indexOf(n[1]);r>=0&&o>=0&&r<l&&o<l&&(c[r][o]=t.Ki.Black,"AE"===e.token&&(c[r][o]=0))}))})),r.forEach((function(e){var n=I.indexOf(e.value[0]),r=I.indexOf(e.value[1]);n>=0&&r>=0&&n<l&&r<l&&(c[n][r]=t.Ki.Black)})),!0})),e.model.markupProps.forEach((function(e){var n=e.token;e.values.forEach((function(e){var r=I.indexOf(e[0]),o=I.indexOf(e[1]);if(!(r<0||o<0)&&r<l&&o<l){var i=void 0;switch(n){case"CR":i=t.Markup.Circle;break;case"SQ":i=t.Markup.Square;break;case"TR":i=t.Markup.Triangle;break;case"MA":i=t.Markup.Cross;break;default:i=e.split(":")[1]}f[r][o]=i}}))})),{mat:s,visibleAreaMat:c,markup:f,numMarkup:h}},oe=function(t,e){if(t)return U.includes(e)?t.model.moveProps.find((function(t){return t.token===e})):q.includes(e)?t.model.nodeAnnotationProps.find((function(t){return t.token===e})):V.includes(e)?t.model.moveAnnotationProps.find((function(t){return t.token===e})):Z.includes(e)?t.model.rootProps.find((function(t){return t.token===e})):H.includes(e)?t.model.setupProps.find((function(t){return t.token===e})):$.includes(e)?t.model.markupProps.find((function(t){return t.token===e})):Y.includes(e)?t.model.gameInfoProps.find((function(t){return t.token===e})):null},ie=function(t,e){var n;void 0===e&&(e=19);var r=t.getPath()[0];return Math.min(parseInt(String((null===(n=oe(r,"SZ"))||void 0===n?void 0:n.value)||e)),29)},ae=function(e,n){if(void 0===n&&(n=t.Ki.Black),e){var r=e.first((function(t){return R(t)}));if(r){var o=r.first((function(t){return N(t)}));return o?ue(o):n}}return n},ue=function(e,n){var r,o;void 0===n&&(n=t.Ki.Black);var i=null===(o=null===(r=e.model)||void 0===r?void 0:r.moveProps)||void 0===o?void 0:o[0];switch(null==i?void 0:i.token){case"W":return t.Ki.White;case"B":return t.Ki.Black;default:return n}},le=function(){function t(t,e,n,r){this.ctx=t,this.x=e,this.y=n,this.ki=r,this.globalAlpha=1,this.size=0}return t.prototype.draw=function(){},t.prototype.setGlobalAlpha=function(t){this.globalAlpha=t},t.prototype.setSize=function(t){this.size=t},t}(),se=function(e){function n(t,n,r,o,i){var a=e.call(this,t,n,r,o)||this;return a.themeContext=i,a}return r(n,e),n.prototype.getThemeProperty=function(t){var e;if(!this.themeContext)return O[t];var n=this.themeContext,r=n.theme,o=n.themeOptions,i=o[r],a=o.default;return null!==(e=null==i?void 0:i[t])&&void 0!==e?e:a[t]},n.prototype.draw=function(){var e=this,n=e.ctx,r=e.x,o=e.y,i=e.size,a=e.ki,u=e.globalAlpha;i<=0||(n.save(),n.beginPath(),n.globalAlpha=u,n.arc(r,o,i/2,0,2*Math.PI,!0),n.lineWidth=1,n.strokeStyle=this.getThemeProperty("boardLineColor"),a===t.Ki.Black?n.fillStyle=this.getThemeProperty("flatBlackColor"):a===t.Ki.White&&(n.fillStyle=this.getThemeProperty("flatWhiteColor")),n.fill(),n.stroke(),n.restore())},n}(le),ce=function(e){function n(t,n,r,o,i,a,u,l){var s=e.call(this,t,n,r,o)||this;return s.mod=i,s.blacks=a,s.whites=u,s.themeContext=l,l&&(s.fallbackStone=new se(t,n,r,o,l)),s}return r(n,e),n.prototype.draw=function(){var e,n=this,r=n.ctx,o=n.x,i=n.y,a=n.size,u=n.ki,l=n.blacks,s=n.whites,c=n.mod;a<=0||((e=u===t.Ki.Black?l[c%l.length]:s[c%s.length])&&e.complete&&0!==e.naturalHeight?r.drawImage(e,o-a/2,i-a/2,a,a):this.fallbackStone&&(this.fallbackStone.setSize(a),this.fallbackStone.draw()))},n.prototype.setSize=function(t){e.prototype.setSize.call(this,t),this.fallbackStone&&this.fallbackStone.setSize(t)},n}(le),fe=function(){function e(e,n,r,o,i,a,u,l){void 0===u&&(u=t.AnalysisPointTheme.Default);var s=this;this.ctx=e,this.x=n,this.y=r,this.r=o,this.rootInfo=i,this.moveInfo=a,this.theme=u,this.outlineColor=l,this.drawProblemAnalysisPoint=function(){var t=s,e=t.ctx,n=t.x,r=t.y,o=t.r,i=t.rootInfo,a=t.moveInfo,u=t.outlineColor,l=a.order,c=Ut(i,a);if(l<5){e.beginPath(),e.arc(n,r,o,0,2*Math.PI,!0),e.lineWidth=0,e.strokeStyle="rgba(255,255,255,0)";var f=e.createRadialGradient(n,r,.9*o,n,r,o);f.addColorStop(0,c),f.addColorStop(.9,"rgba(255, 255, 255, 0"),e.fillStyle=f,e.fill(),u&&(e.beginPath(),e.arc(n,r,o,0,2*Math.PI,!0),e.lineWidth=4,e.strokeStyle=u,e.stroke());var h=o/1.5;e.font="".concat(.8*h,"px Tahoma"),e.fillStyle="black",e.textAlign="center",e.font="".concat(h,"px Tahoma");var d=zt(i,a);e.fillText(d,n,r),e.font="".concat(.8*h,"px Tahoma"),e.fillStyle="black",e.textAlign="center",e.fillText(Wt(a.visits),n,r+o/2+h/8)}else s.drawCandidatePoint()},this.drawDefaultAnalysisPoint=function(){var t=s,e=t.ctx,n=t.x,r=t.y,o=t.r,i=t.rootInfo,a=t.moveInfo,u=a.order,l=Ut(i,a);if(u<5){e.beginPath(),e.arc(n,r,o,0,2*Math.PI,!0),e.lineWidth=0,e.strokeStyle="rgba(255,255,255,0)";var c=e.createRadialGradient(n,r,.9*o,n,r,o);c.addColorStop(0,l),c.addColorStop(.9,"rgba(255, 255, 255, 0"),e.fillStyle=c,e.fill();var f=o/1.5;e.font="".concat(.8*f,"px Tahoma"),e.fillStyle="black",e.textAlign="center";var h="B"===i.currentPlayer?a.winrate:1-a.winrate;e.fillText(Ct(h,100,1),n,r-o/2+f/5),e.font="".concat(f,"px Tahoma");var d=zt(i,a);e.fillText(d,n,r+f/3),e.font="".concat(.8*f,"px Tahoma"),e.fillStyle="black",e.textAlign="center",e.fillText(Wt(a.visits),n,r+o/2+f/3);var p=a.order;e.fillText((p+1).toString(),n+o,r-o/2)}else s.drawCandidatePoint()},this.drawCandidatePoint=function(){var t=s,e=t.ctx,n=t.x,r=t.y,o=t.r,i=t.rootInfo,a=t.moveInfo,u=Ut(i,a);e.beginPath(),e.arc(n,r,.6*o,0,2*Math.PI,!0),e.lineWidth=0,e.strokeStyle="rgba(255,255,255,0)";var l=e.createRadialGradient(n,r,.4*o,n,r,o);l.addColorStop(0,u),l.addColorStop(.95,"rgba(255, 255, 255, 0"),e.fillStyle=l,e.fill(),e.stroke()}}return e.prototype.draw=function(){var e=this,n=e.ctx;e.x,e.y;var r=e.r;e.rootInfo,e.moveInfo;var o=e.theme;r<0||(n.save(),n.shadowOffsetX=0,n.shadowOffsetY=0,n.shadowColor="#fff",n.shadowBlur=0,o===t.AnalysisPointTheme.Default?this.drawDefaultAnalysisPoint():o===t.AnalysisPointTheme.Problem&&this.drawProblemAnalysisPoint(),n.restore())},e}(),he=function(){function t(t,e,n,r,o,i,a){void 0===a&&(a=""),this.ctx=t,this.x=e,this.y=n,this.s=r,this.ki=o,this.val=a,this.globalAlpha=1,this.color="",this.lineDash=[],this.themeContext=i}return t.prototype.draw=function(){},t.prototype.setGlobalAlpha=function(t){this.globalAlpha=t},t.prototype.setColor=function(t){this.color=t},t.prototype.setLineDash=function(t){this.lineDash=t},t.prototype.getThemeProperty=function(t){var e;if(!this.themeContext)return O[t];var n=this.themeContext,r=n.theme,o=n.themeOptions,i=o[r],a=o.default;return null!==(e=null==i?void 0:i[t])&&void 0!==e?e:a[t]},t}(),de=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return r(n,e),n.prototype.draw=function(){var e=this,n=e.ctx,r=e.x,o=e.y,i=e.s,a=e.ki,u=e.globalAlpha,l=e.color,s=.65*(.5*i);n.save(),n.beginPath(),n.globalAlpha=u,n.lineWidth=this.getThemeProperty("markupLineWidth"),n.setLineDash(this.lineDash),a===t.Ki.White?n.strokeStyle=this.getThemeProperty("flatBlackColor"):a===t.Ki.Black?n.strokeStyle=this.getThemeProperty("flatWhiteColor"):(n.strokeStyle=this.getThemeProperty("boardLineColor"),n.lineWidth=3),l&&(n.strokeStyle=l),s>0&&(n.arc(r,o,s,0,2*Math.PI,!0),n.stroke()),n.restore()},n}(he),pe=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return r(n,e),n.prototype.draw=function(){var e=this,n=e.ctx,r=e.x,o=e.y,i=e.s,a=e.ki,u=e.globalAlpha,l=.5*i,s=.5*l;n.save(),n.beginPath(),n.lineWidth=3,n.globalAlpha=u,a===t.Ki.White?n.strokeStyle=this.getThemeProperty("flatBlackColor"):a===t.Ki.Black?n.strokeStyle=this.getThemeProperty("flatWhiteColor"):(n.strokeStyle=this.getThemeProperty("boardLineColor"),s=.58*l),n.moveTo(r-s,o-s),n.lineTo(r+s,o+s),n.moveTo(r+s,o-s),n.lineTo(r-s,o+s),n.closePath(),n.stroke(),n.restore()},n}(he),ve=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return r(n,e),n.prototype.draw=function(){var e=this,n=e.ctx,r=e.x,o=e.y,i=e.s,a=e.ki,u=e.val,l=e.globalAlpha,s=.8*i,c=s/1.5;n.save(),n.globalAlpha=l,a===t.Ki.White?n.fillStyle=this.getThemeProperty("flatBlackColor"):a===t.Ki.Black?n.fillStyle=this.getThemeProperty("flatWhiteColor"):n.fillStyle=this.getThemeProperty("boardLineColor"),c=1===u.toString().length?s/1.5:2===u.toString().length?s/1.8:s/2,n.font="bold ".concat(c,"px Tahoma"),n.textAlign="center",n.textBaseline="middle",n.fillText(u.toString(),r,o+2),n.restore()},n}(he),ge=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return r(n,e),n.prototype.draw=function(){var e=this,n=e.ctx,r=e.x,o=e.y,i=e.s,a=e.ki,u=e.globalAlpha;n.save(),n.beginPath(),n.lineWidth=this.getThemeProperty("markupLineWidth"),n.globalAlpha=u;var l=.55*i;a===t.Ki.White?n.strokeStyle=this.getThemeProperty("flatBlackColor"):a===t.Ki.Black?n.strokeStyle=this.getThemeProperty("flatWhiteColor"):(n.strokeStyle=this.getThemeProperty("boardLineColor"),n.lineWidth=3),n.rect(r-l/2,o-l/2,l,l),n.stroke(),n.restore()},n}(he),ye=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return r(n,e),n.prototype.draw=function(){var e=this,n=e.ctx,r=e.x,o=e.y,i=e.s,a=e.ki,u=e.globalAlpha,l=.5*i,s=.75*l;n.save(),n.beginPath(),n.globalAlpha=u,n.moveTo(r,o-s),n.lineTo(r-s*Math.cos(.523),o+s*Math.sin(.523)),n.lineTo(r+s*Math.cos(.523),o+s*Math.sin(.523)),n.lineWidth=this.getThemeProperty("markupLineWidth"),a===t.Ki.White?n.strokeStyle=this.getThemeProperty("flatBlackColor"):a===t.Ki.Black?n.strokeStyle=this.getThemeProperty("flatWhiteColor"):(n.strokeStyle=this.getThemeProperty("boardLineColor"),n.lineWidth=3,s=.7*l),n.closePath(),n.stroke(),n.restore()},n}(he),me=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.draw=function(){var t=this,e=t.ctx,n=t.x,r=t.y,o=t.s;t.ki;var i=t.color,a=t.globalAlpha,u=.4*(.5*o);e.save(),e.beginPath(),e.globalAlpha=a,e.lineWidth=4,e.strokeStyle=i,e.setLineDash(this.lineDash),u>0&&(e.arc(n,r,u,0,2*Math.PI,!0),e.stroke()),e.restore()},e}(he),_e=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r(e,t),e.prototype.draw=function(){var t=this,e=t.ctx,n=t.x,r=t.y,o=t.s;t.ki;var i=t.color,a=t.globalAlpha,u=.5*(.5*o);e.save(),e.beginPath(),e.globalAlpha=a,e.lineWidth=4,e.strokeStyle=i,e.fillStyle=i,e.setLineDash(this.lineDash),u>0&&(e.arc(n,r,u,0,2*Math.PI,!0),e.stroke()),e.restore(),e.save(),e.beginPath(),e.fillStyle=i,u>0&&(e.arc(n,r,.4*u,0,2*Math.PI,!0),e.fill()),e.restore()},e}(he),be=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return r(n,e),n.prototype.draw=function(){var e=this,n=e.ctx,r=e.x,o=e.y,i=e.s,a=e.ki,u=e.globalAlpha,l=e.color,s=.65*(.25*i);n.save(),n.beginPath(),n.globalAlpha=u,n.lineWidth=this.getThemeProperty("markupLineWidth"),n.setLineDash(this.lineDash),a===t.Ki.Black?n.fillStyle=this.getThemeProperty("flatWhiteColor"):a===t.Ki.White?n.fillStyle=this.getThemeProperty("flatBlackColor"):(n.fillStyle=this.getThemeProperty("boardLineColor"),n.lineWidth=3),l&&(n.fillStyle=l),s>0&&(n.arc(r,o,s,0,2*Math.PI,!0),n.fill()),n.restore()},n}(he),Ce=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return r(n,e),n.prototype.draw=function(){var e=this,n=e.ctx,r=e.x,o=e.y,i=e.s,a=e.ki;e.globalAlpha,n.save(),n.beginPath(),n.lineWidth=this.getThemeProperty("markupLineWidth"),n.globalAlpha=.6;var u=.4*i;n.fillStyle=this.getThemeProperty("highlightColor"),a!==t.Ki.White&&a!==t.Ki.Black||(u=.35*i),n.arc(r,o,u,0,2*Math.PI,!0),n.fill(),n.restore()},n}(he),Pe=function(){function t(t,e,n,r,o){this.ctx=t,this.x=e,this.y=n,this.size=r,this.ki=o,this.globalAlpha=1,this.color=""}return t.prototype.play=function(){},t}(),we="function"==typeof Buffer;"function"==typeof TextDecoder&&new TextDecoder;var ke,Te="function"==typeof TextEncoder?new TextEncoder:void 0,Ae=Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=");ke={},Ae.forEach((function(t,e){return ke[t]=e}));var xe=String.fromCharCode.bind(String);"function"==typeof Uint8Array.from&&Uint8Array.from.bind(Uint8Array);var Se,Me="function"==typeof btoa?function(t){return btoa(t)}:we?function(t){return Buffer.from(t,"binary").toString("base64")}:function(t){for(var e,n,r,o,i="",a=t.length%3,u=0;u<t.length;){if((n=t.charCodeAt(u++))>255||(r=t.charCodeAt(u++))>255||(o=t.charCodeAt(u++))>255)throw new TypeError("invalid character found");i+=Ae[(e=n<<16|r<<8|o)>>18&63]+Ae[e>>12&63]+Ae[e>>6&63]+Ae[63&e]}return a?i.slice(0,a-3)+"===".substring(a):i},Ne=we?function(t){return Buffer.from(t).toString("base64")}:function(t){for(var e=[],n=0,r=t.length;n<r;n+=4096)e.push(xe.apply(null,t.subarray(n,n+4096)));return Me(e.join(""))},Re=function(t){if(t.length<2)return(e=t.charCodeAt(0))<128?t:e<2048?xe(192|e>>>6)+xe(128|63&e):xe(224|e>>>12&15)+xe(128|e>>>6&63)+xe(128|63&e);var e=65536+1024*(t.charCodeAt(0)-55296)+(t.charCodeAt(1)-56320);return xe(240|e>>>18&7)+xe(128|e>>>12&63)+xe(128|e>>>6&63)+xe(128|63&e)},De=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,Be=we?function(t){return Buffer.from(t,"utf8").toString("base64")}:Te?function(t){return Ne(Te.encode(t))}:function(t){return Me(t.replace(De,Re))},Oe='<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-ban" viewBox="0 0 16 16">\n  <path d="M15 8a6.97 6.97 0 0 0-1.71-4.584l-9.874 9.875A7 7 0 0 0 15 8M2.71 12.584l9.874-9.875a7 7 0 0 0-9.874 9.874ZM16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0"/>\n</svg>',Ee=function(t){function e(e,n,r,o,i){var a=t.call(this,e,n,r,o,i)||this;a.ctx=e,a.x=n,a.y=r,a.size=o,a.ki=i,a.img=new Image,a.alpha=0,a.fadeInDuration=200,a.fadeOutDuration=150,a.stayDuration=400,a.startTime=performance.now(),a.isFadingOut=!1,a.play=function(){if(a.img.complete){var t=a,e=t.ctx,n=t.x,r=t.y,o=t.size,i=t.img,u=t.fadeInDuration,l=t.fadeOutDuration,s=performance.now();a.startTime||(a.startTime=s),e.clearRect(n-o/2,r-o/2,o,o),e.globalAlpha=a.alpha,e.drawImage(i,n-o/2,r-o/2,o,o),e.globalAlpha=1;var c=s-a.startTime;if(a.isFadingOut){var f=s-a.startTime;if(a.alpha=Math.max(1-f/l,0),f>=l)return a.alpha=0,void e.clearRect(n-o/2,r-o/2,o,o)}else a.alpha=Math.min(c/u,1),c>=u&&(a.alpha=1,setTimeout((function(){a.isFadingOut=!0,a.startTime=performance.now()}),a.stayDuration));requestAnimationFrame(a.play)}},new Blob([Oe],{type:"image/svg+xml"});var u="data:image/svg+xml;base64,".concat(function(t){return arguments.length>1&&void 0!==arguments[1]&&arguments[1]?function(t){return t.replace(/=/g,"").replace(/[+\/]/g,(function(t){return"+"==t?"-":"_"}))}(Be(t)):Be(t)}(Oe));return a.img=new Image,a.img.src=u,a}return r(e,t),e}(Pe),We=function(t,e){var n=e[t];return n?"undefined"!=typeof window&&(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||window.innerWidth<=768)&&n.lowRes?{board:n.lowRes.board||n.board,blacks:n.lowRes.blacks.length>0?n.lowRes.blacks:n.blacks,whites:n.lowRes.whites.length>0?n.lowRes.whites:n.whites}:{board:n.board,blacks:n.blacks,whites:n.whites}:null},Ie={};function Le(){return/Mobi|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}var je=1;"undefined"!=typeof window&&(je=window.devicePixelRatio||1);var Fe=((Se={default:O})[t.Theme.Flat]={boardBackgroundColor:"#e6bb85"},Se[t.Theme.Warm]={boardBackgroundColor:"#C18B50"},Se[t.Theme.Dark]={activeColor:"#9CA3AF",inactiveColor:"#666666",boardLineColor:"#9CA3AF",boardBackgroundColor:"#2B3035"},Se[t.Theme.YunziMonkeyDark]={activeColor:"#A1C9AF",inactiveColor:"#A1C9AF",boardLineColor:"#A1C9AF",flatBlackColor:"#0E2019",flatBlackColorAlt:"#021D11",flatWhiteColor:"#A2C8B4",flatWhiteColorAlt:"#AFCBBC",shadowColor:"rgba(0, 0, 0, 0.4)"},Se[t.Theme.HighContrast]={boardBackgroundColor:"#F5F5DC",boardLineColor:"#2F4F4F",activeColor:"#2F4F4F",inactiveColor:"#808080",flatBlackColor:"#000000",flatBlackColorAlt:"#1A1A1A",flatWhiteColor:"#FFFFFF",flatWhiteColorAlt:"#F8F8F8",positiveNodeColor:"#0284C7",negativeNodeColor:"#EA580C",neutralNodeColor:"#7C2D12",defaultNodeColor:"#4B5563",warningNodeColor:"#FBBF24",highlightColor:"#FDE047",shadowColor:"#374151"},Se),ze=function(){function e(e){void 0===e&&(e={});var n=this;this.defaultOptions={boardSize:19,dynamicPadding:!1,padding:10,extent:3,interactive:!1,coordinate:!0,theme:t.Theme.BlackAndWhite,analysisPointTheme:t.AnalysisPointTheme.Default,background:!1,showAnalysis:!1,adaptiveBoardLine:!0,themeOptions:Fe,themeResources:j,moveSound:!1,adaptiveStarSize:!0,mobileIndicatorOffset:0},this.cursor=t.Cursor.None,this.cursorValue="",this.touchMoving=!1,this.touchStartPoint=new DOMPoint,this.cursorPoint=new DOMPoint,this.actualCursorPoint=new DOMPoint,this.nodeMarkupStyles={},this.setCursorWithRender=function(t,e){var r,o;void 0===e&&(e=0);var i=n.options.padding,a=n.calcSpaceAndPadding().space,u=n.transMat.inverse().transformPoint(t),l=Math.round((u.x-i+a/2)/a),s=Math.round((u.y-i+a/2)/a)+e,c=new DOMPoint(l*a,s*a),f=n.transMat.transformPoint(c);if(n.actualCursorPoint=f,n.actualCursorPosition=[l-1,s-1],1===(null===(o=null===(r=n.preventMoveMat)||void 0===r?void 0:r[l-1])||void 0===o?void 0:o[s-1]))return n.cursorPosition=[-1,-1],n.cursorPoint=new DOMPoint,void n.drawCursor();n.cursorPoint=f,n.cursorPosition=[l-1,s-1],n.drawCursor(),Le()&&n.drawBoard()},this.onMouseMove=function(t){if(n.cursorCanvas){t.preventDefault();var e=new DOMPoint(t.offsetX*je,t.offsetY*je);n.setCursorWithRender(e)}},this.calcTouchPoint=function(t){var e=new DOMPoint,r=n.cursorCanvas;if(!r)return e;var o=r.getBoundingClientRect(),i=t.changedTouches;return e=new DOMPoint((i[0].clientX-o.left)*je,(i[0].clientY-o.top)*je)},this.onTouchStart=function(t){if(n.cursorCanvas){t.preventDefault(),n.touchMoving=!0;var e=n.calcTouchPoint(t);n.touchStartPoint=e,n.setCursorWithRender(e)}},this.onTouchMove=function(t){if(n.cursorCanvas){t.preventDefault(),n.touchMoving=!0;var e=n.calcTouchPoint(t),r=0;(Math.abs(e.x-n.touchStartPoint.x)>10||Math.abs(e.y-n.touchStartPoint.y)>10)&&(r=n.options.mobileIndicatorOffset),n.setCursorWithRender(e,r)}},this.onTouchEnd=function(){n.touchMoving=!1},this.calcCenter=function(){var e=n.visibleArea,r=n.options.boardSize;return 0===e[0][0]&&e[0][1]===r-1||0===e[1][0]&&e[1][1]===r-1?t.Center.Center:0===e[0][0]?0===e[1][0]?t.Center.TopLeft:e[1][1]===r-1?t.Center.BottomLeft:t.Center.Left:e[0][1]===r-1?0===e[1][0]?t.Center.TopRight:e[1][1]===r-1?t.Center.BottomRight:t.Center.Right:0===e[1][0]?t.Center.Top:e[1][1]===r-1?t.Center.Bottom:t.Center.Center},this.clearAllCanvas=function(){n.clearCanvas(n.board),n.clearCanvas(),n.clearCanvas(n.markupCanvas),n.clearCanvas(n.effectCanvas),n.clearCursorCanvas(),n.clearAnalysisCanvas()},this.clearBoard=function(){if(n.board){var t=n.board.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,t.canvas.width,t.canvas.height),t.restore())}},this.clearCanvas=function(t){if(void 0===t&&(t=n.canvas),t){var e=t.getContext("2d");e&&(e.save(),e.setTransform(1,0,0,1,0,0),e.clearRect(0,0,t.width,t.height),e.restore())}},this.clearMarkupCanvas=function(){if(n.markupCanvas){var t=n.markupCanvas.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,n.markupCanvas.width,n.markupCanvas.height),t.restore())}},this.clearCursorCanvas=function(){if(n.cursorCanvas){n.options.boardSize;var t=n.cursorCanvas.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,n.cursorCanvas.width,n.cursorCanvas.height),t.restore())}},this.clearAnalysisCanvas=function(){if(n.analysisCanvas){var t=n.analysisCanvas.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,n.analysisCanvas.width,n.analysisCanvas.height),t.restore())}},this.drawAnalysis=function(e){void 0===e&&(e=n.analysis);var r=n.analysisCanvas,o=n.options,i=o.theme,a=void 0===i?t.Theme.BlackAndWhite:i,u=o.analysisPointTheme,l=o.boardSize;o.forceAnalysisBoardSize;var s=n,c=s.mat,f=s.markup;if(r&&e){var h=r.getContext("2d");if(h){n.clearAnalysisCanvas();var d=e.rootInfo;e.moveInfos.forEach((function(r){if("pass"!==r.move){var o=JSON.parse(e.id),i=l,s=Ft(r.move,0,i-o.by),p=Lt(s),v=p.x,g=p.y;if(0===c[v][g]){var y,m=n.calcSpaceAndPadding(),_=m.space,b=m.scaledPadding,C=b+v*_,P=b+g*_;h.save(),a!==t.Theme.Subdued&&a!==t.Theme.BlackAndWhite&&a!==t.Theme.Flat&&a!==t.Theme.Warm&&a!==t.Theme.Dark?(h.shadowOffsetX=30,h.shadowOffsetY=30,h.shadowColor=n.getThemeProperty(t.ThemePropertyKey.ShadowColor),h.shadowBlur=8):(h.shadowOffsetX=0,h.shadowOffsetY=0,h.shadowColor="#fff",h.shadowBlur=0),f[v][g].includes(t.Markup.PositiveNode)&&(y=n.getThemeProperty(t.ThemePropertyKey.PositiveNodeColor)),f[v][g].includes(t.Markup.NegativeNode)&&(y=n.getThemeProperty(t.ThemePropertyKey.NegativeNodeColor)),f[v][g].includes(t.Markup.NeutralNode)&&(y=n.getThemeProperty(t.ThemePropertyKey.NeutralNodeColor)),new fe(h,C,P,.46*_,d,r,u,y).draw(),h.restore()}}}))}}},this.drawMarkup=function(e,r,o,i){void 0===e&&(e=n.mat),void 0===r&&(r=n.markup),void 0===o&&(o=n.markupCanvas),void 0===i&&(i=!0);var a=o;if(n.options.theme,a){i&&n.clearCanvas(a);for(var u=function(o){for(var i=function(i){var u=r[o][i];null==u||u.split("|").forEach((function(r){if(null!==r&&""!==r){var u,l=n.calcSpaceAndPadding(),s=l.space,c=l.scaledPadding,f=c+o*s,h=c+i*s,d=e[o][i],p=a.getContext("2d");if(p){switch(r){case t.Markup.Circle:u=new de(p,f,h,s,d,n.createThemeContext());break;case t.Markup.Current:u=new be(p,f,h,s,d,n.createThemeContext());break;case t.Markup.PositiveActiveNode:case t.Markup.PositiveDashedActiveNode:case t.Markup.PositiveDottedActiveNode:case t.Markup.NegativeActiveNode:case t.Markup.NegativeDashedActiveNode:case t.Markup.NegativeDottedActiveNode:case t.Markup.NeutralActiveNode:case t.Markup.NeutralDashedActiveNode:case t.Markup.NeutralDottedActiveNode:case t.Markup.WarningActiveNode:case t.Markup.WarningDashedActiveNode:case t.Markup.WarningDottedActiveNode:case t.Markup.DefaultActiveNode:case t.Markup.DefaultDashedActiveNode:case t.Markup.DefaultDottedActiveNode:var v=n.nodeMarkupStyles[r],g=v.color,y=v.lineDash;(u=new _e(p,f,h,s,d,n.createThemeContext(),t.Markup.Circle)).setColor(g),u.setLineDash(y);break;case t.Markup.PositiveNode:case t.Markup.PositiveDashedNode:case t.Markup.PositiveDottedNode:case t.Markup.NegativeNode:case t.Markup.NegativeDashedNode:case t.Markup.NegativeDottedNode:case t.Markup.NeutralNode:case t.Markup.NeutralDashedNode:case t.Markup.NeutralDottedNode:case t.Markup.WarningNode:case t.Markup.WarningDashedNode:case t.Markup.WarningDottedNode:case t.Markup.DefaultNode:case t.Markup.DefaultDashedNode:case t.Markup.DefaultDottedNode:case t.Markup.Node:var m=n.nodeMarkupStyles[r];g=m.color,y=m.lineDash;(u=new me(p,f,h,s,d,n.createThemeContext(),t.Markup.Circle)).setColor(g),u.setLineDash(y);break;case t.Markup.Square:u=new ge(p,f,h,s,d,n.createThemeContext());break;case t.Markup.Triangle:u=new ye(p,f,h,s,d,n.createThemeContext());break;case t.Markup.Cross:u=new pe(p,f,h,s,d,n.createThemeContext());break;case t.Markup.Highlight:u=new Ce(p,f,h,s,d,n.createThemeContext());break;default:""!==r&&(u=new ve(p,f,h,s,d,n.createThemeContext(),r))}null==u||u.draw()}}}))},u=0;u<r[o].length;u++)i(u)},l=0;l<r.length;l++)u(l)}},this.drawBoard=function(t,e){void 0===t&&(t=n.board),void 0===e&&(e=!0),e&&n.clearCanvas(t),n.drawBan(t),n.drawBoardLine(t),n.drawStars(t),n.options.coordinate&&n.drawCoordinate()},this.drawBan=function(e){void 0===e&&(e=n.board);var r=n.options,o=r.theme,i=r.themeResources;if(r.padding,e){e.style.borderRadius="2px";var a=e.getContext("2d");if(a)if(o===t.Theme.BlackAndWhite||o===t.Theme.Flat||o===t.Theme.Warm||o===t.Theme.Dark||o===t.Theme.HighContrast)e.style.boxShadow=o===t.Theme.BlackAndWhite?"0px 0px 0px #000000":"",a.fillStyle=n.getThemeProperty(t.ThemePropertyKey.BoardBackgroundColor),a.fillRect(0,0,e.width,e.height);else{var u=We(o,i);if(u&&u.board){var l=u.board,s=Ie[l];if(s)if(o===t.Theme.Walnut||o===t.Theme.YunziMonkeyDark)a.drawImage(s,0,0,e.width,e.height);else{var c=a.createPattern(s,"repeat");c&&(a.fillStyle=c,a.fillRect(0,0,e.width,e.height))}}}}},this.drawBoardLine=function(e){if(void 0===e&&(e=n.board),e){var r=n,o=r.visibleArea,i=r.options,a=r.mat,u=r.preventMoveMat,l=r.cursorPosition,s=i.zoom,c=i.boardSize,f=i.adaptiveBoardLine;i.theme;var h=n.getThemeProperty(t.ThemePropertyKey.BoardLineWidth),d=n.getThemeProperty(t.ThemePropertyKey.BoardEdgeLineWidth),p=n.getThemeProperty(t.ThemePropertyKey.BoardLineExtent),v=e.getContext("2d");if(v){var g=n.calcSpaceAndPadding(),y=g.space,m=g.scaledPadding,_=s?p*y:0,b=n.getThemeProperty(t.ThemePropertyKey.ActiveColor),C=n.getThemeProperty(t.ThemePropertyKey.InactiveColor);v.fillStyle=n.getThemeProperty(t.ThemePropertyKey.BoardLineColor);for(var P=f?.001*e.width*2:d,w=f?.001*e.width:h,k=_t(a,l[0],l[1],n.turn)&&0===u[l[0]][l[1]],T=o[0][0];T<=o[0][1];T++){v.beginPath(),0===o[0][0]&&0===T||o[0][1]===c-1&&T===c-1?v.lineWidth=P:v.lineWidth=w,Le()&&T===n.cursorPosition[0]&&n.touchMoving?(v.lineWidth=2.5*v.lineWidth,v.strokeStyle=k?b:C):v.strokeStyle=b;var A=0===T||T===c-1?m+o[1][0]*y-P/2:m+o[1][0]*y;Le()&&(A+=je/2);var x=0===T||T===c-1?y*o[1][1]+m+P/2:y*o[1][1]+m;Le()&&(x-=je/2),o[1][0]>0&&(A-=_),o[1][1]<c-1&&(x+=_),v.moveTo(T*y+m,A),v.lineTo(T*y+m,x),v.stroke()}for(T=o[1][0];T<=o[1][1];T++){v.beginPath(),0===o[1][0]&&0===T||o[1][1]===c-1&&T===c-1?v.lineWidth=P:v.lineWidth=w,Le()&&T===n.cursorPosition[1]&&n.touchMoving?(v.lineWidth=2.5*v.lineWidth,v.strokeStyle=k?b:C):v.strokeStyle=b;var S=0===T||T===c-1?m+o[0][0]*y-P/2:m+o[0][0]*y,M=0===T||T===c-1?y*o[0][1]+m+P/2:y*o[0][1]+m;Le()&&(S+=je/2),Le()&&(M-=je/2),o[0][0]>0&&(S-=_),o[0][1]<c-1&&(M+=_),v.moveTo(S,T*y+m),v.lineTo(M,T*y+m),v.stroke()}}}},this.drawStars=function(e){if(void 0===e&&(e=n.board),e&&19===n.options.boardSize){var r=n.options.adaptiveStarSize,o=n.getThemeProperty(t.ThemePropertyKey.StarSize),i=n.visibleArea,a=e.getContext("2d"),u=r?.0035*e.width:o;if(a){var l=n.calcSpaceAndPadding(),s=l.space,c=l.scaledPadding;a.stroke(),[3,9,15].forEach((function(t){[3,9,15].forEach((function(e){t>=i[0][0]&&t<=i[0][1]&&e>=i[1][0]&&e<=i[1][1]&&(a.beginPath(),a.arc(t*s+c,e*s+c,u,0,2*Math.PI,!0),a.fillStyle=n.getThemeProperty("boardLineColor"),a.fill())}))}))}}},this.drawCoordinate=function(){var e=n,r=e.board,o=e.options,i=e.visibleArea;if(r){var a=o.boardSize;o.zoom;var u=o.padding;o.theme;var l=n.getThemeProperty("boardLineExtent"),s=i[0][1]-i[0][0]+1,c=r.getContext("2d"),f=n.calcSpaceAndPadding(),h=f.space,d=f.scaledPadding;if(c){c.textBaseline="middle",c.textAlign="center",c.fillStyle=n.getThemeProperty("boardLineColor"),c.font="bold ".concat(h/3,"px Helvetica");var p=n.calcCenter(),v=h/1.5;p===t.Center.Center&&0===i[0][0]&&i[0][1]===a-1&&(v-=d/2),E.forEach((function(e,n){var r=h*n+d,o=v,a=v;p!==t.Center.TopLeft&&p!==t.Center.TopRight&&p!==t.Center.Top||(o-=h*l),p!==t.Center.BottomLeft&&p!==t.Center.BottomRight&&p!==t.Center.Bottom||(a-=h*l/2);var f=i[1][0]*h+u-o,g=f+s*h+2*a;n>=i[0][0]&&n<=i[0][1]&&(p!==t.Center.BottomLeft&&p!==t.Center.BottomRight&&p!==t.Center.Bottom&&c.fillText(e,r,f),p!==t.Center.TopLeft&&p!==t.Center.TopRight&&p!==t.Center.Top&&c.fillText(e,r,g))})),W.slice(-n.options.boardSize).forEach((function(e,n){var r=h*n+d,o=v,a=v;p!==t.Center.TopLeft&&p!==t.Center.BottomLeft&&p!==t.Center.Left||(o-=h*l),p!==t.Center.TopRight&&p!==t.Center.BottomRight&&p!==t.Center.Right||(a-=h*l/2);var f=i[0][0]*h+u-o,g=f+s*h+2*a;n>=i[1][0]&&n<=i[1][1]&&(p!==t.Center.TopRight&&p!==t.Center.BottomRight&&p!==t.Center.Right&&c.fillText(e.toString(),f,r),p!==t.Center.TopLeft&&p!==t.Center.BottomLeft&&p!==t.Center.Left&&c.fillText(e.toString(),g,r))}))}}},this.calcSpaceAndPadding=function(t){void 0===t&&(t=n.canvas);var e=0,r=0,o=0;if(t){var i=n.options,a=i.padding,u=i.boardSize,l=i.zoom,s=n.getThemeProperty("boardLineExtent"),c=n.visibleArea;(0!==c[0][0]&&c[0][1]===u-1||0!==c[1][0]&&c[1][1]===u-1)&&(o=s),(0!==c[0][0]&&c[0][1]!==u-1||0!==c[1][0]&&c[1][1]!==u-1)&&(o=2*s);var f=l?u+o:u;r=a+(e=(t.width-2*a)/Math.ceil(f))/2}return{space:e,scaledPadding:r,scaledBoardExtent:o}},this.playEffect=function(e,r,o){void 0===e&&(e=n.mat),void 0===r&&(r=n.effectMat),void 0===o&&(o=!0);var i=n.effectCanvas;if(i){o&&n.clearCanvas(i);for(var a=0;a<r.length;a++)for(var u=0;u<r[a].length;u++){var l=r[a][u],s=n.calcSpaceAndPadding(),c=s.space,f=s.scaledPadding,h=f+a*c,d=f+u*c,p=e[a][u],v=i.getContext("2d");if(v){if(l===t.Effect.Ban)new Ee(v,h,d,c,p).play();r[a][u]=t.Effect.None}}var g=n.options.boardSize;n.setEffectMat($t([g,g]))}},this.drawCursor=function(){var e,r,o=n.cursorCanvas;if(o){if(n.clearCursorCanvas(),n.cursor===t.Cursor.None)return;if(Le()&&!n.touchMoving)return;var i=n.options,u=i.padding;i.theme;var l=o.getContext("2d"),s=n.calcSpaceAndPadding().space,c=n,f=c.visibleArea,h=c.cursor,d=c.cursorValue,p=a(n.cursorPosition,2),v=p[0],g=p[1];if(v<f[0][0]||v>f[0][1])return;if(g<f[1][0]||g>f[1][1])return;var y=v*s+s/2+u,m=g*s+s/2+u,_=(null===(r=null===(e=n.mat)||void 0===e?void 0:e[v])||void 0===r?void 0:r[g])||t.Ki.Empty;if(l){var b=void 0,C=.8*s;h===t.Cursor.Circle?(b=new de(l,y,m,s,_,n.createThemeContext())).setGlobalAlpha(.8):h===t.Cursor.Square?(b=new ge(l,y,m,s,_,n.createThemeContext())).setGlobalAlpha(.8):h===t.Cursor.Triangle?(b=new ye(l,y,m,s,_,n.createThemeContext())).setGlobalAlpha(.8):h===t.Cursor.Cross?(b=new pe(l,y,m,s,_,n.createThemeContext())).setGlobalAlpha(.8):h===t.Cursor.Text?(b=new ve(l,y,m,s,_,n.createThemeContext(),d)).setGlobalAlpha(.8):_===t.Ki.Empty&&h===t.Cursor.BlackStone?((b=new se(l,y,m,t.Ki.Black,n.createThemeContext())).setSize(C),b.setGlobalAlpha(.5)):_===t.Ki.Empty&&h===t.Cursor.WhiteStone?((b=new se(l,y,m,t.Ki.White,n.createThemeContext())).setSize(C),b.setGlobalAlpha(.5)):h===t.Cursor.Clear&&(b=new se(l,y,m,t.Ki.Empty,n.createThemeContext())).setSize(C),null==b||b.draw()}}},this.drawStones=function(e,r,o){void 0===e&&(e=n.mat),void 0===r&&(r=n.canvas),void 0===o&&(o=!0);var i=n.options,a=i.theme,u=void 0===a?t.Theme.BlackAndWhite:a,l=i.themeResources;if(o&&n.clearCanvas(),r)for(var s=0;s<e.length;s++)for(var c=0;c<e[s].length;c++){var f=e[s][c];if(0!==f){var h=r.getContext("2d");if(h){var d=n.calcSpaceAndPadding(),p=d.space,v=d.scaledPadding,g=v+s*p,y=v+c*p,m=.45;h.save(),u!==t.Theme.Subdued&&u!==t.Theme.BlackAndWhite&&u!==t.Theme.Flat&&u!==t.Theme.Warm&&u!==t.Theme.Dark&&u!==t.Theme.HighContrast?(h.shadowOffsetX=3,h.shadowOffsetY=3,h.shadowColor=n.getThemeProperty("shadowColor"),h.shadowBlur=8):(h.shadowOffsetX=0,h.shadowOffsetY=0,h.shadowBlur=0);var _=void 0;switch(u){case t.Theme.BlackAndWhite:case t.Theme.Flat:case t.Theme.Warm:case t.Theme.HighContrast:case t.Theme.Dark:(_=new se(h,g,y,f,n.createThemeContext())).setSize(p*m*2);break;default:var b=We(u,l);if(b){var C=b.blacks.map((function(t){return Ie[t]})),P=b.whites.map((function(t){return Ie[t]}));(_=new ce(h,g,y,f,s+10+c,C,P,n.createThemeContext())).setSize(p*m*2)}}null==_||_.draw(),h.restore()}}}},this.options=o(o(o({},this.defaultOptions),e),{themeOptions:o(o({},this.defaultOptions.themeOptions),e.themeOptions||{})});var r=this.options.boardSize;this.mat=Vt([r,r]),this.preventMoveMat=Vt([r,r]),this.markup=$t([r,r]),this.effectMat=$t([r,r]),this.turn=t.Ki.Black,this.cursorPosition=[-1,-1],this.actualCursorPosition=[-1,-1],this.maxhv=r,this.transMat=new DOMMatrix,this.analysis=null,this.visibleArea=[[0,r-1],[0,r-1]],this.updateNodeMarkupStyles()}return e.prototype.getThemeProperty=function(t){var e=t,n=this.options.theme,r=this.options.themeOptions[n]||{},o=this.options.themeOptions.default||{};return r[e]||o[e]},e.prototype.createThemeContext=function(){return{theme:this.options.theme,themeOptions:this.options.themeOptions}},e.prototype.updateNodeMarkupStyles=function(){var e,n=[8,6],r=[4,4];this.nodeMarkupStyles=((e={})[t.Markup.PositiveNode]={color:this.getThemeProperty(t.ThemePropertyKey.PositiveNodeColor),lineDash:[]},e[t.Markup.NegativeNode]={color:this.getThemeProperty(t.ThemePropertyKey.NegativeNodeColor),lineDash:[]},e[t.Markup.NeutralNode]={color:this.getThemeProperty(t.ThemePropertyKey.NeutralNodeColor),lineDash:[]},e[t.Markup.DefaultNode]={color:this.getThemeProperty(t.ThemePropertyKey.DefaultNodeColor),lineDash:[]},e[t.Markup.WarningNode]={color:this.getThemeProperty(t.ThemePropertyKey.WarningNodeColor),lineDash:[]},e[t.Markup.PositiveDashedNode]={color:this.getThemeProperty(t.ThemePropertyKey.PositiveNodeColor),lineDash:n},e[t.Markup.NegativeDashedNode]={color:this.getThemeProperty(t.ThemePropertyKey.NegativeNodeColor),lineDash:n},e[t.Markup.NeutralDashedNode]={color:this.getThemeProperty(t.ThemePropertyKey.NeutralNodeColor),lineDash:n},e[t.Markup.DefaultDashedNode]={color:this.getThemeProperty(t.ThemePropertyKey.DefaultNodeColor),lineDash:n},e[t.Markup.WarningDashedNode]={color:this.getThemeProperty(t.ThemePropertyKey.WarningNodeColor),lineDash:n},e[t.Markup.PositiveDottedNode]={color:this.getThemeProperty(t.ThemePropertyKey.PositiveNodeColor),lineDash:r},e[t.Markup.NegativeDottedNode]={color:this.getThemeProperty(t.ThemePropertyKey.NegativeNodeColor),lineDash:r},e[t.Markup.NeutralDottedNode]={color:this.getThemeProperty(t.ThemePropertyKey.NeutralNodeColor),lineDash:r},e[t.Markup.DefaultDottedNode]={color:this.getThemeProperty(t.ThemePropertyKey.DefaultNodeColor),lineDash:r},e[t.Markup.WarningDottedNode]={color:this.getThemeProperty(t.ThemePropertyKey.WarningNodeColor),lineDash:r},e[t.Markup.PositiveActiveNode]={color:this.getThemeProperty(t.ThemePropertyKey.PositiveNodeColor),lineDash:[]},e[t.Markup.NegativeActiveNode]={color:this.getThemeProperty(t.ThemePropertyKey.NegativeNodeColor),lineDash:[]},e[t.Markup.NeutralActiveNode]={color:this.getThemeProperty(t.ThemePropertyKey.NeutralNodeColor),lineDash:[]},e[t.Markup.DefaultActiveNode]={color:this.getThemeProperty(t.ThemePropertyKey.DefaultNodeColor),lineDash:[]},e[t.Markup.WarningActiveNode]={color:this.getThemeProperty(t.ThemePropertyKey.WarningNodeColor),lineDash:[]},e[t.Markup.PositiveDashedActiveNode]={color:this.getThemeProperty(t.ThemePropertyKey.PositiveNodeColor),lineDash:n},e[t.Markup.NegativeDashedActiveNode]={color:this.getThemeProperty(t.ThemePropertyKey.NegativeNodeColor),lineDash:n},e[t.Markup.NeutralDashedActiveNode]={color:this.getThemeProperty(t.ThemePropertyKey.NeutralNodeColor),lineDash:n},e[t.Markup.DefaultDashedActiveNode]={color:this.getThemeProperty(t.ThemePropertyKey.DefaultNodeColor),lineDash:n},e[t.Markup.WarningDashedActiveNode]={color:this.getThemeProperty(t.ThemePropertyKey.WarningNodeColor),lineDash:n},e[t.Markup.PositiveDottedActiveNode]={color:this.getThemeProperty(t.ThemePropertyKey.PositiveNodeColor),lineDash:r},e[t.Markup.NegativeDottedActiveNode]={color:this.getThemeProperty(t.ThemePropertyKey.NegativeNodeColor),lineDash:r},e[t.Markup.NeutralDottedActiveNode]={color:this.getThemeProperty(t.ThemePropertyKey.NeutralNodeColor),lineDash:r},e[t.Markup.DefaultDottedActiveNode]={color:this.getThemeProperty(t.ThemePropertyKey.DefaultNodeColor),lineDash:r},e[t.Markup.WarningDottedActiveNode]={color:this.getThemeProperty(t.ThemePropertyKey.WarningNodeColor),lineDash:r},e)},e.prototype.setTurn=function(t){this.turn=t},e.prototype.setBoardSize=function(t){this.options.boardSize=Math.min(t,29)},e.prototype.resize=function(){if(this.canvas&&this.cursorCanvas&&this.dom&&this.board&&this.markupCanvas&&this.analysisCanvas&&this.effectCanvas){var t=[this.board,this.canvas,this.markupCanvas,this.cursorCanvas,this.analysisCanvas,this.effectCanvas],e=this.options.size,n=this.dom.clientWidth;t.forEach((function(t){e?(t.width=e*je,t.height=e*je):(t.style.width=n+"px",t.style.height=n+"px",t.width=Math.floor(n*je),t.height=Math.floor(n*je))})),this.render()}},e.prototype.createCanvas=function(t,e){void 0===e&&(e=!0);var n=document.createElement("canvas");return n.style.position="absolute",n.id=t,e||(n.style.pointerEvents="none"),n},e.prototype.init=function(t){var e=this,n=this.options.boardSize;this.mat=Vt([n,n]),this.markup=$t([n,n]),this.transMat=new DOMMatrix,this.board=this.createCanvas("ghostban-board"),this.canvas=this.createCanvas("ghostban-canvas"),this.markupCanvas=this.createCanvas("ghostban-markup",!1),this.cursorCanvas=this.createCanvas("ghostban-cursor"),this.analysisCanvas=this.createCanvas("ghostban-analysis",!1),this.effectCanvas=this.createCanvas("ghostban-effect",!1),this.dom=t,t.innerHTML="",t.appendChild(this.board),t.appendChild(this.canvas),t.appendChild(this.markupCanvas),t.appendChild(this.analysisCanvas),t.appendChild(this.cursorCanvas),t.appendChild(this.effectCanvas),this.resize(),this.renderInteractive(),"undefined"!=typeof window&&window.addEventListener("resize",(function(){e.resize()}))},e.prototype.setOptions=function(t){this.options=o(o(o({},this.options),t),{themeOptions:o(o({},this.options.themeOptions),t.themeOptions||{})}),this.updateNodeMarkupStyles(),this.renderInteractive()},e.prototype.setMat=function(t){this.mat=t,this.visibleAreaMat||(this.visibleAreaMat=t)},e.prototype.setVisibleAreaMat=function(t){this.visibleAreaMat=t},e.prototype.setPreventMoveMat=function(t){this.preventMoveMat=t},e.prototype.setEffectMat=function(t){this.effectMat=t},e.prototype.setMarkup=function(t){this.markup=t},e.prototype.setCursor=function(t,e){void 0===e&&(e=""),this.cursor=t,this.cursorValue=e},e.prototype.renderInteractive=function(){var t=this.cursorCanvas;t&&(t.removeEventListener("mousemove",this.onMouseMove),t.removeEventListener("mouseout",this.onMouseMove),t.removeEventListener("touchstart",this.onTouchStart),t.removeEventListener("touchmove",this.onTouchMove),t.removeEventListener("touchend",this.onTouchEnd),this.options.interactive&&(t.addEventListener("mousemove",this.onMouseMove),t.addEventListener("mouseout",this.onMouseMove),t.addEventListener("touchstart",this.onTouchStart),t.addEventListener("touchmove",this.onTouchMove),t.addEventListener("touchend",this.onTouchEnd)))},e.prototype.setAnalysis=function(t){this.analysis=t,t?this.options.showAnalysis&&this.drawAnalysis(t):this.clearAnalysisCanvas()},e.prototype.setTheme=function(t,e){var n=this;void 0===e&&(e={});var r=this.options.themeResources;if(r[t]){var i=We(t,r);if(i){var l=i.board,s=i.blacks,c=i.whites;this.options.theme=t,this.options=o(o(o(o({},this.options),{theme:t}),e),{themeOptions:o(o({},this.options.themeOptions),e.themeOptions||{})}),this.updateNodeMarkupStyles();!function(t,e,n){for(var r=0,o=function(){++r===t.length&&e()},i=function(e){Ie[t[e]]?Ie[t[e]].complete&&o():(Ie[t[e]]=new Image,Ie[t[e]].src=t[e],Ie[t[e]].onload=function(){o(),n&&n(t[e])},Ie[t[e]].onerror=function(){o()})},a=0;a<t.length;a++)i(a)}(p.compact(u(u([l],a(s),!1),a(c),!1)),(function(){n.drawBoard(),n.render()}),(function(t){n.drawBoard(),n.drawStones()})),this.drawBoard(),this.render()}}},e.prototype.calcDynamicPadding=function(t){var e=this.options.coordinate,n=this.canvas;if(n){var r=n.width/(t+2)/2,o=n.width/(t+2)/4;this.options.padding=e?r:o}},e.prototype.zoomBoard=function(e){void 0===e&&(e=!1);var n=this,r=n.canvas,o=n.analysisCanvas,i=n.board,a=n.cursorCanvas,u=n.markupCanvas,l=n.effectCanvas;if(r){var s=this.options,c=s.boardSize,f=s.extent,h=s.padding,d=s.dynamicPadding,p=this.getThemeProperty(t.ThemePropertyKey.BoardLineExtent),v=te(this.visibleAreaMat,f,!1),g=null==r?void 0:r.getContext("2d"),y=null==i?void 0:i.getContext("2d"),m=null==a?void 0:a.getContext("2d"),_=null==u?void 0:u.getContext("2d"),b=null==o?void 0:o.getContext("2d"),C=null==l?void 0:l.getContext("2d"),P=e?v:[[0,c-1],[0,c-1]];this.visibleArea=P;var w=Math.max(P[0][1]-P[0][0],P[1][1]-P[1][0]);if(d?this.calcDynamicPadding(w):this.options.padding=L.padding,e){var k=this.calcSpaceAndPadding().space,T=this.calcCenter();d?this.calcDynamicPadding(w):this.options.padding=L.padding;var A=2*p+1;T!==t.Center.TopRight&&T!==t.Center.TopLeft&&T!==t.Center.BottomRight&&T!==t.Center.BottomLeft||(A=p+.5);var x=w+A;if(x<c){var S=(r.width-2*h)/(x*k),M=P[0][0]*k*S+h*S-h-k*A*S/2+k*S/2,N=P[1][0]*k*S+h*S-h-k*A*S/2+k*S/2;this.transMat=new DOMMatrix,this.transMat.translateSelf(-M,-N),this.transMat.scaleSelf(S,S),null==g||g.setTransform(this.transMat),null==y||y.setTransform(this.transMat),null==b||b.setTransform(this.transMat),null==m||m.setTransform(this.transMat),null==_||_.setTransform(this.transMat),null==C||C.setTransform(this.transMat)}else this.resetTransform()}else this.resetTransform()}},e.prototype.calcBoardVisibleArea=function(t){this.zoomBoard(this.options.zoom)},e.prototype.resetTransform=function(){var t=this,e=t.canvas,n=t.analysisCanvas,r=t.board,o=t.cursorCanvas,i=t.markupCanvas,a=t.effectCanvas,u=null==e?void 0:e.getContext("2d"),l=null==r?void 0:r.getContext("2d"),s=null==o?void 0:o.getContext("2d"),c=null==i?void 0:i.getContext("2d"),f=null==n?void 0:n.getContext("2d"),h=null==a?void 0:a.getContext("2d");this.transMat=new DOMMatrix,null==u||u.resetTransform(),null==l||l.resetTransform(),null==f||f.resetTransform(),null==s||s.resetTransform(),null==c||c.resetTransform(),null==h||h.resetTransform()},e.prototype.render=function(){var t=this.mat;this.mat&&t[0]&&(this.options.boardSize=t[0].length),this.zoomBoard(this.options.zoom),this.zoomBoard(this.options.zoom),this.clearAllCanvas(),this.drawBoard(),this.drawStones(),this.drawMarkup(),this.drawCursor(),this.options.showAnalysis&&this.drawAnalysis()},e.prototype.renderInOneCanvas=function(t){void 0===t&&(t=this.canvas),this.clearAllCanvas(),this.drawBoard(t,!1),this.drawStones(this.mat,t,!1),this.drawMarkup(this.mat,this.markup,t,!1)},e}();return t.A1_LETTERS=E,t.A1_LETTERS_WITH_I=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S"],t.A1_NUMBERS=W,t.AnnotationProp=it,t.BASE_THEME_CONFIG=O,t.CUSTOM_PROP_LIST=J,t.CustomProp=st,t.DEFAULT_BOARD_SIZE=19,t.DEFAULT_OPTIONS=L,t.DOT_SIZE=3,t.EXPAND_H=5,t.EXPAND_V=5,t.GAME_INFO_PROP_LIST=Y,t.GameInfoProp=lt,t.GhostBan=ze,t.LIGHT_GREEN_RGB=F,t.LIGHT_RED_RGB=G,t.LIGHT_YELLOW_RGB=z,t.LIST_OF_POINTS_PROP=X,t.MARKUP_PROP_LIST=$,t.MAX_BOARD_SIZE=29,t.MISCELLANEOUS_PROP_LIST=["FG","PM","VW"],t.MOVE_ANNOTATION_PROP_LIST=V,t.MOVE_PROP_LIST=U,t.MarkupProp=at,t.MiscellaneousProp=ft,t.MoveAnnotationProp=ot,t.MoveProp=et,t.NODE_ANNOTATION_PROP_LIST=q,t.NodeAnnotationProp=rt,t.RESPONSE_TIME=100,t.ROOT_PROP_LIST=Z,t.RootProp=ut,t.SETUP_PROP_LIST=H,t.SGF_LETTERS=I,t.SetupProp=nt,t.Sgf=bt,t.SgfPropBase=tt,t.THEME_RESOURCES=j,t.TIMING_PROP_LIST=["BL","OB","OW","WL"],t.TNode=s,t.TimingProp=ct,t.TreeModel=f,t.YELLOW_RGB=K,t.a1ToIndex=function(t,e){return void 0===e&&(e=19),E.indexOf(t[0])*e+W.indexOf(parseInt(t.substr(1),0))},t.a1ToPos=Lt,t.a1ToSGF=function(t,e,n,r){if(void 0===e&&(e="B"),void 0===n&&(n=0),void 0===r&&(r=0),"pass"===t)return"".concat(e,"[]");var o=E.indexOf(t[0])+n,i=W.indexOf(parseInt(t.substr(1),0))+r;return"".concat(e,"[").concat(I[o]).concat(I[i],"]")},t.addMoveToCurrentNode=function(e,n,r,o,i){if(i!==t.Ki.Empty){var a;if(_t(n,r,o,i)){var u=I[r]+I[o],l=i===t.Ki.Black?"B":"W",s=g(e,[et.from("".concat(l,"[").concat(u,"]"))]),c=e.children.filter((function(t){return t.model.id===s}));c.length>0?a=c[0]:(a=qt("".concat(l,"[").concat(u,"]"),e),e.addChild(a))}return a}},t.addStoneToCurrentNode=function(e,n,r,o,i){var l=I[r]+I[o],s=i===t.Ki.White?"AW":"AB",c=oe(e,s),f=!1;return n[r][o]!==t.Ki.Empty?ne(e,l):(c?c.values=u(u([],a(c.values),!1),[l],!1):e.model.setupProps=u(u([],a(e.model.setupProps),!1),[new nt(s,l)],!1),f=!0),f},t.buildMoveNode=qt,t.buildNodeRanges=y,t.calcAnalysisPointColor=Ut,t.calcAvoidMovesForPartialAnalysis=function(t,e){var n,r,o,u;void 0===e&&(e=19);var l=[],s=a(t,2),c=a(s[0],2),f=c[0],h=c[1],d=a(s[1],2),p=d[0],v=d[1];try{for(var g=i(E.slice(0,e)),y=g.next();!y.done;y=g.next()){var m=y.value;try{for(var _=(o=void 0,i(W.slice(-e))),b=_.next();!b.done;b=_.next()){var C=b.value,P=E.indexOf(m),w=W.indexOf(C);(P<f||P>p||w<h||w>v)&&l.push("".concat(m).concat(C))}}catch(t){o={error:t}}finally{try{b&&!b.done&&(u=_.return)&&u.call(_)}finally{if(o)throw o.error}}}}catch(t){n={error:t}}finally{try{y&&!y.done&&(r=g.return)&&r.call(g)}finally{if(n)throw n.error}}return l},t.calcBoardSize=Jt,t.calcCenter=Yt,t.calcDoubtfulMovesThresholdRange=function(t){return t>=25?{evil:{winrateRange:[-1,-.15],scoreRange:[-100,-3]},bad:{winrateRange:[-.15,-.1],scoreRange:[-3,-2]},poor:{winrateRange:[-.1,-.05],scoreRange:[-2,-1]},ok:{winrateRange:[-.05,-.02],scoreRange:[-1,-.5]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=23&&t<25?{evil:{winrateRange:[-1,-.2],scoreRange:[-100,-8]},bad:{winrateRange:[-.2,-.15],scoreRange:[-8,-4]},poor:{winrateRange:[-.15,-.05],scoreRange:[-4,-2]},ok:{winrateRange:[-.05,-.02],scoreRange:[-2,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=20&&t<23?{evil:{winrateRange:[-1,-.25],scoreRange:[-100,-12]},bad:{winrateRange:[-.25,-.1],scoreRange:[-12,-5]},poor:{winrateRange:[-.1,-.05],scoreRange:[-5,-2]},ok:{winrateRange:[-.05,-.02],scoreRange:[-2,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=18&&t<20?{evil:{winrateRange:[-1,-.3],scoreRange:[-100,-15]},bad:{winrateRange:[-.3,-.1],scoreRange:[-15,-7]},poor:{winrateRange:[-.1,-.05],scoreRange:[-7,-5]},ok:{winrateRange:[-.05,-.02],scoreRange:[-5,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=13&&t<18?{evil:{winrateRange:[-1,-.35],scoreRange:[-100,-20]},bad:{winrateRange:[-.35,-.12],scoreRange:[-20,-10]},poor:{winrateRange:[-.12,-.08],scoreRange:[-10,-5]},ok:{winrateRange:[-.08,-.02],scoreRange:[-5,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=8&&t<13?{evil:{winrateRange:[-1,-.4],scoreRange:[-100,-25]},bad:{winrateRange:[-.4,-.15],scoreRange:[-25,-10]},poor:{winrateRange:[-.15,-.1],scoreRange:[-10,-5]},ok:{winrateRange:[-.1,-.02],scoreRange:[-5,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=0&&t<8?{evil:{winrateRange:[-1,-.45],scoreRange:[-100,-35]},bad:{winrateRange:[-.45,-.2],scoreRange:[-35,-20]},poor:{winrateRange:[-.2,-.1],scoreRange:[-20,-10]},ok:{winrateRange:[-.1,-.02],scoreRange:[-10,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:{evil:{winrateRange:[-1,-.3],scoreRange:[-100,-30]},bad:{winrateRange:[-.3,-.2],scoreRange:[-30,-20]},poor:{winrateRange:[-.2,-.1],scoreRange:[-20,-10]},ok:{winrateRange:[-.1,-.02],scoreRange:[-10,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}},t.calcHash=g,t.calcMatAndMarkup=re,t.calcMost=Zt,t.calcOffset=function(e){var n=Jt(e),r=19-n[0],o=19-n[1],i=r,a=o;switch(Yt(e)){case t.Center.TopLeft:i=0,a=o;break;case t.Center.TopRight:i=-r,a=o;break;case t.Center.BottomLeft:i=0,a=0;break;case t.Center.BottomRight:i=-r,a=0}return{x:i,y:a}},t.calcPartialArea=Xt,t.calcPreventMoveMat=function(t,e){if(void 0===e&&(e=19),!t)return Vt([e,e]);var n=ie(t,e),r=Vt([n,n]),o=[];return t.hasChildren()&&(o=t.children.filter((function(t){return Tt(t)}))),kt(t)&&(r.forEach((function(t){return t.fill(1)})),t.hasChildren()&&t.children.forEach((function(t){t.model.moveProps.forEach((function(t){var e=I.indexOf(t.value[0]),o=I.indexOf(t.value[1]);e>=0&&o>=0&&e<n&&o<n&&(r[e][o]=0)}))}))),o.forEach((function(t){t.model.moveProps.forEach((function(t){var e=I.indexOf(t.value[0]),o=I.indexOf(t.value[1]);e>=0&&o>=0&&e<n&&o<n&&(r[e][o]=1)}))})),r},t.calcPreventMoveMatForDisplayOnly=function(t,e){if(void 0===e&&(e=19),!t)return Vt([e,e]);var n=ie(t,e),r=Vt([n,n]);return r.forEach((function(t){return t.fill(1)})),t.hasChildren()&&t.children.forEach((function(t){t.model.moveProps.forEach((function(t){var e=I.indexOf(t.value[0]),o=I.indexOf(t.value[1]);e>=0&&o>=0&&e<n&&o<n&&(r[e][o]=0)}))})),r},t.calcScoreDiff=Kt,t.calcScoreDiffText=zt,t.calcTsumegoFrame=function(e,n,r,o,i,u){void 0===r&&(r=19),void 0===o&&(o=7.5),void 0===i&&(i=t.Ki.Black);var l=p.cloneDeep(e),s=Xt(e,n,r),c=Yt(e);return function(e){for(var n=a(s[0],2),o=n[0],u=n[1],l=a(s[1],2),f=l[0],h=l[1],d=o;d<=f;d++)for(var p=u;p<=h;p++)(c===t.Center.TopLeft&&(d===f&&d<r-1||p===h&&p<r-1||d===o&&d>0||p===u&&p>0)||c===t.Center.TopRight&&(d===o&&d>0||p===h&&p<r-1||d===f&&d<r-1||p===u&&p>0)||c===t.Center.BottomLeft&&(d===f&&d<r-1||p===u&&p>0||d===o&&d>0||p===h&&p<r-1)||c===t.Center.BottomRight&&(d===o&&d>0||p===u&&p>0||d===f&&d<r-1||p===h&&p<r-1)||c===t.Center.Center)&&(e[d][p]=i)}(l),function(e){for(var n=i*o,u=a(s[0],2),l=u[0],f=u[1],h=a(s[1],2),d=h[0],p=h[1],v=i===t.Ki.Black,g=d-l,y=p-f,m=Math.floor((361-g*y)/2)-n-10,_=0,b=0;b<r;b++)for(var C=0;C<r;C++)if(b<l||b>d||C<f||C>p){_++;var P=t.Ki.Empty;c===t.Center.TopLeft||c===t.Center.BottomLeft?P=v!==_<=m?t.Ki.White:t.Ki.Black:c!==t.Center.TopRight&&c!==t.Center.BottomRight||(P=v!==_<=m?t.Ki.Black:t.Ki.White),(b+C)%2==0&&Math.abs(_-m)>r&&(P=t.Ki.Empty),e[b][C]=P}}(l),l},t.calcVariationsMarkup=function(e,n,r,o){void 0===n&&(n="append"),void 0===r&&(r=0),void 0===o&&(o=19);var i=re(e),a=i.mat,u=i.markup,l=ie(e,o);return e.hasChildren()&&e.children.forEach((function(e){e.model.moveProps.forEach((function(o){var i=I.indexOf(o.value[0]),s=I.indexOf(o.value[1]);if(!(i<0||s<0)&&i<l&&s<l){var c=t.Markup.NeutralNode;if(Et(e)&&(c=e.getIndex()===r?t.Markup.NegativeActiveNode:t.Markup.NegativeNode),Rt(e)&&(c=e.getIndex()===r?t.Markup.PositiveActiveNode:t.Markup.PositiveNode),a[i][s]===t.Ki.Empty)switch(n){case"prepend":u[i][s]=c+"|"+u[i][s];break;case"replace":u[i][s]=c;break;default:u[i][s]+="|"+c}}}))})),u},t.calcVisibleArea=te,t.calcWinrateDiff=Gt,t.calcWinrateDiffText=function(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r=!1),!t||!e)return"";var o=Gt(t,e);r&&(o=-o);var i=o.toFixed(n);return o>=0?"+".concat(i,"%"):"".concat(i,"%")},t.canMove=_t,t.clearStoneFromCurrentNode=ne,t.convertStepsForAI=function(t,e){void 0===e&&(e=0);var n=p.clone(t);n=n.map((function(t){return jt(t,e)}));var r="(;FF[4]GM[1]SZ[".concat(19-e,"]GN[226]PB[Black]HA[0]PW[White]KM[7.5]DT[2017-08-01]TM[1800]RU[Chinese]CP[Copyright ghost-go.com]AP[ghost-go.com]PL[Black];"),o=0,i="";return t.forEach((function(t,e){t[0]===i[0]&&("B"===t[0]?(n.splice(e+o,0,"W[tt]"),o+=1):(n.splice(e+o,0,"B[tt]"),o+=1)),i=t})),"".concat(r).concat(n.join(";"),")")},t.convertStoneTypeToString=function(t){return 1===t?"B":"W"},t.cutMoveNodes=function(t,e){for(var n=p.cloneDeep(t);n&&n.hasChildren()&&0===n.model.moveProps.length;)(n=n.children[0]).children=[];if(e)for(;n&&n.parent&&!n.isRoot();)n=n.parent;return n},t.detectST=function(t){var e=t.getPath()[0].model.rootProps.find((function(t){return"ST"===t.token})),n=!1,r=!1,o=!1,i=(null==e?void 0:e.value)||"0";return i&&("0"===i?(o=!1,r=!0,n=!0):"1"===i?(o=!0,r=!1,n=!0):"2"===i?(o=!1,r=!0,n=!1):"3"===i&&(o=!0,r=!1,n=!1)),{showVariationsMarkup:n,showChildrenMarkup:r,showSiblingsMarkup:o}},t.empty=$t,t.execCapture=yt,t.extractAnswerType=function(t){var e=t.model.customProps.find((function(t){return"PAT"===t.token}));return null==e?void 0:e.value},t.extractBoardSize=ie,t.extractPAI=function(t){var e=t.model.customProps.find((function(t){return"PAI"===t.token}));if(e)return JSON.parse(e.value)},t.extractPI=function(t){var e=t.model.customProps.find((function(t){return"PI"===t.token}));if(e)return JSON.parse(e.value)},t.findProp=oe,t.findProps=function(t,e){return U.includes(e)?t.model.moveProps.filter((function(t){return t.token===e})):q.includes(e)?t.model.nodeAnnotationProps.filter((function(t){return t.token===e})):V.includes(e)?t.model.moveAnnotationProps.filter((function(t){return t.token===e})):Z.includes(e)?t.model.rootProps.filter((function(t){return t.token===e})):H.includes(e)?t.model.setupProps.filter((function(t){return t.token===e})):$.includes(e)?t.model.markupProps.filter((function(t){return t.token===e})):Y.includes(e)?t.model.gameInfoProps.filter((function(t){return t.token===e})):[]},t.genMove=function(t,e,n,r,o){var i,a=function(t){var e=p.compact(t.getPath().map((function(t){var e;return null===(e=t.model.moveProps[0])||void 0===e?void 0:e.toString()}))).join(";");return e},u=function(t){if(!t.hasChildren()){var o=a(t);At(t)?e&&e(o):St(t)?r&&r(o):n&&n(o)}};if(t.hasChildren()){var l=t.children.filter((function(t){return Rt(t)})),s=t.children.filter((function(t){return Et(t)})),c=t.children.filter((function(t){return Ot(t)}));i=t,Rt(t)&&l.length>0?i=p.sample(l):Et(t)&&s.length>0?i=p.sample(s):Ot(t)&&c.length>0?i=p.sample(c):At(t)?e(a(i)):n(a(i)),i&&u(i)}else u(t);return i},t.getDeduplicatedProps=M,t.getFirstToMoveColorFromRoot=ae,t.getFirstToMoveColorFromSgf=function(e,n){void 0===n&&(n=t.Ki.Black);var r=new bt(e);return r.root&&ae(r.root,n),n},t.getIndexFromAnalysis=function(t){return/indexes/.test(t.id)?JSON.parse(t.id).indexes[0]:""},t.getLastIndex=function(t){var e=t;return t.walk((function(t){return e=t,!0})),e.model.index},t.getMoveColor=ue,t.getNodeNumber=D,t.getRoot=function(t){for(var e=t;e&&e.parent&&!e.isRoot();)e=e.parent;return e},t.handleMove=function(e,n,r,o,i,a){if(o!==t.Ki.Empty)if(_t(e,n,r,o)){var u=I[n]+I[r],l=o===t.Ki.Black?"B":"W",s=g(i,[et.from("".concat(l,"[").concat(u,"]"))]),c=i.children.filter((function(t){return t.model.id===s})),f=void 0;c.length>0?f=c[0]:(f=qt("".concat(l,"[").concat(u,"]"),i),i.addChild(f)),a&&a(f,!0)}else a&&a(i,!1)},t.inChoicePath=Dt,t.inFirstBranchRightPath=function(e,n,r,o){if(void 0===n&&(n=t.PathDetectionStrategy.Pre),!Rt(e))return!1;var i=null!=r?r:e.getPath(),a=null!=o?o:e.all((function(){return!0})),u=[];switch(n){case t.PathDetectionStrategy.Post:u=a.filter((function(t){return t.getIndex()>0}));break;case t.PathDetectionStrategy.Pre:u=i.filter((function(t){return t.getIndex()>0}));break;case t.PathDetectionStrategy.Both:u=i.concat(a).filter((function(t){return t.getIndex()>0}))}return 0===u.length},t.inFirstRightPath=function(e,n,r,o){return void 0===n&&(n=t.PathDetectionStrategy.Post),Nt(e,xt,n,r,o)},t.inPath=Nt,t.inRightPath=Rt,t.inTargetPath=Bt,t.inVariantPath=Ot,t.inWrongPath=Et,t.initNodeData=Ht,t.initialRootNode=function(t){void 0===t&&(t=["FF[4]","GM[1]","CA[UTF-8]","AP[ghostgo:0.1.0]","SZ[19]","ST[0]"]);var e=(new f).parse({id:"",name:"",index:0,number:0,rootProps:t.map((function(t){return ut.from(t)})),moveProps:[],setupProps:[],markupProps:[],gameInfoProps:[],nodeAnnotationProps:[],moveAnnotationProps:[],customProps:[]}),n=g(e);return e.model.id=n,e},t.isAnswerNode=function(t,e){var n,r=null===(n=t.model.customProps)||void 0===n?void 0:n.find((function(t){return"PAT"===t.token}));return(null==r?void 0:r.value)===e},t.isCharacterInNode=function(t,e,n){void 0===n&&(n=["C","TM","GN","PC"]);for(var r,o=new RegExp("(".concat(n.join("|"),")\\[([^\\]]*)\\]"),"g");null!==(r=o.exec(t));){var i=r.index+r[1].length+1,a=i+r[2].length;if(e>=i&&e<=a)return!0}return!1},t.isChoiceNode=Pt,t.isFirstRightNode=xt,t.isForceNode=kt,t.isInAnyRange=m,t.isMainPath=function(t){return 0===p.sum(t.getPath().map((function(t){return t.getIndex()})))},t.isMoveNode=N,t.isPreventMoveNode=Tt,t.isRightNode=At,t.isRootNode=function(t){return t.model.rootProps.length>0||t.isRoot()},t.isSetupNode=R,t.isTargetNode=wt,t.isVariantNode=St,t.isWrongNode=Mt,t.matToListOfTuples=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=0);for(var r=[],o=0;o<t.length;o++)for(var i=0;i<t[o].length;i++){var a=t[o][i];if(0!==a){var u=E[o+e],l=W[i+n],s=1===a?"B":"W";r.push([s,u+l])}}return r},t.matToPosition=function(t,e,n){var r="";e=null!=e?e:0,n=null!=n?n:19-t.length;for(var o=0;o<t.length;o++)for(var i=0;i<t[o].length;i++){var a=t[o][i];if(0!==a){var u=E[o+e],l=W[i+n];r+="".concat(1===a?"b":"w"," ").concat(u).concat(l," ")}}return r},t.move=ee,t.nFormatter=Wt,t.offsetA1Move=Ft,t.pathToAiMoves=function(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=0),t.filter((function(t){return t.model.moveProps.length>0})).map((function(t){var r=t.model.moveProps[0],o=E[I.indexOf(r.value[0])+e],i=W[I.indexOf(r.value[1])+n];return[r.token,o+i]}))},t.pathToIndexes=function(t){return t.map((function(t){return t.model.id}))},t.pathToInitialStones=function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=0);var r=t.filter((function(t){return t.model.setupProps.length>0})).map((function(t){return t.model.setupProps.map((function(t){return t.values.map((function(r){var o=E[I.indexOf(r[0])+e],i=W[I.indexOf(r[1])+n];return["AB"===t.token?"B":"W",o+i]}))}))}));return p.flattenDepth(r[0],1)},t.posToSgf=function(e,n,r){var o=I[e],i=I[n];return r===t.Ki.Empty?"":r===t.Ki.White?"B[".concat(o).concat(i,"]"):r===t.Ki.Black?"W[".concat(o).concat(i,"]"):""},t.reverseOffset=Qt,t.reverseOffsetA1Move=function(t,e,n,r){if(void 0===r&&(r=19),"pass"===t)return t;var o=JSON.parse(n.id),i=Qt(e,o.bx,o.by,r),a=i.x,u=i.y,l=E.indexOf(t[0])+a,s=W.indexOf(parseInt(t.substr(1),0))+u;return"".concat(E[l]).concat(W[s])},t.round2=function(t,e,n){return void 0===e&&(e=1),void 0===n&&(n=2),(Math.round(100*t)/100*e).toFixed(n)},t.round3=Ct,t.sgfOffset=jt,t.sgfToA1=function(t){var e=It(t),n=e.x,r=e.y;return E[n]+W[r]},t.sgfToPos=It,t.showKi=function(t,e,n){void 0===n&&(n=!0);var r=p.cloneDeep(t),o=!1;return e.forEach((function(t){var e=It(t),i=e.x,a=e.y,u=e.ki;n?_t(r,i,a,u)&&(r[i][a]=u,r=yt(r,i,a,-u),o=!0):(r[i][a]=u,o=!0)})),{arrangement:r,hasMoved:o}},t.zeros=Vt,t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
