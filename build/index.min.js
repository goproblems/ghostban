/**
   * @license
   * author: BAI TIANLIANG
   * ghostban.js v3.0.0-alpha.101
   * Released under the MIT license.
   */
var ghostban=function(t){"use strict";function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},e(t,n)};function r(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}var o=function(){return o=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var o in n=arguments[e])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},o.apply(this,arguments)};function i(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function a(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,i=e.call(t),a=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return a}function u(t,n,e){if(e||2===arguments.length)for(var r,o=0,i=n.length;o<i;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return t.concat(r||Array.prototype.slice.call(n))}"function"==typeof SuppressedError&&SuppressedError;var c="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function s(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var l,f,h=function t(n,e){var r,o,i=e.length;return i>=2?(r=e.slice(0,i/2),o=e.slice(i/2,i),function(t,n,e){for(var r=[],o=n.length,i=e.length;o>0&&i>0;)t(n[0],e[0])<=0?(r.push(n.shift()),o--):(r.push(e.shift()),i--);return o>0?r.push.apply(r,n):r.push.apply(r,e),r}(n,t(n,r),t(n,o))):e.slice()};l=h,f=function(t,n,e){var r,o;for(r=0,o=n.length;r<o&&!(t(n[r],e)>0);r++);return r};var p=function(){var t;function n(t){return function(){return t}}function e(t){t=t||{},this.config=t,this.config.childrenPropertyName=t.childrenPropertyName||"children",this.config.modelComparatorFn=t.modelComparatorFn}function r(t,n){return n.parent=t,t.children.push(n),n}function o(t,n){this.config=t,this.model=n,this.children=[]}function i(t){return"function"==typeof t.config.modelComparatorFn}function a(t,n,e){var r;if(!(n instanceof o))throw new TypeError("Child must be of type Node.");if(n.parent=t,t.model[t.config.childrenPropertyName]instanceof Array||(t.model[t.config.childrenPropertyName]=[]),i(t))r=f(t.config.modelComparatorFn,t.model[t.config.childrenPropertyName],n.model),t.model[t.config.childrenPropertyName].splice(r,0,n.model),t.children.splice(r,0,n);else if(void 0===e)t.model[t.config.childrenPropertyName].push(n.model),t.children.push(n);else{if(e<0||e>t.children.length)throw new Error("Invalid index.");t.model[t.config.childrenPropertyName].splice(e,0,n.model),t.children.splice(e,0,n)}return n}function u(){var n={};if(1===arguments.length?"function"==typeof arguments[0]?n.fn=arguments[0]:n.options=arguments[0]:2===arguments.length?"function"==typeof arguments[0]?(n.fn=arguments[0],n.ctx=arguments[1]):(n.options=arguments[0],n.fn=arguments[1]):(n.options=arguments[0],n.fn=arguments[1],n.ctx=arguments[2]),n.options=n.options||{},n.options.strategy||(n.options.strategy="pre"),!t[n.options.strategy])throw new Error("Unknown tree walk strategy. Valid strategies are 'pre' [default], 'post' and 'breadth'.");return n}return t={},e.prototype.parse=function(t){var n,e,i;if(!(t instanceof Object))throw new TypeError("Model must be of type object.");if(i=new o(this.config,t),t[this.config.childrenPropertyName]instanceof Array)for(this.config.modelComparatorFn&&(t[this.config.childrenPropertyName]=l(this.config.modelComparatorFn,t[this.config.childrenPropertyName])),n=0,e=t[this.config.childrenPropertyName].length;n<e;n++)r(i,this.parse(t[this.config.childrenPropertyName][n]));return i},o.prototype.isRoot=function(){return void 0===this.parent},o.prototype.hasChildren=function(){return this.children.length>0},o.prototype.addChild=function(t){return a(this,t)},o.prototype.addChildAtIndex=function(t,n){if(i(this))throw new Error("Cannot add child at index when using a comparator function.");return a(this,t,n)},o.prototype.setIndex=function(t){if(i(this))throw new Error("Cannot set node index when using a comparator function.");if(this.isRoot()){if(0===t)return this;throw new Error("Invalid index.")}if(t<0||t>=this.parent.children.length)throw new Error("Invalid index.");var n=this.parent.children.indexOf(this);return this.parent.children.splice(t,0,this.parent.children.splice(n,1)[0]),this.parent.model[this.parent.config.childrenPropertyName].splice(t,0,this.parent.model[this.parent.config.childrenPropertyName].splice(n,1)[0]),this},o.prototype.getPath=function(){var t=[];return function n(e){t.unshift(e),e.isRoot()||n(e.parent)}(this),t},o.prototype.getIndex=function(){return this.isRoot()?0:this.parent.children.indexOf(this)},o.prototype.walk=function(){var n;n=u.apply(this,arguments),t[n.options.strategy].call(this,n.fn,n.ctx)},t.pre=function t(n,e){var r,o,i;for(i=n.call(e,this),r=0,o=this.children.length;r<o;r++){if(!1===i)return!1;i=t.call(this.children[r],n,e)}return i},t.post=function t(n,e){var r,o;for(r=0,o=this.children.length;r<o;r++)if(!1===t.call(this.children[r],n,e))return!1;return n.call(e,this)},t.breadth=function(t,n){var e=[this];!function r(){var o,i,a;if(0!==e.length){for(o=0,i=(a=e.shift()).children.length;o<i;o++)e.push(a.children[o]);!1!==t.call(n,a)&&r()}}()},o.prototype.all=function(){var e,r=[];return(e=u.apply(this,arguments)).fn=e.fn||n(!0),t[e.options.strategy].call(this,(function(t){e.fn.call(e.ctx,t)&&r.push(t)}),e.ctx),r},o.prototype.first=function(){var e,r;return(e=u.apply(this,arguments)).fn=e.fn||n(!0),t[e.options.strategy].call(this,(function(t){if(e.fn.call(e.ctx,t))return r=t,!1}),e.ctx),r},o.prototype.drop=function(){var t;return this.isRoot()||(t=this.parent.children.indexOf(this),this.parent.children.splice(t,1),this.parent.model[this.config.childrenPropertyName].splice(t,1),this.parent=void 0,delete this.parent),this},e}(),v=s(p),d={exports:{}};!function(t,e){(function(){var r,o="Expected a function",i="__lodash_hash_undefined__",a="__lodash_placeholder__",u=16,s=32,l=64,f=128,h=256,p=1/0,v=9007199254740991,d=NaN,g=4294967295,y=[["ary",f],["bind",1],["bindKey",2],["curry",8],["curryRight",u],["flip",512],["partial",s],["partialRight",l],["rearg",h]],m="[object Arguments]",_="[object Array]",b="[object Boolean]",w="[object Date]",P="[object Error]",C="[object Function]",x="[object GeneratorFunction]",k="[object Map]",A="[object Number]",S="[object Object]",R="[object Promise]",T="[object RegExp]",M="[object Set]",O="[object String]",E="[object Symbol]",I="[object WeakMap]",B="[object ArrayBuffer]",N="[object DataView]",L="[object Float32Array]",j="[object Float64Array]",W="[object Int8Array]",D="[object Int16Array]",z="[object Int32Array]",F="[object Uint8Array]",G="[object Uint8ClampedArray]",K="[object Uint16Array]",U="[object Uint32Array]",$=/\b__p \+= '';/g,V=/\b(__p \+=) '' \+/g,q=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Z=/&(?:amp|lt|gt|quot|#39);/g,H=/[&<>"']/g,Y=RegExp(Z.source),J=RegExp(H.source),X=/<%-([\s\S]+?)%>/g,Q=/<%([\s\S]+?)%>/g,tt=/<%=([\s\S]+?)%>/g,nt=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,et=/^\w*$/,rt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ot=/[\\^$.*+?()[\]{}|]/g,it=RegExp(ot.source),at=/^\s+/,ut=/\s/,ct=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,st=/\{\n\/\* \[wrapped with (.+)\] \*/,lt=/,? & /,ft=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ht=/[()=,{}\[\]\/\s]/,pt=/\\(\\)?/g,vt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,dt=/\w*$/,gt=/^[-+]0x[0-9a-f]+$/i,yt=/^0b[01]+$/i,mt=/^\[object .+?Constructor\]$/,_t=/^0o[0-7]+$/i,bt=/^(?:0|[1-9]\d*)$/,wt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Pt=/($^)/,Ct=/['\n\r\u2028\u2029\\]/g,xt="\\ud800-\\udfff",kt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",At="\\u2700-\\u27bf",St="a-z\\xdf-\\xf6\\xf8-\\xff",Rt="A-Z\\xc0-\\xd6\\xd8-\\xde",Tt="\\ufe0e\\ufe0f",Mt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Ot="['’]",Et="["+xt+"]",It="["+Mt+"]",Bt="["+kt+"]",Nt="\\d+",Lt="["+At+"]",jt="["+St+"]",Wt="[^"+xt+Mt+Nt+At+St+Rt+"]",Dt="\\ud83c[\\udffb-\\udfff]",zt="[^"+xt+"]",Ft="(?:\\ud83c[\\udde6-\\uddff]){2}",Gt="[\\ud800-\\udbff][\\udc00-\\udfff]",Kt="["+Rt+"]",Ut="\\u200d",$t="(?:"+jt+"|"+Wt+")",Vt="(?:"+Kt+"|"+Wt+")",qt="(?:['’](?:d|ll|m|re|s|t|ve))?",Zt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Ht="(?:"+Bt+"|"+Dt+")"+"?",Yt="["+Tt+"]?",Jt=Yt+Ht+("(?:"+Ut+"(?:"+[zt,Ft,Gt].join("|")+")"+Yt+Ht+")*"),Xt="(?:"+[Lt,Ft,Gt].join("|")+")"+Jt,Qt="(?:"+[zt+Bt+"?",Bt,Ft,Gt,Et].join("|")+")",tn=RegExp(Ot,"g"),nn=RegExp(Bt,"g"),en=RegExp(Dt+"(?="+Dt+")|"+Qt+Jt,"g"),rn=RegExp([Kt+"?"+jt+"+"+qt+"(?="+[It,Kt,"$"].join("|")+")",Vt+"+"+Zt+"(?="+[It,Kt+$t,"$"].join("|")+")",Kt+"?"+$t+"+"+qt,Kt+"+"+Zt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Nt,Xt].join("|"),"g"),on=RegExp("["+Ut+xt+kt+Tt+"]"),an=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,un=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],cn=-1,sn={};sn[L]=sn[j]=sn[W]=sn[D]=sn[z]=sn[F]=sn[G]=sn[K]=sn[U]=!0,sn[m]=sn[_]=sn[B]=sn[b]=sn[N]=sn[w]=sn[P]=sn[C]=sn[k]=sn[A]=sn[S]=sn[T]=sn[M]=sn[O]=sn[I]=!1;var ln={};ln[m]=ln[_]=ln[B]=ln[N]=ln[b]=ln[w]=ln[L]=ln[j]=ln[W]=ln[D]=ln[z]=ln[k]=ln[A]=ln[S]=ln[T]=ln[M]=ln[O]=ln[E]=ln[F]=ln[G]=ln[K]=ln[U]=!0,ln[P]=ln[C]=ln[I]=!1;var fn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},hn=parseFloat,pn=parseInt,vn="object"==n(c)&&c&&c.Object===Object&&c,dn="object"==("undefined"==typeof self?"undefined":n(self))&&self&&self.Object===Object&&self,gn=vn||dn||Function("return this")(),yn=e&&!e.nodeType&&e,mn=yn&&t&&!t.nodeType&&t,_n=mn&&mn.exports===yn,bn=_n&&vn.process,wn=function(){try{var t=mn&&mn.require&&mn.require("util").types;return t||bn&&bn.binding&&bn.binding("util")}catch(t){}}(),Pn=wn&&wn.isArrayBuffer,Cn=wn&&wn.isDate,xn=wn&&wn.isMap,kn=wn&&wn.isRegExp,An=wn&&wn.isSet,Sn=wn&&wn.isTypedArray;function Rn(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}function Tn(t,n,e,r){for(var o=-1,i=null==t?0:t.length;++o<i;){var a=t[o];n(r,a,e(a),t)}return r}function Mn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r&&!1!==n(t[e],e,t););return t}function On(t,n){for(var e=null==t?0:t.length;e--&&!1!==n(t[e],e,t););return t}function En(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(!n(t[e],e,t))return!1;return!0}function In(t,n){for(var e=-1,r=null==t?0:t.length,o=0,i=[];++e<r;){var a=t[e];n(a,e,t)&&(i[o++]=a)}return i}function Bn(t,n){return!!(null==t?0:t.length)&&Un(t,n,0)>-1}function Nn(t,n,e){for(var r=-1,o=null==t?0:t.length;++r<o;)if(e(n,t[r]))return!0;return!1}function Ln(t,n){for(var e=-1,r=null==t?0:t.length,o=Array(r);++e<r;)o[e]=n(t[e],e,t);return o}function jn(t,n){for(var e=-1,r=n.length,o=t.length;++e<r;)t[o+e]=n[e];return t}function Wn(t,n,e,r){var o=-1,i=null==t?0:t.length;for(r&&i&&(e=t[++o]);++o<i;)e=n(e,t[o],o,t);return e}function Dn(t,n,e,r){var o=null==t?0:t.length;for(r&&o&&(e=t[--o]);o--;)e=n(e,t[o],o,t);return e}function zn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(n(t[e],e,t))return!0;return!1}var Fn=Zn("length");function Gn(t,n,e){var r;return e(t,(function(t,e,o){if(n(t,e,o))return r=e,!1})),r}function Kn(t,n,e,r){for(var o=t.length,i=e+(r?1:-1);r?i--:++i<o;)if(n(t[i],i,t))return i;return-1}function Un(t,n,e){return n==n?function(t,n,e){var r=e-1,o=t.length;for(;++r<o;)if(t[r]===n)return r;return-1}(t,n,e):Kn(t,Vn,e)}function $n(t,n,e,r){for(var o=e-1,i=t.length;++o<i;)if(r(t[o],n))return o;return-1}function Vn(t){return t!=t}function qn(t,n){var e=null==t?0:t.length;return e?Jn(t,n)/e:d}function Zn(t){return function(n){return null==n?r:n[t]}}function Hn(t){return function(n){return null==t?r:t[n]}}function Yn(t,n,e,r,o){return o(t,(function(t,o,i){e=r?(r=!1,t):n(e,t,o,i)})),e}function Jn(t,n){for(var e,o=-1,i=t.length;++o<i;){var a=n(t[o]);a!==r&&(e=e===r?a:e+a)}return e}function Xn(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}function Qn(t){return t?t.slice(0,ge(t)+1).replace(at,""):t}function te(t){return function(n){return t(n)}}function ne(t,n){return Ln(n,(function(n){return t[n]}))}function ee(t,n){return t.has(n)}function re(t,n){for(var e=-1,r=t.length;++e<r&&Un(n,t[e],0)>-1;);return e}function oe(t,n){for(var e=t.length;e--&&Un(n,t[e],0)>-1;);return e}var ie=Hn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),ae=Hn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function ue(t){return"\\"+fn[t]}function ce(t){return on.test(t)}function se(t){var n=-1,e=Array(t.size);return t.forEach((function(t,r){e[++n]=[r,t]})),e}function le(t,n){return function(e){return t(n(e))}}function fe(t,n){for(var e=-1,r=t.length,o=0,i=[];++e<r;){var u=t[e];u!==n&&u!==a||(t[e]=a,i[o++]=e)}return i}function he(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=t})),e}function pe(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=[t,t]})),e}function ve(t){return ce(t)?function(t){var n=en.lastIndex=0;for(;en.test(t);)++n;return n}(t):Fn(t)}function de(t){return ce(t)?function(t){return t.match(en)||[]}(t):function(t){return t.split("")}(t)}function ge(t){for(var n=t.length;n--&&ut.test(t.charAt(n)););return n}var ye=Hn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var me=function t(e){var c,ut=(e=null==e?gn:me.defaults(gn.Object(),e,me.pick(gn,un))).Array,xt=e.Date,kt=e.Error,At=e.Function,St=e.Math,Rt=e.Object,Tt=e.RegExp,Mt=e.String,Ot=e.TypeError,Et=ut.prototype,It=At.prototype,Bt=Rt.prototype,Nt=e["__core-js_shared__"],Lt=It.toString,jt=Bt.hasOwnProperty,Wt=0,Dt=(c=/[^.]+$/.exec(Nt&&Nt.keys&&Nt.keys.IE_PROTO||""))?"Symbol(src)_1."+c:"",zt=Bt.toString,Ft=Lt.call(Rt),Gt=gn._,Kt=Tt("^"+Lt.call(jt).replace(ot,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Ut=_n?e.Buffer:r,$t=e.Symbol,Vt=e.Uint8Array,qt=Ut?Ut.allocUnsafe:r,Zt=le(Rt.getPrototypeOf,Rt),Ht=Rt.create,Yt=Bt.propertyIsEnumerable,Jt=Et.splice,Xt=$t?$t.isConcatSpreadable:r,Qt=$t?$t.iterator:r,en=$t?$t.toStringTag:r,on=function(){try{var t=vi(Rt,"defineProperty");return t({},"",{}),t}catch(t){}}(),fn=e.clearTimeout!==gn.clearTimeout&&e.clearTimeout,vn=xt&&xt.now!==gn.Date.now&&xt.now,dn=e.setTimeout!==gn.setTimeout&&e.setTimeout,yn=St.ceil,mn=St.floor,bn=Rt.getOwnPropertySymbols,wn=Ut?Ut.isBuffer:r,Fn=e.isFinite,Hn=Et.join,_e=le(Rt.keys,Rt),be=St.max,we=St.min,Pe=xt.now,Ce=e.parseInt,xe=St.random,ke=Et.reverse,Ae=vi(e,"DataView"),Se=vi(e,"Map"),Re=vi(e,"Promise"),Te=vi(e,"Set"),Me=vi(e,"WeakMap"),Oe=vi(Rt,"create"),Ee=Me&&new Me,Ie={},Be=zi(Ae),Ne=zi(Se),Le=zi(Re),je=zi(Te),We=zi(Me),De=$t?$t.prototype:r,ze=De?De.valueOf:r,Fe=De?De.toString:r;function Ge(t){if(ru(t)&&!Va(t)&&!(t instanceof Ve)){if(t instanceof $e)return t;if(jt.call(t,"__wrapped__"))return Fi(t)}return new $e(t)}var Ke=function(){function t(){}return function(n){if(!eu(n))return{};if(Ht)return Ht(n);t.prototype=n;var e=new t;return t.prototype=r,e}}();function Ue(){}function $e(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=r}function Ve(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=g,this.__views__=[]}function qe(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Ze(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function He(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Ye(t){var n=-1,e=null==t?0:t.length;for(this.__data__=new He;++n<e;)this.add(t[n])}function Je(t){var n=this.__data__=new Ze(t);this.size=n.size}function Xe(t,n){var e=Va(t),r=!e&&$a(t),o=!e&&!r&&Ya(t),i=!e&&!r&&!o&&fu(t),a=e||r||o||i,u=a?Xn(t.length,Mt):[],c=u.length;for(var s in t)!n&&!jt.call(t,s)||a&&("length"==s||o&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||wi(s,c))||u.push(s);return u}function Qe(t){var n=t.length;return n?t[Yr(0,n-1)]:r}function tr(t,n){return ji(Eo(t),sr(n,0,t.length))}function nr(t){return ji(Eo(t))}function er(t,n,e){(e!==r&&!Ga(t[n],e)||e===r&&!(n in t))&&ur(t,n,e)}function rr(t,n,e){var o=t[n];jt.call(t,n)&&Ga(o,e)&&(e!==r||n in t)||ur(t,n,e)}function or(t,n){for(var e=t.length;e--;)if(Ga(t[e][0],n))return e;return-1}function ir(t,n,e,r){return vr(t,(function(t,o,i){n(r,t,e(t),i)})),r}function ar(t,n){return t&&Io(n,Iu(n),t)}function ur(t,n,e){"__proto__"==n&&on?on(t,n,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[n]=e}function cr(t,n){for(var e=-1,o=n.length,i=ut(o),a=null==t;++e<o;)i[e]=a?r:Ru(t,n[e]);return i}function sr(t,n,e){return t==t&&(e!==r&&(t=t<=e?t:e),n!==r&&(t=t>=n?t:n)),t}function lr(t,n,e,o,i,a){var u,c=1&n,s=2&n,l=4&n;if(e&&(u=i?e(t,o,i,a):e(t)),u!==r)return u;if(!eu(t))return t;var f=Va(t);if(f){if(u=function(t){var n=t.length,e=new t.constructor(n);n&&"string"==typeof t[0]&&jt.call(t,"index")&&(e.index=t.index,e.input=t.input);return e}(t),!c)return Eo(t,u)}else{var h=yi(t),p=h==C||h==x;if(Ya(t))return Ao(t,c);if(h==S||h==m||p&&!i){if(u=s||p?{}:_i(t),!c)return s?function(t,n){return Io(t,gi(t),n)}(t,function(t,n){return t&&Io(n,Bu(n),t)}(u,t)):function(t,n){return Io(t,di(t),n)}(t,ar(u,t))}else{if(!ln[h])return i?t:{};u=function(t,n,e){var r=t.constructor;switch(n){case B:return So(t);case b:case w:return new r(+t);case N:return function(t,n){var e=n?So(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}(t,e);case L:case j:case W:case D:case z:case F:case G:case K:case U:return Ro(t,e);case k:return new r;case A:case O:return new r(t);case T:return function(t){var n=new t.constructor(t.source,dt.exec(t));return n.lastIndex=t.lastIndex,n}(t);case M:return new r;case E:return o=t,ze?Rt(ze.call(o)):{}}var o}(t,h,c)}}a||(a=new Je);var v=a.get(t);if(v)return v;a.set(t,u),cu(t)?t.forEach((function(r){u.add(lr(r,n,e,r,t,a))})):ou(t)&&t.forEach((function(r,o){u.set(o,lr(r,n,e,o,t,a))}));var d=f?r:(l?s?ui:ai:s?Bu:Iu)(t);return Mn(d||t,(function(r,o){d&&(r=t[o=r]),rr(u,o,lr(r,n,e,o,t,a))})),u}function fr(t,n,e){var o=e.length;if(null==t)return!o;for(t=Rt(t);o--;){var i=e[o],a=n[i],u=t[i];if(u===r&&!(i in t)||!a(u))return!1}return!0}function hr(t,n,e){if("function"!=typeof t)throw new Ot(o);return Ii((function(){t.apply(r,e)}),n)}function pr(t,n,e,r){var o=-1,i=Bn,a=!0,u=t.length,c=[],s=n.length;if(!u)return c;e&&(n=Ln(n,te(e))),r?(i=Nn,a=!1):n.length>=200&&(i=ee,a=!1,n=new Ye(n));t:for(;++o<u;){var l=t[o],f=null==e?l:e(l);if(l=r||0!==l?l:0,a&&f==f){for(var h=s;h--;)if(n[h]===f)continue t;c.push(l)}else i(n,f,r)||c.push(l)}return c}Ge.templateSettings={escape:X,evaluate:Q,interpolate:tt,variable:"",imports:{_:Ge}},Ge.prototype=Ue.prototype,Ge.prototype.constructor=Ge,$e.prototype=Ke(Ue.prototype),$e.prototype.constructor=$e,Ve.prototype=Ke(Ue.prototype),Ve.prototype.constructor=Ve,qe.prototype.clear=function(){this.__data__=Oe?Oe(null):{},this.size=0},qe.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},qe.prototype.get=function(t){var n=this.__data__;if(Oe){var e=n[t];return e===i?r:e}return jt.call(n,t)?n[t]:r},qe.prototype.has=function(t){var n=this.__data__;return Oe?n[t]!==r:jt.call(n,t)},qe.prototype.set=function(t,n){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=Oe&&n===r?i:n,this},Ze.prototype.clear=function(){this.__data__=[],this.size=0},Ze.prototype.delete=function(t){var n=this.__data__,e=or(n,t);return!(e<0)&&(e==n.length-1?n.pop():Jt.call(n,e,1),--this.size,!0)},Ze.prototype.get=function(t){var n=this.__data__,e=or(n,t);return e<0?r:n[e][1]},Ze.prototype.has=function(t){return or(this.__data__,t)>-1},Ze.prototype.set=function(t,n){var e=this.__data__,r=or(e,t);return r<0?(++this.size,e.push([t,n])):e[r][1]=n,this},He.prototype.clear=function(){this.size=0,this.__data__={hash:new qe,map:new(Se||Ze),string:new qe}},He.prototype.delete=function(t){var n=hi(this,t).delete(t);return this.size-=n?1:0,n},He.prototype.get=function(t){return hi(this,t).get(t)},He.prototype.has=function(t){return hi(this,t).has(t)},He.prototype.set=function(t,n){var e=hi(this,t),r=e.size;return e.set(t,n),this.size+=e.size==r?0:1,this},Ye.prototype.add=Ye.prototype.push=function(t){return this.__data__.set(t,i),this},Ye.prototype.has=function(t){return this.__data__.has(t)},Je.prototype.clear=function(){this.__data__=new Ze,this.size=0},Je.prototype.delete=function(t){var n=this.__data__,e=n.delete(t);return this.size=n.size,e},Je.prototype.get=function(t){return this.__data__.get(t)},Je.prototype.has=function(t){return this.__data__.has(t)},Je.prototype.set=function(t,n){var e=this.__data__;if(e instanceof Ze){var r=e.__data__;if(!Se||r.length<199)return r.push([t,n]),this.size=++e.size,this;e=this.__data__=new He(r)}return e.set(t,n),this.size=e.size,this};var vr=Lo(Pr),dr=Lo(Cr,!0);function gr(t,n){var e=!0;return vr(t,(function(t,r,o){return e=!!n(t,r,o)})),e}function yr(t,n,e){for(var o=-1,i=t.length;++o<i;){var a=t[o],u=n(a);if(null!=u&&(c===r?u==u&&!lu(u):e(u,c)))var c=u,s=a}return s}function mr(t,n){var e=[];return vr(t,(function(t,r,o){n(t,r,o)&&e.push(t)})),e}function _r(t,n,e,r,o){var i=-1,a=t.length;for(e||(e=bi),o||(o=[]);++i<a;){var u=t[i];n>0&&e(u)?n>1?_r(u,n-1,e,r,o):jn(o,u):r||(o[o.length]=u)}return o}var br=jo(),wr=jo(!0);function Pr(t,n){return t&&br(t,n,Iu)}function Cr(t,n){return t&&wr(t,n,Iu)}function xr(t,n){return In(n,(function(n){return Qa(t[n])}))}function kr(t,n){for(var e=0,o=(n=Po(n,t)).length;null!=t&&e<o;)t=t[Di(n[e++])];return e&&e==o?t:r}function Ar(t,n,e){var r=n(t);return Va(t)?r:jn(r,e(t))}function Sr(t){return null==t?t===r?"[object Undefined]":"[object Null]":en&&en in Rt(t)?function(t){var n=jt.call(t,en),e=t[en];try{t[en]=r;var o=!0}catch(t){}var i=zt.call(t);o&&(n?t[en]=e:delete t[en]);return i}(t):function(t){return zt.call(t)}(t)}function Rr(t,n){return t>n}function Tr(t,n){return null!=t&&jt.call(t,n)}function Mr(t,n){return null!=t&&n in Rt(t)}function Or(t,n,e){for(var o=e?Nn:Bn,i=t[0].length,a=t.length,u=a,c=ut(a),s=1/0,l=[];u--;){var f=t[u];u&&n&&(f=Ln(f,te(n))),s=we(f.length,s),c[u]=!e&&(n||i>=120&&f.length>=120)?new Ye(u&&f):r}f=t[0];var h=-1,p=c[0];t:for(;++h<i&&l.length<s;){var v=f[h],d=n?n(v):v;if(v=e||0!==v?v:0,!(p?ee(p,d):o(l,d,e))){for(u=a;--u;){var g=c[u];if(!(g?ee(g,d):o(t[u],d,e)))continue t}p&&p.push(d),l.push(v)}}return l}function Er(t,n,e){var o=null==(t=Mi(t,n=Po(n,t)))?t:t[Di(Xi(n))];return null==o?r:Rn(o,t,e)}function Ir(t){return ru(t)&&Sr(t)==m}function Br(t,n,e,o,i){return t===n||(null==t||null==n||!ru(t)&&!ru(n)?t!=t&&n!=n:function(t,n,e,o,i,a){var u=Va(t),c=Va(n),s=u?_:yi(t),l=c?_:yi(n),f=(s=s==m?S:s)==S,h=(l=l==m?S:l)==S,p=s==l;if(p&&Ya(t)){if(!Ya(n))return!1;u=!0,f=!1}if(p&&!f)return a||(a=new Je),u||fu(t)?oi(t,n,e,o,i,a):function(t,n,e,r,o,i,a){switch(e){case N:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case B:return!(t.byteLength!=n.byteLength||!i(new Vt(t),new Vt(n)));case b:case w:case A:return Ga(+t,+n);case P:return t.name==n.name&&t.message==n.message;case T:case O:return t==n+"";case k:var u=se;case M:var c=1&r;if(u||(u=he),t.size!=n.size&&!c)return!1;var s=a.get(t);if(s)return s==n;r|=2,a.set(t,n);var l=oi(u(t),u(n),r,o,i,a);return a.delete(t),l;case E:if(ze)return ze.call(t)==ze.call(n)}return!1}(t,n,s,e,o,i,a);if(!(1&e)){var v=f&&jt.call(t,"__wrapped__"),d=h&&jt.call(n,"__wrapped__");if(v||d){var g=v?t.value():t,y=d?n.value():n;return a||(a=new Je),i(g,y,e,o,a)}}if(!p)return!1;return a||(a=new Je),function(t,n,e,o,i,a){var u=1&e,c=ai(t),s=c.length,l=ai(n),f=l.length;if(s!=f&&!u)return!1;var h=s;for(;h--;){var p=c[h];if(!(u?p in n:jt.call(n,p)))return!1}var v=a.get(t),d=a.get(n);if(v&&d)return v==n&&d==t;var g=!0;a.set(t,n),a.set(n,t);var y=u;for(;++h<s;){var m=t[p=c[h]],_=n[p];if(o)var b=u?o(_,m,p,n,t,a):o(m,_,p,t,n,a);if(!(b===r?m===_||i(m,_,e,o,a):b)){g=!1;break}y||(y="constructor"==p)}if(g&&!y){var w=t.constructor,P=n.constructor;w==P||!("constructor"in t)||!("constructor"in n)||"function"==typeof w&&w instanceof w&&"function"==typeof P&&P instanceof P||(g=!1)}return a.delete(t),a.delete(n),g}(t,n,e,o,i,a)}(t,n,e,o,Br,i))}function Nr(t,n,e,o){var i=e.length,a=i,u=!o;if(null==t)return!a;for(t=Rt(t);i--;){var c=e[i];if(u&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++i<a;){var s=(c=e[i])[0],l=t[s],f=c[1];if(u&&c[2]){if(l===r&&!(s in t))return!1}else{var h=new Je;if(o)var p=o(l,f,s,t,n,h);if(!(p===r?Br(f,l,3,o,h):p))return!1}}return!0}function Lr(t){return!(!eu(t)||(n=t,Dt&&Dt in n))&&(Qa(t)?Kt:mt).test(zi(t));var n}function jr(t){return"function"==typeof t?t:null==t?ic:"object"==n(t)?Va(t)?Kr(t[0],t[1]):Gr(t):vc(t)}function Wr(t){if(!Ai(t))return _e(t);var n=[];for(var e in Rt(t))jt.call(t,e)&&"constructor"!=e&&n.push(e);return n}function Dr(t){if(!eu(t))return function(t){var n=[];if(null!=t)for(var e in Rt(t))n.push(e);return n}(t);var n=Ai(t),e=[];for(var r in t)("constructor"!=r||!n&&jt.call(t,r))&&e.push(r);return e}function zr(t,n){return t<n}function Fr(t,n){var e=-1,r=Za(t)?ut(t.length):[];return vr(t,(function(t,o,i){r[++e]=n(t,o,i)})),r}function Gr(t){var n=pi(t);return 1==n.length&&n[0][2]?Ri(n[0][0],n[0][1]):function(e){return e===t||Nr(e,t,n)}}function Kr(t,n){return Ci(t)&&Si(n)?Ri(Di(t),n):function(e){var o=Ru(e,t);return o===r&&o===n?Tu(e,t):Br(n,o,3)}}function Ur(t,n,e,o,i){t!==n&&br(n,(function(a,u){if(i||(i=new Je),eu(a))!function(t,n,e,o,i,a,u){var c=Oi(t,e),s=Oi(n,e),l=u.get(s);if(l)return void er(t,e,l);var f=a?a(c,s,e+"",t,n,u):r,h=f===r;if(h){var p=Va(s),v=!p&&Ya(s),d=!p&&!v&&fu(s);f=s,p||v||d?Va(c)?f=c:Ha(c)?f=Eo(c):v?(h=!1,f=Ao(s,!0)):d?(h=!1,f=Ro(s,!0)):f=[]:au(s)||$a(s)?(f=c,$a(c)?f=_u(c):eu(c)&&!Qa(c)||(f=_i(s))):h=!1}h&&(u.set(s,f),i(f,s,o,a,u),u.delete(s));er(t,e,f)}(t,n,u,e,Ur,o,i);else{var c=o?o(Oi(t,u),a,u+"",t,n,i):r;c===r&&(c=a),er(t,u,c)}}),Bu)}function $r(t,n){var e=t.length;if(e)return wi(n+=n<0?e:0,e)?t[n]:r}function Vr(t,n,e){n=n.length?Ln(n,(function(t){return Va(t)?function(n){return kr(n,1===t.length?t[0]:t)}:t})):[ic];var r=-1;n=Ln(n,te(fi()));var o=Fr(t,(function(t,e,o){var i=Ln(n,(function(n){return n(t)}));return{criteria:i,index:++r,value:t}}));return function(t,n){var e=t.length;for(t.sort(n);e--;)t[e]=t[e].value;return t}(o,(function(t,n){return function(t,n,e){var r=-1,o=t.criteria,i=n.criteria,a=o.length,u=e.length;for(;++r<a;){var c=To(o[r],i[r]);if(c)return r>=u?c:c*("desc"==e[r]?-1:1)}return t.index-n.index}(t,n,e)}))}function qr(t,n,e){for(var r=-1,o=n.length,i={};++r<o;){var a=n[r],u=kr(t,a);e(u,a)&&no(i,Po(a,t),u)}return i}function Zr(t,n,e,r){var o=r?$n:Un,i=-1,a=n.length,u=t;for(t===n&&(n=Eo(n)),e&&(u=Ln(t,te(e)));++i<a;)for(var c=0,s=n[i],l=e?e(s):s;(c=o(u,l,c,r))>-1;)u!==t&&Jt.call(u,c,1),Jt.call(t,c,1);return t}function Hr(t,n){for(var e=t?n.length:0,r=e-1;e--;){var o=n[e];if(e==r||o!==i){var i=o;wi(o)?Jt.call(t,o,1):po(t,o)}}return t}function Yr(t,n){return t+mn(xe()*(n-t+1))}function Jr(t,n){var e="";if(!t||n<1||n>v)return e;do{n%2&&(e+=t),(n=mn(n/2))&&(t+=t)}while(n);return e}function Xr(t,n){return Bi(Ti(t,n,ic),t+"")}function Qr(t){return Qe(Gu(t))}function to(t,n){var e=Gu(t);return ji(e,sr(n,0,e.length))}function no(t,n,e,o){if(!eu(t))return t;for(var i=-1,a=(n=Po(n,t)).length,u=a-1,c=t;null!=c&&++i<a;){var s=Di(n[i]),l=e;if("__proto__"===s||"constructor"===s||"prototype"===s)return t;if(i!=u){var f=c[s];(l=o?o(f,s,c):r)===r&&(l=eu(f)?f:wi(n[i+1])?[]:{})}rr(c,s,l),c=c[s]}return t}var eo=Ee?function(t,n){return Ee.set(t,n),t}:ic,ro=on?function(t,n){return on(t,"toString",{configurable:!0,enumerable:!1,value:ec(n),writable:!0})}:ic;function oo(t){return ji(Gu(t))}function io(t,n,e){var r=-1,o=t.length;n<0&&(n=-n>o?0:o+n),(e=e>o?o:e)<0&&(e+=o),o=n>e?0:e-n>>>0,n>>>=0;for(var i=ut(o);++r<o;)i[r]=t[r+n];return i}function ao(t,n){var e;return vr(t,(function(t,r,o){return!(e=n(t,r,o))})),!!e}function uo(t,n,e){var r=0,o=null==t?r:t.length;if("number"==typeof n&&n==n&&o<=2147483647){for(;r<o;){var i=r+o>>>1,a=t[i];null!==a&&!lu(a)&&(e?a<=n:a<n)?r=i+1:o=i}return o}return co(t,n,ic,e)}function co(t,n,e,o){var i=0,a=null==t?0:t.length;if(0===a)return 0;for(var u=(n=e(n))!=n,c=null===n,s=lu(n),l=n===r;i<a;){var f=mn((i+a)/2),h=e(t[f]),p=h!==r,v=null===h,d=h==h,g=lu(h);if(u)var y=o||d;else y=l?d&&(o||p):c?d&&p&&(o||!v):s?d&&p&&!v&&(o||!g):!v&&!g&&(o?h<=n:h<n);y?i=f+1:a=f}return we(a,4294967294)}function so(t,n){for(var e=-1,r=t.length,o=0,i=[];++e<r;){var a=t[e],u=n?n(a):a;if(!e||!Ga(u,c)){var c=u;i[o++]=0===a?0:a}}return i}function lo(t){return"number"==typeof t?t:lu(t)?d:+t}function fo(t){if("string"==typeof t)return t;if(Va(t))return Ln(t,fo)+"";if(lu(t))return Fe?Fe.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function ho(t,n,e){var r=-1,o=Bn,i=t.length,a=!0,u=[],c=u;if(e)a=!1,o=Nn;else if(i>=200){var s=n?null:Xo(t);if(s)return he(s);a=!1,o=ee,c=new Ye}else c=n?[]:u;t:for(;++r<i;){var l=t[r],f=n?n(l):l;if(l=e||0!==l?l:0,a&&f==f){for(var h=c.length;h--;)if(c[h]===f)continue t;n&&c.push(f),u.push(l)}else o(c,f,e)||(c!==u&&c.push(f),u.push(l))}return u}function po(t,n){return null==(t=Mi(t,n=Po(n,t)))||delete t[Di(Xi(n))]}function vo(t,n,e,r){return no(t,n,e(kr(t,n)),r)}function go(t,n,e,r){for(var o=t.length,i=r?o:-1;(r?i--:++i<o)&&n(t[i],i,t););return e?io(t,r?0:i,r?i+1:o):io(t,r?i+1:0,r?o:i)}function yo(t,n){var e=t;return e instanceof Ve&&(e=e.value()),Wn(n,(function(t,n){return n.func.apply(n.thisArg,jn([t],n.args))}),e)}function mo(t,n,e){var r=t.length;if(r<2)return r?ho(t[0]):[];for(var o=-1,i=ut(r);++o<r;)for(var a=t[o],u=-1;++u<r;)u!=o&&(i[o]=pr(i[o]||a,t[u],n,e));return ho(_r(i,1),n,e)}function _o(t,n,e){for(var o=-1,i=t.length,a=n.length,u={};++o<i;){var c=o<a?n[o]:r;e(u,t[o],c)}return u}function bo(t){return Ha(t)?t:[]}function wo(t){return"function"==typeof t?t:ic}function Po(t,n){return Va(t)?t:Ci(t,n)?[t]:Wi(bu(t))}var Co=Xr;function xo(t,n,e){var o=t.length;return e=e===r?o:e,!n&&e>=o?t:io(t,n,e)}var ko=fn||function(t){return gn.clearTimeout(t)};function Ao(t,n){if(n)return t.slice();var e=t.length,r=qt?qt(e):new t.constructor(e);return t.copy(r),r}function So(t){var n=new t.constructor(t.byteLength);return new Vt(n).set(new Vt(t)),n}function Ro(t,n){var e=n?So(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}function To(t,n){if(t!==n){var e=t!==r,o=null===t,i=t==t,a=lu(t),u=n!==r,c=null===n,s=n==n,l=lu(n);if(!c&&!l&&!a&&t>n||a&&u&&s&&!c&&!l||o&&u&&s||!e&&s||!i)return 1;if(!o&&!a&&!l&&t<n||l&&e&&i&&!o&&!a||c&&e&&i||!u&&i||!s)return-1}return 0}function Mo(t,n,e,r){for(var o=-1,i=t.length,a=e.length,u=-1,c=n.length,s=be(i-a,0),l=ut(c+s),f=!r;++u<c;)l[u]=n[u];for(;++o<a;)(f||o<i)&&(l[e[o]]=t[o]);for(;s--;)l[u++]=t[o++];return l}function Oo(t,n,e,r){for(var o=-1,i=t.length,a=-1,u=e.length,c=-1,s=n.length,l=be(i-u,0),f=ut(l+s),h=!r;++o<l;)f[o]=t[o];for(var p=o;++c<s;)f[p+c]=n[c];for(;++a<u;)(h||o<i)&&(f[p+e[a]]=t[o++]);return f}function Eo(t,n){var e=-1,r=t.length;for(n||(n=ut(r));++e<r;)n[e]=t[e];return n}function Io(t,n,e,o){var i=!e;e||(e={});for(var a=-1,u=n.length;++a<u;){var c=n[a],s=o?o(e[c],t[c],c,e,t):r;s===r&&(s=t[c]),i?ur(e,c,s):rr(e,c,s)}return e}function Bo(t,n){return function(e,r){var o=Va(e)?Tn:ir,i=n?n():{};return o(e,t,fi(r,2),i)}}function No(t){return Xr((function(n,e){var o=-1,i=e.length,a=i>1?e[i-1]:r,u=i>2?e[2]:r;for(a=t.length>3&&"function"==typeof a?(i--,a):r,u&&Pi(e[0],e[1],u)&&(a=i<3?r:a,i=1),n=Rt(n);++o<i;){var c=e[o];c&&t(n,c,o,a)}return n}))}function Lo(t,n){return function(e,r){if(null==e)return e;if(!Za(e))return t(e,r);for(var o=e.length,i=n?o:-1,a=Rt(e);(n?i--:++i<o)&&!1!==r(a[i],i,a););return e}}function jo(t){return function(n,e,r){for(var o=-1,i=Rt(n),a=r(n),u=a.length;u--;){var c=a[t?u:++o];if(!1===e(i[c],c,i))break}return n}}function Wo(t){return function(n){var e=ce(n=bu(n))?de(n):r,o=e?e[0]:n.charAt(0),i=e?xo(e,1).join(""):n.slice(1);return o[t]()+i}}function Do(t){return function(n){return Wn(Qu($u(n).replace(tn,"")),t,"")}}function zo(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var e=Ke(t.prototype),r=t.apply(e,n);return eu(r)?r:e}}function Fo(t){return function(n,e,o){var i=Rt(n);if(!Za(n)){var a=fi(e,3);n=Iu(n),e=function(t){return a(i[t],t,i)}}var u=t(n,e,o);return u>-1?i[a?n[u]:u]:r}}function Go(t){return ii((function(n){var e=n.length,i=e,a=$e.prototype.thru;for(t&&n.reverse();i--;){var u=n[i];if("function"!=typeof u)throw new Ot(o);if(a&&!c&&"wrapper"==si(u))var c=new $e([],!0)}for(i=c?i:e;++i<e;){var s=si(u=n[i]),l="wrapper"==s?ci(u):r;c=l&&xi(l[0])&&424==l[1]&&!l[4].length&&1==l[9]?c[si(l[0])].apply(c,l[3]):1==u.length&&xi(u)?c[s]():c.thru(u)}return function(){var t=arguments,r=t[0];if(c&&1==t.length&&Va(r))return c.plant(r).value();for(var o=0,i=e?n[o].apply(this,t):r;++o<e;)i=n[o].call(this,i);return i}}))}function Ko(t,n,e,o,i,a,u,c,s,l){var h=n&f,p=1&n,v=2&n,d=24&n,g=512&n,y=v?r:zo(t);return function f(){for(var m=arguments.length,_=ut(m),b=m;b--;)_[b]=arguments[b];if(d)var w=li(f),P=function(t,n){for(var e=t.length,r=0;e--;)t[e]===n&&++r;return r}(_,w);if(o&&(_=Mo(_,o,i,d)),a&&(_=Oo(_,a,u,d)),m-=P,d&&m<l){var C=fe(_,w);return Yo(t,n,Ko,f.placeholder,e,_,C,c,s,l-m)}var x=p?e:this,k=v?x[t]:t;return m=_.length,c?_=function(t,n){var e=t.length,o=we(n.length,e),i=Eo(t);for(;o--;){var a=n[o];t[o]=wi(a,e)?i[a]:r}return t}(_,c):g&&m>1&&_.reverse(),h&&s<m&&(_.length=s),this&&this!==gn&&this instanceof f&&(k=y||zo(k)),k.apply(x,_)}}function Uo(t,n){return function(e,r){return function(t,n,e,r){return Pr(t,(function(t,o,i){n(r,e(t),o,i)})),r}(e,t,n(r),{})}}function $o(t,n){return function(e,o){var i;if(e===r&&o===r)return n;if(e!==r&&(i=e),o!==r){if(i===r)return o;"string"==typeof e||"string"==typeof o?(e=fo(e),o=fo(o)):(e=lo(e),o=lo(o)),i=t(e,o)}return i}}function Vo(t){return ii((function(n){return n=Ln(n,te(fi())),Xr((function(e){var r=this;return t(n,(function(t){return Rn(t,r,e)}))}))}))}function qo(t,n){var e=(n=n===r?" ":fo(n)).length;if(e<2)return e?Jr(n,t):n;var o=Jr(n,yn(t/ve(n)));return ce(n)?xo(de(o),0,t).join(""):o.slice(0,t)}function Zo(t){return function(n,e,o){return o&&"number"!=typeof o&&Pi(n,e,o)&&(e=o=r),n=du(n),e===r?(e=n,n=0):e=du(e),function(t,n,e,r){for(var o=-1,i=be(yn((n-t)/(e||1)),0),a=ut(i);i--;)a[r?i:++o]=t,t+=e;return a}(n,e,o=o===r?n<e?1:-1:du(o),t)}}function Ho(t){return function(n,e){return"string"==typeof n&&"string"==typeof e||(n=mu(n),e=mu(e)),t(n,e)}}function Yo(t,n,e,o,i,a,u,c,f,h){var p=8&n;n|=p?s:l,4&(n&=~(p?l:s))||(n&=-4);var v=[t,n,i,p?a:r,p?u:r,p?r:a,p?r:u,c,f,h],d=e.apply(r,v);return xi(t)&&Ei(d,v),d.placeholder=o,Ni(d,t,n)}function Jo(t){var n=St[t];return function(t,e){if(t=mu(t),(e=null==e?0:we(gu(e),292))&&Fn(t)){var r=(bu(t)+"e").split("e");return+((r=(bu(n(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return n(t)}}var Xo=Te&&1/he(new Te([,-0]))[1]==p?function(t){return new Te(t)}:lc;function Qo(t){return function(n){var e=yi(n);return e==k?se(n):e==M?pe(n):function(t,n){return Ln(n,(function(n){return[n,t[n]]}))}(n,t(n))}}function ti(t,n,e,i,c,p,v,d){var g=2&n;if(!g&&"function"!=typeof t)throw new Ot(o);var y=i?i.length:0;if(y||(n&=-97,i=c=r),v=v===r?v:be(gu(v),0),d=d===r?d:gu(d),y-=c?c.length:0,n&l){var m=i,_=c;i=c=r}var b=g?r:ci(t),w=[t,n,e,i,c,m,_,p,v,d];if(b&&function(t,n){var e=t[1],r=n[1],o=e|r,i=o<131,u=r==f&&8==e||r==f&&e==h&&t[7].length<=n[8]||384==r&&n[7].length<=n[8]&&8==e;if(!i&&!u)return t;1&r&&(t[2]=n[2],o|=1&e?0:4);var c=n[3];if(c){var s=t[3];t[3]=s?Mo(s,c,n[4]):c,t[4]=s?fe(t[3],a):n[4]}(c=n[5])&&(s=t[5],t[5]=s?Oo(s,c,n[6]):c,t[6]=s?fe(t[5],a):n[6]);(c=n[7])&&(t[7]=c);r&f&&(t[8]=null==t[8]?n[8]:we(t[8],n[8]));null==t[9]&&(t[9]=n[9]);t[0]=n[0],t[1]=o}(w,b),t=w[0],n=w[1],e=w[2],i=w[3],c=w[4],!(d=w[9]=w[9]===r?g?0:t.length:be(w[9]-y,0))&&24&n&&(n&=-25),n&&1!=n)P=8==n||n==u?function(t,n,e){var o=zo(t);return function i(){for(var a=arguments.length,u=ut(a),c=a,s=li(i);c--;)u[c]=arguments[c];var l=a<3&&u[0]!==s&&u[a-1]!==s?[]:fe(u,s);return(a-=l.length)<e?Yo(t,n,Ko,i.placeholder,r,u,l,r,r,e-a):Rn(this&&this!==gn&&this instanceof i?o:t,this,u)}}(t,n,d):n!=s&&33!=n||c.length?Ko.apply(r,w):function(t,n,e,r){var o=1&n,i=zo(t);return function n(){for(var a=-1,u=arguments.length,c=-1,s=r.length,l=ut(s+u),f=this&&this!==gn&&this instanceof n?i:t;++c<s;)l[c]=r[c];for(;u--;)l[c++]=arguments[++a];return Rn(f,o?e:this,l)}}(t,n,e,i);else var P=function(t,n,e){var r=1&n,o=zo(t);return function n(){return(this&&this!==gn&&this instanceof n?o:t).apply(r?e:this,arguments)}}(t,n,e);return Ni((b?eo:Ei)(P,w),t,n)}function ni(t,n,e,o){return t===r||Ga(t,Bt[e])&&!jt.call(o,e)?n:t}function ei(t,n,e,o,i,a){return eu(t)&&eu(n)&&(a.set(n,t),Ur(t,n,r,ei,a),a.delete(n)),t}function ri(t){return au(t)?r:t}function oi(t,n,e,o,i,a){var u=1&e,c=t.length,s=n.length;if(c!=s&&!(u&&s>c))return!1;var l=a.get(t),f=a.get(n);if(l&&f)return l==n&&f==t;var h=-1,p=!0,v=2&e?new Ye:r;for(a.set(t,n),a.set(n,t);++h<c;){var d=t[h],g=n[h];if(o)var y=u?o(g,d,h,n,t,a):o(d,g,h,t,n,a);if(y!==r){if(y)continue;p=!1;break}if(v){if(!zn(n,(function(t,n){if(!ee(v,n)&&(d===t||i(d,t,e,o,a)))return v.push(n)}))){p=!1;break}}else if(d!==g&&!i(d,g,e,o,a)){p=!1;break}}return a.delete(t),a.delete(n),p}function ii(t){return Bi(Ti(t,r,qi),t+"")}function ai(t){return Ar(t,Iu,di)}function ui(t){return Ar(t,Bu,gi)}var ci=Ee?function(t){return Ee.get(t)}:lc;function si(t){for(var n=t.name+"",e=Ie[n],r=jt.call(Ie,n)?e.length:0;r--;){var o=e[r],i=o.func;if(null==i||i==t)return o.name}return n}function li(t){return(jt.call(Ge,"placeholder")?Ge:t).placeholder}function fi(){var t=Ge.iteratee||ac;return t=t===ac?jr:t,arguments.length?t(arguments[0],arguments[1]):t}function hi(t,e){var r,o,i=t.__data__;return("string"==(o=n(r=e))||"number"==o||"symbol"==o||"boolean"==o?"__proto__"!==r:null===r)?i["string"==typeof e?"string":"hash"]:i.map}function pi(t){for(var n=Iu(t),e=n.length;e--;){var r=n[e],o=t[r];n[e]=[r,o,Si(o)]}return n}function vi(t,n){var e=function(t,n){return null==t?r:t[n]}(t,n);return Lr(e)?e:r}var di=bn?function(t){return null==t?[]:(t=Rt(t),In(bn(t),(function(n){return Yt.call(t,n)})))}:yc,gi=bn?function(t){for(var n=[];t;)jn(n,di(t)),t=Zt(t);return n}:yc,yi=Sr;function mi(t,n,e){for(var r=-1,o=(n=Po(n,t)).length,i=!1;++r<o;){var a=Di(n[r]);if(!(i=null!=t&&e(t,a)))break;t=t[a]}return i||++r!=o?i:!!(o=null==t?0:t.length)&&nu(o)&&wi(a,o)&&(Va(t)||$a(t))}function _i(t){return"function"!=typeof t.constructor||Ai(t)?{}:Ke(Zt(t))}function bi(t){return Va(t)||$a(t)||!!(Xt&&t&&t[Xt])}function wi(t,e){var r=n(t);return!!(e=null==e?v:e)&&("number"==r||"symbol"!=r&&bt.test(t))&&t>-1&&t%1==0&&t<e}function Pi(t,e,r){if(!eu(r))return!1;var o=n(e);return!!("number"==o?Za(r)&&wi(e,r.length):"string"==o&&e in r)&&Ga(r[e],t)}function Ci(t,e){if(Va(t))return!1;var r=n(t);return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!lu(t))||(et.test(t)||!nt.test(t)||null!=e&&t in Rt(e))}function xi(t){var n=si(t),e=Ge[n];if("function"!=typeof e||!(n in Ve.prototype))return!1;if(t===e)return!0;var r=ci(e);return!!r&&t===r[0]}(Ae&&yi(new Ae(new ArrayBuffer(1)))!=N||Se&&yi(new Se)!=k||Re&&yi(Re.resolve())!=R||Te&&yi(new Te)!=M||Me&&yi(new Me)!=I)&&(yi=function(t){var n=Sr(t),e=n==S?t.constructor:r,o=e?zi(e):"";if(o)switch(o){case Be:return N;case Ne:return k;case Le:return R;case je:return M;case We:return I}return n});var ki=Nt?Qa:mc;function Ai(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||Bt)}function Si(t){return t==t&&!eu(t)}function Ri(t,n){return function(e){return null!=e&&(e[t]===n&&(n!==r||t in Rt(e)))}}function Ti(t,n,e){return n=be(n===r?t.length-1:n,0),function(){for(var r=arguments,o=-1,i=be(r.length-n,0),a=ut(i);++o<i;)a[o]=r[n+o];o=-1;for(var u=ut(n+1);++o<n;)u[o]=r[o];return u[n]=e(a),Rn(t,this,u)}}function Mi(t,n){return n.length<2?t:kr(t,io(n,0,-1))}function Oi(t,n){if(("constructor"!==n||"function"!=typeof t[n])&&"__proto__"!=n)return t[n]}var Ei=Li(eo),Ii=dn||function(t,n){return gn.setTimeout(t,n)},Bi=Li(ro);function Ni(t,n,e){var r=n+"";return Bi(t,function(t,n){var e=n.length;if(!e)return t;var r=e-1;return n[r]=(e>1?"& ":"")+n[r],n=n.join(e>2?", ":" "),t.replace(ct,"{\n/* [wrapped with "+n+"] */\n")}(r,function(t,n){return Mn(y,(function(e){var r="_."+e[0];n&e[1]&&!Bn(t,r)&&t.push(r)})),t.sort()}(function(t){var n=t.match(st);return n?n[1].split(lt):[]}(r),e)))}function Li(t){var n=0,e=0;return function(){var o=Pe(),i=16-(o-e);if(e=o,i>0){if(++n>=800)return arguments[0]}else n=0;return t.apply(r,arguments)}}function ji(t,n){var e=-1,o=t.length,i=o-1;for(n=n===r?o:n;++e<n;){var a=Yr(e,i),u=t[a];t[a]=t[e],t[e]=u}return t.length=n,t}var Wi=function(t){var n=La(t,(function(t){return 500===e.size&&e.clear(),t})),e=n.cache;return n}((function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(rt,(function(t,e,r,o){n.push(r?o.replace(pt,"$1"):e||t)})),n}));function Di(t){if("string"==typeof t||lu(t))return t;var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function zi(t){if(null!=t){try{return Lt.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Fi(t){if(t instanceof Ve)return t.clone();var n=new $e(t.__wrapped__,t.__chain__);return n.__actions__=Eo(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var Gi=Xr((function(t,n){return Ha(t)?pr(t,_r(n,1,Ha,!0)):[]})),Ki=Xr((function(t,n){var e=Xi(n);return Ha(e)&&(e=r),Ha(t)?pr(t,_r(n,1,Ha,!0),fi(e,2)):[]})),Ui=Xr((function(t,n){var e=Xi(n);return Ha(e)&&(e=r),Ha(t)?pr(t,_r(n,1,Ha,!0),r,e):[]}));function $i(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var o=null==e?0:gu(e);return o<0&&(o=be(r+o,0)),Kn(t,fi(n,3),o)}function Vi(t,n,e){var o=null==t?0:t.length;if(!o)return-1;var i=o-1;return e!==r&&(i=gu(e),i=e<0?be(o+i,0):we(i,o-1)),Kn(t,fi(n,3),i,!0)}function qi(t){return(null==t?0:t.length)?_r(t,1):[]}function Zi(t){return t&&t.length?t[0]:r}var Hi=Xr((function(t){var n=Ln(t,bo);return n.length&&n[0]===t[0]?Or(n):[]})),Yi=Xr((function(t){var n=Xi(t),e=Ln(t,bo);return n===Xi(e)?n=r:e.pop(),e.length&&e[0]===t[0]?Or(e,fi(n,2)):[]})),Ji=Xr((function(t){var n=Xi(t),e=Ln(t,bo);return(n="function"==typeof n?n:r)&&e.pop(),e.length&&e[0]===t[0]?Or(e,r,n):[]}));function Xi(t){var n=null==t?0:t.length;return n?t[n-1]:r}var Qi=Xr(ta);function ta(t,n){return t&&t.length&&n&&n.length?Zr(t,n):t}var na=ii((function(t,n){var e=null==t?0:t.length,r=cr(t,n);return Hr(t,Ln(n,(function(t){return wi(t,e)?+t:t})).sort(To)),r}));function ea(t){return null==t?t:ke.call(t)}var ra=Xr((function(t){return ho(_r(t,1,Ha,!0))})),oa=Xr((function(t){var n=Xi(t);return Ha(n)&&(n=r),ho(_r(t,1,Ha,!0),fi(n,2))})),ia=Xr((function(t){var n=Xi(t);return n="function"==typeof n?n:r,ho(_r(t,1,Ha,!0),r,n)}));function aa(t){if(!t||!t.length)return[];var n=0;return t=In(t,(function(t){if(Ha(t))return n=be(t.length,n),!0})),Xn(n,(function(n){return Ln(t,Zn(n))}))}function ua(t,n){if(!t||!t.length)return[];var e=aa(t);return null==n?e:Ln(e,(function(t){return Rn(n,r,t)}))}var ca=Xr((function(t,n){return Ha(t)?pr(t,n):[]})),sa=Xr((function(t){return mo(In(t,Ha))})),la=Xr((function(t){var n=Xi(t);return Ha(n)&&(n=r),mo(In(t,Ha),fi(n,2))})),fa=Xr((function(t){var n=Xi(t);return n="function"==typeof n?n:r,mo(In(t,Ha),r,n)})),ha=Xr(aa);var pa=Xr((function(t){var n=t.length,e=n>1?t[n-1]:r;return e="function"==typeof e?(t.pop(),e):r,ua(t,e)}));function va(t){var n=Ge(t);return n.__chain__=!0,n}function da(t,n){return n(t)}var ga=ii((function(t){var n=t.length,e=n?t[0]:0,o=this.__wrapped__,i=function(n){return cr(n,t)};return!(n>1||this.__actions__.length)&&o instanceof Ve&&wi(e)?((o=o.slice(e,+e+(n?1:0))).__actions__.push({func:da,args:[i],thisArg:r}),new $e(o,this.__chain__).thru((function(t){return n&&!t.length&&t.push(r),t}))):this.thru(i)}));var ya=Bo((function(t,n,e){jt.call(t,e)?++t[e]:ur(t,e,1)}));var ma=Fo($i),_a=Fo(Vi);function ba(t,n){return(Va(t)?Mn:vr)(t,fi(n,3))}function wa(t,n){return(Va(t)?On:dr)(t,fi(n,3))}var Pa=Bo((function(t,n,e){jt.call(t,e)?t[e].push(n):ur(t,e,[n])}));var Ca=Xr((function(t,n,e){var r=-1,o="function"==typeof n,i=Za(t)?ut(t.length):[];return vr(t,(function(t){i[++r]=o?Rn(n,t,e):Er(t,n,e)})),i})),xa=Bo((function(t,n,e){ur(t,e,n)}));function ka(t,n){return(Va(t)?Ln:Fr)(t,fi(n,3))}var Aa=Bo((function(t,n,e){t[e?0:1].push(n)}),(function(){return[[],[]]}));var Sa=Xr((function(t,n){if(null==t)return[];var e=n.length;return e>1&&Pi(t,n[0],n[1])?n=[]:e>2&&Pi(n[0],n[1],n[2])&&(n=[n[0]]),Vr(t,_r(n,1),[])})),Ra=vn||function(){return gn.Date.now()};function Ta(t,n,e){return n=e?r:n,n=t&&null==n?t.length:n,ti(t,f,r,r,r,r,n)}function Ma(t,n){var e;if("function"!=typeof n)throw new Ot(o);return t=gu(t),function(){return--t>0&&(e=n.apply(this,arguments)),t<=1&&(n=r),e}}var Oa=Xr((function(t,n,e){var r=1;if(e.length){var o=fe(e,li(Oa));r|=s}return ti(t,r,n,e,o)})),Ea=Xr((function(t,n,e){var r=3;if(e.length){var o=fe(e,li(Ea));r|=s}return ti(n,r,t,e,o)}));function Ia(t,n,e){var i,a,u,c,s,l,f=0,h=!1,p=!1,v=!0;if("function"!=typeof t)throw new Ot(o);function d(n){var e=i,o=a;return i=a=r,f=n,c=t.apply(o,e)}function g(t){var e=t-l;return l===r||e>=n||e<0||p&&t-f>=u}function y(){var t=Ra();if(g(t))return m(t);s=Ii(y,function(t){var e=n-(t-l);return p?we(e,u-(t-f)):e}(t))}function m(t){return s=r,v&&i?d(t):(i=a=r,c)}function _(){var t=Ra(),e=g(t);if(i=arguments,a=this,l=t,e){if(s===r)return function(t){return f=t,s=Ii(y,n),h?d(t):c}(l);if(p)return ko(s),s=Ii(y,n),d(l)}return s===r&&(s=Ii(y,n)),c}return n=mu(n)||0,eu(e)&&(h=!!e.leading,u=(p="maxWait"in e)?be(mu(e.maxWait)||0,n):u,v="trailing"in e?!!e.trailing:v),_.cancel=function(){s!==r&&ko(s),f=0,i=l=a=s=r},_.flush=function(){return s===r?c:m(Ra())},_}var Ba=Xr((function(t,n){return hr(t,1,n)})),Na=Xr((function(t,n,e){return hr(t,mu(n)||0,e)}));function La(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new Ot(o);var e=function e(){var r=arguments,o=n?n.apply(this,r):r[0],i=e.cache;if(i.has(o))return i.get(o);var a=t.apply(this,r);return e.cache=i.set(o,a)||i,a};return e.cache=new(La.Cache||He),e}function ja(t){if("function"!=typeof t)throw new Ot(o);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}La.Cache=He;var Wa=Co((function(t,n){var e=(n=1==n.length&&Va(n[0])?Ln(n[0],te(fi())):Ln(_r(n,1),te(fi()))).length;return Xr((function(r){for(var o=-1,i=we(r.length,e);++o<i;)r[o]=n[o].call(this,r[o]);return Rn(t,this,r)}))})),Da=Xr((function(t,n){var e=fe(n,li(Da));return ti(t,s,r,n,e)})),za=Xr((function(t,n){var e=fe(n,li(za));return ti(t,l,r,n,e)})),Fa=ii((function(t,n){return ti(t,h,r,r,r,n)}));function Ga(t,n){return t===n||t!=t&&n!=n}var Ka=Ho(Rr),Ua=Ho((function(t,n){return t>=n})),$a=Ir(function(){return arguments}())?Ir:function(t){return ru(t)&&jt.call(t,"callee")&&!Yt.call(t,"callee")},Va=ut.isArray,qa=Pn?te(Pn):function(t){return ru(t)&&Sr(t)==B};function Za(t){return null!=t&&nu(t.length)&&!Qa(t)}function Ha(t){return ru(t)&&Za(t)}var Ya=wn||mc,Ja=Cn?te(Cn):function(t){return ru(t)&&Sr(t)==w};function Xa(t){if(!ru(t))return!1;var n=Sr(t);return n==P||"[object DOMException]"==n||"string"==typeof t.message&&"string"==typeof t.name&&!au(t)}function Qa(t){if(!eu(t))return!1;var n=Sr(t);return n==C||n==x||"[object AsyncFunction]"==n||"[object Proxy]"==n}function tu(t){return"number"==typeof t&&t==gu(t)}function nu(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=v}function eu(t){var e=n(t);return null!=t&&("object"==e||"function"==e)}function ru(t){return null!=t&&"object"==n(t)}var ou=xn?te(xn):function(t){return ru(t)&&yi(t)==k};function iu(t){return"number"==typeof t||ru(t)&&Sr(t)==A}function au(t){if(!ru(t)||Sr(t)!=S)return!1;var n=Zt(t);if(null===n)return!0;var e=jt.call(n,"constructor")&&n.constructor;return"function"==typeof e&&e instanceof e&&Lt.call(e)==Ft}var uu=kn?te(kn):function(t){return ru(t)&&Sr(t)==T};var cu=An?te(An):function(t){return ru(t)&&yi(t)==M};function su(t){return"string"==typeof t||!Va(t)&&ru(t)&&Sr(t)==O}function lu(t){return"symbol"==n(t)||ru(t)&&Sr(t)==E}var fu=Sn?te(Sn):function(t){return ru(t)&&nu(t.length)&&!!sn[Sr(t)]};var hu=Ho(zr),pu=Ho((function(t,n){return t<=n}));function vu(t){if(!t)return[];if(Za(t))return su(t)?de(t):Eo(t);if(Qt&&t[Qt])return function(t){for(var n,e=[];!(n=t.next()).done;)e.push(n.value);return e}(t[Qt]());var n=yi(t);return(n==k?se:n==M?he:Gu)(t)}function du(t){return t?(t=mu(t))===p||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function gu(t){var n=du(t),e=n%1;return n==n?e?n-e:n:0}function yu(t){return t?sr(gu(t),0,g):0}function mu(t){if("number"==typeof t)return t;if(lu(t))return d;if(eu(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=eu(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=Qn(t);var e=yt.test(t);return e||_t.test(t)?pn(t.slice(2),e?2:8):gt.test(t)?d:+t}function _u(t){return Io(t,Bu(t))}function bu(t){return null==t?"":fo(t)}var wu=No((function(t,n){if(Ai(n)||Za(n))Io(n,Iu(n),t);else for(var e in n)jt.call(n,e)&&rr(t,e,n[e])})),Pu=No((function(t,n){Io(n,Bu(n),t)})),Cu=No((function(t,n,e,r){Io(n,Bu(n),t,r)})),xu=No((function(t,n,e,r){Io(n,Iu(n),t,r)})),ku=ii(cr);var Au=Xr((function(t,n){t=Rt(t);var e=-1,o=n.length,i=o>2?n[2]:r;for(i&&Pi(n[0],n[1],i)&&(o=1);++e<o;)for(var a=n[e],u=Bu(a),c=-1,s=u.length;++c<s;){var l=u[c],f=t[l];(f===r||Ga(f,Bt[l])&&!jt.call(t,l))&&(t[l]=a[l])}return t})),Su=Xr((function(t){return t.push(r,ei),Rn(Lu,r,t)}));function Ru(t,n,e){var o=null==t?r:kr(t,n);return o===r?e:o}function Tu(t,n){return null!=t&&mi(t,n,Mr)}var Mu=Uo((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=zt.call(n)),t[n]=e}),ec(ic)),Ou=Uo((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=zt.call(n)),jt.call(t,n)?t[n].push(e):t[n]=[e]}),fi),Eu=Xr(Er);function Iu(t){return Za(t)?Xe(t):Wr(t)}function Bu(t){return Za(t)?Xe(t,!0):Dr(t)}var Nu=No((function(t,n,e){Ur(t,n,e)})),Lu=No((function(t,n,e,r){Ur(t,n,e,r)})),ju=ii((function(t,n){var e={};if(null==t)return e;var r=!1;n=Ln(n,(function(n){return n=Po(n,t),r||(r=n.length>1),n})),Io(t,ui(t),e),r&&(e=lr(e,7,ri));for(var o=n.length;o--;)po(e,n[o]);return e}));var Wu=ii((function(t,n){return null==t?{}:function(t,n){return qr(t,n,(function(n,e){return Tu(t,e)}))}(t,n)}));function Du(t,n){if(null==t)return{};var e=Ln(ui(t),(function(t){return[t]}));return n=fi(n),qr(t,e,(function(t,e){return n(t,e[0])}))}var zu=Qo(Iu),Fu=Qo(Bu);function Gu(t){return null==t?[]:ne(t,Iu(t))}var Ku=Do((function(t,n,e){return n=n.toLowerCase(),t+(e?Uu(n):n)}));function Uu(t){return Xu(bu(t).toLowerCase())}function $u(t){return(t=bu(t))&&t.replace(wt,ie).replace(nn,"")}var Vu=Do((function(t,n,e){return t+(e?"-":"")+n.toLowerCase()})),qu=Do((function(t,n,e){return t+(e?" ":"")+n.toLowerCase()})),Zu=Wo("toLowerCase");var Hu=Do((function(t,n,e){return t+(e?"_":"")+n.toLowerCase()}));var Yu=Do((function(t,n,e){return t+(e?" ":"")+Xu(n)}));var Ju=Do((function(t,n,e){return t+(e?" ":"")+n.toUpperCase()})),Xu=Wo("toUpperCase");function Qu(t,n,e){return t=bu(t),(n=e?r:n)===r?function(t){return an.test(t)}(t)?function(t){return t.match(rn)||[]}(t):function(t){return t.match(ft)||[]}(t):t.match(n)||[]}var tc=Xr((function(t,n){try{return Rn(t,r,n)}catch(t){return Xa(t)?t:new kt(t)}})),nc=ii((function(t,n){return Mn(n,(function(n){n=Di(n),ur(t,n,Oa(t[n],t))})),t}));function ec(t){return function(){return t}}var rc=Go(),oc=Go(!0);function ic(t){return t}function ac(t){return jr("function"==typeof t?t:lr(t,1))}var uc=Xr((function(t,n){return function(e){return Er(e,t,n)}})),cc=Xr((function(t,n){return function(e){return Er(t,e,n)}}));function sc(t,n,e){var r=Iu(n),o=xr(n,r);null!=e||eu(n)&&(o.length||!r.length)||(e=n,n=t,t=this,o=xr(n,Iu(n)));var i=!(eu(e)&&"chain"in e&&!e.chain),a=Qa(t);return Mn(o,(function(e){var r=n[e];t[e]=r,a&&(t.prototype[e]=function(){var n=this.__chain__;if(i||n){var e=t(this.__wrapped__);return(e.__actions__=Eo(this.__actions__)).push({func:r,args:arguments,thisArg:t}),e.__chain__=n,e}return r.apply(t,jn([this.value()],arguments))})})),t}function lc(){}var fc=Vo(Ln),hc=Vo(En),pc=Vo(zn);function vc(t){return Ci(t)?Zn(Di(t)):function(t){return function(n){return kr(n,t)}}(t)}var dc=Zo(),gc=Zo(!0);function yc(){return[]}function mc(){return!1}var _c=$o((function(t,n){return t+n}),0),bc=Jo("ceil"),wc=$o((function(t,n){return t/n}),1),Pc=Jo("floor");var Cc,xc=$o((function(t,n){return t*n}),1),kc=Jo("round"),Ac=$o((function(t,n){return t-n}),0);return Ge.after=function(t,n){if("function"!=typeof n)throw new Ot(o);return t=gu(t),function(){if(--t<1)return n.apply(this,arguments)}},Ge.ary=Ta,Ge.assign=wu,Ge.assignIn=Pu,Ge.assignInWith=Cu,Ge.assignWith=xu,Ge.at=ku,Ge.before=Ma,Ge.bind=Oa,Ge.bindAll=nc,Ge.bindKey=Ea,Ge.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Va(t)?t:[t]},Ge.chain=va,Ge.chunk=function(t,n,e){n=(e?Pi(t,n,e):n===r)?1:be(gu(n),0);var o=null==t?0:t.length;if(!o||n<1)return[];for(var i=0,a=0,u=ut(yn(o/n));i<o;)u[a++]=io(t,i,i+=n);return u},Ge.compact=function(t){for(var n=-1,e=null==t?0:t.length,r=0,o=[];++n<e;){var i=t[n];i&&(o[r++]=i)}return o},Ge.concat=function(){var t=arguments.length;if(!t)return[];for(var n=ut(t-1),e=arguments[0],r=t;r--;)n[r-1]=arguments[r];return jn(Va(e)?Eo(e):[e],_r(n,1))},Ge.cond=function(t){var n=null==t?0:t.length,e=fi();return t=n?Ln(t,(function(t){if("function"!=typeof t[1])throw new Ot(o);return[e(t[0]),t[1]]})):[],Xr((function(e){for(var r=-1;++r<n;){var o=t[r];if(Rn(o[0],this,e))return Rn(o[1],this,e)}}))},Ge.conforms=function(t){return function(t){var n=Iu(t);return function(e){return fr(e,t,n)}}(lr(t,1))},Ge.constant=ec,Ge.countBy=ya,Ge.create=function(t,n){var e=Ke(t);return null==n?e:ar(e,n)},Ge.curry=function t(n,e,o){var i=ti(n,8,r,r,r,r,r,e=o?r:e);return i.placeholder=t.placeholder,i},Ge.curryRight=function t(n,e,o){var i=ti(n,u,r,r,r,r,r,e=o?r:e);return i.placeholder=t.placeholder,i},Ge.debounce=Ia,Ge.defaults=Au,Ge.defaultsDeep=Su,Ge.defer=Ba,Ge.delay=Na,Ge.difference=Gi,Ge.differenceBy=Ki,Ge.differenceWith=Ui,Ge.drop=function(t,n,e){var o=null==t?0:t.length;return o?io(t,(n=e||n===r?1:gu(n))<0?0:n,o):[]},Ge.dropRight=function(t,n,e){var o=null==t?0:t.length;return o?io(t,0,(n=o-(n=e||n===r?1:gu(n)))<0?0:n):[]},Ge.dropRightWhile=function(t,n){return t&&t.length?go(t,fi(n,3),!0,!0):[]},Ge.dropWhile=function(t,n){return t&&t.length?go(t,fi(n,3),!0):[]},Ge.fill=function(t,n,e,o){var i=null==t?0:t.length;return i?(e&&"number"!=typeof e&&Pi(t,n,e)&&(e=0,o=i),function(t,n,e,o){var i=t.length;for((e=gu(e))<0&&(e=-e>i?0:i+e),(o=o===r||o>i?i:gu(o))<0&&(o+=i),o=e>o?0:yu(o);e<o;)t[e++]=n;return t}(t,n,e,o)):[]},Ge.filter=function(t,n){return(Va(t)?In:mr)(t,fi(n,3))},Ge.flatMap=function(t,n){return _r(ka(t,n),1)},Ge.flatMapDeep=function(t,n){return _r(ka(t,n),p)},Ge.flatMapDepth=function(t,n,e){return e=e===r?1:gu(e),_r(ka(t,n),e)},Ge.flatten=qi,Ge.flattenDeep=function(t){return(null==t?0:t.length)?_r(t,p):[]},Ge.flattenDepth=function(t,n){return(null==t?0:t.length)?_r(t,n=n===r?1:gu(n)):[]},Ge.flip=function(t){return ti(t,512)},Ge.flow=rc,Ge.flowRight=oc,Ge.fromPairs=function(t){for(var n=-1,e=null==t?0:t.length,r={};++n<e;){var o=t[n];r[o[0]]=o[1]}return r},Ge.functions=function(t){return null==t?[]:xr(t,Iu(t))},Ge.functionsIn=function(t){return null==t?[]:xr(t,Bu(t))},Ge.groupBy=Pa,Ge.initial=function(t){return(null==t?0:t.length)?io(t,0,-1):[]},Ge.intersection=Hi,Ge.intersectionBy=Yi,Ge.intersectionWith=Ji,Ge.invert=Mu,Ge.invertBy=Ou,Ge.invokeMap=Ca,Ge.iteratee=ac,Ge.keyBy=xa,Ge.keys=Iu,Ge.keysIn=Bu,Ge.map=ka,Ge.mapKeys=function(t,n){var e={};return n=fi(n,3),Pr(t,(function(t,r,o){ur(e,n(t,r,o),t)})),e},Ge.mapValues=function(t,n){var e={};return n=fi(n,3),Pr(t,(function(t,r,o){ur(e,r,n(t,r,o))})),e},Ge.matches=function(t){return Gr(lr(t,1))},Ge.matchesProperty=function(t,n){return Kr(t,lr(n,1))},Ge.memoize=La,Ge.merge=Nu,Ge.mergeWith=Lu,Ge.method=uc,Ge.methodOf=cc,Ge.mixin=sc,Ge.negate=ja,Ge.nthArg=function(t){return t=gu(t),Xr((function(n){return $r(n,t)}))},Ge.omit=ju,Ge.omitBy=function(t,n){return Du(t,ja(fi(n)))},Ge.once=function(t){return Ma(2,t)},Ge.orderBy=function(t,n,e,o){return null==t?[]:(Va(n)||(n=null==n?[]:[n]),Va(e=o?r:e)||(e=null==e?[]:[e]),Vr(t,n,e))},Ge.over=fc,Ge.overArgs=Wa,Ge.overEvery=hc,Ge.overSome=pc,Ge.partial=Da,Ge.partialRight=za,Ge.partition=Aa,Ge.pick=Wu,Ge.pickBy=Du,Ge.property=vc,Ge.propertyOf=function(t){return function(n){return null==t?r:kr(t,n)}},Ge.pull=Qi,Ge.pullAll=ta,Ge.pullAllBy=function(t,n,e){return t&&t.length&&n&&n.length?Zr(t,n,fi(e,2)):t},Ge.pullAllWith=function(t,n,e){return t&&t.length&&n&&n.length?Zr(t,n,r,e):t},Ge.pullAt=na,Ge.range=dc,Ge.rangeRight=gc,Ge.rearg=Fa,Ge.reject=function(t,n){return(Va(t)?In:mr)(t,ja(fi(n,3)))},Ge.remove=function(t,n){var e=[];if(!t||!t.length)return e;var r=-1,o=[],i=t.length;for(n=fi(n,3);++r<i;){var a=t[r];n(a,r,t)&&(e.push(a),o.push(r))}return Hr(t,o),e},Ge.rest=function(t,n){if("function"!=typeof t)throw new Ot(o);return Xr(t,n=n===r?n:gu(n))},Ge.reverse=ea,Ge.sampleSize=function(t,n,e){return n=(e?Pi(t,n,e):n===r)?1:gu(n),(Va(t)?tr:to)(t,n)},Ge.set=function(t,n,e){return null==t?t:no(t,n,e)},Ge.setWith=function(t,n,e,o){return o="function"==typeof o?o:r,null==t?t:no(t,n,e,o)},Ge.shuffle=function(t){return(Va(t)?nr:oo)(t)},Ge.slice=function(t,n,e){var o=null==t?0:t.length;return o?(e&&"number"!=typeof e&&Pi(t,n,e)?(n=0,e=o):(n=null==n?0:gu(n),e=e===r?o:gu(e)),io(t,n,e)):[]},Ge.sortBy=Sa,Ge.sortedUniq=function(t){return t&&t.length?so(t):[]},Ge.sortedUniqBy=function(t,n){return t&&t.length?so(t,fi(n,2)):[]},Ge.split=function(t,n,e){return e&&"number"!=typeof e&&Pi(t,n,e)&&(n=e=r),(e=e===r?g:e>>>0)?(t=bu(t))&&("string"==typeof n||null!=n&&!uu(n))&&!(n=fo(n))&&ce(t)?xo(de(t),0,e):t.split(n,e):[]},Ge.spread=function(t,n){if("function"!=typeof t)throw new Ot(o);return n=null==n?0:be(gu(n),0),Xr((function(e){var r=e[n],o=xo(e,0,n);return r&&jn(o,r),Rn(t,this,o)}))},Ge.tail=function(t){var n=null==t?0:t.length;return n?io(t,1,n):[]},Ge.take=function(t,n,e){return t&&t.length?io(t,0,(n=e||n===r?1:gu(n))<0?0:n):[]},Ge.takeRight=function(t,n,e){var o=null==t?0:t.length;return o?io(t,(n=o-(n=e||n===r?1:gu(n)))<0?0:n,o):[]},Ge.takeRightWhile=function(t,n){return t&&t.length?go(t,fi(n,3),!1,!0):[]},Ge.takeWhile=function(t,n){return t&&t.length?go(t,fi(n,3)):[]},Ge.tap=function(t,n){return n(t),t},Ge.throttle=function(t,n,e){var r=!0,i=!0;if("function"!=typeof t)throw new Ot(o);return eu(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),Ia(t,n,{leading:r,maxWait:n,trailing:i})},Ge.thru=da,Ge.toArray=vu,Ge.toPairs=zu,Ge.toPairsIn=Fu,Ge.toPath=function(t){return Va(t)?Ln(t,Di):lu(t)?[t]:Eo(Wi(bu(t)))},Ge.toPlainObject=_u,Ge.transform=function(t,n,e){var r=Va(t),o=r||Ya(t)||fu(t);if(n=fi(n,4),null==e){var i=t&&t.constructor;e=o?r?new i:[]:eu(t)&&Qa(i)?Ke(Zt(t)):{}}return(o?Mn:Pr)(t,(function(t,r,o){return n(e,t,r,o)})),e},Ge.unary=function(t){return Ta(t,1)},Ge.union=ra,Ge.unionBy=oa,Ge.unionWith=ia,Ge.uniq=function(t){return t&&t.length?ho(t):[]},Ge.uniqBy=function(t,n){return t&&t.length?ho(t,fi(n,2)):[]},Ge.uniqWith=function(t,n){return n="function"==typeof n?n:r,t&&t.length?ho(t,r,n):[]},Ge.unset=function(t,n){return null==t||po(t,n)},Ge.unzip=aa,Ge.unzipWith=ua,Ge.update=function(t,n,e){return null==t?t:vo(t,n,wo(e))},Ge.updateWith=function(t,n,e,o){return o="function"==typeof o?o:r,null==t?t:vo(t,n,wo(e),o)},Ge.values=Gu,Ge.valuesIn=function(t){return null==t?[]:ne(t,Bu(t))},Ge.without=ca,Ge.words=Qu,Ge.wrap=function(t,n){return Da(wo(n),t)},Ge.xor=sa,Ge.xorBy=la,Ge.xorWith=fa,Ge.zip=ha,Ge.zipObject=function(t,n){return _o(t||[],n||[],rr)},Ge.zipObjectDeep=function(t,n){return _o(t||[],n||[],no)},Ge.zipWith=pa,Ge.entries=zu,Ge.entriesIn=Fu,Ge.extend=Pu,Ge.extendWith=Cu,sc(Ge,Ge),Ge.add=_c,Ge.attempt=tc,Ge.camelCase=Ku,Ge.capitalize=Uu,Ge.ceil=bc,Ge.clamp=function(t,n,e){return e===r&&(e=n,n=r),e!==r&&(e=(e=mu(e))==e?e:0),n!==r&&(n=(n=mu(n))==n?n:0),sr(mu(t),n,e)},Ge.clone=function(t){return lr(t,4)},Ge.cloneDeep=function(t){return lr(t,5)},Ge.cloneDeepWith=function(t,n){return lr(t,5,n="function"==typeof n?n:r)},Ge.cloneWith=function(t,n){return lr(t,4,n="function"==typeof n?n:r)},Ge.conformsTo=function(t,n){return null==n||fr(t,n,Iu(n))},Ge.deburr=$u,Ge.defaultTo=function(t,n){return null==t||t!=t?n:t},Ge.divide=wc,Ge.endsWith=function(t,n,e){t=bu(t),n=fo(n);var o=t.length,i=e=e===r?o:sr(gu(e),0,o);return(e-=n.length)>=0&&t.slice(e,i)==n},Ge.eq=Ga,Ge.escape=function(t){return(t=bu(t))&&J.test(t)?t.replace(H,ae):t},Ge.escapeRegExp=function(t){return(t=bu(t))&&it.test(t)?t.replace(ot,"\\$&"):t},Ge.every=function(t,n,e){var o=Va(t)?En:gr;return e&&Pi(t,n,e)&&(n=r),o(t,fi(n,3))},Ge.find=ma,Ge.findIndex=$i,Ge.findKey=function(t,n){return Gn(t,fi(n,3),Pr)},Ge.findLast=_a,Ge.findLastIndex=Vi,Ge.findLastKey=function(t,n){return Gn(t,fi(n,3),Cr)},Ge.floor=Pc,Ge.forEach=ba,Ge.forEachRight=wa,Ge.forIn=function(t,n){return null==t?t:br(t,fi(n,3),Bu)},Ge.forInRight=function(t,n){return null==t?t:wr(t,fi(n,3),Bu)},Ge.forOwn=function(t,n){return t&&Pr(t,fi(n,3))},Ge.forOwnRight=function(t,n){return t&&Cr(t,fi(n,3))},Ge.get=Ru,Ge.gt=Ka,Ge.gte=Ua,Ge.has=function(t,n){return null!=t&&mi(t,n,Tr)},Ge.hasIn=Tu,Ge.head=Zi,Ge.identity=ic,Ge.includes=function(t,n,e,r){t=Za(t)?t:Gu(t),e=e&&!r?gu(e):0;var o=t.length;return e<0&&(e=be(o+e,0)),su(t)?e<=o&&t.indexOf(n,e)>-1:!!o&&Un(t,n,e)>-1},Ge.indexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var o=null==e?0:gu(e);return o<0&&(o=be(r+o,0)),Un(t,n,o)},Ge.inRange=function(t,n,e){return n=du(n),e===r?(e=n,n=0):e=du(e),function(t,n,e){return t>=we(n,e)&&t<be(n,e)}(t=mu(t),n,e)},Ge.invoke=Eu,Ge.isArguments=$a,Ge.isArray=Va,Ge.isArrayBuffer=qa,Ge.isArrayLike=Za,Ge.isArrayLikeObject=Ha,Ge.isBoolean=function(t){return!0===t||!1===t||ru(t)&&Sr(t)==b},Ge.isBuffer=Ya,Ge.isDate=Ja,Ge.isElement=function(t){return ru(t)&&1===t.nodeType&&!au(t)},Ge.isEmpty=function(t){if(null==t)return!0;if(Za(t)&&(Va(t)||"string"==typeof t||"function"==typeof t.splice||Ya(t)||fu(t)||$a(t)))return!t.length;var n=yi(t);if(n==k||n==M)return!t.size;if(Ai(t))return!Wr(t).length;for(var e in t)if(jt.call(t,e))return!1;return!0},Ge.isEqual=function(t,n){return Br(t,n)},Ge.isEqualWith=function(t,n,e){var o=(e="function"==typeof e?e:r)?e(t,n):r;return o===r?Br(t,n,r,e):!!o},Ge.isError=Xa,Ge.isFinite=function(t){return"number"==typeof t&&Fn(t)},Ge.isFunction=Qa,Ge.isInteger=tu,Ge.isLength=nu,Ge.isMap=ou,Ge.isMatch=function(t,n){return t===n||Nr(t,n,pi(n))},Ge.isMatchWith=function(t,n,e){return e="function"==typeof e?e:r,Nr(t,n,pi(n),e)},Ge.isNaN=function(t){return iu(t)&&t!=+t},Ge.isNative=function(t){if(ki(t))throw new kt("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Lr(t)},Ge.isNil=function(t){return null==t},Ge.isNull=function(t){return null===t},Ge.isNumber=iu,Ge.isObject=eu,Ge.isObjectLike=ru,Ge.isPlainObject=au,Ge.isRegExp=uu,Ge.isSafeInteger=function(t){return tu(t)&&t>=-9007199254740991&&t<=v},Ge.isSet=cu,Ge.isString=su,Ge.isSymbol=lu,Ge.isTypedArray=fu,Ge.isUndefined=function(t){return t===r},Ge.isWeakMap=function(t){return ru(t)&&yi(t)==I},Ge.isWeakSet=function(t){return ru(t)&&"[object WeakSet]"==Sr(t)},Ge.join=function(t,n){return null==t?"":Hn.call(t,n)},Ge.kebabCase=Vu,Ge.last=Xi,Ge.lastIndexOf=function(t,n,e){var o=null==t?0:t.length;if(!o)return-1;var i=o;return e!==r&&(i=(i=gu(e))<0?be(o+i,0):we(i,o-1)),n==n?function(t,n,e){for(var r=e+1;r--;)if(t[r]===n)return r;return r}(t,n,i):Kn(t,Vn,i,!0)},Ge.lowerCase=qu,Ge.lowerFirst=Zu,Ge.lt=hu,Ge.lte=pu,Ge.max=function(t){return t&&t.length?yr(t,ic,Rr):r},Ge.maxBy=function(t,n){return t&&t.length?yr(t,fi(n,2),Rr):r},Ge.mean=function(t){return qn(t,ic)},Ge.meanBy=function(t,n){return qn(t,fi(n,2))},Ge.min=function(t){return t&&t.length?yr(t,ic,zr):r},Ge.minBy=function(t,n){return t&&t.length?yr(t,fi(n,2),zr):r},Ge.stubArray=yc,Ge.stubFalse=mc,Ge.stubObject=function(){return{}},Ge.stubString=function(){return""},Ge.stubTrue=function(){return!0},Ge.multiply=xc,Ge.nth=function(t,n){return t&&t.length?$r(t,gu(n)):r},Ge.noConflict=function(){return gn._===this&&(gn._=Gt),this},Ge.noop=lc,Ge.now=Ra,Ge.pad=function(t,n,e){t=bu(t);var r=(n=gu(n))?ve(t):0;if(!n||r>=n)return t;var o=(n-r)/2;return qo(mn(o),e)+t+qo(yn(o),e)},Ge.padEnd=function(t,n,e){t=bu(t);var r=(n=gu(n))?ve(t):0;return n&&r<n?t+qo(n-r,e):t},Ge.padStart=function(t,n,e){t=bu(t);var r=(n=gu(n))?ve(t):0;return n&&r<n?qo(n-r,e)+t:t},Ge.parseInt=function(t,n,e){return e||null==n?n=0:n&&(n=+n),Ce(bu(t).replace(at,""),n||0)},Ge.random=function(t,n,e){if(e&&"boolean"!=typeof e&&Pi(t,n,e)&&(n=e=r),e===r&&("boolean"==typeof n?(e=n,n=r):"boolean"==typeof t&&(e=t,t=r)),t===r&&n===r?(t=0,n=1):(t=du(t),n===r?(n=t,t=0):n=du(n)),t>n){var o=t;t=n,n=o}if(e||t%1||n%1){var i=xe();return we(t+i*(n-t+hn("1e-"+((i+"").length-1))),n)}return Yr(t,n)},Ge.reduce=function(t,n,e){var r=Va(t)?Wn:Yn,o=arguments.length<3;return r(t,fi(n,4),e,o,vr)},Ge.reduceRight=function(t,n,e){var r=Va(t)?Dn:Yn,o=arguments.length<3;return r(t,fi(n,4),e,o,dr)},Ge.repeat=function(t,n,e){return n=(e?Pi(t,n,e):n===r)?1:gu(n),Jr(bu(t),n)},Ge.replace=function(){var t=arguments,n=bu(t[0]);return t.length<3?n:n.replace(t[1],t[2])},Ge.result=function(t,n,e){var o=-1,i=(n=Po(n,t)).length;for(i||(i=1,t=r);++o<i;){var a=null==t?r:t[Di(n[o])];a===r&&(o=i,a=e),t=Qa(a)?a.call(t):a}return t},Ge.round=kc,Ge.runInContext=t,Ge.sample=function(t){return(Va(t)?Qe:Qr)(t)},Ge.size=function(t){if(null==t)return 0;if(Za(t))return su(t)?ve(t):t.length;var n=yi(t);return n==k||n==M?t.size:Wr(t).length},Ge.snakeCase=Hu,Ge.some=function(t,n,e){var o=Va(t)?zn:ao;return e&&Pi(t,n,e)&&(n=r),o(t,fi(n,3))},Ge.sortedIndex=function(t,n){return uo(t,n)},Ge.sortedIndexBy=function(t,n,e){return co(t,n,fi(e,2))},Ge.sortedIndexOf=function(t,n){var e=null==t?0:t.length;if(e){var r=uo(t,n);if(r<e&&Ga(t[r],n))return r}return-1},Ge.sortedLastIndex=function(t,n){return uo(t,n,!0)},Ge.sortedLastIndexBy=function(t,n,e){return co(t,n,fi(e,2),!0)},Ge.sortedLastIndexOf=function(t,n){if(null==t?0:t.length){var e=uo(t,n,!0)-1;if(Ga(t[e],n))return e}return-1},Ge.startCase=Yu,Ge.startsWith=function(t,n,e){return t=bu(t),e=null==e?0:sr(gu(e),0,t.length),n=fo(n),t.slice(e,e+n.length)==n},Ge.subtract=Ac,Ge.sum=function(t){return t&&t.length?Jn(t,ic):0},Ge.sumBy=function(t,n){return t&&t.length?Jn(t,fi(n,2)):0},Ge.template=function(t,n,e){var o=Ge.templateSettings;e&&Pi(t,n,e)&&(n=r),t=bu(t),n=Cu({},n,o,ni);var i,a,u=Cu({},n.imports,o.imports,ni),c=Iu(u),s=ne(u,c),l=0,f=n.interpolate||Pt,h="__p += '",p=Tt((n.escape||Pt).source+"|"+f.source+"|"+(f===tt?vt:Pt).source+"|"+(n.evaluate||Pt).source+"|$","g"),v="//# sourceURL="+(jt.call(n,"sourceURL")?(n.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++cn+"]")+"\n";t.replace(p,(function(n,e,r,o,u,c){return r||(r=o),h+=t.slice(l,c).replace(Ct,ue),e&&(i=!0,h+="' +\n__e("+e+") +\n'"),u&&(a=!0,h+="';\n"+u+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=c+n.length,n})),h+="';\n";var d=jt.call(n,"variable")&&n.variable;if(d){if(ht.test(d))throw new kt("Invalid `variable` option passed into `_.template`")}else h="with (obj) {\n"+h+"\n}\n";h=(a?h.replace($,""):h).replace(V,"$1").replace(q,"$1;"),h="function("+(d||"obj")+") {\n"+(d?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var g=tc((function(){return At(c,v+"return "+h).apply(r,s)}));if(g.source=h,Xa(g))throw g;return g},Ge.times=function(t,n){if((t=gu(t))<1||t>v)return[];var e=g,r=we(t,g);n=fi(n),t-=g;for(var o=Xn(r,n);++e<t;)n(e);return o},Ge.toFinite=du,Ge.toInteger=gu,Ge.toLength=yu,Ge.toLower=function(t){return bu(t).toLowerCase()},Ge.toNumber=mu,Ge.toSafeInteger=function(t){return t?sr(gu(t),-9007199254740991,v):0===t?t:0},Ge.toString=bu,Ge.toUpper=function(t){return bu(t).toUpperCase()},Ge.trim=function(t,n,e){if((t=bu(t))&&(e||n===r))return Qn(t);if(!t||!(n=fo(n)))return t;var o=de(t),i=de(n);return xo(o,re(o,i),oe(o,i)+1).join("")},Ge.trimEnd=function(t,n,e){if((t=bu(t))&&(e||n===r))return t.slice(0,ge(t)+1);if(!t||!(n=fo(n)))return t;var o=de(t);return xo(o,0,oe(o,de(n))+1).join("")},Ge.trimStart=function(t,n,e){if((t=bu(t))&&(e||n===r))return t.replace(at,"");if(!t||!(n=fo(n)))return t;var o=de(t);return xo(o,re(o,de(n))).join("")},Ge.truncate=function(t,n){var e=30,o="...";if(eu(n)){var i="separator"in n?n.separator:i;e="length"in n?gu(n.length):e,o="omission"in n?fo(n.omission):o}var a=(t=bu(t)).length;if(ce(t)){var u=de(t);a=u.length}if(e>=a)return t;var c=e-ve(o);if(c<1)return o;var s=u?xo(u,0,c).join(""):t.slice(0,c);if(i===r)return s+o;if(u&&(c+=s.length-c),uu(i)){if(t.slice(c).search(i)){var l,f=s;for(i.global||(i=Tt(i.source,bu(dt.exec(i))+"g")),i.lastIndex=0;l=i.exec(f);)var h=l.index;s=s.slice(0,h===r?c:h)}}else if(t.indexOf(fo(i),c)!=c){var p=s.lastIndexOf(i);p>-1&&(s=s.slice(0,p))}return s+o},Ge.unescape=function(t){return(t=bu(t))&&Y.test(t)?t.replace(Z,ye):t},Ge.uniqueId=function(t){var n=++Wt;return bu(t)+n},Ge.upperCase=Ju,Ge.upperFirst=Xu,Ge.each=ba,Ge.eachRight=wa,Ge.first=Zi,sc(Ge,(Cc={},Pr(Ge,(function(t,n){jt.call(Ge.prototype,n)||(Cc[n]=t)})),Cc),{chain:!1}),Ge.VERSION="4.17.21",Mn(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Ge[t].placeholder=Ge})),Mn(["drop","take"],(function(t,n){Ve.prototype[t]=function(e){e=e===r?1:be(gu(e),0);var o=this.__filtered__&&!n?new Ve(this):this.clone();return o.__filtered__?o.__takeCount__=we(e,o.__takeCount__):o.__views__.push({size:we(e,g),type:t+(o.__dir__<0?"Right":"")}),o},Ve.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}})),Mn(["filter","map","takeWhile"],(function(t,n){var e=n+1,r=1==e||3==e;Ve.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:fi(t,3),type:e}),n.__filtered__=n.__filtered__||r,n}})),Mn(["head","last"],(function(t,n){var e="take"+(n?"Right":"");Ve.prototype[t]=function(){return this[e](1).value()[0]}})),Mn(["initial","tail"],(function(t,n){var e="drop"+(n?"":"Right");Ve.prototype[t]=function(){return this.__filtered__?new Ve(this):this[e](1)}})),Ve.prototype.compact=function(){return this.filter(ic)},Ve.prototype.find=function(t){return this.filter(t).head()},Ve.prototype.findLast=function(t){return this.reverse().find(t)},Ve.prototype.invokeMap=Xr((function(t,n){return"function"==typeof t?new Ve(this):this.map((function(e){return Er(e,t,n)}))})),Ve.prototype.reject=function(t){return this.filter(ja(fi(t)))},Ve.prototype.slice=function(t,n){t=gu(t);var e=this;return e.__filtered__&&(t>0||n<0)?new Ve(e):(t<0?e=e.takeRight(-t):t&&(e=e.drop(t)),n!==r&&(e=(n=gu(n))<0?e.dropRight(-n):e.take(n-t)),e)},Ve.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Ve.prototype.toArray=function(){return this.take(g)},Pr(Ve.prototype,(function(t,n){var e=/^(?:filter|find|map|reject)|While$/.test(n),o=/^(?:head|last)$/.test(n),i=Ge[o?"take"+("last"==n?"Right":""):n],a=o||/^find/.test(n);i&&(Ge.prototype[n]=function(){var n=this.__wrapped__,u=o?[1]:arguments,c=n instanceof Ve,s=u[0],l=c||Va(n),f=function(t){var n=i.apply(Ge,jn([t],u));return o&&h?n[0]:n};l&&e&&"function"==typeof s&&1!=s.length&&(c=l=!1);var h=this.__chain__,p=!!this.__actions__.length,v=a&&!h,d=c&&!p;if(!a&&l){n=d?n:new Ve(this);var g=t.apply(n,u);return g.__actions__.push({func:da,args:[f],thisArg:r}),new $e(g,h)}return v&&d?t.apply(this,u):(g=this.thru(f),v?o?g.value()[0]:g.value():g)})})),Mn(["pop","push","shift","sort","splice","unshift"],(function(t){var n=Et[t],e=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Ge.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var o=this.value();return n.apply(Va(o)?o:[],t)}return this[e]((function(e){return n.apply(Va(e)?e:[],t)}))}})),Pr(Ve.prototype,(function(t,n){var e=Ge[n];if(e){var r=e.name+"";jt.call(Ie,r)||(Ie[r]=[]),Ie[r].push({name:n,func:e})}})),Ie[Ko(r,2).name]=[{name:"wrapper",func:r}],Ve.prototype.clone=function(){var t=new Ve(this.__wrapped__);return t.__actions__=Eo(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Eo(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Eo(this.__views__),t},Ve.prototype.reverse=function(){if(this.__filtered__){var t=new Ve(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Ve.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,e=Va(t),r=n<0,o=e?t.length:0,i=function(t,n,e){var r=-1,o=e.length;for(;++r<o;){var i=e[r],a=i.size;switch(i.type){case"drop":t+=a;break;case"dropRight":n-=a;break;case"take":n=we(n,t+a);break;case"takeRight":t=be(t,n-a)}}return{start:t,end:n}}(0,o,this.__views__),a=i.start,u=i.end,c=u-a,s=r?u:a-1,l=this.__iteratees__,f=l.length,h=0,p=we(c,this.__takeCount__);if(!e||!r&&o==c&&p==c)return yo(t,this.__actions__);var v=[];t:for(;c--&&h<p;){for(var d=-1,g=t[s+=n];++d<f;){var y=l[d],m=y.iteratee,_=y.type,b=m(g);if(2==_)g=b;else if(!b){if(1==_)continue t;break t}}v[h++]=g}return v},Ge.prototype.at=ga,Ge.prototype.chain=function(){return va(this)},Ge.prototype.commit=function(){return new $e(this.value(),this.__chain__)},Ge.prototype.next=function(){this.__values__===r&&(this.__values__=vu(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?r:this.__values__[this.__index__++]}},Ge.prototype.plant=function(t){for(var n,e=this;e instanceof Ue;){var o=Fi(e);o.__index__=0,o.__values__=r,n?i.__wrapped__=o:n=o;var i=o;e=e.__wrapped__}return i.__wrapped__=t,n},Ge.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Ve){var n=t;return this.__actions__.length&&(n=new Ve(this)),(n=n.reverse()).__actions__.push({func:da,args:[ea],thisArg:r}),new $e(n,this.__chain__)}return this.thru(ea)},Ge.prototype.toJSON=Ge.prototype.valueOf=Ge.prototype.value=function(){return yo(this.__wrapped__,this.__actions__)},Ge.prototype.first=Ge.prototype.head,Qt&&(Ge.prototype[Qt]=function(){return this}),Ge}();mn?((mn.exports=me)._=me,yn._=me):gn._=me}).call(c)}(d,d.exports);var g,y,m,_,b,w,P,C,x=d.exports;t.Ki=void 0,(g=t.Ki||(t.Ki={}))[g.Black=1]="Black",g[g.White=-1]="White",g[g.Empty=0]="Empty",t.Theme=void 0,(y=t.Theme||(t.Theme={})).BlackAndWhite="black_and_white",y.Flat="flat",y.Subdued="subdued",y.ShellStone="shell_stone",y.SlateAndShell="slate_and_shell",y.Walnut="walnut",y.Photorealistic="photorealistic",t.AnalysisPointTheme=void 0,(m=t.AnalysisPointTheme||(t.AnalysisPointTheme={})).Default="default",m.Problem="problem",t.Center=void 0,(_=t.Center||(t.Center={})).Left="l",_.Right="r",_.Top="t",_.Bottom="b",_.TopRight="tr",_.TopLeft="tl",_.BottomLeft="bl",_.BottomRight="br",_.Center="c",t.Markup=void 0,function(t){t.Current="cu",t.Circle="ci",t.CircleSolid="cis",t.Square="sq",t.SquareSolid="sqs",t.Triangle="tri",t.Cross="cr",t.Number="num",t.Letter="le",t.PositiveNode="pos",t.NegativeNode="neg",t.NeutralNode="neu",t.Node="node",t.None=""}(t.Markup||(t.Markup={})),t.Cursor=void 0,(b=t.Cursor||(t.Cursor={})).None="",b.BlackStone="b",b.WhiteStone="w",b.Circle="c",b.Square="s",b.Triangle="tri",b.Cross="cr",b.Clear="cl",b.Text="t",t.ProblemAnswerType=void 0,(w=t.ProblemAnswerType||(t.ProblemAnswerType={})).Right="1",w.Wrong="2",w.Variant="3",t.PathDetectionStrategy=void 0,(P=t.PathDetectionStrategy||(t.PathDetectionStrategy={})).Post="post",P.Pre="pre",P.Both="both";var k="https://s.shaowq.com",A=["A","B","C","D","E","F","G","H","J","K","L","M","N","O","P","Q","R","S","T"],S=[19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],R=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s"],T={boardSize:19,padding:15,extent:2,interactive:!1,coordinate:!0,theme:t.Theme.Flat,background:!1,zoom:!1,showAnalysis:!1},M=((C={})[t.Theme.BlackAndWhite]={blacks:[],whites:[]},C[t.Theme.Subdued]={board:"".concat(k,"/assets/theme/subdued/board.png"),blacks:["".concat(k,"/assets/theme/subdued/black.png")],whites:["".concat(k,"/assets/theme/subdued/white.png")]},C[t.Theme.ShellStone]={board:"".concat(k,"/assets/theme/shell-stone/board.png"),blacks:["".concat(k,"/assets/theme/shell-stone/black.png")],whites:["".concat(k,"/assets/theme/shell-stone/white0.png"),"".concat(k,"/assets/theme/shell-stone/white1.png"),"".concat(k,"/assets/theme/shell-stone/white2.png"),"".concat(k,"/assets/theme/shell-stone/white3.png"),"".concat(k,"/assets/theme/shell-stone/white4.png")]},C[t.Theme.SlateAndShell]={board:"".concat(k,"/assets/theme/slate-and-shell/board.png"),blacks:["".concat(k,"/assets/theme/slate-and-shell/slate1.png"),"".concat(k,"/assets/theme/slate-and-shell/slate2.png"),"".concat(k,"/assets/theme/slate-and-shell/slate3.png"),"".concat(k,"/assets/theme/slate-and-shell/slate4.png"),"".concat(k,"/assets/theme/slate-and-shell/slate5.png")],whites:["".concat(k,"/assets/theme/slate-and-shell/shell1.png"),"".concat(k,"/assets/theme/slate-and-shell/shell2.png"),"".concat(k,"/assets/theme/slate-and-shell/shell3.png"),"".concat(k,"/assets/theme/slate-and-shell/shell4.png"),"".concat(k,"/assets/theme/slate-and-shell/shell5.png")]},C[t.Theme.Walnut]={board:"".concat(k,"/assets/theme/walnut/board.jpg"),blacks:["".concat(k,"/assets/theme/walnut/black.png")],whites:["".concat(k,"/assets/theme/walnut/white.png")]},C[t.Theme.Photorealistic]={board:"".concat(k,"/assets/theme/photorealistic/board.png"),blacks:["".concat(k,"/assets/theme/photorealistic/black.png")],whites:["".concat(k,"/assets/theme/photorealistic/white.png")]},C[t.Theme.Flat]={blacks:[],whites:[]},C),O="rgba(136, 170, 60, 1)",E="rgba(206, 210, 83, 1)",I="rgba(242, 217, 60, 1)",B="rgba(236, 146, 73, 1)",N=["B","MN","W"],L=["AB","AE","AW"],j=["A","C","DM","GB","GW","HO","N","UC","V"],W=["BM","DO","IT"],D=["AR","CR","LB","LN","MA","SL","SQ","TR"],z=["AP","CA","FF","GM","ST","SZ"],F=["TE","KO","AN","BR","BT","CP","DT","EV","GN","GC","ON","OT","PB","PC","PW","RE","RO","RU","SO","TM","US","WR","WT"],G=["PI","PAI","NID","PAT"],K=["AB","AE","AW","MA","SL","SQ","TR"],U=new RegExp(/([A-Z]*)\[([\s\S]*?)\]/),$=function(){function t(t,n){this.type="-",this._value="",this._values=[],this.token=t,"string"==typeof n||n instanceof String?this.value=n:Array.isArray(n)&&(this.values=n)}return Object.defineProperty(t.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),t.prototype.toString=function(){return"".concat(this.token).concat(this._values.map((function(t){return"[".concat(t,"]")})).join(""))},t}(),V=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="move",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}($),q=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="setup",r}return r(n,t),n.from=function(t){var e=t.match(U),r="",o=u([],a(t.matchAll(/\[([\s\S]*?)\]/g)),!1).map((function(t){return t[1]}));return e&&(r=e[1]),new n(r,o)},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}($),Z=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="node-annotation",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}($),H=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="move-annotation",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}($),Y=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n}($),J=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="markup",r}return r(n,t),n.from=function(t){var e=t.match(U),r="",o=u([],a(t.matchAll(/\[([\s\S]*?)\]/g)),!1).map((function(t){return t[1]}));return e&&(r=e[1]),new n(r,o)},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}($),X=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="root",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}($),Q=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="game-info",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}($),tt=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="custom",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}($),nt=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="Timing",r}return r(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,K.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}($),et=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n}($),rt=0,ot=[],it=function(t){return[t.length,t.length>0?t[0].length:0]},at=function(t,n,e,r){var o=it(t);n>=0&&n<o[1]&&e>=0&&e<o[0]&&(t[n][e]!==r||ot.includes("".concat(n,",").concat(e))?0===t[n][e]&&(rt+=1):(ot.push("".concat(n,",").concat(e)),at(t,n-1,e,r),at(t,n+1,e,r),at(t,n,e-1,r),at(t,n,e+1,r)))},ut=function(t,n,e,r){var o=it(t);return rt=0,ot=[],n<0||e<0||n>o[1]-1||e>o[0]-1||0===t[n][e]?{liberty:4,recursionPath:[]}:(at(t,n,e,r),{liberty:rt,recursionPath:ot})},ct=function(t,n,e,r){var o=t,i=ut(t,n,e-1,r),a=i.liberty,u=i.recursionPath,c=ut(t,n,e+1,r),s=c.liberty,l=c.recursionPath,f=ut(t,n-1,e,r),h=f.liberty,p=f.recursionPath,v=ut(t,n+1,e,r),d=v.liberty,g=v.recursionPath;return 0===a&&u.forEach((function(t){var n=t.split(",");o[parseInt(n[0])][parseInt(n[1])]=0})),0===s&&l.forEach((function(t){var n=t.split(",");o[parseInt(n[0])][parseInt(n[1])]=0})),0===h&&p.forEach((function(t){var n=t.split(",");o[parseInt(n[0])][parseInt(n[1])]=0})),0===d&&g.forEach((function(t){var n=t.split(",");o[parseInt(n[0])][parseInt(n[1])]=0})),o},st=function(t,n,e,r){var o=ut(t,n,e-1,r),i=o.liberty,a=o.recursionPath,u=ut(t,n,e+1,r),c=u.liberty,s=u.recursionPath,l=ut(t,n-1,e,r),f=l.liberty,h=l.recursionPath,p=ut(t,n+1,e,r),v=p.liberty,d=p.recursionPath;return 0===i&&a.length>0||(0===c&&s.length>0||(0===f&&h.length>0||0===v&&d.length>0))},lt=function(t,n,e,r){var o=x.cloneDeep(t);if(n<0||e<0)return!1;if(0!==t[n][e])return!1;o[n][e]=r;var i=ut(o,n,e,r).liberty;return!!st(o,n,e,-r)||!st(o,n,e,r)&&0!==i};function ft(t,n,e){return void 0===e&&(e=["C","TM","GN"]),e.map((function(e){var r=t.slice(0,n).lastIndexOf(e);if(-1===r)return!1;var o=r+e.length,i=t.indexOf("]",o);return-1!==i&&(n>=o&&n<=i)})).includes(!0)}new v;var ht=function(){function t(t,n){void 0===n&&(n={ignorePropList:[]}),this.content=t,this.parseOptions=n,this.NEW_NODE=";",this.BRANCHING=["(",")"],this.PROPERTY=["[","]"],this.LIST_IDENTITIES=["AW","AB","AE","AR","CR","DD","LB","LN","MA","SL","SQ","TR","VW","TB","TW"],this.NODE_DELIMITERS=[this.NEW_NODE].concat(this.BRANCHING),this.tree=new v,this.root=null,this.node=null,this.currentNode=null,this.parentNode=null,this.nodeProps=new Map,"string"==typeof t?this.parse(t):"object"==typeof t&&this.setRoot(t)}return t.prototype.setRoot=function(t){return this.root=t,this},t.prototype.toSgf=function(){return"(".concat(this.nodeToString(this.root),")")},t.prototype.toSgfWithoutAnalysis=function(){var t="(".concat(this.nodeToString(this.root),")");return x.replace(t,/](A\[.*?\])/g,"]")},t.prototype.parse=function(t){if(t){t=t.replace(/\s+(?![^\[\]]*])/gm,"");for(var n=0,e=0,r=[],o=function(o){var c=t[o];if(i.NODE_DELIMITERS.includes(c)&&!ft(t,o)){var s=t.slice(n,o);if(""!==s){var l=[],f=[],h=[],p=[],v=[],d=[],g=[],y=[],m=u([],a(s.matchAll(RegExp(/\w+(\[[^\]]*?\](?:\r?\n?\s[^\]]*?)*){1,}/,"g"))),!1);if(m.forEach((function(t){var n=t[0].match(/([A-Z]+)\[/);if(n){var e=n[1];N.includes(e)&&l.push(V.from(t[0])),L.includes(e)&&f.push(q.from(t[0])),z.includes(e)&&h.push(X.from(t[0])),D.includes(e)&&p.push(J.from(t[0])),F.includes(e)&&v.push(Q.from(t[0])),j.includes(e)&&d.push(Z.from(t[0])),W.includes(e)&&g.push(H.from(t[0])),G.includes(e)&&y.push(tt.from(t[0]))}})),m.length>0){var _=It(i.currentNode,l),b=i.tree.parse({id:_,name:_,index:e,number:0,moveProps:l,setupProps:f,rootProps:h,markupProps:p,gameInfoProps:v,nodeAnnotationProps:d,moveAnnotationProps:g,customProps:y});i.currentNode?(i.currentNode.addChild(b),b.model.number=Et(b),b.model.children=[b]):(i.root=b,i.parentNode=b),i.currentNode=b,e+=1}}}("("===c&&i.currentNode&&!ft(t,o)&&r.push(i.currentNode),")"===c&&!ft(t,o)&&r.length>0)&&((b=r.pop())&&(i.currentNode=b));i.NODE_DELIMITERS.includes(c)&&!ft(t,o)&&(n=o)},i=this,c=0;c<t.length;c++)o(c)}},t.prototype.nodeToString=function(t){var n=this,e="";return t.walk((function(t){var r=t.model,o=r.rootProps,i=r.moveProps,c=r.customProps,s=r.setupProps,l=r.markupProps,f=r.nodeAnnotationProps,h=r.moveAnnotationProps,p=r.gameInfoProps,v=x.compact(u(u(u(u(u(u(u(u([],a(o),!1),a(c),!1),a(i),!1),a(dt(s)),!1),a(dt(l)),!1),a(p),!1),a(f),!1),a(h),!1));return e+=";",v.forEach((function(t){e+=t.toString()})),t.children.length>1&&t.children.forEach((function(t){e+="(".concat(n.nodeToString(t),")")})),t.children.length<2})),e},t}(),pt=require("crypto-js/sha256"),vt=function(t,n,e){return void 0===n&&(n=1),void 0===e&&(e=3),(Math.round(1e3*t)/1e3*n).toFixed(e)},dt=function(t){return x.filter(t,(function(n,e){return e===x.findLastIndex(t,(function(t){return n.token===t.token&&n.value===t.value}))}))},gt=function(t){return t.model.moveProps.length>0},yt=function(t){return t.model.setupProps.length>0},mt=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return null==e?void 0:e.value.includes("CHOICE")},_t=mt,bt=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return null==e?void 0:e.value.includes("FORCE")},wt=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return null==e?void 0:e.value.includes("NOTTHIS")},Pt=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return null==e?void 0:e.value.includes("RIGHT")},Ct=function(t){var n=t.getPath()[0].first((function(t){return Pt(t)}));return(null==n?void 0:n.model.id)===t.model.id},xt=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return null==e?void 0:e.value.includes("VARIANT")},kt=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return!(null==e?void 0:e.value.includes("VARIANT"))&&!(null==e?void 0:e.value.includes("RIGHT"))||!e},At=function(n,e,r,o,i){var a;void 0===r&&(r=t.PathDetectionStrategy.Post);var u=null!=o?o:n.getPath(),c=null!==(a=null==i?void 0:i.filter((function(t){return e(t)})))&&void 0!==a?a:n.all((function(t){return e(t)})),s=u.filter((function(t){return e(t)}));switch(r){case t.PathDetectionStrategy.Post:return c.length>0;case t.PathDetectionStrategy.Pre:return s.length>0;case t.PathDetectionStrategy.Both:return s.length>0||c.length>0;default:return!1}},St=function(n,e,r,o){return void 0===e&&(e=t.PathDetectionStrategy.Post),At(n,Pt,e,r,o)},Rt=function(n,e,r,o){return void 0===e&&(e=t.PathDetectionStrategy.Post),At(n,mt,e,r,o)},Tt=Rt,Mt=function(n,e,r,o){return void 0===e&&(e=t.PathDetectionStrategy.Post),At(n,xt,e,r,o)},Ot=function(n,e,r,o){return void 0===e&&(e=t.PathDetectionStrategy.Post),At(n,kt,e,r,o)},Et=function(t,n){var e=t.getPath().filter((function(t){return gt(t)})).length;return n&&(e+=n.getPath().filter((function(t){return gt(t)})).length),e},It=function(t,n){void 0===n&&(n=[]);var e="n";if(n.length>0&&(e+="".concat(n[0].token).concat(n[0].value)),t){var r=t.getPath();r.length>0&&(e=r.map((function(t){return t.model.id})).join("=>")+"=>".concat(e))}return pt(e).toString().slice(0,6)},Bt=function(t,n){void 0===n&&(n=1);var e=[{value:1,symbol:""},{value:1e3,symbol:"k"},{value:1e6,symbol:"M"},{value:1e9,symbol:"G"},{value:1e12,symbol:"T"},{value:1e15,symbol:"P"},{value:1e18,symbol:"E"}].slice().reverse().find((function(n){return t>=n.value}));return e?(t/e.value).toFixed(n).replace(/\.0+$|(\.[0-9]*[1-9])0+$/,"$1")+e.symbol:"0"},Nt=function(t){var n="B"===t[0]?1:-1,e=/\[(.*)\]/.exec(t);if(e){var r=e[1];return{x:R.indexOf(r[0]),y:R.indexOf(r[1]),ki:n}}return{x:-1,y:-1,ki:0}},Lt=function(t){return{x:A.indexOf(t[0]),y:S.indexOf(parseInt(t.substr(1),0))}},jt=function(t,n){if(void 0===n&&(n=0),0===n)return t;var e=x.clone(t),r=R.indexOf(t[2])-n;return e.substr(0,2)+R[r]+e.substr(3)},Wt=function(t,n,e){if(void 0===n&&(n=0),void 0===e&&(e=0),"pass"===t)return t;var r=A.indexOf(t[0])+n,o=S.indexOf(parseInt(t.substr(1),0))+e;return"".concat(A[r]).concat(S[o])},Dt=function(t,n,e,r){if(void 0===e&&(e=1),void 0===r&&(r=!1),!t||!n)return"";var o=zt(t,n);r&&(o=-o);var i=o.toFixed(e);return o>0?"+".concat(i):"".concat(i)},zt=function(t,n){var e="B"===t.currentPlayer?1:-1;return Math.round((n.scoreLead-t.scoreLead)*e*1e3)/1e3},Ft=function(t,n){var e="B"===t.currentPlayer?1:-1;return Math.round((n.winrate-t.winrate)*e*1e3*100)/1e3},Gt=function(t,n){var e=n.prior,r=n.order,o=zt(t,n);return e>=.5||e>=.1&&r<3&&o>-.3||0===r||o>=0?O:e>.05&&o>-.5||e>.01&&o>-.1?E:e>.01&&o>-1?I:B},Kt=function(t,n){return{id:t,name:t,number:n||0,rootProps:[],moveProps:[],setupProps:[],markupProps:[],gameInfoProps:[],nodeAnnotationProps:[],moveAnnotationProps:[],customProps:[]}},Ut=function(t,n,e){var r=new v,i=V.from(t),a=It(n,[i]),u=1;n&&(u=Et(n)+1);var c=Kt(a,u);return c.moveProps=[i],r.parse(o(o({},c),e))},$t=function(t){return new Array(t[0]).fill(0).map((function(){return new Array(t[1]).fill(0)}))},Vt=function(t){return new Array(t[0]).fill("").map((function(){return new Array(t[1]).fill("")}))},qt=function(t,n){void 0===n&&(n=19);for(var e=n-1,r=0,o=n-1,i=0,a=0;a<t.length;a++)for(var u=0;u<t[a].length;u++){0!==t[a][u]&&(e>a&&(e=a),r<a&&(r=a),o>u&&(o=u),i<u&&(i=u))}return{leftMost:e,rightMost:r,topMost:o,bottomMost:i}},Zt=function(n,e){void 0===e&&(e=19);var r=qt(n,e),o=r.leftMost,i=r.rightMost,a=r.topMost<e-1-r.bottomMost,u=o<e-1-i;return a&&u?t.Center.TopLeft:!a&&u?t.Center.BottomLeft:a&&!u?t.Center.TopRight:a||u?t.Center.Center:t.Center.BottomRight},Ht=function(n,e,r){void 0===e&&(e=19),void 0===r&&(r=2);var o=[19,19],i=Zt(n),a=qt(n,e),u=a.leftMost,c=a.rightMost,s=a.topMost,l=a.bottomMost;return i===t.Center.TopLeft&&(o[0]=c+r+1,o[1]=l+r+1),i===t.Center.TopRight&&(o[0]=e-u+r,o[1]=l+r+1),i===t.Center.BottomLeft&&(o[0]=c+r+1,o[1]=e-s+r),i===t.Center.BottomRight&&(o[0]=e-u+r,o[1]=e-s+r),o[0]=Math.min(o[0],e),o[1]=Math.min(o[1],e),o},Yt=function(t,n,e){void 0===n&&(n=2),void 0===e&&(e=19);var r=qt(t),o=r.leftMost,i=r.rightMost,a=r.topMost,u=r.bottomMost,c=e-1;return[[o-n<0?0:o-n,a-n<0?0:a-n],[i+n>c?c:i+n,u+n>c?c:u+n]]},Jt=function(n,e,r,o){void 0===e&&(e=19),void 0===r&&(r=19),void 0===o&&(o=19);var i=o-e,a=o-r,u=i,c=a;switch(Zt(n)){case t.Center.TopLeft:u=0,c=-a;break;case t.Center.TopRight:u=i,c=-a;break;case t.Center.BottomLeft:u=0,c=0;break;case t.Center.BottomRight:u=i,c=0}return{x:u,y:c}};function Xt(t,n,e){void 0===t&&(t=$t([19,19])),void 0===e&&(e=!1);for(var r=t.length,o=0,i=t[0].length,a=0,u=!0,c=0;c<t.length;c++)for(var s=0;s<t[0].length;s++)0!==t[c][s]&&(u=!1,r=Math.min(r,c),o=Math.max(o,c),i=Math.min(i,s),a=Math.max(a,s));if(u)return[[0,t.length-1],[0,t[0].length-1]];if(e)r=Math.max(0,r-n),o=Math.min(t.length-1,o+n),i=Math.max(0,i-n),a=Math.min(t[0].length-1,a+n);else{var l=Math.max(r-n,0),f=Math.min(o+n,t.length-1),h=Math.max(i-n,0),p=Math.min(a+n,t[0].length-1),v=Math.max(f-l,p-h);(o=(r=l)+v)>=t.length&&(r=(o=t.length-1)-v),(a=(i=h)+v)>=t[0].length&&(i=(a=t[0].length-1)-v)}return[[r,o],[i,a]]}function Qt(t,n,e,r){if(n<0||e<0)return t;var o=x.cloneDeep(t);return o[n][e]=r,ct(o,n,e,-r)}var tn=function(t,n){t.getPath().forEach((function(t){var e=t.model.setupProps;e.filter((function(t){return t.value===n})).length>0?t.model.setupProps=e.filter((function(t){return t.value!==n})):e.forEach((function(e){e.values=e.values.filter((function(t){return t!==n})),0===e.values.length&&(t.model.setupProps=t.model.setupProps.filter((function(t){return t.token!==e.token})))}))}))},nn=function(n,e){void 0===e&&(e=19);var r,o,i=n.getPath(),a=i[0],u=0,c=rn(n,e),s=$t([c,c]),l=$t([c,c]),f=Vt([c,c]),h=Vt([c,c]);return i.forEach((function(n,e){var a=n.model,l=a.moveProps,p=a.setupProps;a.rootProps,p.length>0&&(u+=1),p.forEach((function(t){t.values.forEach((function(n){var e=R.indexOf(n[0]),i=R.indexOf(n[1]);r=e,o=i,e<c&&i<c&&(s[e][i]="AB"===t.token?1:-1,"AE"===t.token&&(s[e][i]=0))}))})),l.forEach((function(a){var l=R.indexOf(a.value[0]),p=R.indexOf(a.value[1]);l<0||p<0||l<c&&p<c&&(r=l,o=p,s=Qt(s,l,p,"B"===a.token?t.Ki.Black:t.Ki.White),void 0!==r&&void 0!==o&&r>=0&&o>=0&&(h[r][o]=(n.model.number||e-u).toString()),e===i.length-1&&(f[r][o]=t.Markup.Current))}));for(var v=0;v<c;v++)for(var d=0;d<c;d++)0===s[v][d]&&(h[v][d]="")})),a&&a.all((function(n){var e=n.model,r=e.moveProps,o=e.setupProps;return e.rootProps,o.length>0&&(u+=1),o.forEach((function(n){n.values.forEach((function(e){var r=R.indexOf(e[0]),o=R.indexOf(e[1]);r>=0&&o>=0&&r<c&&o<c&&(l[r][o]=t.Ki.Black,"AE"===n.token&&(l[r][o]=0))}))})),r.forEach((function(n){var e=R.indexOf(n.value[0]),r=R.indexOf(n.value[1]);e>=0&&r>=0&&e<c&&r<c&&(l[e][r]=t.Ki.Black)})),!0})),n.model.markupProps.forEach((function(n){var e=n.token;n.values.forEach((function(n){var r=R.indexOf(n[0]),o=R.indexOf(n[1]);if(!(r<0||o<0)&&r<c&&o<c){var i=void 0;switch(e){case"CR":i=t.Markup.Circle;break;case"SQ":i=t.Markup.Square;break;case"TR":i=t.Markup.Triangle;break;case"MA":i=t.Markup.Cross;break;default:i=n.split(":")[1]}f[r][o]=i}}))})),{mat:s,visibleAreaMat:l,markup:f,numMarkup:h}},en=function(t,n){if(t)return N.includes(n)?t.model.moveProps.find((function(t){return t.token===n})):j.includes(n)?t.model.nodeAnnotationProps.find((function(t){return t.token===n})):W.includes(n)?t.model.moveAnnotationProps.find((function(t){return t.token===n})):z.includes(n)?t.model.rootProps.find((function(t){return t.token===n})):L.includes(n)?t.model.setupProps.find((function(t){return t.token===n})):D.includes(n)?t.model.markupProps.find((function(t){return t.token===n})):F.includes(n)?t.model.gameInfoProps.find((function(t){return t.token===n})):null},rn=function(t,n){var e;void 0===n&&(n=19);var r=t.getPath()[0];return Math.min(parseInt((null===(e=en(r,"SZ"))||void 0===e?void 0:e.value)||n),29)},on=function(n,e){if(void 0===e&&(e=t.Ki.Black),n){var r=n.first((function(t){return yt(t)}));if(r){var o=r.first((function(t){return gt(t)}));return o?an(o):e}}return console.warn("Default first to move color",e),e},an=function(n,e){var r,o;void 0===e&&(e=t.Ki.Black);var i=null===(o=null===(r=n.model)||void 0===r?void 0:r.moveProps)||void 0===o?void 0:o[0];switch(null==i?void 0:i.token){case"W":return t.Ki.White;case"B":return t.Ki.Black;default:return e}},un=function(){function t(t,n,e,r){this.ctx=t,this.x=n,this.y=e,this.ki=r,this.globalAlpha=1,this.size=0}return t.prototype.draw=function(){console.log("TBD")},t.prototype.setGlobalAlpha=function(t){this.globalAlpha=t},t.prototype.setSize=function(t){this.size=t},t}(),cn=function(t){function n(n,e,r,o){return t.call(this,n,e,r,o)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.size,i=t.ki,a=t.globalAlpha;o<=0||(n.save(),n.beginPath(),n.globalAlpha=a,n.arc(e,r,o/2,0,2*Math.PI,!0),n.lineWidth=1,n.strokeStyle="#000",1===i?n.fillStyle="#000":-1===i&&(n.fillStyle="#fff"),n.fill(),n.stroke(),n.restore())},n}(un),sn=function(t){function n(n,e,r,o,i,a,u){var c=t.call(this,n,e,r,o)||this;return c.mod=i,c.blacks=a,c.whites=u,c}return r(n,t),n.prototype.draw=function(){var t,n=this,e=n.ctx,r=n.x,o=n.y,i=n.size,a=n.ki,u=n.blacks,c=n.whites,s=n.mod;i<=0||(t=1===a?u[s%u.length]:c[s%c.length])&&e.drawImage(t,r-i/2,o-i/2,i,i)},n}(un),ln=function(){function n(n,e,r,o,i,a,u,c){void 0===u&&(u=t.AnalysisPointTheme.Default);var s=this;this.ctx=n,this.x=e,this.y=r,this.r=o,this.rootInfo=i,this.moveInfo=a,this.theme=u,this.outlineColor=c,this.drawProblemAnalysisPoint=function(){var t=s,n=t.ctx,e=t.x,r=t.y,o=t.r,i=t.rootInfo,a=t.moveInfo,u=t.outlineColor,c=a.order,l=Gt(i,a);if(c<5){n.beginPath(),n.arc(e,r,o,0,2*Math.PI,!0),n.lineWidth=0,n.strokeStyle="rgba(255,255,255,0)";var f=n.createRadialGradient(e,r,.9*o,e,r,o);f.addColorStop(0,l),f.addColorStop(.9,"rgba(255, 255, 255, 0"),n.fillStyle=f,n.fill(),u&&(n.beginPath(),n.arc(e,r,o,0,2*Math.PI,!0),n.lineWidth=4,n.strokeStyle=u,n.stroke());var h=o/1.5;n.font="".concat(.8*h,"px Tahoma"),n.fillStyle="black",n.textAlign="center",n.font="".concat(h,"px Tahoma");var p=Dt(i,a);n.fillText(p,e,r),n.font="".concat(.8*h,"px Tahoma"),n.fillStyle="black",n.textAlign="center",n.fillText(Bt(a.visits),e,r+o/2+h/8)}else s.drawCandidatePoint()},this.drawDefaultAnalysisPoint=function(){var t=s,n=t.ctx,e=t.x,r=t.y,o=t.r,i=t.rootInfo,a=t.moveInfo,u=a.order,c=Gt(i,a);if(u<5){n.beginPath(),n.arc(e,r,o,0,2*Math.PI,!0),n.lineWidth=0,n.strokeStyle="rgba(255,255,255,0)";var l=n.createRadialGradient(e,r,.9*o,e,r,o);l.addColorStop(0,c),l.addColorStop(.9,"rgba(255, 255, 255, 0"),n.fillStyle=l,n.fill();var f=o/1.5;n.font="".concat(.8*f,"px Tahoma"),n.fillStyle="black",n.textAlign="center";var h="B"===i.currentPlayer?a.winrate:1-a.winrate;n.fillText(vt(h,100,1),e,r-o/2+f/5),n.font="".concat(f,"px Tahoma");var p=Dt(i,a);n.fillText(p,e,r+f/3),n.font="".concat(.8*f,"px Tahoma"),n.fillStyle="black",n.textAlign="center",n.fillText(Bt(a.visits),e,r+o/2+f/3);var v=a.order;n.fillText((v+1).toString(),e+o,r-o/2)}else s.drawCandidatePoint()},this.drawCandidatePoint=function(){var t=s,n=t.ctx,e=t.x,r=t.y,o=t.r,i=t.rootInfo,a=t.moveInfo,u=Gt(i,a);n.beginPath(),n.arc(e,r,.6*o,0,2*Math.PI,!0),n.lineWidth=0,n.strokeStyle="rgba(255,255,255,0)";var c=n.createRadialGradient(e,r,.4*o,e,r,o);c.addColorStop(0,u),c.addColorStop(.95,"rgba(255, 255, 255, 0"),n.fillStyle=c,n.fill(),n.stroke()}}return n.prototype.draw=function(){var n=this,e=n.ctx;n.x,n.y;var r=n.r;n.rootInfo,n.moveInfo;var o=n.theme;r<0||(e.save(),e.shadowOffsetX=0,e.shadowOffsetY=0,e.shadowColor="#fff",e.shadowBlur=0,o===t.AnalysisPointTheme.Default?this.drawDefaultAnalysisPoint():o===t.AnalysisPointTheme.Problem&&this.drawProblemAnalysisPoint(),e.restore())},n}(),fn=function(){function t(t,n,e,r,o,i){void 0===i&&(i=""),this.ctx=t,this.x=n,this.y=e,this.s=r,this.ki=o,this.val=i,this.globalAlpha=1,this.color=""}return t.prototype.draw=function(){console.log("TBD")},t.prototype.setGlobalAlpha=function(t){this.globalAlpha=t},t.prototype.setColor=function(t){this.color=t},t}(),hn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.globalAlpha,u=t.color,c=.65*(.5*o);n.save(),n.beginPath(),n.globalAlpha=a,n.lineWidth=2,1===i?n.strokeStyle="#fff":-1===i?n.strokeStyle="#000":n.lineWidth=3,u&&(n.strokeStyle=u),c>0&&(n.arc(e,r,c,0,2*Math.PI,!0),n.stroke()),n.restore()},n}(fn),pn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.globalAlpha,u=.5*o,c=.5*u;n.save(),n.beginPath(),n.lineWidth=3,n.globalAlpha=a,1===i?n.strokeStyle="#fff":-1===i?n.strokeStyle="#000":c=.58*u,n.moveTo(e-c,r-c),n.lineTo(e+c,r+c),n.moveTo(e+c,r-c),n.lineTo(e-c,r+c),n.closePath(),n.stroke(),n.restore()},n}(fn),vn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.val,u=t.globalAlpha,c=.8*o,s=c/1.5;n.save(),n.globalAlpha=u,1===i?n.fillStyle="#fff":-1===i&&(n.fillStyle="#000"),s=1===a.toString().length?c/1.5:2===a.toString().length?c/1.8:c/2,n.font="bold ".concat(s,"px Tahoma"),n.textAlign="center",n.textBaseline="middle",n.fillText(a.toString(),e,r+2),n.restore()},n}(fn),dn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.globalAlpha;n.save(),n.beginPath(),n.lineWidth=2,n.globalAlpha=a;var u=.55*o;1===i?n.strokeStyle="#fff":-1===i?n.strokeStyle="#000":(n.strokeStyle="#000",n.lineWidth=3),n.rect(e-u/2,r-u/2,u,u),n.stroke(),n.restore()},n}(fn),gn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.globalAlpha,u=.5*o,c=.75*u;n.save(),n.beginPath(),n.globalAlpha=a,n.moveTo(e,r-c),n.lineTo(e-c*Math.cos(.523),r+c*Math.sin(.523)),n.lineTo(e+c*Math.cos(.523),r+c*Math.sin(.523)),n.lineWidth=2,1===i?n.strokeStyle="#fff":-1===i?n.strokeStyle="#000":(n.lineWidth=3,c=.7*u),n.closePath(),n.stroke(),n.restore()},n}(fn),yn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s;t.ki;var i=t.color,a=t.globalAlpha,u=.4*(.5*o);n.save(),n.beginPath(),n.globalAlpha=a,n.lineWidth=4,n.strokeStyle=i,u>0&&(n.arc(e,r,u,0,2*Math.PI,!0),n.stroke()),n.restore()},n}(fn),mn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s;t.ki;var i=t.color,a=t.globalAlpha,u=.5*(.5*o);n.save(),n.beginPath(),n.globalAlpha=a,n.lineWidth=4,n.strokeStyle=i,n.fillStyle=i,u>0&&(n.arc(e,r,u,0,2*Math.PI,!0),n.stroke()),n.restore(),n.save(),n.beginPath(),n.fillStyle=i,u>0&&(n.arc(e,r,.4*u,0,2*Math.PI,!0),n.fill()),n.restore()},n}(fn),_n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.globalAlpha,u=t.color,c=.65*(.25*o);n.save(),n.beginPath(),n.globalAlpha=a,n.lineWidth=2,1===i?n.fillStyle="#fff":-1===i?n.fillStyle="#000":n.lineWidth=3,u&&(n.fillStyle=u),c>0&&(n.arc(e,r,c,0,2*Math.PI,!0),n.fill()),n.restore()},n}(fn),bn={};function wn(){return/Mobi|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}var Pn=1;"undefined"!=typeof window&&(Pn=window.devicePixelRatio||1);var Cn=function(){function n(n){void 0===n&&(n={});var e=this;this.defaultOptions={boardSize:19,dynamicPadding:!1,padding:10,extent:3,interactive:!1,coordinate:!0,theme:t.Theme.BlackAndWhite,analysisPointTheme:t.AnalysisPointTheme.Default,background:!1,showAnalysis:!1,boardEdgeLineWidth:5,boardLineWidth:1,boardLineExtent:.5,themeFlatBoardColor:"#ECB55A",positiveNodeColor:"#4d7c0f",negativeNodeColor:"#b91c1c",neutralNodeColor:"#a16207",defaultNodeColor:"#404040",themeResources:M,moveSound:!1,starSize:3},this.cursor=t.Cursor.None,this.cursorValue="",this.touchMoving=!1,this.touchStartPoint=new DOMPoint,this.cursorPoint=new DOMPoint,this.setCursorWithRender=function(t,n){var r,o;void 0===n&&(n=0);var i=e.options.padding,a=e.calcSpaceAndPadding().space,u=e.transMat.inverse().transformPoint(t),c=Math.round((u.x-i+a/2)/a),s=Math.round((u.y-i+a/2)/a)+n,l=c*a,f=s*a,h=e.transMat.transformPoint(new DOMPoint(l,f));if(1===(null===(o=null===(r=e.preventMoveMat)||void 0===r?void 0:r[c-1])||void 0===o?void 0:o[s-1]))return e.cursorPosition=[-1,-1],e.cursorPoint=new DOMPoint,void e.drawCursor();(!wn()||wn()&&0===e.mat[c-1][s-1])&&(e.cursorPoint=h,e.cursorPosition=[c-1,s-1]),e.drawCursor(),wn()&&e.drawBoard()},this.onMouseMove=function(t){if(e.cursorCanvas){t.preventDefault();var n=new DOMPoint(t.offsetX*Pn,t.offsetY*Pn);e.setCursorWithRender(n)}},this.calcTouchPoint=function(t){var n=new DOMPoint,r=e.cursorCanvas;if(!r)return n;var o=r.getBoundingClientRect(),i=t.changedTouches;return n=new DOMPoint((i[0].clientX-o.left)*Pn,(i[0].clientY-o.top)*Pn)},this.onTouchStart=function(t){if(e.cursorCanvas){t.preventDefault(),e.touchMoving=!0;var n=e.calcTouchPoint(t);e.touchStartPoint=n,e.setCursorWithRender(n)}},this.onTouchMove=function(t){if(e.cursorCanvas){t.preventDefault(),e.touchMoving=!0;var n=e.calcTouchPoint(t),r=0;(Math.abs(n.x-e.touchStartPoint.x)>10||Math.abs(n.y-e.touchStartPoint.y)>10)&&(r=-3),e.setCursorWithRender(n,r)}},this.onTouchEnd=function(){e.touchMoving=!1},this.calcCenter=function(){var n=e.visibleArea,r=e.options.boardSize;return 0===n[0][0]&&n[0][1]===r-1||0===n[1][0]&&n[1][1]===r-1?t.Center.Center:0===n[0][0]?0===n[1][0]?t.Center.TopLeft:n[1][1]===r-1?t.Center.BottomLeft:t.Center.Left:n[0][1]===r-1?0===n[1][0]?t.Center.TopRight:n[1][1]===r-1?t.Center.BottomRight:t.Center.Right:0===n[1][0]?t.Center.Top:n[1][1]===r-1?t.Center.Bottom:t.Center.Center},this.clearAllCanvas=function(){e.clearCanvas(e.board),e.clearCanvas(),e.clearCanvas(e.markupCanvas),e.clearCursorCanvas(),e.clearAnalysisCanvas()},this.clearBoard=function(){if(e.board){var t=e.board.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,t.canvas.width,t.canvas.height),t.restore())}},this.clearCanvas=function(t){if(void 0===t&&(t=e.canvas),t){var n=t.getContext("2d");n&&(n.save(),n.setTransform(1,0,0,1,0,0),n.clearRect(0,0,t.width,t.height),n.restore())}},this.clearMarkupCanvas=function(){if(e.markupCanvas){var t=e.markupCanvas.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,e.markupCanvas.width,e.markupCanvas.height),t.restore())}},this.clearCursorCanvas=function(){if(e.cursorCanvas){e.options.boardSize;var t=e.cursorCanvas.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,e.cursorCanvas.width,e.cursorCanvas.height),t.restore())}},this.clearAnalysisCanvas=function(){if(e.analysisCanvas){var t=e.analysisCanvas.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,e.analysisCanvas.width,e.analysisCanvas.height),t.restore())}},this.drawAnalysis=function(n){void 0===n&&(n=e.analysis);var r=e.analysisCanvas,o=e.options,i=o.theme,a=void 0===i?t.Theme.BlackAndWhite:i,u=o.analysisPointTheme,c=o.boardSize;o.forceAnalysisBoardSize;var s=e,l=s.mat,f=s.markup;if(r&&n){var h=r.getContext("2d");if(h){e.clearAnalysisCanvas();var p=n.rootInfo;n.moveInfos.forEach((function(r){if("pass"!==r.move){var o=JSON.parse(n.id),i=c,s=Wt(r.move,0,i-o.by),v=Lt(s),d=v.x,g=v.y;if(0===l[d][g]){var y,m=e.calcSpaceAndPadding(),_=m.space,b=m.scaledPadding,w=b+d*_,P=b+g*_;h.save(),a!==t.Theme.Subdued&&a!==t.Theme.BlackAndWhite&&a!==t.Theme.Flat?(h.shadowOffsetX=3,h.shadowOffsetY=3,h.shadowColor="#555",h.shadowBlur=8):(h.shadowOffsetX=0,h.shadowOffsetY=0,h.shadowColor="#fff",h.shadowBlur=0),f[d][g].includes(t.Markup.PositiveNode)&&(y=e.options.positiveNodeColor),f[d][g].includes(t.Markup.NegativeNode)&&(y=e.options.negativeNodeColor),f[d][g].includes(t.Markup.NeutralNode)&&(y=e.options.neutralNodeColor),new ln(h,w,P,.46*_,p,r,u,y).draw(),h.restore()}}}))}}},this.drawMarkup=function(n,r,o,i){void 0===n&&(n=e.mat),void 0===r&&(r=e.markup),void 0===o&&(o=e.markupCanvas),void 0===i&&(i=!0);var a=o;if(a){i&&e.clearCanvas(a);for(var u=function(o){for(var i=function(i){var u=r[o][i];null==u||u.split("|").forEach((function(r){if(null!==r&&""!==r){var u,c=e.calcSpaceAndPadding(),s=c.space,l=c.scaledPadding,f=l+o*s,h=l+i*s,p=n[o][i],v=a.getContext("2d");if(v){switch(r){case t.Markup.Circle:u=new hn(v,f,h,s,p);break;case t.Markup.Current:u=new _n(v,f,h,s,p);break;case t.Markup.PositiveNode:(u=new mn(v,f,h,s,p,t.Markup.Circle)).setColor(e.options.positiveNodeColor);break;case t.Markup.NegativeNode:case t.Markup.NeutralNode:case t.Markup.Node:var d=e.options.defaultNodeColor;r===t.Markup.NegativeNode?d=e.options.negativeNodeColor:r===t.Markup.NeutralNode&&(d=e.options.neutralNodeColor),(u=new yn(v,f,h,s,p,t.Markup.Circle)).setColor(d);break;case t.Markup.Square:u=new dn(v,f,h,s,p);break;case t.Markup.Triangle:u=new gn(v,f,h,s,p);break;case t.Markup.Cross:u=new pn(v,f,h,s,p);break;default:""!==r&&(u=new vn(v,f,h,s,p,r))}null==u||u.draw()}}}))},u=0;u<r[o].length;u++)i(u)},c=0;c<r.length;c++)u(c)}},this.drawBoard=function(t,n){void 0===t&&(t=e.board),void 0===n&&(n=!0),n&&e.clearCanvas(t),e.drawBan(t),e.drawBoardLine(t),e.drawStars(t),e.options.coordinate&&e.drawCoordinate()},this.drawBan=function(n){void 0===n&&(n=e.board);var r=e.options,o=r.theme,i=r.themeResources;if(n){n.style.borderRadius="2px";var a=n.getContext("2d");if(a)if(o===t.Theme.BlackAndWhite)n.style.boxShadow="0px 0px 0px #000000",a.fillStyle="#FFFFFF",a.fillRect(0,0,n.width,n.height);else if(o===t.Theme.Flat)a.fillStyle=e.options.themeFlatBoardColor,a.fillRect(0,0,n.width,n.height);else if(o===t.Theme.Walnut&&void 0!==i[o].board){var u=i[o].board||"",c=bn[u];c&&a.drawImage(c,0,0,n.width,n.height)}else{u=i[o].board||"";var s=bn[u];if(s){var l=a.createPattern(s,"repeat");l&&(a.fillStyle=l,a.fillRect(0,0,n.width,n.height))}}}},this.drawBoardLine=function(t){if(void 0===t&&(t=e.board),t){var n=e,r=n.visibleArea,o=n.options,i=o.zoom,a=o.boardSize,u=o.boardLineWidth,c=o.boardEdgeLineWidth,s=o.boardLineExtent,l=t.getContext("2d");if(l){var f=e.calcSpaceAndPadding(),h=f.space,p=f.scaledPadding,v=i?s*h:0;l.fillStyle="#000000";var d=c;wn()||(d*=Pn);var g=u;wn()||(g*=Pn);for(var y=r[0][0];y<=r[0][1];y++){l.beginPath(),0===r[0][0]&&0===y||r[0][1]===a-1&&y===a-1?l.lineWidth=d:l.lineWidth=g,wn()&&y===e.cursorPosition[0]&&e.touchMoving&&(l.lineWidth=2*l.lineWidth);var m=p+r[1][0]*h-c;wn()&&(m+=Pn/2);var _=h*r[1][1]+p+c;wn()&&(_-=Pn/2),r[1][0]>0&&(m-=v),r[1][1]<a-1&&(_+=v),l.moveTo(y*h+p,m),l.lineTo(y*h+p,_),l.stroke()}for(y=r[1][0];y<=r[1][1];y++){l.beginPath(),0===r[1][0]&&0===y||r[1][1]===a-1&&y===a-1?l.lineWidth=d:l.lineWidth=g,wn()&&y===e.cursorPosition[1]&&e.touchMoving&&(l.lineWidth=2*l.lineWidth);var b=p+r[0][0]*h-c,w=h*r[0][1]+p+c;wn()&&(b+=Pn/2),wn()&&(w-=Pn/2),r[0][0]>0&&(b-=v),r[0][1]<a-1&&(w+=v),l.moveTo(b,y*h+p),l.lineTo(w,y*h+p),l.stroke()}}}},this.drawStars=function(t){if(void 0===t&&(t=e.board),t&&19===e.options.boardSize){var n=e.visibleArea,r=t.getContext("2d"),o=e.options.starSize;if(wn()||(o*=Pn),r){var i=e.calcSpaceAndPadding(),a=i.space,u=i.scaledPadding;r.stroke(),[3,9,15].forEach((function(t){[3,9,15].forEach((function(e){t>=n[0][0]&&t<=n[0][1]&&e>=n[1][0]&&e<=n[1][1]&&(r.beginPath(),r.arc(t*a+u,e*a+u,o,0,2*Math.PI,!0),r.fillStyle="black",r.fill())}))}))}}},this.drawCoordinate=function(){var n=e,r=n.board,o=n.options,i=n.visibleArea;if(r){var a=o.boardSize;o.zoom;var u=o.padding,c=o.boardLineExtent,s=i[0][1]-i[0][0]+1,l=r.getContext("2d"),f=e.calcSpaceAndPadding(),h=f.space,p=f.scaledPadding;if(l){l.textBaseline="middle",l.textAlign="center",l.fillStyle="#000000",l.font="bold ".concat(h/2.8,"px Helvetica");var v=e.calcCenter(),d=h/2;v===t.Center.Center&&0===i[0][0]&&i[0][1]===a-1&&(d-=p/2),A.forEach((function(n,e){var r=h*e+p,o=d,a=d;v!==t.Center.TopLeft&&v!==t.Center.TopRight&&v!==t.Center.Top||(o-=h*c),v!==t.Center.BottomLeft&&v!==t.Center.BottomRight&&v!==t.Center.Bottom||(a-=h*c/2);var f=i[1][0]*h+u-o,g=f+s*h+2*a;e>=i[0][0]&&e<=i[0][1]&&(v!==t.Center.BottomLeft&&v!==t.Center.BottomRight&&v!==t.Center.Bottom&&l.fillText(n,r,f),v!==t.Center.TopLeft&&v!==t.Center.TopRight&&v!==t.Center.Top&&l.fillText(n,r,g))})),S.slice(-e.options.boardSize).forEach((function(n,e){var r=h*e+p,o=d,a=d;v!==t.Center.TopLeft&&v!==t.Center.BottomLeft&&v!==t.Center.Left||(o-=h*c),v!==t.Center.TopRight&&v!==t.Center.BottomRight&&v!==t.Center.Right||(a-=h*c/2);var f=i[0][0]*h+u-o,g=f+s*h+2*a;e>=i[1][0]&&e<=i[1][1]&&(v!==t.Center.TopRight&&v!==t.Center.BottomRight&&v!==t.Center.Right&&l.fillText(n.toString(),f,r),v!==t.Center.TopLeft&&v!==t.Center.BottomLeft&&v!==t.Center.Left&&l.fillText(n.toString(),g,r))}))}}},this.calcSpaceAndPadding=function(t){void 0===t&&(t=e.canvas);var n=0,r=0,o=0;if(t){var i=e.options,a=i.padding,u=i.boardSize,c=i.boardLineExtent,s=i.zoom,l=e.visibleArea;(0!==l[0][0]&&l[0][1]===u-1||0!==l[1][0]&&l[1][1]===u-1)&&(o=c),(0!==l[0][0]&&l[0][1]!==u-1||0!==l[1][0]&&l[1][1]!==u-1)&&(o=2*c);var f=s?u+o:u;r=a+(n=(t.width-2*a)/Math.ceil(f))/2}return{space:n,scaledPadding:r,scaledBoardExtent:o}},this.drawCursor=function(){var n,r,o=e.cursorCanvas;if(o){if(e.clearCursorCanvas(),e.cursor===t.Cursor.None)return;if(wn()&&!e.touchMoving)return;var i=e.options.padding,u=o.getContext("2d"),c=e.calcSpaceAndPadding().space,s=e,l=s.visibleArea,f=s.cursor,h=s.cursorValue,p=a(e.cursorPosition,2),v=p[0],d=p[1];if(v<l[0][0]||v>l[0][1])return;if(d<l[1][0]||d>l[1][1])return;var g=v*c+c/2+i,y=d*c+c/2+i,m=(null===(r=null===(n=e.mat)||void 0===n?void 0:n[v])||void 0===r?void 0:r[d])||t.Ki.Empty;if(u){var _=void 0,b=.8*c;f===t.Cursor.Circle?(_=new hn(u,g,y,c,m)).setGlobalAlpha(.8):f===t.Cursor.Square?(_=new dn(u,g,y,c,m)).setGlobalAlpha(.8):f===t.Cursor.Triangle?(_=new gn(u,g,y,c,m)).setGlobalAlpha(.8):f===t.Cursor.Cross?(_=new pn(u,g,y,c,m)).setGlobalAlpha(.8):f===t.Cursor.Text?(_=new vn(u,g,y,c,m,h)).setGlobalAlpha(.8):m===t.Ki.Empty&&f===t.Cursor.BlackStone?((_=new cn(u,g,y,t.Ki.Black)).setSize(b),_.setGlobalAlpha(.5)):m===t.Ki.Empty&&f===t.Cursor.WhiteStone?((_=new cn(u,g,y,t.Ki.White)).setSize(b),_.setGlobalAlpha(.5)):f===t.Cursor.Clear&&(_=new cn(u,g,y,t.Ki.Empty)).setSize(b),null==_||_.draw()}}},this.drawStones=function(n,r,o){void 0===n&&(n=e.mat),void 0===r&&(r=e.canvas),void 0===o&&(o=!0);var i=e.options,a=i.theme,u=void 0===a?t.Theme.BlackAndWhite:a,c=i.themeResources;if(o&&e.clearCanvas(),r)for(var s=0;s<n.length;s++)for(var l=0;l<n[s].length;l++){var f=n[s][l];if(0!==f){var h=r.getContext("2d");if(h){var p=e.calcSpaceAndPadding(),v=p.space,d=p.scaledPadding,g=d+s*v,y=d+l*v;h.save(),u!==t.Theme.Subdued&&u!==t.Theme.BlackAndWhite&&u!==t.Theme.Flat?(h.shadowOffsetX=3,h.shadowOffsetY=3,h.shadowColor="#555",h.shadowBlur=8):(h.shadowOffsetX=0,h.shadowOffsetY=0,h.shadowBlur=0);var m=void 0;switch(u){case t.Theme.BlackAndWhite:case t.Theme.Flat:(m=new cn(h,g,y,f)).setSize(.45*v*2);break;default:var _=c[u].blacks.map((function(t){return bn[t]})),b=c[u].whites.map((function(t){return bn[t]}));(m=new sn(h,g,y,f,s+10+l,_,b)).setSize(.45*v*2)}m.draw(),h.restore()}}}},this.options=o(o({},this.defaultOptions),n);var r=this.options.boardSize;this.mat=$t([r,r]),this.preventMoveMat=$t([r,r]),this.markup=Vt([r,r]),this.turn=t.Ki.Black,this.cursorPosition=[-1,-1],this.maxhv=r,this.transMat=new DOMMatrix,this.analysis=null,this.visibleArea=[[0,r-1],[0,r-1]]}return n.prototype.setTurn=function(t){this.turn=t},n.prototype.setBoardSize=function(t){this.options.boardSize=Math.min(t,29)},n.prototype.resize=function(){if(this.canvas&&this.cursorCanvas&&this.dom&&this.board&&this.markupCanvas&&this.analysisCanvas){var t=this,n=t.board,e=t.canvas,r=t.markupCanvas,o=t.cursorCanvas,i=t.analysisCanvas,a=this.options,u=a.size;if(a.zoom,u)n.width=u*Pn,n.height=u*Pn,e.width=u*Pn,e.height=u*Pn,r.width=u*Pn,r.height=u*Pn,o.width=u*Pn,o.height=u*Pn,i.width=u*Pn,i.height=u*Pn;else{var c=this.dom.clientWidth;n.style.width=c+"px",n.style.height=c+"px",n.width=Math.floor(c*Pn),n.height=Math.floor(c*Pn),e.style.width=c+"px",e.style.height=c+"px",e.width=Math.floor(c*Pn),e.height=Math.floor(c*Pn),r.style.width=c+"px",r.style.height=c+"px",r.width=Math.floor(c*Pn),r.height=Math.floor(c*Pn),o.style.width=c+"px",o.style.height=c+"px",o.width=Math.floor(c*Pn),o.height=Math.floor(c*Pn),i.style.width=c+"px",i.style.height=c+"px",i.width=Math.floor(c*Pn),i.height=Math.floor(c*Pn)}this.render()}},n.prototype.init=function(t){var n,e,r,o,i,a=this,u=this.options.boardSize;this.mat=$t([u,u]),this.markup=Vt([u,u]),this.transMat=new DOMMatrix;var c=document.createElement("canvas");c.style.position="absolute",c.id="ghostban-board",this.board=c;var s=document.createElement("canvas");s.style.position="absolute",s.id="ghostban-canvas",this.canvas=s;var l=document.createElement("canvas");l.style.position="absolute",l.id="ghostban-markup",l.style.pointerEvents="none",this.markupCanvas=l;var f=document.createElement("canvas");f.style.position="absolute",f.id="ghostban-cursor",this.cursorCanvas=f;var h=document.createElement("canvas");h.style.position="absolute",h.style.pointerEvents="none",h.id="ghostban-analysis",this.analysisCanvas=h,this.dom=t,null===(n=t.firstChild)||void 0===n||n.remove(),null===(e=t.firstChild)||void 0===e||e.remove(),null===(r=t.firstChild)||void 0===r||r.remove(),null===(o=t.firstChild)||void 0===o||o.remove(),null===(i=t.firstChild)||void 0===i||i.remove(),t.appendChild(c),t.appendChild(s),t.appendChild(l),t.appendChild(h),t.appendChild(f),this.resize(),this.renderInteractive(),"undefined"!=typeof window&&window.addEventListener("resize",(function(){a.resize()}))},n.prototype.setOptions=function(t){this.options=o(o({},this.options),t),this.renderInteractive(),this.render()},n.prototype.setMat=function(t){this.mat=t,this.visibleAreaMat||(this.visibleAreaMat=t)},n.prototype.setVisibleAreaMat=function(t){this.visibleAreaMat=t},n.prototype.setPreventMoveMat=function(t){this.preventMoveMat=t},n.prototype.setMarkup=function(t){this.markup=t},n.prototype.setCursor=function(t,n){void 0===n&&(n=""),this.cursor=t,this.cursorValue=n},n.prototype.renderInteractive=function(){var t=this.cursorCanvas;t&&(t.removeEventListener("mousemove",this.onMouseMove),t.removeEventListener("mouseout",this.onMouseMove),t.removeEventListener("touchstart",this.onTouchStart),t.removeEventListener("touchmove",this.onTouchMove),t.removeEventListener("touchend",this.onTouchEnd),this.options.interactive&&(t.addEventListener("mousemove",this.onMouseMove),t.addEventListener("mouseout",this.onMouseMove),t.addEventListener("touchstart",this.onTouchStart),t.addEventListener("touchmove",this.onTouchMove),t.addEventListener("touchend",this.onTouchEnd)),this.clearCursorCanvas())},n.prototype.setAnalysis=function(t){this.analysis=t,t?this.options.showAnalysis&&this.drawAnalysis(t):this.clearAnalysisCanvas()},n.prototype.setTheme=function(t,n){var e=this;void 0===n&&(n={});var r=this.options.themeResources;if(r[t]){var i=r[t],c=i.board,s=i.blacks,l=i.whites;this.options.theme=t,this.options=o(o(o({},this.options),{theme:t}),n),function(t,n){for(var e=0,r=function(){++e===t.length&&n()},o=0;o<t.length;o++)bn[t[o]]||(bn[t[o]]=new Image,bn[t[o]].src=t[o],bn[t[o]].onload=function(){r()},bn[t[o]].onerror=function(){r()})}(x.compact(u(u([c],a(s),!1),a(l),!1)),(function(){e.drawBoard(),e.render()})),this.drawBoard(),this.render()}},n.prototype.calcDynamicPadding=function(t){var n=this.options.coordinate,e=30;t<=3?e=n?120:100:t<=6?e=n?80:60:t<=9?e=n?60:50:t<=12?e=n?50:40:t<=15?e=n?40:30:t<=17?e=n?35:25:t<=19&&(e=n?30:20),this.options.padding=e},n.prototype.zoomBoard=function(n){void 0===n&&(n=!1);var e=this,r=e.canvas,o=e.analysisCanvas,i=e.board,a=e.cursorCanvas,u=e.markupCanvas;if(r){var c=this.options,s=c.boardSize,l=c.extent,f=c.boardLineExtent,h=c.padding,p=c.dynamicPadding,v=Xt(this.visibleAreaMat,l,!1),d=null==r?void 0:r.getContext("2d"),g=null==i?void 0:i.getContext("2d"),y=null==a?void 0:a.getContext("2d"),m=null==u?void 0:u.getContext("2d"),_=null==o?void 0:o.getContext("2d"),b=n?v:[[0,s-1],[0,s-1]];this.visibleArea=b;var w=Math.max(b[0][1]-b[0][0],b[1][1]-b[1][0]);if(p?this.calcDynamicPadding(w):this.options.padding=T.padding,n){var P=this.calcSpaceAndPadding().space,C=this.calcCenter();p?this.calcDynamicPadding(w):this.options.padding=T.padding;var x=2*f+1;C!==t.Center.TopRight&&C!==t.Center.TopLeft&&C!==t.Center.BottomRight&&C!==t.Center.BottomLeft||(x=f+.5);var k=w+x;if(k<s){var A=(r.width-2*h)/(k*P),S=b[0][0]*P*A+h*A-h-P*x*A/2+P*A/2,R=b[1][0]*P*A+h*A-h-P*x*A/2+P*A/2;this.transMat=new DOMMatrix,this.transMat.translateSelf(-S,-R),this.transMat.scaleSelf(A,A),null==d||d.setTransform(this.transMat),null==g||g.setTransform(this.transMat),null==_||_.setTransform(this.transMat),null==y||y.setTransform(this.transMat),null==m||m.setTransform(this.transMat)}else this.resetTransform()}else this.resetTransform()}},n.prototype.calcBoardVisibleArea=function(t){this.zoomBoard(this.options.zoom)},n.prototype.resetTransform=function(){var t=this,n=t.canvas,e=t.analysisCanvas,r=t.board,o=t.cursorCanvas,i=t.markupCanvas,a=null==n?void 0:n.getContext("2d"),u=null==r?void 0:r.getContext("2d"),c=null==o?void 0:o.getContext("2d"),s=null==i?void 0:i.getContext("2d"),l=null==e?void 0:e.getContext("2d");this.transMat=new DOMMatrix,null==a||a.resetTransform(),null==u||u.resetTransform(),null==l||l.resetTransform(),null==c||c.resetTransform(),null==s||s.resetTransform()},n.prototype.render=function(){var t=this.mat;this.mat&&t[0]&&(this.options.boardSize=t[0].length),this.zoomBoard(this.options.zoom),this.zoomBoard(this.options.zoom),this.clearAllCanvas(),this.drawBoard(),this.drawStones(),this.drawMarkup(),this.drawCursor(),this.options.showAnalysis&&this.drawAnalysis()},n.prototype.renderInOneCanvas=function(t){void 0===t&&(t=this.canvas),this.clearAllCanvas(),this.drawBoard(t,!1),this.drawStones(this.mat,t,!1),this.drawMarkup(this.mat,this.markup,t,!1)},n}();return t.A1_LETTERS=A,t.A1_LETTERS_WITH_I=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S"],t.A1_NUMBERS=S,t.AnnotationProp=Y,t.CUSTOM_PROP_LIST=G,t.CustomProp=tt,t.DEFAULT_BOARD_SIZE=19,t.DEFAULT_OPTIONS=T,t.DOT_SIZE=3,t.EXPAND_H=5,t.EXPAND_V=5,t.GAME_INFO_PROP_LIST=F,t.GameInfoProp=Q,t.GhostBan=Cn,t.LIGHT_GREEN_RGB=O,t.LIGHT_RED_RGB=B,t.LIGHT_YELLOW_RGB=E,t.LIST_OF_POINTS_PROP=K,t.MARKUP_PROP_LIST=D,t.MAX_BOARD_SIZE=29,t.MISCELLANEOUS_PROP_LIST=["FG","PM","VW"],t.MOVE_ANNOTATION_PROP_LIST=W,t.MOVE_PROP_LIST=N,t.MarkupProp=J,t.MiscellaneousProp=et,t.MoveAnnotationProp=H,t.MoveProp=V,t.NODE_ANNOTATION_PROP_LIST=j,t.NodeAnnotationProp=Z,t.RESPONSE_TIME=100,t.ROOT_PROP_LIST=z,t.RootProp=X,t.SETUP_PROP_LIST=L,t.SGF_LETTERS=R,t.SetupProp=q,t.Sgf=ht,t.SgfPropBase=$,t.THEME_RESOURCES=M,t.TIMING_PROP_LIST=["BL","OB","OW","WL"],t.TimingProp=nt,t.YELLOW_RGB=I,t.__calcSHA_Deprecated=function(t,n,e){void 0===n&&(n=[]),void 0===e&&(e=[]);var r="r";n.length>0&&(r="m"),e.length>0&&(r="s");var o="".concat(r);n.length>0&&(o+="".concat(n[0].token).concat(n[0].value));var i=o;return t&&(i=t.getPath().map((function(t){return t.model.id})).join("=>")+"=>"+o),pt(i).toString().slice(0,6)},t.a1ToIndex=function(t,n){return void 0===n&&(n=19),A.indexOf(t[0])*n+S.indexOf(parseInt(t.substr(1),0))},t.a1ToPos=Lt,t.a1ToSGF=function(t,n,e,r){if(void 0===n&&(n="B"),void 0===e&&(e=0),void 0===r&&(r=0),"pass"===t)return"".concat(n,"[]");var o=A.indexOf(t[0])+e,i=S.indexOf(parseInt(t.substr(1),0))+r;return"".concat(n,"[").concat(R[o]).concat(R[i],"]")},t.addMoveToCurrentNode=function(n,e,r,o,i){if(i!==t.Ki.Empty){var a;if(lt(e,r,o,i)){var u=R[r]+R[o],c=i===t.Ki.Black?"B":"W",s=It(n,[V.from("".concat(c,"[").concat(u,"]"))]),l=n.children.filter((function(t){return t.model.id===s}));l.length>0?a=l[0]:(a=Ut("".concat(c,"[").concat(u,"]"),n),n.addChild(a))}return a}},t.addStoneToCurrentNode=function(n,e,r,o,i){var c=R[r]+R[o],s=i===t.Ki.White?"AW":"AB",l=en(n,s),f=!1;return e[r][o]!==t.Ki.Empty?tn(n,c):(l?l.values=u(u([],a(l.values),!1),[c],!1):n.model.setupProps=u(u([],a(n.model.setupProps),!1),[new q(s,c)],!1),f=!0),f},t.buildMoveNode=Ut,t.calcAnalysisPointColor=Gt,t.calcAvoidMovesForPartialAnalysis=function(t,n){var e,r,o,u;void 0===n&&(n=19);var c=[],s=a(t,2),l=a(s[0],2),f=l[0],h=l[1],p=a(s[1],2),v=p[0],d=p[1];try{for(var g=i(A.slice(0,n)),y=g.next();!y.done;y=g.next()){var m=y.value;try{for(var _=(o=void 0,i(S.slice(-n))),b=_.next();!b.done;b=_.next()){var w=b.value,P=A.indexOf(m),C=S.indexOf(w);(P<f||P>v||C<h||C>d)&&c.push("".concat(m).concat(w))}}catch(t){o={error:t}}finally{try{b&&!b.done&&(u=_.return)&&u.call(_)}finally{if(o)throw o.error}}}}catch(t){e={error:t}}finally{try{y&&!y.done&&(r=g.return)&&r.call(g)}finally{if(e)throw e.error}}return c},t.calcBoardSize=Ht,t.calcCenter=Zt,t.calcDoubtfulMovesThresholdRange=function(t){return t>=25?{evil:{winrateRange:[-1,-.15],scoreRange:[-100,-3]},bad:{winrateRange:[-.15,-.1],scoreRange:[-3,-2]},poor:{winrateRange:[-.1,-.05],scoreRange:[-2,-1]},ok:{winrateRange:[-.05,-.02],scoreRange:[-1,-.5]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=23&&t<25?{evil:{winrateRange:[-1,-.2],scoreRange:[-100,-8]},bad:{winrateRange:[-.2,-.15],scoreRange:[-8,-4]},poor:{winrateRange:[-.15,-.05],scoreRange:[-4,-2]},ok:{winrateRange:[-.05,-.02],scoreRange:[-2,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=20&&t<23?{evil:{winrateRange:[-1,-.25],scoreRange:[-100,-12]},bad:{winrateRange:[-.25,-.1],scoreRange:[-12,-5]},poor:{winrateRange:[-.1,-.05],scoreRange:[-5,-2]},ok:{winrateRange:[-.05,-.02],scoreRange:[-2,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=18&&t<20?{evil:{winrateRange:[-1,-.3],scoreRange:[-100,-15]},bad:{winrateRange:[-.3,-.1],scoreRange:[-15,-7]},poor:{winrateRange:[-.1,-.05],scoreRange:[-7,-5]},ok:{winrateRange:[-.05,-.02],scoreRange:[-5,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=13&&t<18?{evil:{winrateRange:[-1,-.35],scoreRange:[-100,-20]},bad:{winrateRange:[-.35,-.12],scoreRange:[-20,-10]},poor:{winrateRange:[-.12,-.08],scoreRange:[-10,-5]},ok:{winrateRange:[-.08,-.02],scoreRange:[-5,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=8&&t<13?{evil:{winrateRange:[-1,-.4],scoreRange:[-100,-25]},bad:{winrateRange:[-.4,-.15],scoreRange:[-25,-10]},poor:{winrateRange:[-.15,-.1],scoreRange:[-10,-5]},ok:{winrateRange:[-.1,-.02],scoreRange:[-5,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=0&&t<8?{evil:{winrateRange:[-1,-.45],scoreRange:[-100,-35]},bad:{winrateRange:[-.45,-.2],scoreRange:[-35,-20]},poor:{winrateRange:[-.2,-.1],scoreRange:[-20,-10]},ok:{winrateRange:[-.1,-.02],scoreRange:[-10,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:{evil:{winrateRange:[-1,-.3],scoreRange:[-100,-30]},bad:{winrateRange:[-.3,-.2],scoreRange:[-30,-20]},poor:{winrateRange:[-.2,-.1],scoreRange:[-20,-10]},ok:{winrateRange:[-.1,-.02],scoreRange:[-10,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}},t.calcMatAndMarkup=nn,t.calcMost=qt,t.calcOffset=function(n){var e=Ht(n),r=19-e[0],o=19-e[1],i=r,a=o;switch(Zt(n)){case t.Center.TopLeft:i=0,a=o;break;case t.Center.TopRight:i=-r,a=o;break;case t.Center.BottomLeft:i=0,a=0;break;case t.Center.BottomRight:i=-r,a=0}return{x:i,y:a}},t.calcPartialArea=Yt,t.calcPreventMoveMat=function(t,n){if(void 0===n&&(n=19),!t)return $t([n,n]);var e=rn(t,n),r=$t([e,e]),o=[];return t.hasChildren()&&(o=t.children.filter((function(t){return wt(t)}))),bt(t)&&(r.forEach((function(t){return t.fill(1)})),t.hasChildren()&&t.children.forEach((function(t){t.model.moveProps.forEach((function(t){var n=R.indexOf(t.value[0]),o=R.indexOf(t.value[1]);n>=0&&o>=0&&n<e&&o<e&&(r[n][o]=0)}))})),o.forEach((function(t){t.model.moveProps.forEach((function(t){var n=R.indexOf(t.value[0]),o=R.indexOf(t.value[1]);n>=0&&o>=0&&n<e&&o<e&&(r[n][o]=1)}))}))),r},t.calcSHA=It,t.calcScoreDiff=zt,t.calcScoreDiffText=Dt,t.calcTsumegoFrame=function(n,e,r,o,i,u){void 0===r&&(r=19),void 0===o&&(o=7.5),void 0===i&&(i=t.Ki.Black);var c=x.cloneDeep(n),s=Yt(n,e,r),l=Zt(n);return function(n){for(var e=a(s[0],2),o=e[0],u=e[1],c=a(s[1],2),f=c[0],h=c[1],p=o;p<=f;p++)for(var v=u;v<=h;v++)(l===t.Center.TopLeft&&(p===f&&p<r-1||v===h&&v<r-1||p===o&&p>0||v===u&&v>0)||l===t.Center.TopRight&&(p===o&&p>0||v===h&&v<r-1||p===f&&p<r-1||v===u&&v>0)||l===t.Center.BottomLeft&&(p===f&&p<r-1||v===u&&v>0||p===o&&p>0||v===h&&v<r-1)||l===t.Center.BottomRight&&(p===o&&p>0||v===u&&v>0||p===f&&p<r-1||v===h&&v<r-1)||l===t.Center.Center)&&(n[p][v]=i)}(c),function(n){for(var e=i*o,u=a(s[0],2),c=u[0],f=u[1],h=a(s[1],2),p=h[0],v=h[1],d=i===t.Ki.Black,g=p-c,y=v-f,m=Math.floor((361-g*y)/2)-e-10,_=0,b=0;b<r;b++)for(var w=0;w<r;w++)if(b<c||b>p||w<f||w>v){_++;var P=t.Ki.Empty;l===t.Center.TopLeft||l===t.Center.BottomLeft?P=d!==_<=m?t.Ki.White:t.Ki.Black:l!==t.Center.TopRight&&l!==t.Center.BottomRight||(P=d!==_<=m?t.Ki.Black:t.Ki.White),(b+w)%2==0&&Math.abs(_-m)>r&&(P=t.Ki.Empty),n[b][w]=P}}(c),c},t.calcVariationsMarkup=function(n,e,r){void 0===e&&(e="append"),void 0===r&&(r=19);var o=nn(n),i=o.mat,a=o.markup,u=rn(n,r);return n.hasChildren()&&n.children.forEach((function(n){n.model.moveProps.forEach((function(r){var o=R.indexOf(r.value[0]),c=R.indexOf(r.value[1]);if(!(o<0||c<0)&&o<u&&c<u){var s=t.Markup.NeutralNode;if(Ot(n)&&(s=t.Markup.NegativeNode),St(n)&&(s=t.Markup.PositiveNode),i[o][c]===t.Ki.Empty)switch(e){case"prepend":a[o][c]=s+"|"+a[o][c];break;case"replace":a[o][c]=s;break;default:a[o][c]+="|"+s}}}))})),a},t.calcVisibleArea=Xt,t.calcWinrateDiff=Ft,t.calcWinrateDiffText=function(t,n,e,r){if(void 0===e&&(e=1),void 0===r&&(r=!1),!t||!n)return"";var o=Ft(t,n);r&&(o=-o);var i=o.toFixed(e);return o>=0?"+".concat(i,"%"):"".concat(i,"%")},t.canMove=lt,t.clearStoneFromCurrentNode=tn,t.convertStepsForAI=function(t,n){void 0===n&&(n=0);var e=x.clone(t);e=e.map((function(t){return jt(t,n)}));var r="(;FF[4]GM[1]SZ[".concat(19-n,"]GN[226]PB[Black]HA[0]PW[White]KM[7.5]DT[2017-08-01]TM[1800]RU[Chinese]CP[Copyright ghost-go.com]AP[ghost-go.com]PL[Black];"),o=0,i="";return t.forEach((function(t,n){t[0]===i[0]&&("B"===t[0]?(e.splice(n+o,0,"W[tt]"),o+=1):(e.splice(n+o,0,"B[tt]"),o+=1)),i=t})),"".concat(r).concat(e.join(";"),")")},t.convertStoneTypeToString=function(t){return 1===t?"B":"W"},t.cutMoveNodes=function(t,n){for(var e=x.cloneDeep(t);e&&e.hasChildren()&&0===e.model.moveProps.length;)(e=e.children[0]).children=[];if(n)for(;e&&e.parent&&!e.isRoot();)e=e.parent;return e},t.detectST=function(t){var n=t.getPath()[0].model.rootProps.find((function(t){return"ST"===t.token})),e=!1,r=!1,o=!1,i=(null==n?void 0:n.value)||"0";return i&&("0"===i?(o=!1,r=!0,e=!0):"1"===i?(o=!0,r=!1,e=!0):"2"===i?(o=!1,r=!0,e=!1):"3"===i&&(o=!0,r=!1,e=!1)),{showVariationsMarkup:e,showChildrenMarkup:r,showSiblingsMarkup:o}},t.empty=Vt,t.execCapture=ct,t.extractAnswerType=function(t){var n=t.model.customProps.find((function(t){return"PAT"===t.token}));return null==n?void 0:n.value},t.extractBoardSize=rn,t.extractPAI=function(t){var n=t.model.customProps.find((function(t){return"PAI"===t.token}));if(n)return JSON.parse(n.value)},t.extractPI=function(t){var n=t.model.customProps.find((function(t){return"PI"===t.token}));if(n)return JSON.parse(n.value)},t.findProp=en,t.findProps=function(t,n){return N.includes(n)?t.model.moveProps.filter((function(t){return t.token===n})):j.includes(n)?t.model.nodeAnnotationProps.filter((function(t){return t.token===n})):W.includes(n)?t.model.moveAnnotationProps.filter((function(t){return t.token===n})):z.includes(n)?t.model.rootProps.filter((function(t){return t.token===n})):L.includes(n)?t.model.setupProps.filter((function(t){return t.token===n})):D.includes(n)?t.model.markupProps.filter((function(t){return t.token===n})):F.includes(n)?t.model.gameInfoProps.filter((function(t){return t.token===n})):[]},t.genMove=function(t,n,e,r,o){var i,a=function(t){var n=x.compact(t.getPath().map((function(t){var n;return null===(n=t.model.moveProps[0])||void 0===n?void 0:n.toString()}))).join(";");return n},u=function(t){if(!t.hasChildren()){var o=a(t);Pt(t)?n&&n(o):xt(t)?r&&r(o):e&&e(o)}};if(t.hasChildren()){var c=t.children.filter((function(t){return St(t)})),s=t.children.filter((function(t){return Ot(t)})),l=t.children.filter((function(t){return Mt(t)}));i=t,St(t)&&c.length>0?i=x.sample(c):Ot(t)&&s.length>0?i=x.sample(s):Mt(l)&&l.length>0?i=x.sample(l):Pt(t)?n(a(i)):e(a(i)),u(i)}else u(t);return i},t.getDeduplicatedProps=dt,t.getFirstToMoveColorFromRoot=on,t.getFirstToMoveColorFromSgf=function(n,e){void 0===e&&(e=t.Ki.Black);var r=new ht(n);return r.root&&on(r.root,e),console.warn("Default first to move color",e),e},t.getIndexFromAnalysis=function(t){return/indexes/.test(t.id)?JSON.parse(t.id).indexes[0]:""},t.getLastIndex=function(t){var n=t;return t.walk((function(t){return n=t,!0})),n.model.index},t.getMoveColor=an,t.getNodeNumber=Et,t.getRoot=function(t){for(var n=t;n&&n.parent&&!n.isRoot();)n=n.parent;return n},t.handleMove=function(n,e,r,o,i,a){if(o!==t.Ki.Empty)if(lt(n,e,r,o)){var u=R[e]+R[r],c=o===t.Ki.Black?"B":"W",s=It(i,[V.from("".concat(c,"[").concat(u,"]"))]),l=i.children.filter((function(t){return t.model.id===s})),f=void 0;l.length>0?f=l[0]:(f=Ut("".concat(c,"[").concat(u,"]"),i),i.addChild(f)),a&&a(f,!0)}else a&&a(i,!1)},t.inChoicePath=Rt,t.inFirstBranchRightPath=function(n,e,r,o){if(void 0===e&&(e=t.PathDetectionStrategy.Pre),!St(n))return!1;var i=null!=r?r:n.getPath(),a=null!=o?o:n.all((function(){return!0})),u=[];switch(e){case t.PathDetectionStrategy.Post:u=a.filter((function(t){return t.getIndex()>0}));break;case t.PathDetectionStrategy.Pre:u=i.filter((function(t){return t.getIndex()>0}));break;case t.PathDetectionStrategy.Both:u=i.concat(a).filter((function(t){return t.getIndex()>0}))}return 0===u.length},t.inFirstRightPath=function(n,e,r,o){return void 0===e&&(e=t.PathDetectionStrategy.Post),At(n,Ct,e,r,o)},t.inPath=At,t.inRightPath=St,t.inTargetPath=Tt,t.inVariantPath=Mt,t.inWrongPath=Ot,t.initNodeData=Kt,t.initialRootNode=function(t){return void 0===t&&(t=["FF[4]","GM[1]","CA[UTF-8]","AP[ghostgo:0.1.0]","SZ[19]","ST[0]"]),(new v).parse({id:"1b16b1",name:0,index:0,number:0,rootProps:t.map((function(t){return X.from(t)})),moveProps:[],setupProps:[],markupProps:[],gameInfoProps:[],nodeAnnotationProps:[],moveAnnotationProps:[],customProps:[]})},t.isAnswerNode=function(t,n){var e,r=null===(e=t.model.customProps)||void 0===e?void 0:e.find((function(t){return"PAT"===t.token}));return(null==r?void 0:r.value)===n},t.isCharacterInNode=ft,t.isChoiceNode=mt,t.isFirstRightNode=Ct,t.isForceNode=bt,t.isMainPath=function(t){return 0===x.sum(t.getPath().map((function(t){return t.getIndex()})))},t.isMoveNode=gt,t.isPreventMoveNode=wt,t.isRightNode=Pt,t.isRootNode=function(t){return t.model.rootProps.length>0||t.isRoot()},t.isSetupNode=yt,t.isTargetNode=_t,t.isVariantNode=xt,t.isWrongNode=kt,t.matToListOfTuples=function(t,n,e){void 0===n&&(n=0),void 0===e&&(e=0);for(var r=[],o=0;o<t.length;o++)for(var i=0;i<t[o].length;i++){var a=t[o][i];if(0!==a){var u=A[o+n],c=S[i+e],s=1===a?"B":"W";r.push([s,u+c])}}return r},t.matToPosition=function(t,n,e){var r="";n=null!=n?n:0,e=null!=e?e:19-t.length;for(var o=0;o<t.length;o++)for(var i=0;i<t[o].length;i++){var a=t[o][i];if(0!==a){var u=A[o+n],c=S[i+e];r+="".concat(1===a?"b":"w"," ").concat(u).concat(c," ")}}return r},t.move=Qt,t.nFormatter=Bt,t.offsetA1Move=Wt,t.pathToAiMoves=function(t,n,e){return void 0===n&&(n=0),void 0===e&&(e=0),t.filter((function(t){return t.model.moveProps.length>0})).map((function(t){var r=t.model.moveProps[0],o=A[R.indexOf(r.value[0])+n],i=S[R.indexOf(r.value[1])+e];return[r.token,o+i]}))},t.pathToIndexes=function(t){return t.map((function(t){return t.model.id}))},t.pathToInitialStones=function(t,n,e){void 0===n&&(n=0),void 0===e&&(e=0);var r=t.filter((function(t){return t.model.setupProps.length>0})).map((function(t){return t.model.setupProps.map((function(t){return t.values.map((function(r){var o=A[R.indexOf(r[0])+n],i=S[R.indexOf(r[1])+e];return["AB"===t.token?"B":"W",o+i]}))}))}));return x.flattenDepth(r[0],1)},t.posToSgf=function(t,n,e){var r=R[t],o=R[n];return 0===e?"":1===e?"B[".concat(r).concat(o,"]"):-1===e?"W[".concat(r).concat(o,"]"):""},t.reverseOffset=Jt,t.reverseOffsetA1Move=function(t,n,e,r){if(void 0===r&&(r=19),"pass"===t)return t;var o=JSON.parse(e.id),i=Jt(n,o.bx,o.by,r),a=i.x,u=i.y,c=A.indexOf(t[0])+a,s=S.indexOf(parseInt(t.substr(1),0))+u;return"".concat(A[c]).concat(S[s])},t.round2=function(t,n,e){return void 0===n&&(n=1),void 0===e&&(e=2),(Math.round(100*t)/100*n).toFixed(e)},t.round3=vt,t.sgfOffset=jt,t.sgfToA1=function(t){var n=Nt(t),e=n.x,r=n.y;return A[e]+S[r]},t.sgfToPos=Nt,t.showKi=function(t,n,e){void 0===e&&(e=!0);var r=x.cloneDeep(t),o=!1;return n.forEach((function(t){var n=Nt(t),i=n.x,a=n.y,u=n.ki;e?lt(r,i,a,u)&&(r[i][a]=u,r=ct(r,i,a,-u),o=!0):(r[i][a]=u,o=!0)})),{arrangement:r,hasMoved:o}},t.zeros=$t,t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
