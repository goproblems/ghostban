/**
   * @license
   * author: BAI TIANLIANG
   * ghostban.js v3.0.0-alpha.130
   * Released under the MIT license.
   */
var ghostban=function(t){"use strict";function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},e(t,n)};function r(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}var o=function(){return o=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var o in n=arguments[e])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t},o.apply(this,arguments)};function i(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function a(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,i=e.call(t),a=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return a}function u(t,n,e){if(e||2===arguments.length)for(var r,o=0,i=n.length;o<i;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return t.concat(r||Array.prototype.slice.call(n))}function s(t,n){var e=n.length;if(e>=2){var r=n.slice(0,e/2),o=n.slice(e/2,e);return function(t,n,e){var r=[],o=n.length,i=e.length;for(;o>0&&i>0;)t(n[0],e[0])<=0?(r.push(n.shift()),o--):(r.push(e.shift()),i--);o>0?r.push.apply(r,u([],a(n),!1)):r.push.apply(r,u([],a(e),!1));return r}(t,s(t,r),s(t,o))}return n.slice()}"function"==typeof SuppressedError&&SuppressedError;var c=function(){function t(t,n){this.children=[],this.config=t,this.model=n}return t.prototype.isRoot=function(){return void 0===this.parent},t.prototype.hasChildren=function(){return this.children.length>0},t.prototype.addChild=function(t){return l(this,t)},t.prototype.addChildAtIndex=function(t,n){if(this.config.modelComparatorFn)throw new Error("Cannot add child at index when using a comparator function.");var e=this.config.childrenPropertyName||"children";this.model[e]||(this.model[e]=[]);var r=this.model[e];if(n<0||n>this.children.length)throw new Error("Invalid index.");return t.parent=this,r.splice(n,0,t.model),this.children.splice(n,0,t),t},t.prototype.getPath=function(){for(var t=[],n=this;n;)t.unshift(n),n=n.parent;return t},t.prototype.getIndex=function(){return this.isRoot()?0:this.parent.children.indexOf(this)},t.prototype.setIndex=function(t){if(this.config.modelComparatorFn)throw new Error("Cannot set node index when using a comparator function.");if(this.isRoot()){if(0===t)return this;throw new Error("Invalid index.")}if(!this.parent)throw new Error("Node has no parent.");var n=this.parent.children,e=this.parent.model[this.config.childrenPropertyName||"children"],r=n.indexOf(this);if(t<0||t>=n.length)throw new Error("Invalid index.");return n.splice(t,0,n.splice(r,1)[0]),e.splice(t,0,e.splice(r,1)[0]),this},t.prototype.walk=function(t){var n=function(e){var r,o;if(!1===t(e))return!1;try{for(var a=i(e.children),u=a.next();!u.done;u=a.next()){var s=u.value;if(!1===n(s))return!1}}catch(t){r={error:t}}finally{try{u&&!u.done&&(o=a.return)&&o.call(a)}finally{if(r)throw r.error}}return!0};n(this)},t.prototype.first=function(t){var n;return this.walk((function(e){if(t(e))return n=e,!1})),n},t.prototype.all=function(t){var n=[];return this.walk((function(e){t(e)&&n.push(e)})),n},t.prototype.drop=function(){if(this.parent){var t=this.parent.children.indexOf(this);if(t>=0){this.parent.children.splice(t,1);var n=this.config.childrenPropertyName||"children";this.parent.model[n].splice(t,1)}this.parent=void 0}return this},t}();function l(t,n){var e=t.config.childrenPropertyName||"children";t.model[e]||(t.model[e]=[]);var r=t.model[e];if(n.parent=t,t.config.modelComparatorFn){var o=function(t,n,e){var r,o=n.length;for(r=0;r<o&&!(t(n[r],e)>0);r++);return r}(t.config.modelComparatorFn,r,n.model);r.splice(o,0,n.model),t.children.splice(o,0,n)}else r.push(n.model),t.children.push(n);return n}var f=function(){function t(t){void 0===t&&(t={}),this.config={childrenPropertyName:t.childrenPropertyName||"children",modelComparatorFn:t.modelComparatorFn}}return t.prototype.parse=function(t){var n,e;if("object"!=typeof t||null===t)throw new TypeError("Model must be of type object.");var r=new c(this.config,t),o=this.config.childrenPropertyName,a=t[o];if(Array.isArray(a)){this.config.modelComparatorFn&&(t[o]=s(this.config.modelComparatorFn,a));try{for(var u=i(t[o]),f=u.next();!f.done;f=u.next()){var h=f.value;l(r,this.parse(h))}}catch(t){n={error:t}}finally{try{f&&!f.done&&(e=u.return)&&e.call(u)}finally{if(n)throw n.error}}}return r},t}(),h="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},d={exports:{}};!function(t,e){(function(){var r,o="Expected a function",i="__lodash_hash_undefined__",a="__lodash_placeholder__",u=16,s=32,c=64,l=128,f=256,d=1/0,p=9007199254740991,v=NaN,g=4294967295,y=[["ary",l],["bind",1],["bindKey",2],["curry",8],["curryRight",u],["flip",512],["partial",s],["partialRight",c],["rearg",f]],m="[object Arguments]",_="[object Array]",b="[object Boolean]",w="[object Date]",P="[object Error]",C="[object Function]",k="[object GeneratorFunction]",A="[object Map]",x="[object Number]",M="[object Object]",S="[object Promise]",T="[object RegExp]",N="[object Set]",R="[object String]",D="[object Symbol]",O="[object WeakMap]",E="[object ArrayBuffer]",B="[object DataView]",I="[object Float32Array]",W="[object Float64Array]",L="[object Int8Array]",j="[object Int16Array]",z="[object Int32Array]",F="[object Uint8Array]",G="[object Uint8ClampedArray]",U="[object Uint16Array]",K="[object Uint32Array]",q=/\b__p \+= '';/g,$=/\b(__p \+=) '' \+/g,V=/(__e\(.*?\)|\b__t\)) \+\n'';/g,Z=/&(?:amp|lt|gt|quot|#39);/g,H=/[&<>"']/g,Y=RegExp(Z.source),J=RegExp(H.source),X=/<%-([\s\S]+?)%>/g,Q=/<%([\s\S]+?)%>/g,tt=/<%=([\s\S]+?)%>/g,nt=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,et=/^\w*$/,rt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ot=/[\\^$.*+?()[\]{}|]/g,it=RegExp(ot.source),at=/^\s+/,ut=/\s/,st=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,ct=/\{\n\/\* \[wrapped with (.+)\] \*/,lt=/,? & /,ft=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,ht=/[()=,{}\[\]\/\s]/,dt=/\\(\\)?/g,pt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,vt=/\w*$/,gt=/^[-+]0x[0-9a-f]+$/i,yt=/^0b[01]+$/i,mt=/^\[object .+?Constructor\]$/,_t=/^0o[0-7]+$/i,bt=/^(?:0|[1-9]\d*)$/,wt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Pt=/($^)/,Ct=/['\n\r\u2028\u2029\\]/g,kt="\\ud800-\\udfff",At="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",xt="\\u2700-\\u27bf",Mt="a-z\\xdf-\\xf6\\xf8-\\xff",St="A-Z\\xc0-\\xd6\\xd8-\\xde",Tt="\\ufe0e\\ufe0f",Nt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Rt="['’]",Dt="["+kt+"]",Ot="["+Nt+"]",Et="["+At+"]",Bt="\\d+",It="["+xt+"]",Wt="["+Mt+"]",Lt="[^"+kt+Nt+Bt+xt+Mt+St+"]",jt="\\ud83c[\\udffb-\\udfff]",zt="[^"+kt+"]",Ft="(?:\\ud83c[\\udde6-\\uddff]){2}",Gt="[\\ud800-\\udbff][\\udc00-\\udfff]",Ut="["+St+"]",Kt="\\u200d",qt="(?:"+Wt+"|"+Lt+")",$t="(?:"+Ut+"|"+Lt+")",Vt="(?:['’](?:d|ll|m|re|s|t|ve))?",Zt="(?:['’](?:D|LL|M|RE|S|T|VE))?",Ht="(?:"+Et+"|"+jt+")"+"?",Yt="["+Tt+"]?",Jt=Yt+Ht+("(?:"+Kt+"(?:"+[zt,Ft,Gt].join("|")+")"+Yt+Ht+")*"),Xt="(?:"+[It,Ft,Gt].join("|")+")"+Jt,Qt="(?:"+[zt+Et+"?",Et,Ft,Gt,Dt].join("|")+")",tn=RegExp(Rt,"g"),nn=RegExp(Et,"g"),en=RegExp(jt+"(?="+jt+")|"+Qt+Jt,"g"),rn=RegExp([Ut+"?"+Wt+"+"+Vt+"(?="+[Ot,Ut,"$"].join("|")+")",$t+"+"+Zt+"(?="+[Ot,Ut+qt,"$"].join("|")+")",Ut+"?"+qt+"+"+Vt,Ut+"+"+Zt,"\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Bt,Xt].join("|"),"g"),on=RegExp("["+Kt+kt+At+Tt+"]"),an=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,un=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],sn=-1,cn={};cn[I]=cn[W]=cn[L]=cn[j]=cn[z]=cn[F]=cn[G]=cn[U]=cn[K]=!0,cn[m]=cn[_]=cn[E]=cn[b]=cn[B]=cn[w]=cn[P]=cn[C]=cn[A]=cn[x]=cn[M]=cn[T]=cn[N]=cn[R]=cn[O]=!1;var ln={};ln[m]=ln[_]=ln[E]=ln[B]=ln[b]=ln[w]=ln[I]=ln[W]=ln[L]=ln[j]=ln[z]=ln[A]=ln[x]=ln[M]=ln[T]=ln[N]=ln[R]=ln[D]=ln[F]=ln[G]=ln[U]=ln[K]=!0,ln[P]=ln[C]=ln[O]=!1;var fn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},hn=parseFloat,dn=parseInt,pn="object"==n(h)&&h&&h.Object===Object&&h,vn="object"==("undefined"==typeof self?"undefined":n(self))&&self&&self.Object===Object&&self,gn=pn||vn||Function("return this")(),yn=e&&!e.nodeType&&e,mn=yn&&t&&!t.nodeType&&t,_n=mn&&mn.exports===yn,bn=_n&&pn.process,wn=function(){try{var t=mn&&mn.require&&mn.require("util").types;return t||bn&&bn.binding&&bn.binding("util")}catch(t){}}(),Pn=wn&&wn.isArrayBuffer,Cn=wn&&wn.isDate,kn=wn&&wn.isMap,An=wn&&wn.isRegExp,xn=wn&&wn.isSet,Mn=wn&&wn.isTypedArray;function Sn(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}function Tn(t,n,e,r){for(var o=-1,i=null==t?0:t.length;++o<i;){var a=t[o];n(r,a,e(a),t)}return r}function Nn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r&&!1!==n(t[e],e,t););return t}function Rn(t,n){for(var e=null==t?0:t.length;e--&&!1!==n(t[e],e,t););return t}function Dn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(!n(t[e],e,t))return!1;return!0}function On(t,n){for(var e=-1,r=null==t?0:t.length,o=0,i=[];++e<r;){var a=t[e];n(a,e,t)&&(i[o++]=a)}return i}function En(t,n){return!!(null==t?0:t.length)&&Kn(t,n,0)>-1}function Bn(t,n,e){for(var r=-1,o=null==t?0:t.length;++r<o;)if(e(n,t[r]))return!0;return!1}function In(t,n){for(var e=-1,r=null==t?0:t.length,o=Array(r);++e<r;)o[e]=n(t[e],e,t);return o}function Wn(t,n){for(var e=-1,r=n.length,o=t.length;++e<r;)t[o+e]=n[e];return t}function Ln(t,n,e,r){var o=-1,i=null==t?0:t.length;for(r&&i&&(e=t[++o]);++o<i;)e=n(e,t[o],o,t);return e}function jn(t,n,e,r){var o=null==t?0:t.length;for(r&&o&&(e=t[--o]);o--;)e=n(e,t[o],o,t);return e}function zn(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(n(t[e],e,t))return!0;return!1}var Fn=Zn("length");function Gn(t,n,e){var r;return e(t,(function(t,e,o){if(n(t,e,o))return r=e,!1})),r}function Un(t,n,e,r){for(var o=t.length,i=e+(r?1:-1);r?i--:++i<o;)if(n(t[i],i,t))return i;return-1}function Kn(t,n,e){return n==n?function(t,n,e){var r=e-1,o=t.length;for(;++r<o;)if(t[r]===n)return r;return-1}(t,n,e):Un(t,$n,e)}function qn(t,n,e,r){for(var o=e-1,i=t.length;++o<i;)if(r(t[o],n))return o;return-1}function $n(t){return t!=t}function Vn(t,n){var e=null==t?0:t.length;return e?Jn(t,n)/e:v}function Zn(t){return function(n){return null==n?r:n[t]}}function Hn(t){return function(n){return null==t?r:t[n]}}function Yn(t,n,e,r,o){return o(t,(function(t,o,i){e=r?(r=!1,t):n(e,t,o,i)})),e}function Jn(t,n){for(var e,o=-1,i=t.length;++o<i;){var a=n(t[o]);a!==r&&(e=e===r?a:e+a)}return e}function Xn(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}function Qn(t){return t?t.slice(0,ge(t)+1).replace(at,""):t}function te(t){return function(n){return t(n)}}function ne(t,n){return In(n,(function(n){return t[n]}))}function ee(t,n){return t.has(n)}function re(t,n){for(var e=-1,r=t.length;++e<r&&Kn(n,t[e],0)>-1;);return e}function oe(t,n){for(var e=t.length;e--&&Kn(n,t[e],0)>-1;);return e}var ie=Hn({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),ae=Hn({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function ue(t){return"\\"+fn[t]}function se(t){return on.test(t)}function ce(t){var n=-1,e=Array(t.size);return t.forEach((function(t,r){e[++n]=[r,t]})),e}function le(t,n){return function(e){return t(n(e))}}function fe(t,n){for(var e=-1,r=t.length,o=0,i=[];++e<r;){var u=t[e];u!==n&&u!==a||(t[e]=a,i[o++]=e)}return i}function he(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=t})),e}function de(t){var n=-1,e=Array(t.size);return t.forEach((function(t){e[++n]=[t,t]})),e}function pe(t){return se(t)?function(t){var n=en.lastIndex=0;for(;en.test(t);)++n;return n}(t):Fn(t)}function ve(t){return se(t)?function(t){return t.match(en)||[]}(t):function(t){return t.split("")}(t)}function ge(t){for(var n=t.length;n--&&ut.test(t.charAt(n)););return n}var ye=Hn({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var me=function t(e){var h,ut=(e=null==e?gn:me.defaults(gn.Object(),e,me.pick(gn,un))).Array,kt=e.Date,At=e.Error,xt=e.Function,Mt=e.Math,St=e.Object,Tt=e.RegExp,Nt=e.String,Rt=e.TypeError,Dt=ut.prototype,Ot=xt.prototype,Et=St.prototype,Bt=e["__core-js_shared__"],It=Ot.toString,Wt=Et.hasOwnProperty,Lt=0,jt=(h=/[^.]+$/.exec(Bt&&Bt.keys&&Bt.keys.IE_PROTO||""))?"Symbol(src)_1."+h:"",zt=Et.toString,Ft=It.call(St),Gt=gn._,Ut=Tt("^"+It.call(Wt).replace(ot,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Kt=_n?e.Buffer:r,qt=e.Symbol,$t=e.Uint8Array,Vt=Kt?Kt.allocUnsafe:r,Zt=le(St.getPrototypeOf,St),Ht=St.create,Yt=Et.propertyIsEnumerable,Jt=Dt.splice,Xt=qt?qt.isConcatSpreadable:r,Qt=qt?qt.iterator:r,en=qt?qt.toStringTag:r,on=function(){try{var t=pi(St,"defineProperty");return t({},"",{}),t}catch(t){}}(),fn=e.clearTimeout!==gn.clearTimeout&&e.clearTimeout,pn=kt&&kt.now!==gn.Date.now&&kt.now,vn=e.setTimeout!==gn.setTimeout&&e.setTimeout,yn=Mt.ceil,mn=Mt.floor,bn=St.getOwnPropertySymbols,wn=Kt?Kt.isBuffer:r,Fn=e.isFinite,Hn=Dt.join,_e=le(St.keys,St),be=Mt.max,we=Mt.min,Pe=kt.now,Ce=e.parseInt,ke=Mt.random,Ae=Dt.reverse,xe=pi(e,"DataView"),Me=pi(e,"Map"),Se=pi(e,"Promise"),Te=pi(e,"Set"),Ne=pi(e,"WeakMap"),Re=pi(St,"create"),De=Ne&&new Ne,Oe={},Ee=zi(xe),Be=zi(Me),Ie=zi(Se),We=zi(Te),Le=zi(Ne),je=qt?qt.prototype:r,ze=je?je.valueOf:r,Fe=je?je.toString:r;function Ge(t){if(ru(t)&&!$a(t)&&!(t instanceof $e)){if(t instanceof qe)return t;if(Wt.call(t,"__wrapped__"))return Fi(t)}return new qe(t)}var Ue=function(){function t(){}return function(n){if(!eu(n))return{};if(Ht)return Ht(n);t.prototype=n;var e=new t;return t.prototype=r,e}}();function Ke(){}function qe(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=r}function $e(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=g,this.__views__=[]}function Ve(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Ze(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function He(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}function Ye(t){var n=-1,e=null==t?0:t.length;for(this.__data__=new He;++n<e;)this.add(t[n])}function Je(t){var n=this.__data__=new Ze(t);this.size=n.size}function Xe(t,n){var e=$a(t),r=!e&&qa(t),o=!e&&!r&&Ya(t),i=!e&&!r&&!o&&fu(t),a=e||r||o||i,u=a?Xn(t.length,Nt):[],s=u.length;for(var c in t)!n&&!Wt.call(t,c)||a&&("length"==c||o&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||wi(c,s))||u.push(c);return u}function Qe(t){var n=t.length;return n?t[Yr(0,n-1)]:r}function tr(t,n){return Wi(Do(t),cr(n,0,t.length))}function nr(t){return Wi(Do(t))}function er(t,n,e){(e!==r&&!Ga(t[n],e)||e===r&&!(n in t))&&ur(t,n,e)}function rr(t,n,e){var o=t[n];Wt.call(t,n)&&Ga(o,e)&&(e!==r||n in t)||ur(t,n,e)}function or(t,n){for(var e=t.length;e--;)if(Ga(t[e][0],n))return e;return-1}function ir(t,n,e,r){return pr(t,(function(t,o,i){n(r,t,e(t),i)})),r}function ar(t,n){return t&&Oo(n,Ou(n),t)}function ur(t,n,e){"__proto__"==n&&on?on(t,n,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[n]=e}function sr(t,n){for(var e=-1,o=n.length,i=ut(o),a=null==t;++e<o;)i[e]=a?r:Su(t,n[e]);return i}function cr(t,n,e){return t==t&&(e!==r&&(t=t<=e?t:e),n!==r&&(t=t>=n?t:n)),t}function lr(t,n,e,o,i,a){var u,s=1&n,c=2&n,l=4&n;if(e&&(u=i?e(t,o,i,a):e(t)),u!==r)return u;if(!eu(t))return t;var f=$a(t);if(f){if(u=function(t){var n=t.length,e=new t.constructor(n);n&&"string"==typeof t[0]&&Wt.call(t,"index")&&(e.index=t.index,e.input=t.input);return e}(t),!s)return Do(t,u)}else{var h=yi(t),d=h==C||h==k;if(Ya(t))return xo(t,s);if(h==M||h==m||d&&!i){if(u=c||d?{}:_i(t),!s)return c?function(t,n){return Oo(t,gi(t),n)}(t,function(t,n){return t&&Oo(n,Eu(n),t)}(u,t)):function(t,n){return Oo(t,vi(t),n)}(t,ar(u,t))}else{if(!ln[h])return i?t:{};u=function(t,n,e){var r=t.constructor;switch(n){case E:return Mo(t);case b:case w:return new r(+t);case B:return function(t,n){var e=n?Mo(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}(t,e);case I:case W:case L:case j:case z:case F:case G:case U:case K:return So(t,e);case A:return new r;case x:case R:return new r(t);case T:return function(t){var n=new t.constructor(t.source,vt.exec(t));return n.lastIndex=t.lastIndex,n}(t);case N:return new r;case D:return o=t,ze?St(ze.call(o)):{}}var o}(t,h,s)}}a||(a=new Je);var p=a.get(t);if(p)return p;a.set(t,u),su(t)?t.forEach((function(r){u.add(lr(r,n,e,r,t,a))})):ou(t)&&t.forEach((function(r,o){u.set(o,lr(r,n,e,o,t,a))}));var v=f?r:(l?c?ui:ai:c?Eu:Ou)(t);return Nn(v||t,(function(r,o){v&&(r=t[o=r]),rr(u,o,lr(r,n,e,o,t,a))})),u}function fr(t,n,e){var o=e.length;if(null==t)return!o;for(t=St(t);o--;){var i=e[o],a=n[i],u=t[i];if(u===r&&!(i in t)||!a(u))return!1}return!0}function hr(t,n,e){if("function"!=typeof t)throw new Rt(o);return Oi((function(){t.apply(r,e)}),n)}function dr(t,n,e,r){var o=-1,i=En,a=!0,u=t.length,s=[],c=n.length;if(!u)return s;e&&(n=In(n,te(e))),r?(i=Bn,a=!1):n.length>=200&&(i=ee,a=!1,n=new Ye(n));t:for(;++o<u;){var l=t[o],f=null==e?l:e(l);if(l=r||0!==l?l:0,a&&f==f){for(var h=c;h--;)if(n[h]===f)continue t;s.push(l)}else i(n,f,r)||s.push(l)}return s}Ge.templateSettings={escape:X,evaluate:Q,interpolate:tt,variable:"",imports:{_:Ge}},Ge.prototype=Ke.prototype,Ge.prototype.constructor=Ge,qe.prototype=Ue(Ke.prototype),qe.prototype.constructor=qe,$e.prototype=Ue(Ke.prototype),$e.prototype.constructor=$e,Ve.prototype.clear=function(){this.__data__=Re?Re(null):{},this.size=0},Ve.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},Ve.prototype.get=function(t){var n=this.__data__;if(Re){var e=n[t];return e===i?r:e}return Wt.call(n,t)?n[t]:r},Ve.prototype.has=function(t){var n=this.__data__;return Re?n[t]!==r:Wt.call(n,t)},Ve.prototype.set=function(t,n){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=Re&&n===r?i:n,this},Ze.prototype.clear=function(){this.__data__=[],this.size=0},Ze.prototype.delete=function(t){var n=this.__data__,e=or(n,t);return!(e<0)&&(e==n.length-1?n.pop():Jt.call(n,e,1),--this.size,!0)},Ze.prototype.get=function(t){var n=this.__data__,e=or(n,t);return e<0?r:n[e][1]},Ze.prototype.has=function(t){return or(this.__data__,t)>-1},Ze.prototype.set=function(t,n){var e=this.__data__,r=or(e,t);return r<0?(++this.size,e.push([t,n])):e[r][1]=n,this},He.prototype.clear=function(){this.size=0,this.__data__={hash:new Ve,map:new(Me||Ze),string:new Ve}},He.prototype.delete=function(t){var n=hi(this,t).delete(t);return this.size-=n?1:0,n},He.prototype.get=function(t){return hi(this,t).get(t)},He.prototype.has=function(t){return hi(this,t).has(t)},He.prototype.set=function(t,n){var e=hi(this,t),r=e.size;return e.set(t,n),this.size+=e.size==r?0:1,this},Ye.prototype.add=Ye.prototype.push=function(t){return this.__data__.set(t,i),this},Ye.prototype.has=function(t){return this.__data__.has(t)},Je.prototype.clear=function(){this.__data__=new Ze,this.size=0},Je.prototype.delete=function(t){var n=this.__data__,e=n.delete(t);return this.size=n.size,e},Je.prototype.get=function(t){return this.__data__.get(t)},Je.prototype.has=function(t){return this.__data__.has(t)},Je.prototype.set=function(t,n){var e=this.__data__;if(e instanceof Ze){var r=e.__data__;if(!Me||r.length<199)return r.push([t,n]),this.size=++e.size,this;e=this.__data__=new He(r)}return e.set(t,n),this.size=e.size,this};var pr=Io(Pr),vr=Io(Cr,!0);function gr(t,n){var e=!0;return pr(t,(function(t,r,o){return e=!!n(t,r,o)})),e}function yr(t,n,e){for(var o=-1,i=t.length;++o<i;){var a=t[o],u=n(a);if(null!=u&&(s===r?u==u&&!lu(u):e(u,s)))var s=u,c=a}return c}function mr(t,n){var e=[];return pr(t,(function(t,r,o){n(t,r,o)&&e.push(t)})),e}function _r(t,n,e,r,o){var i=-1,a=t.length;for(e||(e=bi),o||(o=[]);++i<a;){var u=t[i];n>0&&e(u)?n>1?_r(u,n-1,e,r,o):Wn(o,u):r||(o[o.length]=u)}return o}var br=Wo(),wr=Wo(!0);function Pr(t,n){return t&&br(t,n,Ou)}function Cr(t,n){return t&&wr(t,n,Ou)}function kr(t,n){return On(n,(function(n){return Qa(t[n])}))}function Ar(t,n){for(var e=0,o=(n=Po(n,t)).length;null!=t&&e<o;)t=t[ji(n[e++])];return e&&e==o?t:r}function xr(t,n,e){var r=n(t);return $a(t)?r:Wn(r,e(t))}function Mr(t){return null==t?t===r?"[object Undefined]":"[object Null]":en&&en in St(t)?function(t){var n=Wt.call(t,en),e=t[en];try{t[en]=r;var o=!0}catch(t){}var i=zt.call(t);o&&(n?t[en]=e:delete t[en]);return i}(t):function(t){return zt.call(t)}(t)}function Sr(t,n){return t>n}function Tr(t,n){return null!=t&&Wt.call(t,n)}function Nr(t,n){return null!=t&&n in St(t)}function Rr(t,n,e){for(var o=e?Bn:En,i=t[0].length,a=t.length,u=a,s=ut(a),c=1/0,l=[];u--;){var f=t[u];u&&n&&(f=In(f,te(n))),c=we(f.length,c),s[u]=!e&&(n||i>=120&&f.length>=120)?new Ye(u&&f):r}f=t[0];var h=-1,d=s[0];t:for(;++h<i&&l.length<c;){var p=f[h],v=n?n(p):p;if(p=e||0!==p?p:0,!(d?ee(d,v):o(l,v,e))){for(u=a;--u;){var g=s[u];if(!(g?ee(g,v):o(t[u],v,e)))continue t}d&&d.push(v),l.push(p)}}return l}function Dr(t,n,e){var o=null==(t=Ni(t,n=Po(n,t)))?t:t[ji(Xi(n))];return null==o?r:Sn(o,t,e)}function Or(t){return ru(t)&&Mr(t)==m}function Er(t,n,e,o,i){return t===n||(null==t||null==n||!ru(t)&&!ru(n)?t!=t&&n!=n:function(t,n,e,o,i,a){var u=$a(t),s=$a(n),c=u?_:yi(t),l=s?_:yi(n),f=(c=c==m?M:c)==M,h=(l=l==m?M:l)==M,d=c==l;if(d&&Ya(t)){if(!Ya(n))return!1;u=!0,f=!1}if(d&&!f)return a||(a=new Je),u||fu(t)?oi(t,n,e,o,i,a):function(t,n,e,r,o,i,a){switch(e){case B:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case E:return!(t.byteLength!=n.byteLength||!i(new $t(t),new $t(n)));case b:case w:case x:return Ga(+t,+n);case P:return t.name==n.name&&t.message==n.message;case T:case R:return t==n+"";case A:var u=ce;case N:var s=1&r;if(u||(u=he),t.size!=n.size&&!s)return!1;var c=a.get(t);if(c)return c==n;r|=2,a.set(t,n);var l=oi(u(t),u(n),r,o,i,a);return a.delete(t),l;case D:if(ze)return ze.call(t)==ze.call(n)}return!1}(t,n,c,e,o,i,a);if(!(1&e)){var p=f&&Wt.call(t,"__wrapped__"),v=h&&Wt.call(n,"__wrapped__");if(p||v){var g=p?t.value():t,y=v?n.value():n;return a||(a=new Je),i(g,y,e,o,a)}}if(!d)return!1;return a||(a=new Je),function(t,n,e,o,i,a){var u=1&e,s=ai(t),c=s.length,l=ai(n),f=l.length;if(c!=f&&!u)return!1;var h=c;for(;h--;){var d=s[h];if(!(u?d in n:Wt.call(n,d)))return!1}var p=a.get(t),v=a.get(n);if(p&&v)return p==n&&v==t;var g=!0;a.set(t,n),a.set(n,t);var y=u;for(;++h<c;){var m=t[d=s[h]],_=n[d];if(o)var b=u?o(_,m,d,n,t,a):o(m,_,d,t,n,a);if(!(b===r?m===_||i(m,_,e,o,a):b)){g=!1;break}y||(y="constructor"==d)}if(g&&!y){var w=t.constructor,P=n.constructor;w==P||!("constructor"in t)||!("constructor"in n)||"function"==typeof w&&w instanceof w&&"function"==typeof P&&P instanceof P||(g=!1)}return a.delete(t),a.delete(n),g}(t,n,e,o,i,a)}(t,n,e,o,Er,i))}function Br(t,n,e,o){var i=e.length,a=i,u=!o;if(null==t)return!a;for(t=St(t);i--;){var s=e[i];if(u&&s[2]?s[1]!==t[s[0]]:!(s[0]in t))return!1}for(;++i<a;){var c=(s=e[i])[0],l=t[c],f=s[1];if(u&&s[2]){if(l===r&&!(c in t))return!1}else{var h=new Je;if(o)var d=o(l,f,c,t,n,h);if(!(d===r?Er(f,l,3,o,h):d))return!1}}return!0}function Ir(t){return!(!eu(t)||(n=t,jt&&jt in n))&&(Qa(t)?Ut:mt).test(zi(t));var n}function Wr(t){return"function"==typeof t?t:null==t?is:"object"==n(t)?$a(t)?Ur(t[0],t[1]):Gr(t):ps(t)}function Lr(t){if(!xi(t))return _e(t);var n=[];for(var e in St(t))Wt.call(t,e)&&"constructor"!=e&&n.push(e);return n}function jr(t){if(!eu(t))return function(t){var n=[];if(null!=t)for(var e in St(t))n.push(e);return n}(t);var n=xi(t),e=[];for(var r in t)("constructor"!=r||!n&&Wt.call(t,r))&&e.push(r);return e}function zr(t,n){return t<n}function Fr(t,n){var e=-1,r=Za(t)?ut(t.length):[];return pr(t,(function(t,o,i){r[++e]=n(t,o,i)})),r}function Gr(t){var n=di(t);return 1==n.length&&n[0][2]?Si(n[0][0],n[0][1]):function(e){return e===t||Br(e,t,n)}}function Ur(t,n){return Ci(t)&&Mi(n)?Si(ji(t),n):function(e){var o=Su(e,t);return o===r&&o===n?Tu(e,t):Er(n,o,3)}}function Kr(t,n,e,o,i){t!==n&&br(n,(function(a,u){if(i||(i=new Je),eu(a))!function(t,n,e,o,i,a,u){var s=Ri(t,e),c=Ri(n,e),l=u.get(c);if(l)return void er(t,e,l);var f=a?a(s,c,e+"",t,n,u):r,h=f===r;if(h){var d=$a(c),p=!d&&Ya(c),v=!d&&!p&&fu(c);f=c,d||p||v?$a(s)?f=s:Ha(s)?f=Do(s):p?(h=!1,f=xo(c,!0)):v?(h=!1,f=So(c,!0)):f=[]:au(c)||qa(c)?(f=s,qa(s)?f=_u(s):eu(s)&&!Qa(s)||(f=_i(c))):h=!1}h&&(u.set(c,f),i(f,c,o,a,u),u.delete(c));er(t,e,f)}(t,n,u,e,Kr,o,i);else{var s=o?o(Ri(t,u),a,u+"",t,n,i):r;s===r&&(s=a),er(t,u,s)}}),Eu)}function qr(t,n){var e=t.length;if(e)return wi(n+=n<0?e:0,e)?t[n]:r}function $r(t,n,e){n=n.length?In(n,(function(t){return $a(t)?function(n){return Ar(n,1===t.length?t[0]:t)}:t})):[is];var r=-1;n=In(n,te(fi()));var o=Fr(t,(function(t,e,o){var i=In(n,(function(n){return n(t)}));return{criteria:i,index:++r,value:t}}));return function(t,n){var e=t.length;for(t.sort(n);e--;)t[e]=t[e].value;return t}(o,(function(t,n){return function(t,n,e){var r=-1,o=t.criteria,i=n.criteria,a=o.length,u=e.length;for(;++r<a;){var s=To(o[r],i[r]);if(s)return r>=u?s:s*("desc"==e[r]?-1:1)}return t.index-n.index}(t,n,e)}))}function Vr(t,n,e){for(var r=-1,o=n.length,i={};++r<o;){var a=n[r],u=Ar(t,a);e(u,a)&&no(i,Po(a,t),u)}return i}function Zr(t,n,e,r){var o=r?qn:Kn,i=-1,a=n.length,u=t;for(t===n&&(n=Do(n)),e&&(u=In(t,te(e)));++i<a;)for(var s=0,c=n[i],l=e?e(c):c;(s=o(u,l,s,r))>-1;)u!==t&&Jt.call(u,s,1),Jt.call(t,s,1);return t}function Hr(t,n){for(var e=t?n.length:0,r=e-1;e--;){var o=n[e];if(e==r||o!==i){var i=o;wi(o)?Jt.call(t,o,1):po(t,o)}}return t}function Yr(t,n){return t+mn(ke()*(n-t+1))}function Jr(t,n){var e="";if(!t||n<1||n>p)return e;do{n%2&&(e+=t),(n=mn(n/2))&&(t+=t)}while(n);return e}function Xr(t,n){return Ei(Ti(t,n,is),t+"")}function Qr(t){return Qe(Gu(t))}function to(t,n){var e=Gu(t);return Wi(e,cr(n,0,e.length))}function no(t,n,e,o){if(!eu(t))return t;for(var i=-1,a=(n=Po(n,t)).length,u=a-1,s=t;null!=s&&++i<a;){var c=ji(n[i]),l=e;if("__proto__"===c||"constructor"===c||"prototype"===c)return t;if(i!=u){var f=s[c];(l=o?o(f,c,s):r)===r&&(l=eu(f)?f:wi(n[i+1])?[]:{})}rr(s,c,l),s=s[c]}return t}var eo=De?function(t,n){return De.set(t,n),t}:is,ro=on?function(t,n){return on(t,"toString",{configurable:!0,enumerable:!1,value:es(n),writable:!0})}:is;function oo(t){return Wi(Gu(t))}function io(t,n,e){var r=-1,o=t.length;n<0&&(n=-n>o?0:o+n),(e=e>o?o:e)<0&&(e+=o),o=n>e?0:e-n>>>0,n>>>=0;for(var i=ut(o);++r<o;)i[r]=t[r+n];return i}function ao(t,n){var e;return pr(t,(function(t,r,o){return!(e=n(t,r,o))})),!!e}function uo(t,n,e){var r=0,o=null==t?r:t.length;if("number"==typeof n&&n==n&&o<=2147483647){for(;r<o;){var i=r+o>>>1,a=t[i];null!==a&&!lu(a)&&(e?a<=n:a<n)?r=i+1:o=i}return o}return so(t,n,is,e)}function so(t,n,e,o){var i=0,a=null==t?0:t.length;if(0===a)return 0;for(var u=(n=e(n))!=n,s=null===n,c=lu(n),l=n===r;i<a;){var f=mn((i+a)/2),h=e(t[f]),d=h!==r,p=null===h,v=h==h,g=lu(h);if(u)var y=o||v;else y=l?v&&(o||d):s?v&&d&&(o||!p):c?v&&d&&!p&&(o||!g):!p&&!g&&(o?h<=n:h<n);y?i=f+1:a=f}return we(a,4294967294)}function co(t,n){for(var e=-1,r=t.length,o=0,i=[];++e<r;){var a=t[e],u=n?n(a):a;if(!e||!Ga(u,s)){var s=u;i[o++]=0===a?0:a}}return i}function lo(t){return"number"==typeof t?t:lu(t)?v:+t}function fo(t){if("string"==typeof t)return t;if($a(t))return In(t,fo)+"";if(lu(t))return Fe?Fe.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function ho(t,n,e){var r=-1,o=En,i=t.length,a=!0,u=[],s=u;if(e)a=!1,o=Bn;else if(i>=200){var c=n?null:Xo(t);if(c)return he(c);a=!1,o=ee,s=new Ye}else s=n?[]:u;t:for(;++r<i;){var l=t[r],f=n?n(l):l;if(l=e||0!==l?l:0,a&&f==f){for(var h=s.length;h--;)if(s[h]===f)continue t;n&&s.push(f),u.push(l)}else o(s,f,e)||(s!==u&&s.push(f),u.push(l))}return u}function po(t,n){return null==(t=Ni(t,n=Po(n,t)))||delete t[ji(Xi(n))]}function vo(t,n,e,r){return no(t,n,e(Ar(t,n)),r)}function go(t,n,e,r){for(var o=t.length,i=r?o:-1;(r?i--:++i<o)&&n(t[i],i,t););return e?io(t,r?0:i,r?i+1:o):io(t,r?i+1:0,r?o:i)}function yo(t,n){var e=t;return e instanceof $e&&(e=e.value()),Ln(n,(function(t,n){return n.func.apply(n.thisArg,Wn([t],n.args))}),e)}function mo(t,n,e){var r=t.length;if(r<2)return r?ho(t[0]):[];for(var o=-1,i=ut(r);++o<r;)for(var a=t[o],u=-1;++u<r;)u!=o&&(i[o]=dr(i[o]||a,t[u],n,e));return ho(_r(i,1),n,e)}function _o(t,n,e){for(var o=-1,i=t.length,a=n.length,u={};++o<i;){var s=o<a?n[o]:r;e(u,t[o],s)}return u}function bo(t){return Ha(t)?t:[]}function wo(t){return"function"==typeof t?t:is}function Po(t,n){return $a(t)?t:Ci(t,n)?[t]:Li(bu(t))}var Co=Xr;function ko(t,n,e){var o=t.length;return e=e===r?o:e,!n&&e>=o?t:io(t,n,e)}var Ao=fn||function(t){return gn.clearTimeout(t)};function xo(t,n){if(n)return t.slice();var e=t.length,r=Vt?Vt(e):new t.constructor(e);return t.copy(r),r}function Mo(t){var n=new t.constructor(t.byteLength);return new $t(n).set(new $t(t)),n}function So(t,n){var e=n?Mo(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}function To(t,n){if(t!==n){var e=t!==r,o=null===t,i=t==t,a=lu(t),u=n!==r,s=null===n,c=n==n,l=lu(n);if(!s&&!l&&!a&&t>n||a&&u&&c&&!s&&!l||o&&u&&c||!e&&c||!i)return 1;if(!o&&!a&&!l&&t<n||l&&e&&i&&!o&&!a||s&&e&&i||!u&&i||!c)return-1}return 0}function No(t,n,e,r){for(var o=-1,i=t.length,a=e.length,u=-1,s=n.length,c=be(i-a,0),l=ut(s+c),f=!r;++u<s;)l[u]=n[u];for(;++o<a;)(f||o<i)&&(l[e[o]]=t[o]);for(;c--;)l[u++]=t[o++];return l}function Ro(t,n,e,r){for(var o=-1,i=t.length,a=-1,u=e.length,s=-1,c=n.length,l=be(i-u,0),f=ut(l+c),h=!r;++o<l;)f[o]=t[o];for(var d=o;++s<c;)f[d+s]=n[s];for(;++a<u;)(h||o<i)&&(f[d+e[a]]=t[o++]);return f}function Do(t,n){var e=-1,r=t.length;for(n||(n=ut(r));++e<r;)n[e]=t[e];return n}function Oo(t,n,e,o){var i=!e;e||(e={});for(var a=-1,u=n.length;++a<u;){var s=n[a],c=o?o(e[s],t[s],s,e,t):r;c===r&&(c=t[s]),i?ur(e,s,c):rr(e,s,c)}return e}function Eo(t,n){return function(e,r){var o=$a(e)?Tn:ir,i=n?n():{};return o(e,t,fi(r,2),i)}}function Bo(t){return Xr((function(n,e){var o=-1,i=e.length,a=i>1?e[i-1]:r,u=i>2?e[2]:r;for(a=t.length>3&&"function"==typeof a?(i--,a):r,u&&Pi(e[0],e[1],u)&&(a=i<3?r:a,i=1),n=St(n);++o<i;){var s=e[o];s&&t(n,s,o,a)}return n}))}function Io(t,n){return function(e,r){if(null==e)return e;if(!Za(e))return t(e,r);for(var o=e.length,i=n?o:-1,a=St(e);(n?i--:++i<o)&&!1!==r(a[i],i,a););return e}}function Wo(t){return function(n,e,r){for(var o=-1,i=St(n),a=r(n),u=a.length;u--;){var s=a[t?u:++o];if(!1===e(i[s],s,i))break}return n}}function Lo(t){return function(n){var e=se(n=bu(n))?ve(n):r,o=e?e[0]:n.charAt(0),i=e?ko(e,1).join(""):n.slice(1);return o[t]()+i}}function jo(t){return function(n){return Ln(Qu(qu(n).replace(tn,"")),t,"")}}function zo(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var e=Ue(t.prototype),r=t.apply(e,n);return eu(r)?r:e}}function Fo(t){return function(n,e,o){var i=St(n);if(!Za(n)){var a=fi(e,3);n=Ou(n),e=function(t){return a(i[t],t,i)}}var u=t(n,e,o);return u>-1?i[a?n[u]:u]:r}}function Go(t){return ii((function(n){var e=n.length,i=e,a=qe.prototype.thru;for(t&&n.reverse();i--;){var u=n[i];if("function"!=typeof u)throw new Rt(o);if(a&&!s&&"wrapper"==ci(u))var s=new qe([],!0)}for(i=s?i:e;++i<e;){var c=ci(u=n[i]),l="wrapper"==c?si(u):r;s=l&&ki(l[0])&&424==l[1]&&!l[4].length&&1==l[9]?s[ci(l[0])].apply(s,l[3]):1==u.length&&ki(u)?s[c]():s.thru(u)}return function(){var t=arguments,r=t[0];if(s&&1==t.length&&$a(r))return s.plant(r).value();for(var o=0,i=e?n[o].apply(this,t):r;++o<e;)i=n[o].call(this,i);return i}}))}function Uo(t,n,e,o,i,a,u,s,c,f){var h=n&l,d=1&n,p=2&n,v=24&n,g=512&n,y=p?r:zo(t);return function l(){for(var m=arguments.length,_=ut(m),b=m;b--;)_[b]=arguments[b];if(v)var w=li(l),P=function(t,n){for(var e=t.length,r=0;e--;)t[e]===n&&++r;return r}(_,w);if(o&&(_=No(_,o,i,v)),a&&(_=Ro(_,a,u,v)),m-=P,v&&m<f){var C=fe(_,w);return Yo(t,n,Uo,l.placeholder,e,_,C,s,c,f-m)}var k=d?e:this,A=p?k[t]:t;return m=_.length,s?_=function(t,n){var e=t.length,o=we(n.length,e),i=Do(t);for(;o--;){var a=n[o];t[o]=wi(a,e)?i[a]:r}return t}(_,s):g&&m>1&&_.reverse(),h&&c<m&&(_.length=c),this&&this!==gn&&this instanceof l&&(A=y||zo(A)),A.apply(k,_)}}function Ko(t,n){return function(e,r){return function(t,n,e,r){return Pr(t,(function(t,o,i){n(r,e(t),o,i)})),r}(e,t,n(r),{})}}function qo(t,n){return function(e,o){var i;if(e===r&&o===r)return n;if(e!==r&&(i=e),o!==r){if(i===r)return o;"string"==typeof e||"string"==typeof o?(e=fo(e),o=fo(o)):(e=lo(e),o=lo(o)),i=t(e,o)}return i}}function $o(t){return ii((function(n){return n=In(n,te(fi())),Xr((function(e){var r=this;return t(n,(function(t){return Sn(t,r,e)}))}))}))}function Vo(t,n){var e=(n=n===r?" ":fo(n)).length;if(e<2)return e?Jr(n,t):n;var o=Jr(n,yn(t/pe(n)));return se(n)?ko(ve(o),0,t).join(""):o.slice(0,t)}function Zo(t){return function(n,e,o){return o&&"number"!=typeof o&&Pi(n,e,o)&&(e=o=r),n=vu(n),e===r?(e=n,n=0):e=vu(e),function(t,n,e,r){for(var o=-1,i=be(yn((n-t)/(e||1)),0),a=ut(i);i--;)a[r?i:++o]=t,t+=e;return a}(n,e,o=o===r?n<e?1:-1:vu(o),t)}}function Ho(t){return function(n,e){return"string"==typeof n&&"string"==typeof e||(n=mu(n),e=mu(e)),t(n,e)}}function Yo(t,n,e,o,i,a,u,l,f,h){var d=8&n;n|=d?s:c,4&(n&=~(d?c:s))||(n&=-4);var p=[t,n,i,d?a:r,d?u:r,d?r:a,d?r:u,l,f,h],v=e.apply(r,p);return ki(t)&&Di(v,p),v.placeholder=o,Bi(v,t,n)}function Jo(t){var n=Mt[t];return function(t,e){if(t=mu(t),(e=null==e?0:we(gu(e),292))&&Fn(t)){var r=(bu(t)+"e").split("e");return+((r=(bu(n(r[0]+"e"+(+r[1]+e)))+"e").split("e"))[0]+"e"+(+r[1]-e))}return n(t)}}var Xo=Te&&1/he(new Te([,-0]))[1]==d?function(t){return new Te(t)}:ls;function Qo(t){return function(n){var e=yi(n);return e==A?ce(n):e==N?de(n):function(t,n){return In(n,(function(n){return[n,t[n]]}))}(n,t(n))}}function ti(t,n,e,i,h,d,p,v){var g=2&n;if(!g&&"function"!=typeof t)throw new Rt(o);var y=i?i.length:0;if(y||(n&=-97,i=h=r),p=p===r?p:be(gu(p),0),v=v===r?v:gu(v),y-=h?h.length:0,n&c){var m=i,_=h;i=h=r}var b=g?r:si(t),w=[t,n,e,i,h,m,_,d,p,v];if(b&&function(t,n){var e=t[1],r=n[1],o=e|r,i=o<131,u=r==l&&8==e||r==l&&e==f&&t[7].length<=n[8]||384==r&&n[7].length<=n[8]&&8==e;if(!i&&!u)return t;1&r&&(t[2]=n[2],o|=1&e?0:4);var s=n[3];if(s){var c=t[3];t[3]=c?No(c,s,n[4]):s,t[4]=c?fe(t[3],a):n[4]}(s=n[5])&&(c=t[5],t[5]=c?Ro(c,s,n[6]):s,t[6]=c?fe(t[5],a):n[6]);(s=n[7])&&(t[7]=s);r&l&&(t[8]=null==t[8]?n[8]:we(t[8],n[8]));null==t[9]&&(t[9]=n[9]);t[0]=n[0],t[1]=o}(w,b),t=w[0],n=w[1],e=w[2],i=w[3],h=w[4],!(v=w[9]=w[9]===r?g?0:t.length:be(w[9]-y,0))&&24&n&&(n&=-25),n&&1!=n)P=8==n||n==u?function(t,n,e){var o=zo(t);return function i(){for(var a=arguments.length,u=ut(a),s=a,c=li(i);s--;)u[s]=arguments[s];var l=a<3&&u[0]!==c&&u[a-1]!==c?[]:fe(u,c);return(a-=l.length)<e?Yo(t,n,Uo,i.placeholder,r,u,l,r,r,e-a):Sn(this&&this!==gn&&this instanceof i?o:t,this,u)}}(t,n,v):n!=s&&33!=n||h.length?Uo.apply(r,w):function(t,n,e,r){var o=1&n,i=zo(t);return function n(){for(var a=-1,u=arguments.length,s=-1,c=r.length,l=ut(c+u),f=this&&this!==gn&&this instanceof n?i:t;++s<c;)l[s]=r[s];for(;u--;)l[s++]=arguments[++a];return Sn(f,o?e:this,l)}}(t,n,e,i);else var P=function(t,n,e){var r=1&n,o=zo(t);return function n(){return(this&&this!==gn&&this instanceof n?o:t).apply(r?e:this,arguments)}}(t,n,e);return Bi((b?eo:Di)(P,w),t,n)}function ni(t,n,e,o){return t===r||Ga(t,Et[e])&&!Wt.call(o,e)?n:t}function ei(t,n,e,o,i,a){return eu(t)&&eu(n)&&(a.set(n,t),Kr(t,n,r,ei,a),a.delete(n)),t}function ri(t){return au(t)?r:t}function oi(t,n,e,o,i,a){var u=1&e,s=t.length,c=n.length;if(s!=c&&!(u&&c>s))return!1;var l=a.get(t),f=a.get(n);if(l&&f)return l==n&&f==t;var h=-1,d=!0,p=2&e?new Ye:r;for(a.set(t,n),a.set(n,t);++h<s;){var v=t[h],g=n[h];if(o)var y=u?o(g,v,h,n,t,a):o(v,g,h,t,n,a);if(y!==r){if(y)continue;d=!1;break}if(p){if(!zn(n,(function(t,n){if(!ee(p,n)&&(v===t||i(v,t,e,o,a)))return p.push(n)}))){d=!1;break}}else if(v!==g&&!i(v,g,e,o,a)){d=!1;break}}return a.delete(t),a.delete(n),d}function ii(t){return Ei(Ti(t,r,Vi),t+"")}function ai(t){return xr(t,Ou,vi)}function ui(t){return xr(t,Eu,gi)}var si=De?function(t){return De.get(t)}:ls;function ci(t){for(var n=t.name+"",e=Oe[n],r=Wt.call(Oe,n)?e.length:0;r--;){var o=e[r],i=o.func;if(null==i||i==t)return o.name}return n}function li(t){return(Wt.call(Ge,"placeholder")?Ge:t).placeholder}function fi(){var t=Ge.iteratee||as;return t=t===as?Wr:t,arguments.length?t(arguments[0],arguments[1]):t}function hi(t,e){var r,o,i=t.__data__;return("string"==(o=n(r=e))||"number"==o||"symbol"==o||"boolean"==o?"__proto__"!==r:null===r)?i["string"==typeof e?"string":"hash"]:i.map}function di(t){for(var n=Ou(t),e=n.length;e--;){var r=n[e],o=t[r];n[e]=[r,o,Mi(o)]}return n}function pi(t,n){var e=function(t,n){return null==t?r:t[n]}(t,n);return Ir(e)?e:r}var vi=bn?function(t){return null==t?[]:(t=St(t),On(bn(t),(function(n){return Yt.call(t,n)})))}:ys,gi=bn?function(t){for(var n=[];t;)Wn(n,vi(t)),t=Zt(t);return n}:ys,yi=Mr;function mi(t,n,e){for(var r=-1,o=(n=Po(n,t)).length,i=!1;++r<o;){var a=ji(n[r]);if(!(i=null!=t&&e(t,a)))break;t=t[a]}return i||++r!=o?i:!!(o=null==t?0:t.length)&&nu(o)&&wi(a,o)&&($a(t)||qa(t))}function _i(t){return"function"!=typeof t.constructor||xi(t)?{}:Ue(Zt(t))}function bi(t){return $a(t)||qa(t)||!!(Xt&&t&&t[Xt])}function wi(t,e){var r=n(t);return!!(e=null==e?p:e)&&("number"==r||"symbol"!=r&&bt.test(t))&&t>-1&&t%1==0&&t<e}function Pi(t,e,r){if(!eu(r))return!1;var o=n(e);return!!("number"==o?Za(r)&&wi(e,r.length):"string"==o&&e in r)&&Ga(r[e],t)}function Ci(t,e){if($a(t))return!1;var r=n(t);return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!lu(t))||(et.test(t)||!nt.test(t)||null!=e&&t in St(e))}function ki(t){var n=ci(t),e=Ge[n];if("function"!=typeof e||!(n in $e.prototype))return!1;if(t===e)return!0;var r=si(e);return!!r&&t===r[0]}(xe&&yi(new xe(new ArrayBuffer(1)))!=B||Me&&yi(new Me)!=A||Se&&yi(Se.resolve())!=S||Te&&yi(new Te)!=N||Ne&&yi(new Ne)!=O)&&(yi=function(t){var n=Mr(t),e=n==M?t.constructor:r,o=e?zi(e):"";if(o)switch(o){case Ee:return B;case Be:return A;case Ie:return S;case We:return N;case Le:return O}return n});var Ai=Bt?Qa:ms;function xi(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||Et)}function Mi(t){return t==t&&!eu(t)}function Si(t,n){return function(e){return null!=e&&(e[t]===n&&(n!==r||t in St(e)))}}function Ti(t,n,e){return n=be(n===r?t.length-1:n,0),function(){for(var r=arguments,o=-1,i=be(r.length-n,0),a=ut(i);++o<i;)a[o]=r[n+o];o=-1;for(var u=ut(n+1);++o<n;)u[o]=r[o];return u[n]=e(a),Sn(t,this,u)}}function Ni(t,n){return n.length<2?t:Ar(t,io(n,0,-1))}function Ri(t,n){if(("constructor"!==n||"function"!=typeof t[n])&&"__proto__"!=n)return t[n]}var Di=Ii(eo),Oi=vn||function(t,n){return gn.setTimeout(t,n)},Ei=Ii(ro);function Bi(t,n,e){var r=n+"";return Ei(t,function(t,n){var e=n.length;if(!e)return t;var r=e-1;return n[r]=(e>1?"& ":"")+n[r],n=n.join(e>2?", ":" "),t.replace(st,"{\n/* [wrapped with "+n+"] */\n")}(r,function(t,n){return Nn(y,(function(e){var r="_."+e[0];n&e[1]&&!En(t,r)&&t.push(r)})),t.sort()}(function(t){var n=t.match(ct);return n?n[1].split(lt):[]}(r),e)))}function Ii(t){var n=0,e=0;return function(){var o=Pe(),i=16-(o-e);if(e=o,i>0){if(++n>=800)return arguments[0]}else n=0;return t.apply(r,arguments)}}function Wi(t,n){var e=-1,o=t.length,i=o-1;for(n=n===r?o:n;++e<n;){var a=Yr(e,i),u=t[a];t[a]=t[e],t[e]=u}return t.length=n,t}var Li=function(t){var n=Ia(t,(function(t){return 500===e.size&&e.clear(),t})),e=n.cache;return n}((function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(rt,(function(t,e,r,o){n.push(r?o.replace(dt,"$1"):e||t)})),n}));function ji(t){if("string"==typeof t||lu(t))return t;var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}function zi(t){if(null!=t){try{return It.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Fi(t){if(t instanceof $e)return t.clone();var n=new qe(t.__wrapped__,t.__chain__);return n.__actions__=Do(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var Gi=Xr((function(t,n){return Ha(t)?dr(t,_r(n,1,Ha,!0)):[]})),Ui=Xr((function(t,n){var e=Xi(n);return Ha(e)&&(e=r),Ha(t)?dr(t,_r(n,1,Ha,!0),fi(e,2)):[]})),Ki=Xr((function(t,n){var e=Xi(n);return Ha(e)&&(e=r),Ha(t)?dr(t,_r(n,1,Ha,!0),r,e):[]}));function qi(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var o=null==e?0:gu(e);return o<0&&(o=be(r+o,0)),Un(t,fi(n,3),o)}function $i(t,n,e){var o=null==t?0:t.length;if(!o)return-1;var i=o-1;return e!==r&&(i=gu(e),i=e<0?be(o+i,0):we(i,o-1)),Un(t,fi(n,3),i,!0)}function Vi(t){return(null==t?0:t.length)?_r(t,1):[]}function Zi(t){return t&&t.length?t[0]:r}var Hi=Xr((function(t){var n=In(t,bo);return n.length&&n[0]===t[0]?Rr(n):[]})),Yi=Xr((function(t){var n=Xi(t),e=In(t,bo);return n===Xi(e)?n=r:e.pop(),e.length&&e[0]===t[0]?Rr(e,fi(n,2)):[]})),Ji=Xr((function(t){var n=Xi(t),e=In(t,bo);return(n="function"==typeof n?n:r)&&e.pop(),e.length&&e[0]===t[0]?Rr(e,r,n):[]}));function Xi(t){var n=null==t?0:t.length;return n?t[n-1]:r}var Qi=Xr(ta);function ta(t,n){return t&&t.length&&n&&n.length?Zr(t,n):t}var na=ii((function(t,n){var e=null==t?0:t.length,r=sr(t,n);return Hr(t,In(n,(function(t){return wi(t,e)?+t:t})).sort(To)),r}));function ea(t){return null==t?t:Ae.call(t)}var ra=Xr((function(t){return ho(_r(t,1,Ha,!0))})),oa=Xr((function(t){var n=Xi(t);return Ha(n)&&(n=r),ho(_r(t,1,Ha,!0),fi(n,2))})),ia=Xr((function(t){var n=Xi(t);return n="function"==typeof n?n:r,ho(_r(t,1,Ha,!0),r,n)}));function aa(t){if(!t||!t.length)return[];var n=0;return t=On(t,(function(t){if(Ha(t))return n=be(t.length,n),!0})),Xn(n,(function(n){return In(t,Zn(n))}))}function ua(t,n){if(!t||!t.length)return[];var e=aa(t);return null==n?e:In(e,(function(t){return Sn(n,r,t)}))}var sa=Xr((function(t,n){return Ha(t)?dr(t,n):[]})),ca=Xr((function(t){return mo(On(t,Ha))})),la=Xr((function(t){var n=Xi(t);return Ha(n)&&(n=r),mo(On(t,Ha),fi(n,2))})),fa=Xr((function(t){var n=Xi(t);return n="function"==typeof n?n:r,mo(On(t,Ha),r,n)})),ha=Xr(aa);var da=Xr((function(t){var n=t.length,e=n>1?t[n-1]:r;return e="function"==typeof e?(t.pop(),e):r,ua(t,e)}));function pa(t){var n=Ge(t);return n.__chain__=!0,n}function va(t,n){return n(t)}var ga=ii((function(t){var n=t.length,e=n?t[0]:0,o=this.__wrapped__,i=function(n){return sr(n,t)};return!(n>1||this.__actions__.length)&&o instanceof $e&&wi(e)?((o=o.slice(e,+e+(n?1:0))).__actions__.push({func:va,args:[i],thisArg:r}),new qe(o,this.__chain__).thru((function(t){return n&&!t.length&&t.push(r),t}))):this.thru(i)}));var ya=Eo((function(t,n,e){Wt.call(t,e)?++t[e]:ur(t,e,1)}));var ma=Fo(qi),_a=Fo($i);function ba(t,n){return($a(t)?Nn:pr)(t,fi(n,3))}function wa(t,n){return($a(t)?Rn:vr)(t,fi(n,3))}var Pa=Eo((function(t,n,e){Wt.call(t,e)?t[e].push(n):ur(t,e,[n])}));var Ca=Xr((function(t,n,e){var r=-1,o="function"==typeof n,i=Za(t)?ut(t.length):[];return pr(t,(function(t){i[++r]=o?Sn(n,t,e):Dr(t,n,e)})),i})),ka=Eo((function(t,n,e){ur(t,e,n)}));function Aa(t,n){return($a(t)?In:Fr)(t,fi(n,3))}var xa=Eo((function(t,n,e){t[e?0:1].push(n)}),(function(){return[[],[]]}));var Ma=Xr((function(t,n){if(null==t)return[];var e=n.length;return e>1&&Pi(t,n[0],n[1])?n=[]:e>2&&Pi(n[0],n[1],n[2])&&(n=[n[0]]),$r(t,_r(n,1),[])})),Sa=pn||function(){return gn.Date.now()};function Ta(t,n,e){return n=e?r:n,n=t&&null==n?t.length:n,ti(t,l,r,r,r,r,n)}function Na(t,n){var e;if("function"!=typeof n)throw new Rt(o);return t=gu(t),function(){return--t>0&&(e=n.apply(this,arguments)),t<=1&&(n=r),e}}var Ra=Xr((function(t,n,e){var r=1;if(e.length){var o=fe(e,li(Ra));r|=s}return ti(t,r,n,e,o)})),Da=Xr((function(t,n,e){var r=3;if(e.length){var o=fe(e,li(Da));r|=s}return ti(n,r,t,e,o)}));function Oa(t,n,e){var i,a,u,s,c,l,f=0,h=!1,d=!1,p=!0;if("function"!=typeof t)throw new Rt(o);function v(n){var e=i,o=a;return i=a=r,f=n,s=t.apply(o,e)}function g(t){var e=t-l;return l===r||e>=n||e<0||d&&t-f>=u}function y(){var t=Sa();if(g(t))return m(t);c=Oi(y,function(t){var e=n-(t-l);return d?we(e,u-(t-f)):e}(t))}function m(t){return c=r,p&&i?v(t):(i=a=r,s)}function _(){var t=Sa(),e=g(t);if(i=arguments,a=this,l=t,e){if(c===r)return function(t){return f=t,c=Oi(y,n),h?v(t):s}(l);if(d)return Ao(c),c=Oi(y,n),v(l)}return c===r&&(c=Oi(y,n)),s}return n=mu(n)||0,eu(e)&&(h=!!e.leading,u=(d="maxWait"in e)?be(mu(e.maxWait)||0,n):u,p="trailing"in e?!!e.trailing:p),_.cancel=function(){c!==r&&Ao(c),f=0,i=l=a=c=r},_.flush=function(){return c===r?s:m(Sa())},_}var Ea=Xr((function(t,n){return hr(t,1,n)})),Ba=Xr((function(t,n,e){return hr(t,mu(n)||0,e)}));function Ia(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new Rt(o);var e=function e(){var r=arguments,o=n?n.apply(this,r):r[0],i=e.cache;if(i.has(o))return i.get(o);var a=t.apply(this,r);return e.cache=i.set(o,a)||i,a};return e.cache=new(Ia.Cache||He),e}function Wa(t){if("function"!=typeof t)throw new Rt(o);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}Ia.Cache=He;var La=Co((function(t,n){var e=(n=1==n.length&&$a(n[0])?In(n[0],te(fi())):In(_r(n,1),te(fi()))).length;return Xr((function(r){for(var o=-1,i=we(r.length,e);++o<i;)r[o]=n[o].call(this,r[o]);return Sn(t,this,r)}))})),ja=Xr((function(t,n){var e=fe(n,li(ja));return ti(t,s,r,n,e)})),za=Xr((function(t,n){var e=fe(n,li(za));return ti(t,c,r,n,e)})),Fa=ii((function(t,n){return ti(t,f,r,r,r,n)}));function Ga(t,n){return t===n||t!=t&&n!=n}var Ua=Ho(Sr),Ka=Ho((function(t,n){return t>=n})),qa=Or(function(){return arguments}())?Or:function(t){return ru(t)&&Wt.call(t,"callee")&&!Yt.call(t,"callee")},$a=ut.isArray,Va=Pn?te(Pn):function(t){return ru(t)&&Mr(t)==E};function Za(t){return null!=t&&nu(t.length)&&!Qa(t)}function Ha(t){return ru(t)&&Za(t)}var Ya=wn||ms,Ja=Cn?te(Cn):function(t){return ru(t)&&Mr(t)==w};function Xa(t){if(!ru(t))return!1;var n=Mr(t);return n==P||"[object DOMException]"==n||"string"==typeof t.message&&"string"==typeof t.name&&!au(t)}function Qa(t){if(!eu(t))return!1;var n=Mr(t);return n==C||n==k||"[object AsyncFunction]"==n||"[object Proxy]"==n}function tu(t){return"number"==typeof t&&t==gu(t)}function nu(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=p}function eu(t){var e=n(t);return null!=t&&("object"==e||"function"==e)}function ru(t){return null!=t&&"object"==n(t)}var ou=kn?te(kn):function(t){return ru(t)&&yi(t)==A};function iu(t){return"number"==typeof t||ru(t)&&Mr(t)==x}function au(t){if(!ru(t)||Mr(t)!=M)return!1;var n=Zt(t);if(null===n)return!0;var e=Wt.call(n,"constructor")&&n.constructor;return"function"==typeof e&&e instanceof e&&It.call(e)==Ft}var uu=An?te(An):function(t){return ru(t)&&Mr(t)==T};var su=xn?te(xn):function(t){return ru(t)&&yi(t)==N};function cu(t){return"string"==typeof t||!$a(t)&&ru(t)&&Mr(t)==R}function lu(t){return"symbol"==n(t)||ru(t)&&Mr(t)==D}var fu=Mn?te(Mn):function(t){return ru(t)&&nu(t.length)&&!!cn[Mr(t)]};var hu=Ho(zr),du=Ho((function(t,n){return t<=n}));function pu(t){if(!t)return[];if(Za(t))return cu(t)?ve(t):Do(t);if(Qt&&t[Qt])return function(t){for(var n,e=[];!(n=t.next()).done;)e.push(n.value);return e}(t[Qt]());var n=yi(t);return(n==A?ce:n==N?he:Gu)(t)}function vu(t){return t?(t=mu(t))===d||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function gu(t){var n=vu(t),e=n%1;return n==n?e?n-e:n:0}function yu(t){return t?cr(gu(t),0,g):0}function mu(t){if("number"==typeof t)return t;if(lu(t))return v;if(eu(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=eu(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=Qn(t);var e=yt.test(t);return e||_t.test(t)?dn(t.slice(2),e?2:8):gt.test(t)?v:+t}function _u(t){return Oo(t,Eu(t))}function bu(t){return null==t?"":fo(t)}var wu=Bo((function(t,n){if(xi(n)||Za(n))Oo(n,Ou(n),t);else for(var e in n)Wt.call(n,e)&&rr(t,e,n[e])})),Pu=Bo((function(t,n){Oo(n,Eu(n),t)})),Cu=Bo((function(t,n,e,r){Oo(n,Eu(n),t,r)})),ku=Bo((function(t,n,e,r){Oo(n,Ou(n),t,r)})),Au=ii(sr);var xu=Xr((function(t,n){t=St(t);var e=-1,o=n.length,i=o>2?n[2]:r;for(i&&Pi(n[0],n[1],i)&&(o=1);++e<o;)for(var a=n[e],u=Eu(a),s=-1,c=u.length;++s<c;){var l=u[s],f=t[l];(f===r||Ga(f,Et[l])&&!Wt.call(t,l))&&(t[l]=a[l])}return t})),Mu=Xr((function(t){return t.push(r,ei),Sn(Iu,r,t)}));function Su(t,n,e){var o=null==t?r:Ar(t,n);return o===r?e:o}function Tu(t,n){return null!=t&&mi(t,n,Nr)}var Nu=Ko((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=zt.call(n)),t[n]=e}),es(is)),Ru=Ko((function(t,n,e){null!=n&&"function"!=typeof n.toString&&(n=zt.call(n)),Wt.call(t,n)?t[n].push(e):t[n]=[e]}),fi),Du=Xr(Dr);function Ou(t){return Za(t)?Xe(t):Lr(t)}function Eu(t){return Za(t)?Xe(t,!0):jr(t)}var Bu=Bo((function(t,n,e){Kr(t,n,e)})),Iu=Bo((function(t,n,e,r){Kr(t,n,e,r)})),Wu=ii((function(t,n){var e={};if(null==t)return e;var r=!1;n=In(n,(function(n){return n=Po(n,t),r||(r=n.length>1),n})),Oo(t,ui(t),e),r&&(e=lr(e,7,ri));for(var o=n.length;o--;)po(e,n[o]);return e}));var Lu=ii((function(t,n){return null==t?{}:function(t,n){return Vr(t,n,(function(n,e){return Tu(t,e)}))}(t,n)}));function ju(t,n){if(null==t)return{};var e=In(ui(t),(function(t){return[t]}));return n=fi(n),Vr(t,e,(function(t,e){return n(t,e[0])}))}var zu=Qo(Ou),Fu=Qo(Eu);function Gu(t){return null==t?[]:ne(t,Ou(t))}var Uu=jo((function(t,n,e){return n=n.toLowerCase(),t+(e?Ku(n):n)}));function Ku(t){return Xu(bu(t).toLowerCase())}function qu(t){return(t=bu(t))&&t.replace(wt,ie).replace(nn,"")}var $u=jo((function(t,n,e){return t+(e?"-":"")+n.toLowerCase()})),Vu=jo((function(t,n,e){return t+(e?" ":"")+n.toLowerCase()})),Zu=Lo("toLowerCase");var Hu=jo((function(t,n,e){return t+(e?"_":"")+n.toLowerCase()}));var Yu=jo((function(t,n,e){return t+(e?" ":"")+Xu(n)}));var Ju=jo((function(t,n,e){return t+(e?" ":"")+n.toUpperCase()})),Xu=Lo("toUpperCase");function Qu(t,n,e){return t=bu(t),(n=e?r:n)===r?function(t){return an.test(t)}(t)?function(t){return t.match(rn)||[]}(t):function(t){return t.match(ft)||[]}(t):t.match(n)||[]}var ts=Xr((function(t,n){try{return Sn(t,r,n)}catch(t){return Xa(t)?t:new At(t)}})),ns=ii((function(t,n){return Nn(n,(function(n){n=ji(n),ur(t,n,Ra(t[n],t))})),t}));function es(t){return function(){return t}}var rs=Go(),os=Go(!0);function is(t){return t}function as(t){return Wr("function"==typeof t?t:lr(t,1))}var us=Xr((function(t,n){return function(e){return Dr(e,t,n)}})),ss=Xr((function(t,n){return function(e){return Dr(t,e,n)}}));function cs(t,n,e){var r=Ou(n),o=kr(n,r);null!=e||eu(n)&&(o.length||!r.length)||(e=n,n=t,t=this,o=kr(n,Ou(n)));var i=!(eu(e)&&"chain"in e&&!e.chain),a=Qa(t);return Nn(o,(function(e){var r=n[e];t[e]=r,a&&(t.prototype[e]=function(){var n=this.__chain__;if(i||n){var e=t(this.__wrapped__);return(e.__actions__=Do(this.__actions__)).push({func:r,args:arguments,thisArg:t}),e.__chain__=n,e}return r.apply(t,Wn([this.value()],arguments))})})),t}function ls(){}var fs=$o(In),hs=$o(Dn),ds=$o(zn);function ps(t){return Ci(t)?Zn(ji(t)):function(t){return function(n){return Ar(n,t)}}(t)}var vs=Zo(),gs=Zo(!0);function ys(){return[]}function ms(){return!1}var _s=qo((function(t,n){return t+n}),0),bs=Jo("ceil"),ws=qo((function(t,n){return t/n}),1),Ps=Jo("floor");var Cs,ks=qo((function(t,n){return t*n}),1),As=Jo("round"),xs=qo((function(t,n){return t-n}),0);return Ge.after=function(t,n){if("function"!=typeof n)throw new Rt(o);return t=gu(t),function(){if(--t<1)return n.apply(this,arguments)}},Ge.ary=Ta,Ge.assign=wu,Ge.assignIn=Pu,Ge.assignInWith=Cu,Ge.assignWith=ku,Ge.at=Au,Ge.before=Na,Ge.bind=Ra,Ge.bindAll=ns,Ge.bindKey=Da,Ge.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return $a(t)?t:[t]},Ge.chain=pa,Ge.chunk=function(t,n,e){n=(e?Pi(t,n,e):n===r)?1:be(gu(n),0);var o=null==t?0:t.length;if(!o||n<1)return[];for(var i=0,a=0,u=ut(yn(o/n));i<o;)u[a++]=io(t,i,i+=n);return u},Ge.compact=function(t){for(var n=-1,e=null==t?0:t.length,r=0,o=[];++n<e;){var i=t[n];i&&(o[r++]=i)}return o},Ge.concat=function(){var t=arguments.length;if(!t)return[];for(var n=ut(t-1),e=arguments[0],r=t;r--;)n[r-1]=arguments[r];return Wn($a(e)?Do(e):[e],_r(n,1))},Ge.cond=function(t){var n=null==t?0:t.length,e=fi();return t=n?In(t,(function(t){if("function"!=typeof t[1])throw new Rt(o);return[e(t[0]),t[1]]})):[],Xr((function(e){for(var r=-1;++r<n;){var o=t[r];if(Sn(o[0],this,e))return Sn(o[1],this,e)}}))},Ge.conforms=function(t){return function(t){var n=Ou(t);return function(e){return fr(e,t,n)}}(lr(t,1))},Ge.constant=es,Ge.countBy=ya,Ge.create=function(t,n){var e=Ue(t);return null==n?e:ar(e,n)},Ge.curry=function t(n,e,o){var i=ti(n,8,r,r,r,r,r,e=o?r:e);return i.placeholder=t.placeholder,i},Ge.curryRight=function t(n,e,o){var i=ti(n,u,r,r,r,r,r,e=o?r:e);return i.placeholder=t.placeholder,i},Ge.debounce=Oa,Ge.defaults=xu,Ge.defaultsDeep=Mu,Ge.defer=Ea,Ge.delay=Ba,Ge.difference=Gi,Ge.differenceBy=Ui,Ge.differenceWith=Ki,Ge.drop=function(t,n,e){var o=null==t?0:t.length;return o?io(t,(n=e||n===r?1:gu(n))<0?0:n,o):[]},Ge.dropRight=function(t,n,e){var o=null==t?0:t.length;return o?io(t,0,(n=o-(n=e||n===r?1:gu(n)))<0?0:n):[]},Ge.dropRightWhile=function(t,n){return t&&t.length?go(t,fi(n,3),!0,!0):[]},Ge.dropWhile=function(t,n){return t&&t.length?go(t,fi(n,3),!0):[]},Ge.fill=function(t,n,e,o){var i=null==t?0:t.length;return i?(e&&"number"!=typeof e&&Pi(t,n,e)&&(e=0,o=i),function(t,n,e,o){var i=t.length;for((e=gu(e))<0&&(e=-e>i?0:i+e),(o=o===r||o>i?i:gu(o))<0&&(o+=i),o=e>o?0:yu(o);e<o;)t[e++]=n;return t}(t,n,e,o)):[]},Ge.filter=function(t,n){return($a(t)?On:mr)(t,fi(n,3))},Ge.flatMap=function(t,n){return _r(Aa(t,n),1)},Ge.flatMapDeep=function(t,n){return _r(Aa(t,n),d)},Ge.flatMapDepth=function(t,n,e){return e=e===r?1:gu(e),_r(Aa(t,n),e)},Ge.flatten=Vi,Ge.flattenDeep=function(t){return(null==t?0:t.length)?_r(t,d):[]},Ge.flattenDepth=function(t,n){return(null==t?0:t.length)?_r(t,n=n===r?1:gu(n)):[]},Ge.flip=function(t){return ti(t,512)},Ge.flow=rs,Ge.flowRight=os,Ge.fromPairs=function(t){for(var n=-1,e=null==t?0:t.length,r={};++n<e;){var o=t[n];r[o[0]]=o[1]}return r},Ge.functions=function(t){return null==t?[]:kr(t,Ou(t))},Ge.functionsIn=function(t){return null==t?[]:kr(t,Eu(t))},Ge.groupBy=Pa,Ge.initial=function(t){return(null==t?0:t.length)?io(t,0,-1):[]},Ge.intersection=Hi,Ge.intersectionBy=Yi,Ge.intersectionWith=Ji,Ge.invert=Nu,Ge.invertBy=Ru,Ge.invokeMap=Ca,Ge.iteratee=as,Ge.keyBy=ka,Ge.keys=Ou,Ge.keysIn=Eu,Ge.map=Aa,Ge.mapKeys=function(t,n){var e={};return n=fi(n,3),Pr(t,(function(t,r,o){ur(e,n(t,r,o),t)})),e},Ge.mapValues=function(t,n){var e={};return n=fi(n,3),Pr(t,(function(t,r,o){ur(e,r,n(t,r,o))})),e},Ge.matches=function(t){return Gr(lr(t,1))},Ge.matchesProperty=function(t,n){return Ur(t,lr(n,1))},Ge.memoize=Ia,Ge.merge=Bu,Ge.mergeWith=Iu,Ge.method=us,Ge.methodOf=ss,Ge.mixin=cs,Ge.negate=Wa,Ge.nthArg=function(t){return t=gu(t),Xr((function(n){return qr(n,t)}))},Ge.omit=Wu,Ge.omitBy=function(t,n){return ju(t,Wa(fi(n)))},Ge.once=function(t){return Na(2,t)},Ge.orderBy=function(t,n,e,o){return null==t?[]:($a(n)||(n=null==n?[]:[n]),$a(e=o?r:e)||(e=null==e?[]:[e]),$r(t,n,e))},Ge.over=fs,Ge.overArgs=La,Ge.overEvery=hs,Ge.overSome=ds,Ge.partial=ja,Ge.partialRight=za,Ge.partition=xa,Ge.pick=Lu,Ge.pickBy=ju,Ge.property=ps,Ge.propertyOf=function(t){return function(n){return null==t?r:Ar(t,n)}},Ge.pull=Qi,Ge.pullAll=ta,Ge.pullAllBy=function(t,n,e){return t&&t.length&&n&&n.length?Zr(t,n,fi(e,2)):t},Ge.pullAllWith=function(t,n,e){return t&&t.length&&n&&n.length?Zr(t,n,r,e):t},Ge.pullAt=na,Ge.range=vs,Ge.rangeRight=gs,Ge.rearg=Fa,Ge.reject=function(t,n){return($a(t)?On:mr)(t,Wa(fi(n,3)))},Ge.remove=function(t,n){var e=[];if(!t||!t.length)return e;var r=-1,o=[],i=t.length;for(n=fi(n,3);++r<i;){var a=t[r];n(a,r,t)&&(e.push(a),o.push(r))}return Hr(t,o),e},Ge.rest=function(t,n){if("function"!=typeof t)throw new Rt(o);return Xr(t,n=n===r?n:gu(n))},Ge.reverse=ea,Ge.sampleSize=function(t,n,e){return n=(e?Pi(t,n,e):n===r)?1:gu(n),($a(t)?tr:to)(t,n)},Ge.set=function(t,n,e){return null==t?t:no(t,n,e)},Ge.setWith=function(t,n,e,o){return o="function"==typeof o?o:r,null==t?t:no(t,n,e,o)},Ge.shuffle=function(t){return($a(t)?nr:oo)(t)},Ge.slice=function(t,n,e){var o=null==t?0:t.length;return o?(e&&"number"!=typeof e&&Pi(t,n,e)?(n=0,e=o):(n=null==n?0:gu(n),e=e===r?o:gu(e)),io(t,n,e)):[]},Ge.sortBy=Ma,Ge.sortedUniq=function(t){return t&&t.length?co(t):[]},Ge.sortedUniqBy=function(t,n){return t&&t.length?co(t,fi(n,2)):[]},Ge.split=function(t,n,e){return e&&"number"!=typeof e&&Pi(t,n,e)&&(n=e=r),(e=e===r?g:e>>>0)?(t=bu(t))&&("string"==typeof n||null!=n&&!uu(n))&&!(n=fo(n))&&se(t)?ko(ve(t),0,e):t.split(n,e):[]},Ge.spread=function(t,n){if("function"!=typeof t)throw new Rt(o);return n=null==n?0:be(gu(n),0),Xr((function(e){var r=e[n],o=ko(e,0,n);return r&&Wn(o,r),Sn(t,this,o)}))},Ge.tail=function(t){var n=null==t?0:t.length;return n?io(t,1,n):[]},Ge.take=function(t,n,e){return t&&t.length?io(t,0,(n=e||n===r?1:gu(n))<0?0:n):[]},Ge.takeRight=function(t,n,e){var o=null==t?0:t.length;return o?io(t,(n=o-(n=e||n===r?1:gu(n)))<0?0:n,o):[]},Ge.takeRightWhile=function(t,n){return t&&t.length?go(t,fi(n,3),!1,!0):[]},Ge.takeWhile=function(t,n){return t&&t.length?go(t,fi(n,3)):[]},Ge.tap=function(t,n){return n(t),t},Ge.throttle=function(t,n,e){var r=!0,i=!0;if("function"!=typeof t)throw new Rt(o);return eu(e)&&(r="leading"in e?!!e.leading:r,i="trailing"in e?!!e.trailing:i),Oa(t,n,{leading:r,maxWait:n,trailing:i})},Ge.thru=va,Ge.toArray=pu,Ge.toPairs=zu,Ge.toPairsIn=Fu,Ge.toPath=function(t){return $a(t)?In(t,ji):lu(t)?[t]:Do(Li(bu(t)))},Ge.toPlainObject=_u,Ge.transform=function(t,n,e){var r=$a(t),o=r||Ya(t)||fu(t);if(n=fi(n,4),null==e){var i=t&&t.constructor;e=o?r?new i:[]:eu(t)&&Qa(i)?Ue(Zt(t)):{}}return(o?Nn:Pr)(t,(function(t,r,o){return n(e,t,r,o)})),e},Ge.unary=function(t){return Ta(t,1)},Ge.union=ra,Ge.unionBy=oa,Ge.unionWith=ia,Ge.uniq=function(t){return t&&t.length?ho(t):[]},Ge.uniqBy=function(t,n){return t&&t.length?ho(t,fi(n,2)):[]},Ge.uniqWith=function(t,n){return n="function"==typeof n?n:r,t&&t.length?ho(t,r,n):[]},Ge.unset=function(t,n){return null==t||po(t,n)},Ge.unzip=aa,Ge.unzipWith=ua,Ge.update=function(t,n,e){return null==t?t:vo(t,n,wo(e))},Ge.updateWith=function(t,n,e,o){return o="function"==typeof o?o:r,null==t?t:vo(t,n,wo(e),o)},Ge.values=Gu,Ge.valuesIn=function(t){return null==t?[]:ne(t,Eu(t))},Ge.without=sa,Ge.words=Qu,Ge.wrap=function(t,n){return ja(wo(n),t)},Ge.xor=ca,Ge.xorBy=la,Ge.xorWith=fa,Ge.zip=ha,Ge.zipObject=function(t,n){return _o(t||[],n||[],rr)},Ge.zipObjectDeep=function(t,n){return _o(t||[],n||[],no)},Ge.zipWith=da,Ge.entries=zu,Ge.entriesIn=Fu,Ge.extend=Pu,Ge.extendWith=Cu,cs(Ge,Ge),Ge.add=_s,Ge.attempt=ts,Ge.camelCase=Uu,Ge.capitalize=Ku,Ge.ceil=bs,Ge.clamp=function(t,n,e){return e===r&&(e=n,n=r),e!==r&&(e=(e=mu(e))==e?e:0),n!==r&&(n=(n=mu(n))==n?n:0),cr(mu(t),n,e)},Ge.clone=function(t){return lr(t,4)},Ge.cloneDeep=function(t){return lr(t,5)},Ge.cloneDeepWith=function(t,n){return lr(t,5,n="function"==typeof n?n:r)},Ge.cloneWith=function(t,n){return lr(t,4,n="function"==typeof n?n:r)},Ge.conformsTo=function(t,n){return null==n||fr(t,n,Ou(n))},Ge.deburr=qu,Ge.defaultTo=function(t,n){return null==t||t!=t?n:t},Ge.divide=ws,Ge.endsWith=function(t,n,e){t=bu(t),n=fo(n);var o=t.length,i=e=e===r?o:cr(gu(e),0,o);return(e-=n.length)>=0&&t.slice(e,i)==n},Ge.eq=Ga,Ge.escape=function(t){return(t=bu(t))&&J.test(t)?t.replace(H,ae):t},Ge.escapeRegExp=function(t){return(t=bu(t))&&it.test(t)?t.replace(ot,"\\$&"):t},Ge.every=function(t,n,e){var o=$a(t)?Dn:gr;return e&&Pi(t,n,e)&&(n=r),o(t,fi(n,3))},Ge.find=ma,Ge.findIndex=qi,Ge.findKey=function(t,n){return Gn(t,fi(n,3),Pr)},Ge.findLast=_a,Ge.findLastIndex=$i,Ge.findLastKey=function(t,n){return Gn(t,fi(n,3),Cr)},Ge.floor=Ps,Ge.forEach=ba,Ge.forEachRight=wa,Ge.forIn=function(t,n){return null==t?t:br(t,fi(n,3),Eu)},Ge.forInRight=function(t,n){return null==t?t:wr(t,fi(n,3),Eu)},Ge.forOwn=function(t,n){return t&&Pr(t,fi(n,3))},Ge.forOwnRight=function(t,n){return t&&Cr(t,fi(n,3))},Ge.get=Su,Ge.gt=Ua,Ge.gte=Ka,Ge.has=function(t,n){return null!=t&&mi(t,n,Tr)},Ge.hasIn=Tu,Ge.head=Zi,Ge.identity=is,Ge.includes=function(t,n,e,r){t=Za(t)?t:Gu(t),e=e&&!r?gu(e):0;var o=t.length;return e<0&&(e=be(o+e,0)),cu(t)?e<=o&&t.indexOf(n,e)>-1:!!o&&Kn(t,n,e)>-1},Ge.indexOf=function(t,n,e){var r=null==t?0:t.length;if(!r)return-1;var o=null==e?0:gu(e);return o<0&&(o=be(r+o,0)),Kn(t,n,o)},Ge.inRange=function(t,n,e){return n=vu(n),e===r?(e=n,n=0):e=vu(e),function(t,n,e){return t>=we(n,e)&&t<be(n,e)}(t=mu(t),n,e)},Ge.invoke=Du,Ge.isArguments=qa,Ge.isArray=$a,Ge.isArrayBuffer=Va,Ge.isArrayLike=Za,Ge.isArrayLikeObject=Ha,Ge.isBoolean=function(t){return!0===t||!1===t||ru(t)&&Mr(t)==b},Ge.isBuffer=Ya,Ge.isDate=Ja,Ge.isElement=function(t){return ru(t)&&1===t.nodeType&&!au(t)},Ge.isEmpty=function(t){if(null==t)return!0;if(Za(t)&&($a(t)||"string"==typeof t||"function"==typeof t.splice||Ya(t)||fu(t)||qa(t)))return!t.length;var n=yi(t);if(n==A||n==N)return!t.size;if(xi(t))return!Lr(t).length;for(var e in t)if(Wt.call(t,e))return!1;return!0},Ge.isEqual=function(t,n){return Er(t,n)},Ge.isEqualWith=function(t,n,e){var o=(e="function"==typeof e?e:r)?e(t,n):r;return o===r?Er(t,n,r,e):!!o},Ge.isError=Xa,Ge.isFinite=function(t){return"number"==typeof t&&Fn(t)},Ge.isFunction=Qa,Ge.isInteger=tu,Ge.isLength=nu,Ge.isMap=ou,Ge.isMatch=function(t,n){return t===n||Br(t,n,di(n))},Ge.isMatchWith=function(t,n,e){return e="function"==typeof e?e:r,Br(t,n,di(n),e)},Ge.isNaN=function(t){return iu(t)&&t!=+t},Ge.isNative=function(t){if(Ai(t))throw new At("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return Ir(t)},Ge.isNil=function(t){return null==t},Ge.isNull=function(t){return null===t},Ge.isNumber=iu,Ge.isObject=eu,Ge.isObjectLike=ru,Ge.isPlainObject=au,Ge.isRegExp=uu,Ge.isSafeInteger=function(t){return tu(t)&&t>=-9007199254740991&&t<=p},Ge.isSet=su,Ge.isString=cu,Ge.isSymbol=lu,Ge.isTypedArray=fu,Ge.isUndefined=function(t){return t===r},Ge.isWeakMap=function(t){return ru(t)&&yi(t)==O},Ge.isWeakSet=function(t){return ru(t)&&"[object WeakSet]"==Mr(t)},Ge.join=function(t,n){return null==t?"":Hn.call(t,n)},Ge.kebabCase=$u,Ge.last=Xi,Ge.lastIndexOf=function(t,n,e){var o=null==t?0:t.length;if(!o)return-1;var i=o;return e!==r&&(i=(i=gu(e))<0?be(o+i,0):we(i,o-1)),n==n?function(t,n,e){for(var r=e+1;r--;)if(t[r]===n)return r;return r}(t,n,i):Un(t,$n,i,!0)},Ge.lowerCase=Vu,Ge.lowerFirst=Zu,Ge.lt=hu,Ge.lte=du,Ge.max=function(t){return t&&t.length?yr(t,is,Sr):r},Ge.maxBy=function(t,n){return t&&t.length?yr(t,fi(n,2),Sr):r},Ge.mean=function(t){return Vn(t,is)},Ge.meanBy=function(t,n){return Vn(t,fi(n,2))},Ge.min=function(t){return t&&t.length?yr(t,is,zr):r},Ge.minBy=function(t,n){return t&&t.length?yr(t,fi(n,2),zr):r},Ge.stubArray=ys,Ge.stubFalse=ms,Ge.stubObject=function(){return{}},Ge.stubString=function(){return""},Ge.stubTrue=function(){return!0},Ge.multiply=ks,Ge.nth=function(t,n){return t&&t.length?qr(t,gu(n)):r},Ge.noConflict=function(){return gn._===this&&(gn._=Gt),this},Ge.noop=ls,Ge.now=Sa,Ge.pad=function(t,n,e){t=bu(t);var r=(n=gu(n))?pe(t):0;if(!n||r>=n)return t;var o=(n-r)/2;return Vo(mn(o),e)+t+Vo(yn(o),e)},Ge.padEnd=function(t,n,e){t=bu(t);var r=(n=gu(n))?pe(t):0;return n&&r<n?t+Vo(n-r,e):t},Ge.padStart=function(t,n,e){t=bu(t);var r=(n=gu(n))?pe(t):0;return n&&r<n?Vo(n-r,e)+t:t},Ge.parseInt=function(t,n,e){return e||null==n?n=0:n&&(n=+n),Ce(bu(t).replace(at,""),n||0)},Ge.random=function(t,n,e){if(e&&"boolean"!=typeof e&&Pi(t,n,e)&&(n=e=r),e===r&&("boolean"==typeof n?(e=n,n=r):"boolean"==typeof t&&(e=t,t=r)),t===r&&n===r?(t=0,n=1):(t=vu(t),n===r?(n=t,t=0):n=vu(n)),t>n){var o=t;t=n,n=o}if(e||t%1||n%1){var i=ke();return we(t+i*(n-t+hn("1e-"+((i+"").length-1))),n)}return Yr(t,n)},Ge.reduce=function(t,n,e){var r=$a(t)?Ln:Yn,o=arguments.length<3;return r(t,fi(n,4),e,o,pr)},Ge.reduceRight=function(t,n,e){var r=$a(t)?jn:Yn,o=arguments.length<3;return r(t,fi(n,4),e,o,vr)},Ge.repeat=function(t,n,e){return n=(e?Pi(t,n,e):n===r)?1:gu(n),Jr(bu(t),n)},Ge.replace=function(){var t=arguments,n=bu(t[0]);return t.length<3?n:n.replace(t[1],t[2])},Ge.result=function(t,n,e){var o=-1,i=(n=Po(n,t)).length;for(i||(i=1,t=r);++o<i;){var a=null==t?r:t[ji(n[o])];a===r&&(o=i,a=e),t=Qa(a)?a.call(t):a}return t},Ge.round=As,Ge.runInContext=t,Ge.sample=function(t){return($a(t)?Qe:Qr)(t)},Ge.size=function(t){if(null==t)return 0;if(Za(t))return cu(t)?pe(t):t.length;var n=yi(t);return n==A||n==N?t.size:Lr(t).length},Ge.snakeCase=Hu,Ge.some=function(t,n,e){var o=$a(t)?zn:ao;return e&&Pi(t,n,e)&&(n=r),o(t,fi(n,3))},Ge.sortedIndex=function(t,n){return uo(t,n)},Ge.sortedIndexBy=function(t,n,e){return so(t,n,fi(e,2))},Ge.sortedIndexOf=function(t,n){var e=null==t?0:t.length;if(e){var r=uo(t,n);if(r<e&&Ga(t[r],n))return r}return-1},Ge.sortedLastIndex=function(t,n){return uo(t,n,!0)},Ge.sortedLastIndexBy=function(t,n,e){return so(t,n,fi(e,2),!0)},Ge.sortedLastIndexOf=function(t,n){if(null==t?0:t.length){var e=uo(t,n,!0)-1;if(Ga(t[e],n))return e}return-1},Ge.startCase=Yu,Ge.startsWith=function(t,n,e){return t=bu(t),e=null==e?0:cr(gu(e),0,t.length),n=fo(n),t.slice(e,e+n.length)==n},Ge.subtract=xs,Ge.sum=function(t){return t&&t.length?Jn(t,is):0},Ge.sumBy=function(t,n){return t&&t.length?Jn(t,fi(n,2)):0},Ge.template=function(t,n,e){var o=Ge.templateSettings;e&&Pi(t,n,e)&&(n=r),t=bu(t),n=Cu({},n,o,ni);var i,a,u=Cu({},n.imports,o.imports,ni),s=Ou(u),c=ne(u,s),l=0,f=n.interpolate||Pt,h="__p += '",d=Tt((n.escape||Pt).source+"|"+f.source+"|"+(f===tt?pt:Pt).source+"|"+(n.evaluate||Pt).source+"|$","g"),p="//# sourceURL="+(Wt.call(n,"sourceURL")?(n.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++sn+"]")+"\n";t.replace(d,(function(n,e,r,o,u,s){return r||(r=o),h+=t.slice(l,s).replace(Ct,ue),e&&(i=!0,h+="' +\n__e("+e+") +\n'"),u&&(a=!0,h+="';\n"+u+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),l=s+n.length,n})),h+="';\n";var v=Wt.call(n,"variable")&&n.variable;if(v){if(ht.test(v))throw new At("Invalid `variable` option passed into `_.template`")}else h="with (obj) {\n"+h+"\n}\n";h=(a?h.replace(q,""):h).replace($,"$1").replace(V,"$1;"),h="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var g=ts((function(){return xt(s,p+"return "+h).apply(r,c)}));if(g.source=h,Xa(g))throw g;return g},Ge.times=function(t,n){if((t=gu(t))<1||t>p)return[];var e=g,r=we(t,g);n=fi(n),t-=g;for(var o=Xn(r,n);++e<t;)n(e);return o},Ge.toFinite=vu,Ge.toInteger=gu,Ge.toLength=yu,Ge.toLower=function(t){return bu(t).toLowerCase()},Ge.toNumber=mu,Ge.toSafeInteger=function(t){return t?cr(gu(t),-9007199254740991,p):0===t?t:0},Ge.toString=bu,Ge.toUpper=function(t){return bu(t).toUpperCase()},Ge.trim=function(t,n,e){if((t=bu(t))&&(e||n===r))return Qn(t);if(!t||!(n=fo(n)))return t;var o=ve(t),i=ve(n);return ko(o,re(o,i),oe(o,i)+1).join("")},Ge.trimEnd=function(t,n,e){if((t=bu(t))&&(e||n===r))return t.slice(0,ge(t)+1);if(!t||!(n=fo(n)))return t;var o=ve(t);return ko(o,0,oe(o,ve(n))+1).join("")},Ge.trimStart=function(t,n,e){if((t=bu(t))&&(e||n===r))return t.replace(at,"");if(!t||!(n=fo(n)))return t;var o=ve(t);return ko(o,re(o,ve(n))).join("")},Ge.truncate=function(t,n){var e=30,o="...";if(eu(n)){var i="separator"in n?n.separator:i;e="length"in n?gu(n.length):e,o="omission"in n?fo(n.omission):o}var a=(t=bu(t)).length;if(se(t)){var u=ve(t);a=u.length}if(e>=a)return t;var s=e-pe(o);if(s<1)return o;var c=u?ko(u,0,s).join(""):t.slice(0,s);if(i===r)return c+o;if(u&&(s+=c.length-s),uu(i)){if(t.slice(s).search(i)){var l,f=c;for(i.global||(i=Tt(i.source,bu(vt.exec(i))+"g")),i.lastIndex=0;l=i.exec(f);)var h=l.index;c=c.slice(0,h===r?s:h)}}else if(t.indexOf(fo(i),s)!=s){var d=c.lastIndexOf(i);d>-1&&(c=c.slice(0,d))}return c+o},Ge.unescape=function(t){return(t=bu(t))&&Y.test(t)?t.replace(Z,ye):t},Ge.uniqueId=function(t){var n=++Lt;return bu(t)+n},Ge.upperCase=Ju,Ge.upperFirst=Xu,Ge.each=ba,Ge.eachRight=wa,Ge.first=Zi,cs(Ge,(Cs={},Pr(Ge,(function(t,n){Wt.call(Ge.prototype,n)||(Cs[n]=t)})),Cs),{chain:!1}),Ge.VERSION="4.17.21",Nn(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Ge[t].placeholder=Ge})),Nn(["drop","take"],(function(t,n){$e.prototype[t]=function(e){e=e===r?1:be(gu(e),0);var o=this.__filtered__&&!n?new $e(this):this.clone();return o.__filtered__?o.__takeCount__=we(e,o.__takeCount__):o.__views__.push({size:we(e,g),type:t+(o.__dir__<0?"Right":"")}),o},$e.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}})),Nn(["filter","map","takeWhile"],(function(t,n){var e=n+1,r=1==e||3==e;$e.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:fi(t,3),type:e}),n.__filtered__=n.__filtered__||r,n}})),Nn(["head","last"],(function(t,n){var e="take"+(n?"Right":"");$e.prototype[t]=function(){return this[e](1).value()[0]}})),Nn(["initial","tail"],(function(t,n){var e="drop"+(n?"":"Right");$e.prototype[t]=function(){return this.__filtered__?new $e(this):this[e](1)}})),$e.prototype.compact=function(){return this.filter(is)},$e.prototype.find=function(t){return this.filter(t).head()},$e.prototype.findLast=function(t){return this.reverse().find(t)},$e.prototype.invokeMap=Xr((function(t,n){return"function"==typeof t?new $e(this):this.map((function(e){return Dr(e,t,n)}))})),$e.prototype.reject=function(t){return this.filter(Wa(fi(t)))},$e.prototype.slice=function(t,n){t=gu(t);var e=this;return e.__filtered__&&(t>0||n<0)?new $e(e):(t<0?e=e.takeRight(-t):t&&(e=e.drop(t)),n!==r&&(e=(n=gu(n))<0?e.dropRight(-n):e.take(n-t)),e)},$e.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},$e.prototype.toArray=function(){return this.take(g)},Pr($e.prototype,(function(t,n){var e=/^(?:filter|find|map|reject)|While$/.test(n),o=/^(?:head|last)$/.test(n),i=Ge[o?"take"+("last"==n?"Right":""):n],a=o||/^find/.test(n);i&&(Ge.prototype[n]=function(){var n=this.__wrapped__,u=o?[1]:arguments,s=n instanceof $e,c=u[0],l=s||$a(n),f=function(t){var n=i.apply(Ge,Wn([t],u));return o&&h?n[0]:n};l&&e&&"function"==typeof c&&1!=c.length&&(s=l=!1);var h=this.__chain__,d=!!this.__actions__.length,p=a&&!h,v=s&&!d;if(!a&&l){n=v?n:new $e(this);var g=t.apply(n,u);return g.__actions__.push({func:va,args:[f],thisArg:r}),new qe(g,h)}return p&&v?t.apply(this,u):(g=this.thru(f),p?o?g.value()[0]:g.value():g)})})),Nn(["pop","push","shift","sort","splice","unshift"],(function(t){var n=Dt[t],e=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Ge.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var o=this.value();return n.apply($a(o)?o:[],t)}return this[e]((function(e){return n.apply($a(e)?e:[],t)}))}})),Pr($e.prototype,(function(t,n){var e=Ge[n];if(e){var r=e.name+"";Wt.call(Oe,r)||(Oe[r]=[]),Oe[r].push({name:n,func:e})}})),Oe[Uo(r,2).name]=[{name:"wrapper",func:r}],$e.prototype.clone=function(){var t=new $e(this.__wrapped__);return t.__actions__=Do(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=Do(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=Do(this.__views__),t},$e.prototype.reverse=function(){if(this.__filtered__){var t=new $e(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},$e.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,e=$a(t),r=n<0,o=e?t.length:0,i=function(t,n,e){var r=-1,o=e.length;for(;++r<o;){var i=e[r],a=i.size;switch(i.type){case"drop":t+=a;break;case"dropRight":n-=a;break;case"take":n=we(n,t+a);break;case"takeRight":t=be(t,n-a)}}return{start:t,end:n}}(0,o,this.__views__),a=i.start,u=i.end,s=u-a,c=r?u:a-1,l=this.__iteratees__,f=l.length,h=0,d=we(s,this.__takeCount__);if(!e||!r&&o==s&&d==s)return yo(t,this.__actions__);var p=[];t:for(;s--&&h<d;){for(var v=-1,g=t[c+=n];++v<f;){var y=l[v],m=y.iteratee,_=y.type,b=m(g);if(2==_)g=b;else if(!b){if(1==_)continue t;break t}}p[h++]=g}return p},Ge.prototype.at=ga,Ge.prototype.chain=function(){return pa(this)},Ge.prototype.commit=function(){return new qe(this.value(),this.__chain__)},Ge.prototype.next=function(){this.__values__===r&&(this.__values__=pu(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?r:this.__values__[this.__index__++]}},Ge.prototype.plant=function(t){for(var n,e=this;e instanceof Ke;){var o=Fi(e);o.__index__=0,o.__values__=r,n?i.__wrapped__=o:n=o;var i=o;e=e.__wrapped__}return i.__wrapped__=t,n},Ge.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof $e){var n=t;return this.__actions__.length&&(n=new $e(this)),(n=n.reverse()).__actions__.push({func:va,args:[ea],thisArg:r}),new qe(n,this.__chain__)}return this.thru(ea)},Ge.prototype.toJSON=Ge.prototype.valueOf=Ge.prototype.value=function(){return yo(this.__wrapped__,this.__actions__)},Ge.prototype.first=Ge.prototype.head,Qt&&(Ge.prototype[Qt]=function(){return this}),Ge}();mn?((mn.exports=me)._=me,yn._=me):gn._=me}).call(h)}(d,d.exports);var p=d.exports,v=require("spark-md5"),g=function(t,n){void 0===n&&(n=[]);var e="n";if(n.length>0&&(e+="".concat(n[0].token).concat(n[0].value)),t){var r=t.getPath();r.length>0&&(e=r.map((function(t){return t.model.id})).join("=>")+"=>".concat(e))}return v.hash(e).slice(0,6)};function y(t,n){void 0===n&&(n=["C","TM","GN","PC"]);for(var e,r=[],o=new RegExp("\\b(".concat(n.join("|"),")\\[([^\\]]*)\\]"),"g");null!==(e=o.exec(t));){var i=e.index+e[1].length+1,a=i+e[2].length;r.push([i,a])}return r}function m(t,n){for(var e=0,r=n.length-1;e<=r;){var o=e+r>>1,i=a(n[o],2),u=i[0],s=i[1];if(t<u)r=o-1;else{if(!(t>s))return!0;e=o+1}}return!1}var _,b,w,P,C,k,A,x,M,S=function(t){return p.filter(t,(function(n,e){return e===p.findLastIndex(t,(function(t){return n.token===t.token&&n.value===t.value}))}))},T=function(t){return t.model.moveProps.length>0},N=function(t){return t.model.setupProps.length>0},R=function(t,n){var e=t.getPath().filter((function(t){return T(t)})).length;return n&&(e+=n.getPath().filter((function(t){return T(t)})).length),e};t.Ki=void 0,(_=t.Ki||(t.Ki={}))[_.Black=1]="Black",_[_.White=-1]="White",_[_.Empty=0]="Empty",t.Theme=void 0,(b=t.Theme||(t.Theme={})).BlackAndWhite="black_and_white",b.Flat="flat",b.Subdued="subdued",b.ShellStone="shell_stone",b.SlateAndShell="slate_and_shell",b.Walnut="walnut",b.Photorealistic="photorealistic",b.Dark="dark",b.Warm="warm",t.AnalysisPointTheme=void 0,(w=t.AnalysisPointTheme||(t.AnalysisPointTheme={})).Default="default",w.Problem="problem",t.Center=void 0,(P=t.Center||(t.Center={})).Left="l",P.Right="r",P.Top="t",P.Bottom="b",P.TopRight="tr",P.TopLeft="tl",P.BottomLeft="bl",P.BottomRight="br",P.Center="c",t.Effect=void 0,(C=t.Effect||(t.Effect={})).None="",C.Ban="ban",C.Dim="dim",C.Highlight="highlight",t.Markup=void 0,function(t){t.Current="cu",t.Circle="ci",t.CircleSolid="cis",t.Square="sq",t.SquareSolid="sqs",t.Triangle="tri",t.Cross="cr",t.Number="num",t.Letter="le",t.PositiveNode="pos",t.PositiveActiveNode="posa",t.PositiveDashedNode="posda",t.PositiveDottedNode="posdt",t.PositiveDashedActiveNode="posdaa",t.PositiveDottedActiveNode="posdta",t.NegativeNode="neg",t.NegativeActiveNode="nega",t.NegativeDashedNode="negda",t.NegativeDottedNode="negdt",t.NegativeDashedActiveNode="negdaa",t.NegativeDottedActiveNode="negdta",t.NeutralNode="neu",t.NeutralActiveNode="neua",t.NeutralDashedNode="neuda",t.NeutralDottedNode="neudt",t.NeutralDashedActiveNode="neudta",t.NeutralDottedActiveNode="neudaa",t.WarningNode="wa",t.WarningActiveNode="waa",t.WarningDashedNode="wada",t.WarningDottedNode="wadt",t.WarningDashedActiveNode="wadaa",t.WarningDottedActiveNode="wadta",t.DefaultNode="de",t.DefaultActiveNode="dea",t.DefaultDashedNode="deda",t.DefaultDottedNode="dedt",t.DefaultDashedActiveNode="dedaa",t.DefaultDottedActiveNode="dedta",t.Node="node",t.DashedNode="danode",t.DottedNode="dtnode",t.ActiveNode="anode",t.DashedActiveNode="danode",t.Highlight="hl",t.None=""}(t.Markup||(t.Markup={})),t.Cursor=void 0,(k=t.Cursor||(t.Cursor={})).None="",k.BlackStone="b",k.WhiteStone="w",k.Circle="c",k.Square="s",k.Triangle="tri",k.Cross="cr",k.Clear="cl",k.Text="t",t.ProblemAnswerType=void 0,(A=t.ProblemAnswerType||(t.ProblemAnswerType={})).Right="1",A.Wrong="2",A.Variant="3",t.PathDetectionStrategy=void 0,(x=t.PathDetectionStrategy||(t.PathDetectionStrategy={})).Post="post",x.Pre="pre",x.Both="both";var D="https://s.shaowq.com",O=["A","B","C","D","E","F","G","H","J","K","L","M","N","O","P","Q","R","S","T"],E=[19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1],B=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s"],I={boardSize:19,padding:15,extent:2,interactive:!1,coordinate:!0,theme:t.Theme.Flat,background:!1,zoom:!1,showAnalysis:!1},W=((M={})[t.Theme.BlackAndWhite]={blacks:[],whites:[]},M[t.Theme.Subdued]={board:"".concat(D,"/assets/theme/subdued/board.png"),blacks:["".concat(D,"/assets/theme/subdued/black.png")],whites:["".concat(D,"/assets/theme/subdued/white.png")]},M[t.Theme.ShellStone]={board:"".concat(D,"/assets/theme/shell-stone/board.png"),blacks:["".concat(D,"/assets/theme/shell-stone/black.png")],whites:["".concat(D,"/assets/theme/shell-stone/white0.png"),"".concat(D,"/assets/theme/shell-stone/white1.png"),"".concat(D,"/assets/theme/shell-stone/white2.png"),"".concat(D,"/assets/theme/shell-stone/white3.png"),"".concat(D,"/assets/theme/shell-stone/white4.png")]},M[t.Theme.SlateAndShell]={board:"".concat(D,"/assets/theme/slate-and-shell/board.png"),blacks:["".concat(D,"/assets/theme/slate-and-shell/slate1.png"),"".concat(D,"/assets/theme/slate-and-shell/slate2.png"),"".concat(D,"/assets/theme/slate-and-shell/slate3.png"),"".concat(D,"/assets/theme/slate-and-shell/slate4.png"),"".concat(D,"/assets/theme/slate-and-shell/slate5.png")],whites:["".concat(D,"/assets/theme/slate-and-shell/shell1.png"),"".concat(D,"/assets/theme/slate-and-shell/shell2.png"),"".concat(D,"/assets/theme/slate-and-shell/shell3.png"),"".concat(D,"/assets/theme/slate-and-shell/shell4.png"),"".concat(D,"/assets/theme/slate-and-shell/shell5.png")]},M[t.Theme.Walnut]={board:"".concat(D,"/assets/theme/walnut/board.jpg"),blacks:["".concat(D,"/assets/theme/walnut/black.png")],whites:["".concat(D,"/assets/theme/walnut/white.png")]},M[t.Theme.Photorealistic]={board:"".concat(D,"/assets/theme/photorealistic/board.png"),blacks:["".concat(D,"/assets/theme/photorealistic/black.png")],whites:["".concat(D,"/assets/theme/photorealistic/white.png")]},M[t.Theme.Flat]={blacks:[],whites:[]},M[t.Theme.Warm]={blacks:[],whites:[]},M[t.Theme.Dark]={blacks:[],whites:[]},M),L="rgba(136, 170, 60, 1)",j="rgba(206, 210, 83, 1)",z="rgba(242, 217, 60, 1)",F="rgba(236, 146, 73, 1)",G=["B","MN","W"],U=["AB","AE","AW"],K=["A","C","DM","GB","GW","HO","N","UC","V"],q=["BM","DO","IT"],$=["AR","CR","LB","LN","MA","SL","SQ","TR"],V=["AP","CA","FF","GM","ST","SZ"],Z=["TE","KO","AN","BR","BT","CP","DT","EV","GN","GC","ON","OT","PB","PC","PW","RE","RO","RU","SO","TM","US","WR","WT"],H=["PI","PAI","NID","PAT"],Y=["AB","AE","AW","MA","SL","SQ","TR"],J=new RegExp(/([A-Z]*)\[([\s\S]*?)\]/),X=function(){function t(t,n){this.type="-",this._value="",this._values=[],this.token=t,"string"==typeof n||n instanceof String?this.value=n:Array.isArray(n)&&(this.values=n)}return Object.defineProperty(t.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,Y.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),t.prototype.toString=function(){return"".concat(this.token).concat(this._values.map((function(t){return"[".concat(t,"]")})).join(""))},t}(),Q=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="move",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,Y.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(X),tt=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="setup",r}return r(n,t),n.from=function(t){var e=t.match(J),r="",o=u([],a(t.matchAll(/\[([\s\S]*?)\]/g)),!1).map((function(t){return t[1]}));return e&&(r=e[1]),new n(r,o)},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,Y.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(X),nt=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="node-annotation",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,Y.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(X),et=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="move-annotation",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,Y.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(X),rt=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n}(X),ot=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="markup",r}return r(n,t),n.from=function(t){var e=t.match(J),r="",o=u([],a(t.matchAll(/\[([\s\S]*?)\]/g)),!1).map((function(t){return t[1]}));return e&&(r=e[1]),new n(r,o)},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,Y.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(X),it=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="root",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,Y.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(X),at=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="game-info",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,Y.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(X),ut=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="custom",r}return r(n,t),n.from=function(t){var e=t.match(/([A-Z]*)\[([\s\S]*?)\]/);return e?new n(e[1],e[2]):new n("","")},Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,Y.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(X),st=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.type="Timing",r}return r(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t,Y.includes(this.token)?this._values=t.split(","):this._values=[t]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"values",{get:function(){return this._values},set:function(t){this._values=t,this._value=t.join(",")},enumerable:!1,configurable:!0}),n}(X),ct=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n}(X),lt=0,ft=[],ht=function(t){return[t.length,t.length>0?t[0].length:0]},dt=function(t,n,e,r){var o=ht(t);n>=0&&n<o[1]&&e>=0&&e<o[0]&&(t[n][e]!==r||ft.includes("".concat(n,",").concat(e))?0===t[n][e]&&(lt+=1):(ft.push("".concat(n,",").concat(e)),dt(t,n-1,e,r),dt(t,n+1,e,r),dt(t,n,e-1,r),dt(t,n,e+1,r)))},pt=function(t,n,e,r){var o=ht(t);return lt=0,ft=[],n<0||e<0||n>o[1]-1||e>o[0]-1||0===t[n][e]?{liberty:4,recursionPath:[]}:(dt(t,n,e,r),{liberty:lt,recursionPath:ft})},vt=function(t,n,e,r){var o=t,i=pt(t,n,e-1,r),a=i.liberty,u=i.recursionPath,s=pt(t,n,e+1,r),c=s.liberty,l=s.recursionPath,f=pt(t,n-1,e,r),h=f.liberty,d=f.recursionPath,p=pt(t,n+1,e,r),v=p.liberty,g=p.recursionPath;return 0===a&&u.forEach((function(t){var n=t.split(",");o[parseInt(n[0])][parseInt(n[1])]=0})),0===c&&l.forEach((function(t){var n=t.split(",");o[parseInt(n[0])][parseInt(n[1])]=0})),0===h&&d.forEach((function(t){var n=t.split(",");o[parseInt(n[0])][parseInt(n[1])]=0})),0===v&&g.forEach((function(t){var n=t.split(",");o[parseInt(n[0])][parseInt(n[1])]=0})),o},gt=function(t,n,e,r){var o=pt(t,n,e-1,r),i=o.liberty,a=o.recursionPath,u=pt(t,n,e+1,r),s=u.liberty,c=u.recursionPath,l=pt(t,n-1,e,r),f=l.liberty,h=l.recursionPath,d=pt(t,n+1,e,r),p=d.liberty,v=d.recursionPath;return 0===i&&a.length>0||(0===s&&c.length>0||(0===f&&h.length>0||0===p&&v.length>0))},yt=function(t,n,e,r){var o,i,a=p.cloneDeep(t);if(n<0||e<0||n>=t.length||e>=(null!==(i=null===(o=t[0])||void 0===o?void 0:o.length)&&void 0!==i?i:0))return!1;if(0!==t[n][e])return!1;a[n][e]=r;var u=pt(a,n,e,r).liberty;return!!gt(a,n,e,-r)||!gt(a,n,e,r)&&0!==u},mt=function(){function t(t,n){void 0===n&&(n={ignorePropList:[]}),this.content=t,this.parseOptions=n,this.NEW_NODE=";",this.BRANCHING=["(",")"],this.PROPERTY=["[","]"],this.LIST_IDENTITIES=["AW","AB","AE","AR","CR","DD","LB","LN","MA","SL","SQ","TR","VW","TB","TW"],this.NODE_DELIMITERS=[this.NEW_NODE].concat(this.BRANCHING),this.tree=new f,this.root=null,this.node=null,this.currentNode=null,this.parentNode=null,this.nodeProps=new Map,"string"==typeof t?this.parse(t):"object"==typeof t&&this.setRoot(t)}return t.prototype.setRoot=function(t){return this.root=t,this},t.prototype.toSgf=function(){return"(".concat(this.nodeToString(this.root),")")},t.prototype.toSgfWithoutAnalysis=function(){var t="(".concat(this.nodeToString(this.root),")");return p.replace(t,/](A\[.*?\])/g,"]")},t.prototype.parse=function(t){if(t){t=t.replace(/\s+(?![^\[\]]*])/gm,"");for(var n=0,e=0,r=[],o=y(t).sort((function(t,n){return t[0]-n[0]})),i=function(i){var c=t[i],l=m(i,o);if(s.NODE_DELIMITERS.includes(c)&&!l){var f=t.slice(n,i);if(""!==f){var h=[],d=[],p=[],v=[],y=[],_=[],b=[],w=[],P=u([],a(f.matchAll(RegExp(/\w+(\[[^\]]*?\](?:\r?\n?\s[^\]]*?)*){1,}/,"g"))),!1);if(P.forEach((function(t){var n=t[0].match(/([A-Z]+)\[/);if(n){var e=n[1];G.includes(e)&&h.push(Q.from(t[0])),U.includes(e)&&d.push(tt.from(t[0])),V.includes(e)&&p.push(it.from(t[0])),$.includes(e)&&v.push(ot.from(t[0])),Z.includes(e)&&y.push(at.from(t[0])),K.includes(e)&&_.push(nt.from(t[0])),q.includes(e)&&b.push(et.from(t[0])),H.includes(e)&&w.push(ut.from(t[0]))}})),P.length>0){var C=g(s.currentNode,h),k=s.tree.parse({id:C,name:C,index:e,number:0,moveProps:h,setupProps:d,rootProps:p,markupProps:v,gameInfoProps:y,nodeAnnotationProps:_,moveAnnotationProps:b,customProps:w});s.currentNode?(s.currentNode.addChild(k),k.model.number=R(k)):(s.root=k,s.parentNode=k),s.currentNode=k,e+=1}}}("("===c&&s.currentNode&&!l&&r.push(s.currentNode),")"===c&&!l&&r.length>0)&&((k=r.pop())&&(s.currentNode=k));s.NODE_DELIMITERS.includes(c)&&!l&&(n=i)},s=this,c=0;c<t.length;c++)i(c)}},t.prototype.nodeToString=function(t){var n=this,e="";return t.walk((function(t){var r=t.model,o=r.rootProps,i=r.moveProps,s=r.customProps,c=r.setupProps,l=r.markupProps,f=r.nodeAnnotationProps,h=r.moveAnnotationProps,d=r.gameInfoProps,v=p.compact(u(u(u(u(u(u(u(u([],a(o),!1),a(s),!1),a(i),!1),a(S(c)),!1),a(S(l)),!1),a(d),!1),a(f),!1),a(h),!1));return e+=";",v.forEach((function(t){e+=t.toString()})),t.children.length>1&&t.children.forEach((function(t){e+="(".concat(n.nodeToString(t),")")})),t.children.length<2})),e},t}();require("spark-md5");var _t=function(t,n,e){return void 0===n&&(n=1),void 0===e&&(e=3),(Math.round(1e3*t)/1e3*n).toFixed(e)},bt=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return!!(null==e?void 0:e.value.includes("CHOICE"))},wt=bt,Pt=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return null==e?void 0:e.value.includes("FORCE")},Ct=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return null==e?void 0:e.value.includes("NOTTHIS")},kt=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return!!(null==e?void 0:e.value.includes("RIGHT"))},At=function(t){var n=t.getPath()[0].first((function(t){return kt(t)}));return(null==n?void 0:n.model.id)===t.model.id},xt=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return!!(null==e?void 0:e.value.includes("VARIANT"))},Mt=function(t){var n,e=null===(n=t.model.nodeAnnotationProps)||void 0===n?void 0:n.find((function(t){return"C"===t.token}));return!(null==e?void 0:e.value.includes("VARIANT"))&&!(null==e?void 0:e.value.includes("RIGHT"))||!e},St=function(n,e,r,o,i){var a;void 0===r&&(r=t.PathDetectionStrategy.Post);var u=null!=o?o:n.getPath(),s=null!==(a=null==i?void 0:i.filter((function(t){return e(t)})))&&void 0!==a?a:n.all((function(t){return e(t)})),c=u.filter((function(t){return e(t)}));switch(r){case t.PathDetectionStrategy.Post:return s.length>0;case t.PathDetectionStrategy.Pre:return c.length>0;case t.PathDetectionStrategy.Both:return c.length>0||s.length>0;default:return!1}},Tt=function(n,e,r,o){return void 0===e&&(e=t.PathDetectionStrategy.Post),St(n,kt,e,r,o)},Nt=function(n,e,r,o){return void 0===e&&(e=t.PathDetectionStrategy.Post),St(n,bt,e,r,o)},Rt=Nt,Dt=function(n,e,r,o){return void 0===e&&(e=t.PathDetectionStrategy.Post),St(n,xt,e,r,o)},Ot=function(n,e,r,o){return void 0===e&&(e=t.PathDetectionStrategy.Post),St(n,Mt,e,r,o)},Et=function(t,n){void 0===n&&(n=1);var e=[{value:1,symbol:""},{value:1e3,symbol:"k"},{value:1e6,symbol:"M"},{value:1e9,symbol:"G"},{value:1e12,symbol:"T"},{value:1e15,symbol:"P"},{value:1e18,symbol:"E"}].slice().reverse().find((function(n){return t>=n.value}));return e?(t/e.value).toFixed(n).replace(/\.0+$|(\.[0-9]*[1-9])0+$/,"$1")+e.symbol:"0"},Bt=function(t){var n="B"===t[0]?1:-1,e=/\[(.*)\]/.exec(t);if(e){var r=e[1];return{x:B.indexOf(r[0]),y:B.indexOf(r[1]),ki:n}}return{x:-1,y:-1,ki:0}},It=function(t){return{x:O.indexOf(t[0]),y:E.indexOf(parseInt(t.substr(1),0))}},Wt=function(t,n){if(void 0===n&&(n=0),0===n)return t;var e=p.clone(t),r=B.indexOf(t[2])-n;return e.substr(0,2)+B[r]+e.substr(3)},Lt=function(t,n,e){if(void 0===n&&(n=0),void 0===e&&(e=0),"pass"===t)return t;var r=O.indexOf(t[0])+n,o=E.indexOf(parseInt(t.substr(1),0))+e;return"".concat(O[r]).concat(E[o])},jt=function(t,n,e,r){if(void 0===e&&(e=1),void 0===r&&(r=!1),!t||!n)return"";var o=zt(t,n);r&&(o=-o);var i=o.toFixed(e);return o>0?"+".concat(i):"".concat(i)},zt=function(t,n){var e="B"===t.currentPlayer?1:-1;return Math.round((n.scoreLead-t.scoreLead)*e*1e3)/1e3},Ft=function(t,n){var e="B"===t.currentPlayer?1:-1;return Math.round((n.winrate-t.winrate)*e*1e3*100)/1e3},Gt=function(t,n){var e=n.prior,r=n.order,o=zt(t,n);return e>=.5||e>=.1&&r<3&&o>-.3||0===r||o>=0?L:e>.05&&o>-.5||e>.01&&o>-.1?j:e>.01&&o>-1?z:F},Ut=function(t,n){return{id:t,name:t,number:n||0,rootProps:[],moveProps:[],setupProps:[],markupProps:[],gameInfoProps:[],nodeAnnotationProps:[],moveAnnotationProps:[],customProps:[]}},Kt=function(t,n,e){var r=new f,i=Q.from(t),a=g(n,[i]),u=1;n&&(u=R(n)+1);var s=Ut(a,u);return s.moveProps=[i],r.parse(o(o({},s),e))},qt=function(t){return new Array(t[0]).fill(0).map((function(){return new Array(t[1]).fill(0)}))},$t=function(t){return new Array(t[0]).fill("").map((function(){return new Array(t[1]).fill("")}))},Vt=function(t,n){void 0===n&&(n=19);for(var e=n-1,r=0,o=n-1,i=0,a=0;a<t.length;a++)for(var u=0;u<t[a].length;u++){0!==t[a][u]&&(e>a&&(e=a),r<a&&(r=a),o>u&&(o=u),i<u&&(i=u))}return{leftMost:e,rightMost:r,topMost:o,bottomMost:i}},Zt=function(n,e){void 0===e&&(e=19);var r=Vt(n,e),o=r.leftMost,i=r.rightMost,a=r.topMost<e-1-r.bottomMost,u=o<e-1-i;return a&&u?t.Center.TopLeft:!a&&u?t.Center.BottomLeft:a&&!u?t.Center.TopRight:a||u?t.Center.Center:t.Center.BottomRight},Ht=function(n,e,r){void 0===e&&(e=19),void 0===r&&(r=2);var o=[19,19],i=Zt(n),a=Vt(n,e),u=a.leftMost,s=a.rightMost,c=a.topMost,l=a.bottomMost;return i===t.Center.TopLeft&&(o[0]=s+r+1,o[1]=l+r+1),i===t.Center.TopRight&&(o[0]=e-u+r,o[1]=l+r+1),i===t.Center.BottomLeft&&(o[0]=s+r+1,o[1]=e-c+r),i===t.Center.BottomRight&&(o[0]=e-u+r,o[1]=e-c+r),o[0]=Math.min(o[0],e),o[1]=Math.min(o[1],e),o},Yt=function(t,n,e){void 0===n&&(n=2),void 0===e&&(e=19);var r=Vt(t),o=r.leftMost,i=r.rightMost,a=r.topMost,u=r.bottomMost,s=e-1;return[[o-n<0?0:o-n,a-n<0?0:a-n],[i+n>s?s:i+n,u+n>s?s:u+n]]},Jt=function(n,e,r,o){void 0===e&&(e=19),void 0===r&&(r=19),void 0===o&&(o=19);var i=o-e,a=o-r,u=i,s=a;switch(Zt(n)){case t.Center.TopLeft:u=0,s=-a;break;case t.Center.TopRight:u=i,s=-a;break;case t.Center.BottomLeft:u=0,s=0;break;case t.Center.BottomRight:u=i,s=0}return{x:u,y:s}};function Xt(t,n,e){void 0===t&&(t=qt([19,19])),void 0===e&&(e=!1);for(var r=t.length,o=0,i=t[0].length,a=0,u=!0,s=0;s<t.length;s++)for(var c=0;c<t[0].length;c++)0!==t[s][c]&&(u=!1,r=Math.min(r,s),o=Math.max(o,s),i=Math.min(i,c),a=Math.max(a,c));if(u)return[[0,t.length-1],[0,t[0].length-1]];if(e)r=Math.max(0,r-n),o=Math.min(t.length-1,o+n),i=Math.max(0,i-n),a=Math.min(t[0].length-1,a+n);else{var l=Math.max(r-n,0),f=Math.min(o+n,t.length-1),h=Math.max(i-n,0),d=Math.min(a+n,t[0].length-1),p=Math.max(f-l,d-h);(o=(r=l)+p)>=t.length&&(r=(o=t.length-1)-p),(a=(i=h)+p)>=t[0].length&&(i=(a=t[0].length-1)-p)}return[[r,o],[i,a]]}function Qt(t,n,e,r){if(n<0||e<0)return t;var o=p.cloneDeep(t);return o[n][e]=r,vt(o,n,e,-r)}var tn=function(t,n){t.getPath().forEach((function(t){var e=t.model.setupProps;e.filter((function(t){return t.value===n})).length>0?t.model.setupProps=e.filter((function(t){return t.value!==n})):e.forEach((function(e){e.values=e.values.filter((function(t){return t!==n})),0===e.values.length&&(t.model.setupProps=t.model.setupProps.filter((function(t){return t.token!==e.token})))}))}))},nn=function(n,e){void 0===e&&(e=19);var r,o,i=n.getPath(),a=i[0],u=0,s=rn(n,e),c=qt([s,s]),l=qt([s,s]),f=$t([s,s]),h=$t([s,s]);return i.forEach((function(e,a){var l=e.model,d=l.moveProps,p=l.setupProps;if(l.rootProps,p.length>0&&(u+=1),d.forEach((function(n){var l=B.indexOf(n.value[0]),d=B.indexOf(n.value[1]);l<0||d<0||l<s&&d<s&&(r=l,o=d,c=Qt(c,l,d,"B"===n.token?t.Ki.Black:t.Ki.White),void 0!==r&&void 0!==o&&r>=0&&o>=0&&(h[r][o]=(e.model.number||a-u).toString()),a===i.length-1&&(f[r][o]=t.Markup.Current))})),p.forEach((function(t){t.values.forEach((function(n){var e=B.indexOf(n[0]),i=B.indexOf(n[1]);e<0||i<0||e<s&&i<s&&(r=e,o=i,c[e][i]="AB"===t.token?1:-1,"AE"===t.token&&(c[e][i]=0))}))})),0===p.length&&n.isRoot()){var v=n.children[0];if(v&&N(v)&&!T(v))v.model.setupProps.forEach((function(t){t.values.forEach((function(n){var e=B.indexOf(n[0]),i=B.indexOf(n[1]);e<0||i<0||e<s&&i<s&&(r=e,o=i,c[e][i]="AB"===t.token?1:-1,"AE"===t.token&&(c[e][i]=0))}))}))}for(var g=0;g<s;g++)for(var y=0;y<s;y++)0===c[g][y]&&(h[g][y]="")})),a&&a.all((function(n){var e=n.model,r=e.moveProps,o=e.setupProps;return e.rootProps,o.length>0&&(u+=1),o.forEach((function(n){n.values.forEach((function(e){var r=B.indexOf(e[0]),o=B.indexOf(e[1]);r>=0&&o>=0&&r<s&&o<s&&(l[r][o]=t.Ki.Black,"AE"===n.token&&(l[r][o]=0))}))})),r.forEach((function(n){var e=B.indexOf(n.value[0]),r=B.indexOf(n.value[1]);e>=0&&r>=0&&e<s&&r<s&&(l[e][r]=t.Ki.Black)})),!0})),n.model.markupProps.forEach((function(n){var e=n.token;n.values.forEach((function(n){var r=B.indexOf(n[0]),o=B.indexOf(n[1]);if(!(r<0||o<0)&&r<s&&o<s){var i=void 0;switch(e){case"CR":i=t.Markup.Circle;break;case"SQ":i=t.Markup.Square;break;case"TR":i=t.Markup.Triangle;break;case"MA":i=t.Markup.Cross;break;default:i=n.split(":")[1]}f[r][o]=i}}))})),{mat:c,visibleAreaMat:l,markup:f,numMarkup:h}},en=function(t,n){if(t)return G.includes(n)?t.model.moveProps.find((function(t){return t.token===n})):K.includes(n)?t.model.nodeAnnotationProps.find((function(t){return t.token===n})):q.includes(n)?t.model.moveAnnotationProps.find((function(t){return t.token===n})):V.includes(n)?t.model.rootProps.find((function(t){return t.token===n})):U.includes(n)?t.model.setupProps.find((function(t){return t.token===n})):$.includes(n)?t.model.markupProps.find((function(t){return t.token===n})):Z.includes(n)?t.model.gameInfoProps.find((function(t){return t.token===n})):null},rn=function(t,n){var e;void 0===n&&(n=19);var r=t.getPath()[0];return Math.min(parseInt(String((null===(e=en(r,"SZ"))||void 0===e?void 0:e.value)||n)),29)},on=function(n,e){if(void 0===e&&(e=t.Ki.Black),n){var r=n.first((function(t){return N(t)}));if(r){var o=r.first((function(t){return T(t)}));return o?an(o):e}}return e},an=function(n,e){var r,o;void 0===e&&(e=t.Ki.Black);var i=null===(o=null===(r=n.model)||void 0===r?void 0:r.moveProps)||void 0===o?void 0:o[0];switch(null==i?void 0:i.token){case"W":return t.Ki.White;case"B":return t.Ki.Black;default:return e}},un=function(){function t(t,n,e,r){this.ctx=t,this.x=n,this.y=e,this.ki=r,this.globalAlpha=1,this.size=0}return t.prototype.draw=function(){console.log("TBD")},t.prototype.setGlobalAlpha=function(t){this.globalAlpha=t},t.prototype.setSize=function(t){this.size=t},t}(),sn=function(t){function n(n,e,r,o,i){return t.call(this,n,e,r,o)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.size,i=t.ki,a=t.globalAlpha;o<=0||(n.save(),n.beginPath(),n.globalAlpha=a,n.arc(e,r,o/2,0,2*Math.PI,!0),n.lineWidth=1,n.strokeStyle="#000",1===i?n.fillStyle="#000":-1===i&&(n.fillStyle="#fff"),n.fill(),n.stroke(),n.restore())},n}(un),cn=function(t){function n(n,e,r,o,i,a,u){var s=t.call(this,n,e,r,o)||this;return s.mod=i,s.blacks=a,s.whites=u,s}return r(n,t),n.prototype.draw=function(){var t,n=this,e=n.ctx,r=n.x,o=n.y,i=n.size,a=n.ki,u=n.blacks,s=n.whites,c=n.mod;i<=0||(t=1===a?u[c%u.length]:s[c%s.length])&&e.drawImage(t,r-i/2,o-i/2,i,i)},n}(un),ln=function(){function n(n,e,r,o,i,a,u,s){void 0===u&&(u=t.AnalysisPointTheme.Default);var c=this;this.ctx=n,this.x=e,this.y=r,this.r=o,this.rootInfo=i,this.moveInfo=a,this.theme=u,this.outlineColor=s,this.drawProblemAnalysisPoint=function(){var t=c,n=t.ctx,e=t.x,r=t.y,o=t.r,i=t.rootInfo,a=t.moveInfo,u=t.outlineColor,s=a.order,l=Gt(i,a);if(s<5){n.beginPath(),n.arc(e,r,o,0,2*Math.PI,!0),n.lineWidth=0,n.strokeStyle="rgba(255,255,255,0)";var f=n.createRadialGradient(e,r,.9*o,e,r,o);f.addColorStop(0,l),f.addColorStop(.9,"rgba(255, 255, 255, 0"),n.fillStyle=f,n.fill(),u&&(n.beginPath(),n.arc(e,r,o,0,2*Math.PI,!0),n.lineWidth=4,n.strokeStyle=u,n.stroke());var h=o/1.5;n.font="".concat(.8*h,"px Tahoma"),n.fillStyle="black",n.textAlign="center",n.font="".concat(h,"px Tahoma");var d=jt(i,a);n.fillText(d,e,r),n.font="".concat(.8*h,"px Tahoma"),n.fillStyle="black",n.textAlign="center",n.fillText(Et(a.visits),e,r+o/2+h/8)}else c.drawCandidatePoint()},this.drawDefaultAnalysisPoint=function(){var t=c,n=t.ctx,e=t.x,r=t.y,o=t.r,i=t.rootInfo,a=t.moveInfo,u=a.order,s=Gt(i,a);if(u<5){n.beginPath(),n.arc(e,r,o,0,2*Math.PI,!0),n.lineWidth=0,n.strokeStyle="rgba(255,255,255,0)";var l=n.createRadialGradient(e,r,.9*o,e,r,o);l.addColorStop(0,s),l.addColorStop(.9,"rgba(255, 255, 255, 0"),n.fillStyle=l,n.fill();var f=o/1.5;n.font="".concat(.8*f,"px Tahoma"),n.fillStyle="black",n.textAlign="center";var h="B"===i.currentPlayer?a.winrate:1-a.winrate;n.fillText(_t(h,100,1),e,r-o/2+f/5),n.font="".concat(f,"px Tahoma");var d=jt(i,a);n.fillText(d,e,r+f/3),n.font="".concat(.8*f,"px Tahoma"),n.fillStyle="black",n.textAlign="center",n.fillText(Et(a.visits),e,r+o/2+f/3);var p=a.order;n.fillText((p+1).toString(),e+o,r-o/2)}else c.drawCandidatePoint()},this.drawCandidatePoint=function(){var t=c,n=t.ctx,e=t.x,r=t.y,o=t.r,i=t.rootInfo,a=t.moveInfo,u=Gt(i,a);n.beginPath(),n.arc(e,r,.6*o,0,2*Math.PI,!0),n.lineWidth=0,n.strokeStyle="rgba(255,255,255,0)";var s=n.createRadialGradient(e,r,.4*o,e,r,o);s.addColorStop(0,u),s.addColorStop(.95,"rgba(255, 255, 255, 0"),n.fillStyle=s,n.fill(),n.stroke()}}return n.prototype.draw=function(){var n=this,e=n.ctx;n.x,n.y;var r=n.r;n.rootInfo,n.moveInfo;var o=n.theme;r<0||(e.save(),e.shadowOffsetX=0,e.shadowOffsetY=0,e.shadowColor="#fff",e.shadowBlur=0,o===t.AnalysisPointTheme.Default?this.drawDefaultAnalysisPoint():o===t.AnalysisPointTheme.Problem&&this.drawProblemAnalysisPoint(),e.restore())},n}(),fn=function(){function t(t,n,e,r,o,i){void 0===i&&(i=""),this.ctx=t,this.x=n,this.y=e,this.s=r,this.ki=o,this.val=i,this.globalAlpha=1,this.color="",this.lineDash=[]}return t.prototype.draw=function(){console.log("TBD")},t.prototype.setGlobalAlpha=function(t){this.globalAlpha=t},t.prototype.setColor=function(t){this.color=t},t.prototype.setLineDash=function(t){this.lineDash=t},t}(),hn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.globalAlpha,u=t.color,s=.65*(.5*o);n.save(),n.beginPath(),n.globalAlpha=a,n.lineWidth=2,n.setLineDash(this.lineDash),1===i?n.strokeStyle="#fff":-1===i?n.strokeStyle="#000":n.lineWidth=3,u&&(n.strokeStyle=u),s>0&&(n.arc(e,r,s,0,2*Math.PI,!0),n.stroke()),n.restore()},n}(fn),dn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.globalAlpha,u=.5*o,s=.5*u;n.save(),n.beginPath(),n.lineWidth=3,n.globalAlpha=a,1===i?n.strokeStyle="#fff":-1===i?n.strokeStyle="#000":s=.58*u,n.moveTo(e-s,r-s),n.lineTo(e+s,r+s),n.moveTo(e+s,r-s),n.lineTo(e-s,r+s),n.closePath(),n.stroke(),n.restore()},n}(fn),pn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.val,u=t.globalAlpha,s=.8*o,c=s/1.5;n.save(),n.globalAlpha=u,1===i?n.fillStyle="#fff":-1===i&&(n.fillStyle="#000"),c=1===a.toString().length?s/1.5:2===a.toString().length?s/1.8:s/2,n.font="bold ".concat(c,"px Tahoma"),n.textAlign="center",n.textBaseline="middle",n.fillText(a.toString(),e,r+2),n.restore()},n}(fn),vn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.globalAlpha;n.save(),n.beginPath(),n.lineWidth=2,n.globalAlpha=a;var u=.55*o;1===i?n.strokeStyle="#fff":-1===i?n.strokeStyle="#000":(n.strokeStyle="#000",n.lineWidth=3),n.rect(e-u/2,r-u/2,u,u),n.stroke(),n.restore()},n}(fn),gn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.globalAlpha,u=.5*o,s=.75*u;n.save(),n.beginPath(),n.globalAlpha=a,n.moveTo(e,r-s),n.lineTo(e-s*Math.cos(.523),r+s*Math.sin(.523)),n.lineTo(e+s*Math.cos(.523),r+s*Math.sin(.523)),n.lineWidth=2,1===i?n.strokeStyle="#fff":-1===i?n.strokeStyle="#000":(n.lineWidth=3,s=.7*u),n.closePath(),n.stroke(),n.restore()},n}(fn),yn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s;t.ki;var i=t.color,a=t.globalAlpha,u=.4*(.5*o);n.save(),n.beginPath(),n.globalAlpha=a,n.lineWidth=4,n.strokeStyle=i,n.setLineDash(this.lineDash),u>0&&(n.arc(e,r,u,0,2*Math.PI,!0),n.stroke()),n.restore()},n}(fn),mn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s;t.ki;var i=t.color,a=t.globalAlpha,u=.5*(.5*o);n.save(),n.beginPath(),n.globalAlpha=a,n.lineWidth=4,n.strokeStyle=i,n.fillStyle=i,n.setLineDash(this.lineDash),u>0&&(n.arc(e,r,u,0,2*Math.PI,!0),n.stroke()),n.restore(),n.save(),n.beginPath(),n.fillStyle=i,u>0&&(n.arc(e,r,.4*u,0,2*Math.PI,!0),n.fill()),n.restore()},n}(fn),_n=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki,a=t.globalAlpha,u=t.color,s=.65*(.25*o);n.save(),n.beginPath(),n.globalAlpha=a,n.lineWidth=2,n.setLineDash(this.lineDash),1===i?n.fillStyle="#fff":-1===i?n.fillStyle="#000":n.lineWidth=3,u&&(n.fillStyle=u),s>0&&(n.arc(e,r,s,0,2*Math.PI,!0),n.fill()),n.restore()},n}(fn),bn=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.s,i=t.ki;t.globalAlpha,n.save(),n.beginPath(),n.lineWidth=2,n.globalAlpha=.6;var a=.4*o;n.fillStyle="#ffeb64",1!==i&&-1!==i||(a=.35*o),n.arc(e,r,a,0,2*Math.PI,!0),n.fill(),n.restore()},n}(fn),wn=function(){function t(t,n,e,r,o){this.ctx=t,this.x=n,this.y=e,this.size=r,this.ki=o,this.globalAlpha=1,this.color=""}return t.prototype.play=function(){console.log("TBD")},t}(),Pn="function"==typeof Buffer;"function"==typeof TextDecoder&&new TextDecoder;var Cn,kn="function"==typeof TextEncoder?new TextEncoder:void 0,An=Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=");Cn={},An.forEach((function(t,n){return Cn[t]=n}));var xn=String.fromCharCode.bind(String);"function"==typeof Uint8Array.from&&Uint8Array.from.bind(Uint8Array);var Mn="function"==typeof btoa?function(t){return btoa(t)}:Pn?function(t){return Buffer.from(t,"binary").toString("base64")}:function(t){for(var n,e,r,o,i="",a=t.length%3,u=0;u<t.length;){if((e=t.charCodeAt(u++))>255||(r=t.charCodeAt(u++))>255||(o=t.charCodeAt(u++))>255)throw new TypeError("invalid character found");i+=An[(n=e<<16|r<<8|o)>>18&63]+An[n>>12&63]+An[n>>6&63]+An[63&n]}return a?i.slice(0,a-3)+"===".substring(a):i},Sn=Pn?function(t){return Buffer.from(t).toString("base64")}:function(t){for(var n=[],e=0,r=t.length;e<r;e+=4096)n.push(xn.apply(null,t.subarray(e,e+4096)));return Mn(n.join(""))},Tn=function(t){if(t.length<2)return(n=t.charCodeAt(0))<128?t:n<2048?xn(192|n>>>6)+xn(128|63&n):xn(224|n>>>12&15)+xn(128|n>>>6&63)+xn(128|63&n);var n=65536+1024*(t.charCodeAt(0)-55296)+(t.charCodeAt(1)-56320);return xn(240|n>>>18&7)+xn(128|n>>>12&63)+xn(128|n>>>6&63)+xn(128|63&n)},Nn=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,Rn=Pn?function(t){return Buffer.from(t,"utf8").toString("base64")}:kn?function(t){return Sn(kn.encode(t))}:function(t){return Mn(t.replace(Nn,Tn))},Dn='<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-ban" viewBox="0 0 16 16">\n  <path d="M15 8a6.97 6.97 0 0 0-1.71-4.584l-9.874 9.875A7 7 0 0 0 15 8M2.71 12.584l9.874-9.875a7 7 0 0 0-9.874 9.874ZM16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0"/>\n</svg>',On=function(t){function n(n,e,r,o,i){var a=t.call(this,n,e,r,o,i)||this;a.ctx=n,a.x=e,a.y=r,a.size=o,a.ki=i,a.img=new Image,a.alpha=0,a.fadeInDuration=200,a.fadeOutDuration=150,a.stayDuration=400,a.startTime=performance.now(),a.isFadingOut=!1,a.play=function(){if(a.img.complete){var t=a,n=t.ctx,e=t.x,r=t.y,o=t.size,i=t.img,u=t.fadeInDuration,s=t.fadeOutDuration,c=performance.now();a.startTime||(a.startTime=c),n.clearRect(e-o/2,r-o/2,o,o),n.globalAlpha=a.alpha,n.drawImage(i,e-o/2,r-o/2,o,o),n.globalAlpha=1;var l=c-a.startTime;if(a.isFadingOut){var f=c-a.startTime;if(a.alpha=Math.max(1-f/s,0),f>=s)return a.alpha=0,void n.clearRect(e-o/2,r-o/2,o,o)}else a.alpha=Math.min(l/u,1),l>=u&&(a.alpha=1,setTimeout((function(){a.isFadingOut=!0,a.startTime=performance.now()}),a.stayDuration));requestAnimationFrame(a.play)}},new Blob([Dn],{type:"image/svg+xml"});var u="data:image/svg+xml;base64,".concat(function(t){return arguments.length>1&&void 0!==arguments[1]&&arguments[1]?function(t){return t.replace(/=/g,"").replace(/[+\/]/g,(function(t){return"+"==t?"-":"_"}))}(Rn(t)):Rn(t)}(Dn));return a.img=new Image,a.img.src=u,a}return r(n,t),n}(wn),En=function(t){function n(n,e,r,o,i){return t.call(this,n,e,r,o)||this}return r(n,t),n.prototype.draw=function(){var t=this,n=t.ctx,e=t.x,r=t.y,o=t.size,i=t.ki,a=t.globalAlpha;o<=0||(n.save(),n.beginPath(),n.globalAlpha=a,n.arc(e,r,o/2,0,2*Math.PI,!0),n.lineWidth=1,n.strokeStyle="#1a1a1a",1===i?n.fillStyle="#1a1a1a":-1===i&&(n.fillStyle="#F2F2F2"),n.fill(),n.stroke(),n.restore())},n}(un),Bn={};function In(){return/Mobi|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}var Wn=1;"undefined"!=typeof window&&(Wn=window.devicePixelRatio||1);var Ln="#9CA3AF",jn=function(){function n(n){var e;void 0===n&&(n={});var r=this;this.defaultOptions={boardSize:19,dynamicPadding:!1,padding:10,extent:3,interactive:!1,coordinate:!0,theme:t.Theme.BlackAndWhite,analysisPointTheme:t.AnalysisPointTheme.Default,background:!1,showAnalysis:!1,adaptiveBoardLine:!0,boardEdgeLineWidth:5,boardLineWidth:1,boardLineExtent:.5,themeFlatBoardColor:"#ECB55A",themeWarmBoardColor:"#C18B50",themeDarkBoardColor:"#2B3035",positiveNodeColor:"#4d7c0f",negativeNodeColor:"#b91c1c",neutralNodeColor:"#a16207",defaultNodeColor:"#404040",warningNodeColor:"#ffdf20",themeResources:W,moveSound:!1,adaptiveStarSize:!0,starSize:3,mobileIndicatorOffset:0},this.cursor=t.Cursor.None,this.cursorValue="",this.touchMoving=!1,this.touchStartPoint=new DOMPoint,this.cursorPoint=new DOMPoint,this.actualCursorPoint=new DOMPoint,this.setCursorWithRender=function(t,n){var e,o;void 0===n&&(n=0);var i=r.options.padding,a=r.calcSpaceAndPadding().space,u=r.transMat.inverse().transformPoint(t),s=Math.round((u.x-i+a/2)/a),c=Math.round((u.y-i+a/2)/a)+n,l=new DOMPoint(s*a,c*a),f=r.transMat.transformPoint(l);if(r.actualCursorPoint=f,r.actualCursorPosition=[s-1,c-1],1===(null===(o=null===(e=r.preventMoveMat)||void 0===e?void 0:e[s-1])||void 0===o?void 0:o[c-1]))return r.cursorPosition=[-1,-1],r.cursorPoint=new DOMPoint,void r.drawCursor();r.cursorPoint=f,r.cursorPosition=[s-1,c-1],r.drawCursor(),In()&&r.drawBoard()},this.onMouseMove=function(t){if(r.cursorCanvas){t.preventDefault();var n=new DOMPoint(t.offsetX*Wn,t.offsetY*Wn);r.setCursorWithRender(n)}},this.calcTouchPoint=function(t){var n=new DOMPoint,e=r.cursorCanvas;if(!e)return n;var o=e.getBoundingClientRect(),i=t.changedTouches;return n=new DOMPoint((i[0].clientX-o.left)*Wn,(i[0].clientY-o.top)*Wn)},this.onTouchStart=function(t){if(r.cursorCanvas){t.preventDefault(),r.touchMoving=!0;var n=r.calcTouchPoint(t);r.touchStartPoint=n,r.setCursorWithRender(n)}},this.onTouchMove=function(t){if(r.cursorCanvas){t.preventDefault(),r.touchMoving=!0;var n=r.calcTouchPoint(t),e=0;(Math.abs(n.x-r.touchStartPoint.x)>10||Math.abs(n.y-r.touchStartPoint.y)>10)&&(e=r.options.mobileIndicatorOffset),r.setCursorWithRender(n,e)}},this.onTouchEnd=function(){r.touchMoving=!1},this.calcCenter=function(){var n=r.visibleArea,e=r.options.boardSize;return 0===n[0][0]&&n[0][1]===e-1||0===n[1][0]&&n[1][1]===e-1?t.Center.Center:0===n[0][0]?0===n[1][0]?t.Center.TopLeft:n[1][1]===e-1?t.Center.BottomLeft:t.Center.Left:n[0][1]===e-1?0===n[1][0]?t.Center.TopRight:n[1][1]===e-1?t.Center.BottomRight:t.Center.Right:0===n[1][0]?t.Center.Top:n[1][1]===e-1?t.Center.Bottom:t.Center.Center},this.clearAllCanvas=function(){r.clearCanvas(r.board),r.clearCanvas(),r.clearCanvas(r.markupCanvas),r.clearCanvas(r.effectCanvas),r.clearCursorCanvas(),r.clearAnalysisCanvas()},this.clearBoard=function(){if(r.board){var t=r.board.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,t.canvas.width,t.canvas.height),t.restore())}},this.clearCanvas=function(t){if(void 0===t&&(t=r.canvas),t){var n=t.getContext("2d");n&&(n.save(),n.setTransform(1,0,0,1,0,0),n.clearRect(0,0,t.width,t.height),n.restore())}},this.clearMarkupCanvas=function(){if(r.markupCanvas){var t=r.markupCanvas.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,r.markupCanvas.width,r.markupCanvas.height),t.restore())}},this.clearCursorCanvas=function(){if(r.cursorCanvas){r.options.boardSize;var t=r.cursorCanvas.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,r.cursorCanvas.width,r.cursorCanvas.height),t.restore())}},this.clearAnalysisCanvas=function(){if(r.analysisCanvas){var t=r.analysisCanvas.getContext("2d");t&&(t.save(),t.setTransform(1,0,0,1,0,0),t.clearRect(0,0,r.analysisCanvas.width,r.analysisCanvas.height),t.restore())}},this.drawAnalysis=function(n){void 0===n&&(n=r.analysis);var e=r.analysisCanvas,o=r.options,i=o.theme,a=void 0===i?t.Theme.BlackAndWhite:i,u=o.analysisPointTheme,s=o.boardSize;o.forceAnalysisBoardSize;var c=r,l=c.mat,f=c.markup;if(e&&n){var h=e.getContext("2d");if(h){r.clearAnalysisCanvas();var d=n.rootInfo;n.moveInfos.forEach((function(e){if("pass"!==e.move){var o=JSON.parse(n.id),i=s,c=Lt(e.move,0,i-o.by),p=It(c),v=p.x,g=p.y;if(0===l[v][g]){var y,m=r.calcSpaceAndPadding(),_=m.space,b=m.scaledPadding,w=b+v*_,P=b+g*_;h.save(),a!==t.Theme.Subdued&&a!==t.Theme.BlackAndWhite&&a!==t.Theme.Flat&&a!==t.Theme.Warm&&a!==t.Theme.Dark?(h.shadowOffsetX=3,h.shadowOffsetY=3,h.shadowColor="#555",h.shadowBlur=8):(h.shadowOffsetX=0,h.shadowOffsetY=0,h.shadowColor="#fff",h.shadowBlur=0),f[v][g].includes(t.Markup.PositiveNode)&&(y=r.options.positiveNodeColor),f[v][g].includes(t.Markup.NegativeNode)&&(y=r.options.negativeNodeColor),f[v][g].includes(t.Markup.NeutralNode)&&(y=r.options.neutralNodeColor),new ln(h,w,P,.46*_,d,e,u,y).draw(),h.restore()}}}))}}},this.drawMarkup=function(n,e,o,i){void 0===n&&(n=r.mat),void 0===e&&(e=r.markup),void 0===o&&(o=r.markupCanvas),void 0===i&&(i=!0);var a=o;if(a){i&&r.clearCanvas(a);for(var u=function(o){for(var i=function(i){var u=e[o][i];null==u||u.split("|").forEach((function(e){if(null!==e&&""!==e){var u,s=r.calcSpaceAndPadding(),c=s.space,l=s.scaledPadding,f=l+o*c,h=l+i*c,d=n[o][i],p=a.getContext("2d");if(p){switch(e){case t.Markup.Circle:u=new hn(p,f,h,c,d);break;case t.Markup.Current:u=new _n(p,f,h,c,d);break;case t.Markup.PositiveActiveNode:case t.Markup.PositiveDashedActiveNode:case t.Markup.PositiveDottedActiveNode:case t.Markup.NegativeActiveNode:case t.Markup.NegativeDashedActiveNode:case t.Markup.NegativeDottedActiveNode:case t.Markup.NeutralActiveNode:case t.Markup.NeutralDashedActiveNode:case t.Markup.NeutralDottedActiveNode:case t.Markup.WarningActiveNode:case t.Markup.WarningDashedActiveNode:case t.Markup.WarningDottedActiveNode:case t.Markup.DefaultActiveNode:case t.Markup.DefaultDashedActiveNode:case t.Markup.DefaultDottedActiveNode:var v=r.nodeMarkupStyles[e],g=v.color,y=v.lineDash;(u=new mn(p,f,h,c,d,t.Markup.Circle)).setColor(g),u.setLineDash(y);break;case t.Markup.PositiveNode:case t.Markup.PositiveDashedNode:case t.Markup.PositiveDottedNode:case t.Markup.NegativeNode:case t.Markup.NegativeDashedNode:case t.Markup.NegativeDottedNode:case t.Markup.NeutralNode:case t.Markup.NeutralDashedNode:case t.Markup.NeutralDottedNode:case t.Markup.WarningNode:case t.Markup.WarningDashedNode:case t.Markup.WarningDottedNode:case t.Markup.DefaultNode:case t.Markup.DefaultDashedNode:case t.Markup.DefaultDottedNode:case t.Markup.Node:var m=r.nodeMarkupStyles[e];g=m.color,y=m.lineDash;(u=new yn(p,f,h,c,d,t.Markup.Circle)).setColor(g),u.setLineDash(y);break;case t.Markup.Square:u=new vn(p,f,h,c,d);break;case t.Markup.Triangle:u=new gn(p,f,h,c,d);break;case t.Markup.Cross:u=new dn(p,f,h,c,d);break;case t.Markup.Highlight:u=new bn(p,f,h,c,d);break;default:""!==e&&(u=new pn(p,f,h,c,d,e))}null==u||u.draw()}}}))},u=0;u<e[o].length;u++)i(u)},s=0;s<e.length;s++)u(s)}},this.drawBoard=function(t,n){void 0===t&&(t=r.board),void 0===n&&(n=!0),n&&r.clearCanvas(t),r.drawBan(t),r.drawBoardLine(t),r.drawStars(t),r.options.coordinate&&r.drawCoordinate()},this.drawBan=function(n){void 0===n&&(n=r.board);var e=r.options,o=e.theme,i=e.themeResources,a=e.padding;if(n){n.style.borderRadius="2px";var u=n.getContext("2d");if(u)if(o===t.Theme.BlackAndWhite)n.style.boxShadow="0px 0px 0px #000000",u.fillStyle="#FFFFFF",u.fillRect(-a,-a,n.width+a,n.height+a);else if(o===t.Theme.Flat)u.fillStyle=r.options.themeFlatBoardColor,u.fillRect(-a,-a,n.width+a,n.height+a);else if(o===t.Theme.Warm)u.fillStyle=r.options.themeWarmBoardColor,u.fillRect(-a,-a,n.width+a,n.height+a);else if(o===t.Theme.Dark)u.fillStyle=r.options.themeDarkBoardColor,u.fillRect(-a,-a,n.width+a,n.height+a);else if(o===t.Theme.Walnut&&void 0!==i[o].board){var s=i[o].board||"",c=Bn[s];c&&u.drawImage(c,-a,-a,n.width+a,n.height+a)}else{s=i[o].board||"";var l=Bn[s];if(l){var f=u.createPattern(l,"repeat");f&&(u.fillStyle=f,u.fillRect(0,0,n.width,n.height))}}}},this.drawBoardLine=function(n){if(void 0===n&&(n=r.board),n){var e=r,o=e.visibleArea,i=e.options,a=e.mat,u=e.preventMoveMat,s=e.cursorPosition,c=i.zoom,l=i.boardSize,f=i.boardLineWidth,h=i.boardEdgeLineWidth,d=i.boardLineExtent,p=i.adaptiveBoardLine,v=i.theme,g=n.getContext("2d");if(g){var y=r.calcSpaceAndPadding(),m=y.space,_=y.scaledPadding,b=c?d*m:0,w="#000000",P="#666666";v===t.Theme.Dark&&(w=Ln,P="#666666"),g.fillStyle="#000000";for(var C=p?.001*n.width*2:h,k=p?.001*n.width:f,A=yt(a,s[0],s[1],r.turn)&&0===u[s[0]][s[1]],x=o[0][0];x<=o[0][1];x++){g.beginPath(),0===o[0][0]&&0===x||o[0][1]===l-1&&x===l-1?g.lineWidth=C:g.lineWidth=k,In()&&x===r.cursorPosition[0]&&r.touchMoving?(g.lineWidth=2.5*g.lineWidth,g.strokeStyle=A?w:P):g.strokeStyle=w;var M=0===x||x===l-1?_+o[1][0]*m-C/2:_+o[1][0]*m;In()&&(M+=Wn/2);var S=0===x||x===l-1?m*o[1][1]+_+C/2:m*o[1][1]+_;In()&&(S-=Wn/2),o[1][0]>0&&(M-=b),o[1][1]<l-1&&(S+=b),g.moveTo(x*m+_,M),g.lineTo(x*m+_,S),g.stroke()}for(x=o[1][0];x<=o[1][1];x++){g.beginPath(),0===o[1][0]&&0===x||o[1][1]===l-1&&x===l-1?g.lineWidth=C:g.lineWidth=k,In()&&x===r.cursorPosition[1]&&r.touchMoving?(g.lineWidth=2.5*g.lineWidth,g.strokeStyle=A?w:P):g.strokeStyle=w;var T=0===x||x===l-1?_+o[0][0]*m-C/2:_+o[0][0]*m,N=0===x||x===l-1?m*o[0][1]+_+C/2:m*o[0][1]+_;In()&&(T+=Wn/2),In()&&(N-=Wn/2),o[0][0]>0&&(T-=b),o[0][1]<l-1&&(N+=b),g.moveTo(T,x*m+_),g.lineTo(N,x*m+_),g.stroke()}}}},this.drawStars=function(n){if(void 0===n&&(n=r.board),n&&19===r.options.boardSize){var e=r.options,o=e.starSize,i=e.adaptiveStarSize,a=r.visibleArea,u=n.getContext("2d"),s=i?.0035*n.width:o;if(u){var c=r.calcSpaceAndPadding(),l=c.space,f=c.scaledPadding;u.stroke(),[3,9,15].forEach((function(n){[3,9,15].forEach((function(e){n>=a[0][0]&&n<=a[0][1]&&e>=a[1][0]&&e<=a[1][1]&&(u.beginPath(),u.arc(n*l+f,e*l+f,s,0,2*Math.PI,!0),u.fillStyle="#000000",r.options.theme===t.Theme.Dark&&(u.fillStyle=Ln),u.fill())}))}))}}},this.drawCoordinate=function(){var n=r,e=n.board,o=n.options,i=n.visibleArea;if(e){var a=o.boardSize;o.zoom;var u=o.padding,s=o.boardLineExtent,c=o.theme,l=i[0][1]-i[0][0]+1,f=e.getContext("2d"),h=r.calcSpaceAndPadding(),d=h.space,p=h.scaledPadding;if(f){f.textBaseline="middle",f.textAlign="center",f.fillStyle="#000000",c===t.Theme.Dark&&(f.fillStyle=Ln),f.font="bold ".concat(d/3,"px Helvetica");var v=r.calcCenter(),g=d/1.5;v===t.Center.Center&&0===i[0][0]&&i[0][1]===a-1&&(g-=p/2),O.forEach((function(n,e){var r=d*e+p,o=g,a=g;v!==t.Center.TopLeft&&v!==t.Center.TopRight&&v!==t.Center.Top||(o-=d*s),v!==t.Center.BottomLeft&&v!==t.Center.BottomRight&&v!==t.Center.Bottom||(a-=d*s/2);var c=i[1][0]*d+u-o,h=c+l*d+2*a;e>=i[0][0]&&e<=i[0][1]&&(v!==t.Center.BottomLeft&&v!==t.Center.BottomRight&&v!==t.Center.Bottom&&f.fillText(n,r,c),v!==t.Center.TopLeft&&v!==t.Center.TopRight&&v!==t.Center.Top&&f.fillText(n,r,h))})),E.slice(-r.options.boardSize).forEach((function(n,e){var r=d*e+p,o=g,a=g;v!==t.Center.TopLeft&&v!==t.Center.BottomLeft&&v!==t.Center.Left||(o-=d*s),v!==t.Center.TopRight&&v!==t.Center.BottomRight&&v!==t.Center.Right||(a-=d*s/2);var c=i[0][0]*d+u-o,h=c+l*d+2*a;e>=i[1][0]&&e<=i[1][1]&&(v!==t.Center.TopRight&&v!==t.Center.BottomRight&&v!==t.Center.Right&&f.fillText(n.toString(),c,r),v!==t.Center.TopLeft&&v!==t.Center.BottomLeft&&v!==t.Center.Left&&f.fillText(n.toString(),h,r))}))}}},this.calcSpaceAndPadding=function(t){void 0===t&&(t=r.canvas);var n=0,e=0,o=0;if(t){var i=r.options,a=i.padding,u=i.boardSize,s=i.boardLineExtent,c=i.zoom,l=r.visibleArea;(0!==l[0][0]&&l[0][1]===u-1||0!==l[1][0]&&l[1][1]===u-1)&&(o=s),(0!==l[0][0]&&l[0][1]!==u-1||0!==l[1][0]&&l[1][1]!==u-1)&&(o=2*s);var f=c?u+o:u;e=a+(n=(t.width-2*a)/Math.ceil(f))/2}return{space:n,scaledPadding:e,scaledBoardExtent:o}},this.playEffect=function(n,e,o){void 0===n&&(n=r.mat),void 0===e&&(e=r.effectMat),void 0===o&&(o=!0);var i=r.effectCanvas;if(i){o&&r.clearCanvas(i);for(var a=0;a<e.length;a++)for(var u=0;u<e[a].length;u++){var s=e[a][u],c=r.calcSpaceAndPadding(),l=c.space,f=c.scaledPadding,h=f+a*l,d=f+u*l,p=n[a][u],v=i.getContext("2d");if(v){if(s===t.Effect.Ban)new On(v,h,d,l,p).play();e[a][u]=t.Effect.None}}var g=r.options.boardSize;r.setEffectMat($t([g,g]))}},this.drawCursor=function(){var n,e,o=r.cursorCanvas;if(o){if(r.clearCursorCanvas(),r.cursor===t.Cursor.None)return;if(In()&&!r.touchMoving)return;var i=r.options.padding,u=o.getContext("2d"),s=r.calcSpaceAndPadding().space,c=r,l=c.visibleArea,f=c.cursor,h=c.cursorValue,d=a(r.cursorPosition,2),p=d[0],v=d[1];if(p<l[0][0]||p>l[0][1])return;if(v<l[1][0]||v>l[1][1])return;var g=p*s+s/2+i,y=v*s+s/2+i,m=(null===(e=null===(n=r.mat)||void 0===n?void 0:n[p])||void 0===e?void 0:e[v])||t.Ki.Empty;if(u){var _=void 0,b=.8*s;f===t.Cursor.Circle?(_=new hn(u,g,y,s,m)).setGlobalAlpha(.8):f===t.Cursor.Square?(_=new vn(u,g,y,s,m)).setGlobalAlpha(.8):f===t.Cursor.Triangle?(_=new gn(u,g,y,s,m)).setGlobalAlpha(.8):f===t.Cursor.Cross?(_=new dn(u,g,y,s,m)).setGlobalAlpha(.8):f===t.Cursor.Text?(_=new pn(u,g,y,s,m,h)).setGlobalAlpha(.8):m===t.Ki.Empty&&f===t.Cursor.BlackStone?((_=new sn(u,g,y,t.Ki.Black)).setSize(b),_.setGlobalAlpha(.5)):m===t.Ki.Empty&&f===t.Cursor.WhiteStone?((_=new sn(u,g,y,t.Ki.White)).setSize(b),_.setGlobalAlpha(.5)):f===t.Cursor.Clear&&(_=new sn(u,g,y,t.Ki.Empty)).setSize(b),null==_||_.draw()}}},this.drawStones=function(n,e,o){void 0===n&&(n=r.mat),void 0===e&&(e=r.canvas),void 0===o&&(o=!0);var i=r.options,a=i.theme,u=void 0===a?t.Theme.BlackAndWhite:a,s=i.themeResources;if(o&&r.clearCanvas(),e)for(var c=0;c<n.length;c++)for(var l=0;l<n[c].length;l++){var f=n[c][l];if(0!==f){var h=e.getContext("2d");if(h){var d=r.calcSpaceAndPadding(),p=d.space,v=d.scaledPadding,g=v+c*p,y=v+l*p,m=.45;h.save(),u!==t.Theme.Subdued&&u!==t.Theme.BlackAndWhite&&u!==t.Theme.Flat&&u!==t.Theme.Warm&&u!==t.Theme.Dark?(h.shadowOffsetX=3,h.shadowOffsetY=3,h.shadowColor="#555",h.shadowBlur=8):(h.shadowOffsetX=0,h.shadowOffsetY=0,h.shadowBlur=0);var _=void 0;switch(u){case t.Theme.BlackAndWhite:case t.Theme.Flat:case t.Theme.Warm:(_=new sn(h,g,y,f)).setSize(p*m*2);break;case t.Theme.Dark:(_=new En(h,g,y,f)).setSize(p*m*2);break;default:var b=s[u].blacks.map((function(t){return Bn[t]})),w=s[u].whites.map((function(t){return Bn[t]}));(_=new cn(h,g,y,f,c+10+l,b,w)).setSize(p*m*2)}_.draw(),h.restore()}}}},this.options=o(o({},this.defaultOptions),n);var i=this.options.boardSize;this.mat=qt([i,i]),this.preventMoveMat=qt([i,i]),this.markup=$t([i,i]),this.effectMat=$t([i,i]),this.turn=t.Ki.Black,this.cursorPosition=[-1,-1],this.actualCursorPosition=[-1,-1],this.maxhv=i,this.transMat=new DOMMatrix,this.analysis=null,this.visibleArea=[[0,i-1],[0,i-1]];var u=[8,6],s=[4,4];this.nodeMarkupStyles=((e={})[t.Markup.PositiveNode]={color:this.options.positiveNodeColor,lineDash:[]},e[t.Markup.NegativeNode]={color:this.options.negativeNodeColor,lineDash:[]},e[t.Markup.NeutralNode]={color:this.options.neutralNodeColor,lineDash:[]},e[t.Markup.DefaultNode]={color:this.options.defaultNodeColor,lineDash:[]},e[t.Markup.WarningNode]={color:this.options.warningNodeColor,lineDash:[]},e[t.Markup.PositiveDashedNode]={color:this.options.positiveNodeColor,lineDash:u},e[t.Markup.NegativeDashedNode]={color:this.options.negativeNodeColor,lineDash:u},e[t.Markup.NeutralDashedNode]={color:this.options.neutralNodeColor,lineDash:u},e[t.Markup.DefaultDashedNode]={color:this.options.defaultNodeColor,lineDash:u},e[t.Markup.WarningDashedNode]={color:this.options.warningNodeColor,lineDash:u},e[t.Markup.PositiveDottedNode]={color:this.options.positiveNodeColor,lineDash:s},e[t.Markup.NegativeDottedNode]={color:this.options.negativeNodeColor,lineDash:s},e[t.Markup.NeutralDottedNode]={color:this.options.neutralNodeColor,lineDash:s},e[t.Markup.DefaultDottedNode]={color:this.options.defaultNodeColor,lineDash:s},e[t.Markup.WarningDottedNode]={color:this.options.warningNodeColor,lineDash:s},e[t.Markup.PositiveActiveNode]={color:this.options.positiveNodeColor,lineDash:[]},e[t.Markup.NegativeActiveNode]={color:this.options.negativeNodeColor,lineDash:[]},e[t.Markup.NeutralActiveNode]={color:this.options.neutralNodeColor,lineDash:[]},e[t.Markup.DefaultActiveNode]={color:this.options.defaultNodeColor,lineDash:[]},e[t.Markup.WarningActiveNode]={color:this.options.warningNodeColor,lineDash:[]},e[t.Markup.PositiveDashedActiveNode]={color:this.options.positiveNodeColor,lineDash:u},e[t.Markup.NegativeDashedActiveNode]={color:this.options.negativeNodeColor,lineDash:u},e[t.Markup.NeutralDashedActiveNode]={color:this.options.neutralNodeColor,lineDash:u},e[t.Markup.DefaultDashedActiveNode]={color:this.options.defaultNodeColor,lineDash:u},e[t.Markup.WarningDashedActiveNode]={color:this.options.warningNodeColor,lineDash:u},e[t.Markup.PositiveDottedActiveNode]={color:this.options.positiveNodeColor,lineDash:s},e[t.Markup.NegativeDottedActiveNode]={color:this.options.negativeNodeColor,lineDash:s},e[t.Markup.NeutralDottedActiveNode]={color:this.options.neutralNodeColor,lineDash:s},e[t.Markup.DefaultDottedActiveNode]={color:this.options.defaultNodeColor,lineDash:s},e[t.Markup.WarningDottedActiveNode]={color:this.options.warningNodeColor,lineDash:s},e)}return n.prototype.setTurn=function(t){this.turn=t},n.prototype.setBoardSize=function(t){this.options.boardSize=Math.min(t,29)},n.prototype.resize=function(){if(this.canvas&&this.cursorCanvas&&this.dom&&this.board&&this.markupCanvas&&this.analysisCanvas&&this.effectCanvas){var t=[this.board,this.canvas,this.markupCanvas,this.cursorCanvas,this.analysisCanvas,this.effectCanvas],n=this.options.size,e=this.dom.clientWidth;t.forEach((function(t){n?(t.width=n*Wn,t.height=n*Wn):(t.style.width=e+"px",t.style.height=e+"px",t.width=Math.floor(e*Wn),t.height=Math.floor(e*Wn))})),this.render()}},n.prototype.createCanvas=function(t,n){void 0===n&&(n=!0);var e=document.createElement("canvas");return e.style.position="absolute",e.id=t,n||(e.style.pointerEvents="none"),e},n.prototype.init=function(t){var n=this,e=this.options.boardSize;this.mat=qt([e,e]),this.markup=$t([e,e]),this.transMat=new DOMMatrix,this.board=this.createCanvas("ghostban-board"),this.canvas=this.createCanvas("ghostban-canvas"),this.markupCanvas=this.createCanvas("ghostban-markup",!1),this.cursorCanvas=this.createCanvas("ghostban-cursor"),this.analysisCanvas=this.createCanvas("ghostban-analysis",!1),this.effectCanvas=this.createCanvas("ghostban-effect",!1),this.dom=t,t.innerHTML="",t.appendChild(this.board),t.appendChild(this.canvas),t.appendChild(this.markupCanvas),t.appendChild(this.analysisCanvas),t.appendChild(this.cursorCanvas),t.appendChild(this.effectCanvas),this.resize(),this.renderInteractive(),"undefined"!=typeof window&&window.addEventListener("resize",(function(){n.resize()}))},n.prototype.setOptions=function(t){this.options=o(o({},this.options),t),this.renderInteractive()},n.prototype.setMat=function(t){this.mat=t,this.visibleAreaMat||(this.visibleAreaMat=t)},n.prototype.setVisibleAreaMat=function(t){this.visibleAreaMat=t},n.prototype.setPreventMoveMat=function(t){this.preventMoveMat=t},n.prototype.setEffectMat=function(t){this.effectMat=t},n.prototype.setMarkup=function(t){this.markup=t},n.prototype.setCursor=function(t,n){void 0===n&&(n=""),this.cursor=t,this.cursorValue=n},n.prototype.renderInteractive=function(){var t=this.cursorCanvas;t&&(t.removeEventListener("mousemove",this.onMouseMove),t.removeEventListener("mouseout",this.onMouseMove),t.removeEventListener("touchstart",this.onTouchStart),t.removeEventListener("touchmove",this.onTouchMove),t.removeEventListener("touchend",this.onTouchEnd),this.options.interactive&&(t.addEventListener("mousemove",this.onMouseMove),t.addEventListener("mouseout",this.onMouseMove),t.addEventListener("touchstart",this.onTouchStart),t.addEventListener("touchmove",this.onTouchMove),t.addEventListener("touchend",this.onTouchEnd)))},n.prototype.setAnalysis=function(t){this.analysis=t,t?this.options.showAnalysis&&this.drawAnalysis(t):this.clearAnalysisCanvas()},n.prototype.setTheme=function(t,n){var e=this;void 0===n&&(n={});var r=this.options.themeResources;if(r[t]){var i=r[t],s=i.board,c=i.blacks,l=i.whites;this.options.theme=t,this.options=o(o(o({},this.options),{theme:t}),n),function(t,n){for(var e=0,r=function(){++e===t.length&&n()},o=0;o<t.length;o++)Bn[t[o]]||(Bn[t[o]]=new Image,Bn[t[o]].src=t[o],Bn[t[o]].onload=function(){r()},Bn[t[o]].onerror=function(){r()})}(p.compact(u(u([s],a(c),!1),a(l),!1)),(function(){e.drawBoard(),e.render()})),this.drawBoard(),this.render()}},n.prototype.calcDynamicPadding=function(t){var n=this.options.coordinate,e=this.canvas;if(e){var r=e.width/(t+2)/2,o=e.width/(t+2)/4;this.options.padding=n?r:o}},n.prototype.zoomBoard=function(n){void 0===n&&(n=!1);var e=this,r=e.canvas,o=e.analysisCanvas,i=e.board,a=e.cursorCanvas,u=e.markupCanvas,s=e.effectCanvas;if(r){var c=this.options,l=c.boardSize,f=c.extent,h=c.boardLineExtent,d=c.padding,p=c.dynamicPadding,v=Xt(this.visibleAreaMat,f,!1),g=null==r?void 0:r.getContext("2d"),y=null==i?void 0:i.getContext("2d"),m=null==a?void 0:a.getContext("2d"),_=null==u?void 0:u.getContext("2d"),b=null==o?void 0:o.getContext("2d"),w=null==s?void 0:s.getContext("2d"),P=n?v:[[0,l-1],[0,l-1]];this.visibleArea=P;var C=Math.max(P[0][1]-P[0][0],P[1][1]-P[1][0]);if(p?this.calcDynamicPadding(C):this.options.padding=I.padding,n){var k=this.calcSpaceAndPadding().space,A=this.calcCenter();p?this.calcDynamicPadding(C):this.options.padding=I.padding;var x=2*h+1;A!==t.Center.TopRight&&A!==t.Center.TopLeft&&A!==t.Center.BottomRight&&A!==t.Center.BottomLeft||(x=h+.5);var M=C+x;if(M<l){var S=(r.width-2*d)/(M*k),T=P[0][0]*k*S+d*S-d-k*x*S/2+k*S/2,N=P[1][0]*k*S+d*S-d-k*x*S/2+k*S/2;this.transMat=new DOMMatrix,this.transMat.translateSelf(-T,-N),this.transMat.scaleSelf(S,S),null==g||g.setTransform(this.transMat),null==y||y.setTransform(this.transMat),null==b||b.setTransform(this.transMat),null==m||m.setTransform(this.transMat),null==_||_.setTransform(this.transMat),null==w||w.setTransform(this.transMat)}else this.resetTransform()}else this.resetTransform()}},n.prototype.calcBoardVisibleArea=function(t){this.zoomBoard(this.options.zoom)},n.prototype.resetTransform=function(){var t=this,n=t.canvas,e=t.analysisCanvas,r=t.board,o=t.cursorCanvas,i=t.markupCanvas,a=t.effectCanvas,u=null==n?void 0:n.getContext("2d"),s=null==r?void 0:r.getContext("2d"),c=null==o?void 0:o.getContext("2d"),l=null==i?void 0:i.getContext("2d"),f=null==e?void 0:e.getContext("2d"),h=null==a?void 0:a.getContext("2d");this.transMat=new DOMMatrix,null==u||u.resetTransform(),null==s||s.resetTransform(),null==f||f.resetTransform(),null==c||c.resetTransform(),null==l||l.resetTransform(),null==h||h.resetTransform()},n.prototype.render=function(){var t=this.mat;this.mat&&t[0]&&(this.options.boardSize=t[0].length),this.zoomBoard(this.options.zoom),this.zoomBoard(this.options.zoom),this.clearAllCanvas(),this.drawBoard(),this.drawStones(),this.drawMarkup(),this.drawCursor(),this.options.showAnalysis&&this.drawAnalysis()},n.prototype.renderInOneCanvas=function(t){void 0===t&&(t=this.canvas),this.clearAllCanvas(),this.drawBoard(t,!1),this.drawStones(this.mat,t,!1),this.drawMarkup(this.mat,this.markup,t,!1)},n}();return t.A1_LETTERS=O,t.A1_LETTERS_WITH_I=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S"],t.A1_NUMBERS=E,t.AnnotationProp=rt,t.CUSTOM_PROP_LIST=H,t.CustomProp=ut,t.DEFAULT_BOARD_SIZE=19,t.DEFAULT_OPTIONS=I,t.DOT_SIZE=3,t.EXPAND_H=5,t.EXPAND_V=5,t.GAME_INFO_PROP_LIST=Z,t.GameInfoProp=at,t.GhostBan=jn,t.LIGHT_GREEN_RGB=L,t.LIGHT_RED_RGB=F,t.LIGHT_YELLOW_RGB=j,t.LIST_OF_POINTS_PROP=Y,t.MARKUP_PROP_LIST=$,t.MAX_BOARD_SIZE=29,t.MISCELLANEOUS_PROP_LIST=["FG","PM","VW"],t.MOVE_ANNOTATION_PROP_LIST=q,t.MOVE_PROP_LIST=G,t.MarkupProp=ot,t.MiscellaneousProp=ct,t.MoveAnnotationProp=et,t.MoveProp=Q,t.NODE_ANNOTATION_PROP_LIST=K,t.NodeAnnotationProp=nt,t.RESPONSE_TIME=100,t.ROOT_PROP_LIST=V,t.RootProp=it,t.SETUP_PROP_LIST=U,t.SGF_LETTERS=B,t.SetupProp=tt,t.Sgf=mt,t.SgfPropBase=X,t.THEME_RESOURCES=W,t.TIMING_PROP_LIST=["BL","OB","OW","WL"],t.TNode=c,t.TimingProp=st,t.TreeModel=f,t.YELLOW_RGB=z,t.a1ToIndex=function(t,n){return void 0===n&&(n=19),O.indexOf(t[0])*n+E.indexOf(parseInt(t.substr(1),0))},t.a1ToPos=It,t.a1ToSGF=function(t,n,e,r){if(void 0===n&&(n="B"),void 0===e&&(e=0),void 0===r&&(r=0),"pass"===t)return"".concat(n,"[]");var o=O.indexOf(t[0])+e,i=E.indexOf(parseInt(t.substr(1),0))+r;return"".concat(n,"[").concat(B[o]).concat(B[i],"]")},t.addMoveToCurrentNode=function(n,e,r,o,i){if(i!==t.Ki.Empty){var a;if(yt(e,r,o,i)){var u=B[r]+B[o],s=i===t.Ki.Black?"B":"W",c=g(n,[Q.from("".concat(s,"[").concat(u,"]"))]),l=n.children.filter((function(t){return t.model.id===c}));l.length>0?a=l[0]:(a=Kt("".concat(s,"[").concat(u,"]"),n),n.addChild(a))}return a}},t.addStoneToCurrentNode=function(n,e,r,o,i){var s=B[r]+B[o],c=i===t.Ki.White?"AW":"AB",l=en(n,c),f=!1;return e[r][o]!==t.Ki.Empty?tn(n,s):(l?l.values=u(u([],a(l.values),!1),[s],!1):n.model.setupProps=u(u([],a(n.model.setupProps),!1),[new tt(c,s)],!1),f=!0),f},t.buildMoveNode=Kt,t.buildNodeRanges=y,t.calcAnalysisPointColor=Gt,t.calcAvoidMovesForPartialAnalysis=function(t,n){var e,r,o,u;void 0===n&&(n=19);var s=[],c=a(t,2),l=a(c[0],2),f=l[0],h=l[1],d=a(c[1],2),p=d[0],v=d[1];try{for(var g=i(O.slice(0,n)),y=g.next();!y.done;y=g.next()){var m=y.value;try{for(var _=(o=void 0,i(E.slice(-n))),b=_.next();!b.done;b=_.next()){var w=b.value,P=O.indexOf(m),C=E.indexOf(w);(P<f||P>p||C<h||C>v)&&s.push("".concat(m).concat(w))}}catch(t){o={error:t}}finally{try{b&&!b.done&&(u=_.return)&&u.call(_)}finally{if(o)throw o.error}}}}catch(t){e={error:t}}finally{try{y&&!y.done&&(r=g.return)&&r.call(g)}finally{if(e)throw e.error}}return s},t.calcBoardSize=Ht,t.calcCenter=Zt,t.calcDoubtfulMovesThresholdRange=function(t){return t>=25?{evil:{winrateRange:[-1,-.15],scoreRange:[-100,-3]},bad:{winrateRange:[-.15,-.1],scoreRange:[-3,-2]},poor:{winrateRange:[-.1,-.05],scoreRange:[-2,-1]},ok:{winrateRange:[-.05,-.02],scoreRange:[-1,-.5]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=23&&t<25?{evil:{winrateRange:[-1,-.2],scoreRange:[-100,-8]},bad:{winrateRange:[-.2,-.15],scoreRange:[-8,-4]},poor:{winrateRange:[-.15,-.05],scoreRange:[-4,-2]},ok:{winrateRange:[-.05,-.02],scoreRange:[-2,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=20&&t<23?{evil:{winrateRange:[-1,-.25],scoreRange:[-100,-12]},bad:{winrateRange:[-.25,-.1],scoreRange:[-12,-5]},poor:{winrateRange:[-.1,-.05],scoreRange:[-5,-2]},ok:{winrateRange:[-.05,-.02],scoreRange:[-2,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=18&&t<20?{evil:{winrateRange:[-1,-.3],scoreRange:[-100,-15]},bad:{winrateRange:[-.3,-.1],scoreRange:[-15,-7]},poor:{winrateRange:[-.1,-.05],scoreRange:[-7,-5]},ok:{winrateRange:[-.05,-.02],scoreRange:[-5,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=13&&t<18?{evil:{winrateRange:[-1,-.35],scoreRange:[-100,-20]},bad:{winrateRange:[-.35,-.12],scoreRange:[-20,-10]},poor:{winrateRange:[-.12,-.08],scoreRange:[-10,-5]},ok:{winrateRange:[-.08,-.02],scoreRange:[-5,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=8&&t<13?{evil:{winrateRange:[-1,-.4],scoreRange:[-100,-25]},bad:{winrateRange:[-.4,-.15],scoreRange:[-25,-10]},poor:{winrateRange:[-.15,-.1],scoreRange:[-10,-5]},ok:{winrateRange:[-.1,-.02],scoreRange:[-5,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:t>=0&&t<8?{evil:{winrateRange:[-1,-.45],scoreRange:[-100,-35]},bad:{winrateRange:[-.45,-.2],scoreRange:[-35,-20]},poor:{winrateRange:[-.2,-.1],scoreRange:[-20,-10]},ok:{winrateRange:[-.1,-.02],scoreRange:[-10,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}:{evil:{winrateRange:[-1,-.3],scoreRange:[-100,-30]},bad:{winrateRange:[-.3,-.2],scoreRange:[-30,-20]},poor:{winrateRange:[-.2,-.1],scoreRange:[-20,-10]},ok:{winrateRange:[-.1,-.02],scoreRange:[-10,-1]},good:{winrateRange:[-.02,0],scoreRange:[0,100]},great:{winrateRange:[0,1],scoreRange:[0,100]}}},t.calcHash=g,t.calcMatAndMarkup=nn,t.calcMost=Vt,t.calcOffset=function(n){var e=Ht(n),r=19-e[0],o=19-e[1],i=r,a=o;switch(Zt(n)){case t.Center.TopLeft:i=0,a=o;break;case t.Center.TopRight:i=-r,a=o;break;case t.Center.BottomLeft:i=0,a=0;break;case t.Center.BottomRight:i=-r,a=0}return{x:i,y:a}},t.calcPartialArea=Yt,t.calcPreventMoveMat=function(t,n){if(void 0===n&&(n=19),!t)return qt([n,n]);var e=rn(t,n),r=qt([e,e]),o=[];return t.hasChildren()&&(o=t.children.filter((function(t){return Ct(t)}))),Pt(t)&&(r.forEach((function(t){return t.fill(1)})),t.hasChildren()&&t.children.forEach((function(t){t.model.moveProps.forEach((function(t){var n=B.indexOf(t.value[0]),o=B.indexOf(t.value[1]);n>=0&&o>=0&&n<e&&o<e&&(r[n][o]=0)}))}))),o.forEach((function(t){t.model.moveProps.forEach((function(t){var n=B.indexOf(t.value[0]),o=B.indexOf(t.value[1]);n>=0&&o>=0&&n<e&&o<e&&(r[n][o]=1)}))})),r},t.calcPreventMoveMatForDisplayOnly=function(t,n){if(void 0===n&&(n=19),!t)return qt([n,n]);var e=rn(t,n),r=qt([e,e]);return r.forEach((function(t){return t.fill(1)})),t.hasChildren()&&t.children.forEach((function(t){t.model.moveProps.forEach((function(t){var n=B.indexOf(t.value[0]),o=B.indexOf(t.value[1]);n>=0&&o>=0&&n<e&&o<e&&(r[n][o]=0)}))})),r},t.calcScoreDiff=zt,t.calcScoreDiffText=jt,t.calcTsumegoFrame=function(n,e,r,o,i,u){void 0===r&&(r=19),void 0===o&&(o=7.5),void 0===i&&(i=t.Ki.Black);var s=p.cloneDeep(n),c=Yt(n,e,r),l=Zt(n);return function(n){for(var e=a(c[0],2),o=e[0],u=e[1],s=a(c[1],2),f=s[0],h=s[1],d=o;d<=f;d++)for(var p=u;p<=h;p++)(l===t.Center.TopLeft&&(d===f&&d<r-1||p===h&&p<r-1||d===o&&d>0||p===u&&p>0)||l===t.Center.TopRight&&(d===o&&d>0||p===h&&p<r-1||d===f&&d<r-1||p===u&&p>0)||l===t.Center.BottomLeft&&(d===f&&d<r-1||p===u&&p>0||d===o&&d>0||p===h&&p<r-1)||l===t.Center.BottomRight&&(d===o&&d>0||p===u&&p>0||d===f&&d<r-1||p===h&&p<r-1)||l===t.Center.Center)&&(n[d][p]=i)}(s),function(n){for(var e=i*o,u=a(c[0],2),s=u[0],f=u[1],h=a(c[1],2),d=h[0],p=h[1],v=i===t.Ki.Black,g=d-s,y=p-f,m=Math.floor((361-g*y)/2)-e-10,_=0,b=0;b<r;b++)for(var w=0;w<r;w++)if(b<s||b>d||w<f||w>p){_++;var P=t.Ki.Empty;l===t.Center.TopLeft||l===t.Center.BottomLeft?P=v!==_<=m?t.Ki.White:t.Ki.Black:l!==t.Center.TopRight&&l!==t.Center.BottomRight||(P=v!==_<=m?t.Ki.Black:t.Ki.White),(b+w)%2==0&&Math.abs(_-m)>r&&(P=t.Ki.Empty),n[b][w]=P}}(s),s},t.calcVariationsMarkup=function(n,e,r,o){void 0===e&&(e="append"),void 0===r&&(r=0),void 0===o&&(o=19);var i=nn(n),a=i.mat,u=i.markup,s=rn(n,o);return n.hasChildren()&&n.children.forEach((function(n){n.model.moveProps.forEach((function(o){var i=B.indexOf(o.value[0]),c=B.indexOf(o.value[1]);if(!(i<0||c<0)&&i<s&&c<s){var l=t.Markup.NeutralNode;if(Ot(n)&&(l=n.getIndex()===r?t.Markup.NegativeActiveNode:t.Markup.NegativeNode),Tt(n)&&(l=n.getIndex()===r?t.Markup.PositiveActiveNode:t.Markup.PositiveNode),a[i][c]===t.Ki.Empty)switch(e){case"prepend":u[i][c]=l+"|"+u[i][c];break;case"replace":u[i][c]=l;break;default:u[i][c]+="|"+l}}}))})),u},t.calcVisibleArea=Xt,t.calcWinrateDiff=Ft,t.calcWinrateDiffText=function(t,n,e,r){if(void 0===e&&(e=1),void 0===r&&(r=!1),!t||!n)return"";var o=Ft(t,n);r&&(o=-o);var i=o.toFixed(e);return o>=0?"+".concat(i,"%"):"".concat(i,"%")},t.canMove=yt,t.clearStoneFromCurrentNode=tn,t.convertStepsForAI=function(t,n){void 0===n&&(n=0);var e=p.clone(t);e=e.map((function(t){return Wt(t,n)}));var r="(;FF[4]GM[1]SZ[".concat(19-n,"]GN[226]PB[Black]HA[0]PW[White]KM[7.5]DT[2017-08-01]TM[1800]RU[Chinese]CP[Copyright ghost-go.com]AP[ghost-go.com]PL[Black];"),o=0,i="";return t.forEach((function(t,n){t[0]===i[0]&&("B"===t[0]?(e.splice(n+o,0,"W[tt]"),o+=1):(e.splice(n+o,0,"B[tt]"),o+=1)),i=t})),"".concat(r).concat(e.join(";"),")")},t.convertStoneTypeToString=function(t){return 1===t?"B":"W"},t.cutMoveNodes=function(t,n){for(var e=p.cloneDeep(t);e&&e.hasChildren()&&0===e.model.moveProps.length;)(e=e.children[0]).children=[];if(n)for(;e&&e.parent&&!e.isRoot();)e=e.parent;return e},t.detectST=function(t){var n=t.getPath()[0].model.rootProps.find((function(t){return"ST"===t.token})),e=!1,r=!1,o=!1,i=(null==n?void 0:n.value)||"0";return i&&("0"===i?(o=!1,r=!0,e=!0):"1"===i?(o=!0,r=!1,e=!0):"2"===i?(o=!1,r=!0,e=!1):"3"===i&&(o=!0,r=!1,e=!1)),{showVariationsMarkup:e,showChildrenMarkup:r,showSiblingsMarkup:o}},t.empty=$t,t.execCapture=vt,t.extractAnswerType=function(t){var n=t.model.customProps.find((function(t){return"PAT"===t.token}));return null==n?void 0:n.value},t.extractBoardSize=rn,t.extractPAI=function(t){var n=t.model.customProps.find((function(t){return"PAI"===t.token}));if(n)return JSON.parse(n.value)},t.extractPI=function(t){var n=t.model.customProps.find((function(t){return"PI"===t.token}));if(n)return JSON.parse(n.value)},t.findProp=en,t.findProps=function(t,n){return G.includes(n)?t.model.moveProps.filter((function(t){return t.token===n})):K.includes(n)?t.model.nodeAnnotationProps.filter((function(t){return t.token===n})):q.includes(n)?t.model.moveAnnotationProps.filter((function(t){return t.token===n})):V.includes(n)?t.model.rootProps.filter((function(t){return t.token===n})):U.includes(n)?t.model.setupProps.filter((function(t){return t.token===n})):$.includes(n)?t.model.markupProps.filter((function(t){return t.token===n})):Z.includes(n)?t.model.gameInfoProps.filter((function(t){return t.token===n})):[]},t.genMove=function(t,n,e,r,o){var i,a=function(t){var n=p.compact(t.getPath().map((function(t){var n;return null===(n=t.model.moveProps[0])||void 0===n?void 0:n.toString()}))).join(";");return n},u=function(t){if(!t.hasChildren()){var o=a(t);kt(t)?n&&n(o):xt(t)?r&&r(o):e&&e(o)}};if(t.hasChildren()){var s=t.children.filter((function(t){return Tt(t)})),c=t.children.filter((function(t){return Ot(t)})),l=t.children.filter((function(t){return Dt(t)}));i=t,Tt(t)&&s.length>0?i=p.sample(s):Ot(t)&&c.length>0?i=p.sample(c):Dt(t)&&l.length>0?i=p.sample(l):kt(t)?n(a(i)):e(a(i)),i&&u(i)}else u(t);return i},t.getDeduplicatedProps=S,t.getFirstToMoveColorFromRoot=on,t.getFirstToMoveColorFromSgf=function(n,e){void 0===e&&(e=t.Ki.Black);var r=new mt(n);return r.root&&on(r.root,e),e},t.getIndexFromAnalysis=function(t){return/indexes/.test(t.id)?JSON.parse(t.id).indexes[0]:""},t.getLastIndex=function(t){var n=t;return t.walk((function(t){return n=t,!0})),n.model.index},t.getMoveColor=an,t.getNodeNumber=R,t.getRoot=function(t){for(var n=t;n&&n.parent&&!n.isRoot();)n=n.parent;return n},t.handleMove=function(n,e,r,o,i,a){if(o!==t.Ki.Empty)if(yt(n,e,r,o)){var u=B[e]+B[r],s=o===t.Ki.Black?"B":"W",c=g(i,[Q.from("".concat(s,"[").concat(u,"]"))]),l=i.children.filter((function(t){return t.model.id===c})),f=void 0;l.length>0?f=l[0]:(f=Kt("".concat(s,"[").concat(u,"]"),i),i.addChild(f)),a&&a(f,!0)}else a&&a(i,!1)},t.inChoicePath=Nt,t.inFirstBranchRightPath=function(n,e,r,o){if(void 0===e&&(e=t.PathDetectionStrategy.Pre),!Tt(n))return!1;var i=null!=r?r:n.getPath(),a=null!=o?o:n.all((function(){return!0})),u=[];switch(e){case t.PathDetectionStrategy.Post:u=a.filter((function(t){return t.getIndex()>0}));break;case t.PathDetectionStrategy.Pre:u=i.filter((function(t){return t.getIndex()>0}));break;case t.PathDetectionStrategy.Both:u=i.concat(a).filter((function(t){return t.getIndex()>0}))}return 0===u.length},t.inFirstRightPath=function(n,e,r,o){return void 0===e&&(e=t.PathDetectionStrategy.Post),St(n,At,e,r,o)},t.inPath=St,t.inRightPath=Tt,t.inTargetPath=Rt,t.inVariantPath=Dt,t.inWrongPath=Ot,t.initNodeData=Ut,t.initialRootNode=function(t){void 0===t&&(t=["FF[4]","GM[1]","CA[UTF-8]","AP[ghostgo:0.1.0]","SZ[19]","ST[0]"]);var n=(new f).parse({id:"",name:"",index:0,number:0,rootProps:t.map((function(t){return it.from(t)})),moveProps:[],setupProps:[],markupProps:[],gameInfoProps:[],nodeAnnotationProps:[],moveAnnotationProps:[],customProps:[]}),e=g(n);return n.model.id=e,n},t.isAnswerNode=function(t,n){var e,r=null===(e=t.model.customProps)||void 0===e?void 0:e.find((function(t){return"PAT"===t.token}));return(null==r?void 0:r.value)===n},t.isCharacterInNode=function(t,n,e){void 0===e&&(e=["C","TM","GN","PC"]);for(var r,o=new RegExp("(".concat(e.join("|"),")\\[([^\\]]*)\\]"),"g");null!==(r=o.exec(t));){var i=r.index+r[1].length+1,a=i+r[2].length;if(n>=i&&n<=a)return!0}return!1},t.isChoiceNode=bt,t.isFirstRightNode=At,t.isForceNode=Pt,t.isInAnyRange=m,t.isMainPath=function(t){return 0===p.sum(t.getPath().map((function(t){return t.getIndex()})))},t.isMoveNode=T,t.isPreventMoveNode=Ct,t.isRightNode=kt,t.isRootNode=function(t){return t.model.rootProps.length>0||t.isRoot()},t.isSetupNode=N,t.isTargetNode=wt,t.isVariantNode=xt,t.isWrongNode=Mt,t.matToListOfTuples=function(t,n,e){void 0===n&&(n=0),void 0===e&&(e=0);for(var r=[],o=0;o<t.length;o++)for(var i=0;i<t[o].length;i++){var a=t[o][i];if(0!==a){var u=O[o+n],s=E[i+e],c=1===a?"B":"W";r.push([c,u+s])}}return r},t.matToPosition=function(t,n,e){var r="";n=null!=n?n:0,e=null!=e?e:19-t.length;for(var o=0;o<t.length;o++)for(var i=0;i<t[o].length;i++){var a=t[o][i];if(0!==a){var u=O[o+n],s=E[i+e];r+="".concat(1===a?"b":"w"," ").concat(u).concat(s," ")}}return r},t.move=Qt,t.nFormatter=Et,t.offsetA1Move=Lt,t.pathToAiMoves=function(t,n,e){return void 0===n&&(n=0),void 0===e&&(e=0),t.filter((function(t){return t.model.moveProps.length>0})).map((function(t){var r=t.model.moveProps[0],o=O[B.indexOf(r.value[0])+n],i=E[B.indexOf(r.value[1])+e];return[r.token,o+i]}))},t.pathToIndexes=function(t){return t.map((function(t){return t.model.id}))},t.pathToInitialStones=function(t,n,e){void 0===n&&(n=0),void 0===e&&(e=0);var r=t.filter((function(t){return t.model.setupProps.length>0})).map((function(t){return t.model.setupProps.map((function(t){return t.values.map((function(r){var o=O[B.indexOf(r[0])+n],i=E[B.indexOf(r[1])+e];return["AB"===t.token?"B":"W",o+i]}))}))}));return p.flattenDepth(r[0],1)},t.posToSgf=function(t,n,e){var r=B[t],o=B[n];return 0===e?"":1===e?"B[".concat(r).concat(o,"]"):-1===e?"W[".concat(r).concat(o,"]"):""},t.reverseOffset=Jt,t.reverseOffsetA1Move=function(t,n,e,r){if(void 0===r&&(r=19),"pass"===t)return t;var o=JSON.parse(e.id),i=Jt(n,o.bx,o.by,r),a=i.x,u=i.y,s=O.indexOf(t[0])+a,c=E.indexOf(parseInt(t.substr(1),0))+u;return"".concat(O[s]).concat(E[c])},t.round2=function(t,n,e){return void 0===n&&(n=1),void 0===e&&(e=2),(Math.round(100*t)/100*n).toFixed(e)},t.round3=_t,t.sgfOffset=Wt,t.sgfToA1=function(t){var n=Bt(t),e=n.x,r=n.y;return O[e]+E[r]},t.sgfToPos=Bt,t.showKi=function(t,n,e){void 0===e&&(e=!0);var r=p.cloneDeep(t),o=!1;return n.forEach((function(t){var n=Bt(t),i=n.x,a=n.y,u=n.ki;e?yt(r,i,a,u)&&(r[i][a]=u,r=vt(r,i,a,-u),o=!0):(r[i][a]=u,o=!0)})),{arrangement:r,hasMoved:o}},t.zeros=qt,t}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
